
sd_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e094  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000680  0800e1a4  0800e1a4  0001e1a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e824  0800e824  00020204  2**0
                  CONTENTS
  4 .ARM          00000000  0800e824  0800e824  00020204  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800e824  0800e824  00020204  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e824  0800e824  0001e824  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e828  0800e828  0001e828  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000204  20000000  0800e82c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002e48  20000204  0800ea30  00020204  2**2
                  ALLOC
 10 ._user_heap_stack 00001d84  2000304c  0800ea30  0002304c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 12 .debug_info   00020234  00000000  00000000  0002022d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000046f6  00000000  00000000  00040461  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001d70  00000000  00000000  00044b58  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001bd8  00000000  00000000  000468c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   0001693c  00000000  00000000  000484a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    0009846d  00000000  00000000  0005eddc  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007b  00000000  00000000  000f7249  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00008680  00000000  00000000  000f72c4  2**2
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_macro  0001ad94  00000000  00000000  000ff944  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000204 	.word	0x20000204
 800012c:	00000000 	.word	0x00000000
 8000130:	0800e18c 	.word	0x0800e18c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000208 	.word	0x20000208
 800014c:	0800e18c 	.word	0x0800e18c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <cJSON_strdup>:
#define static_strlen(string_literal) (sizeof(string_literal) - sizeof(""))

static internal_hooks global_hooks = { internal_malloc, internal_free, internal_realloc };

static unsigned char* cJSON_strdup(const unsigned char* string, const internal_hooks * const hooks)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b084      	sub	sp, #16
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
 8000a40:	6039      	str	r1, [r7, #0]
    size_t length = 0;
 8000a42:	2300      	movs	r3, #0
 8000a44:	60fb      	str	r3, [r7, #12]
    unsigned char *copy = NULL;
 8000a46:	2300      	movs	r3, #0
 8000a48:	60bb      	str	r3, [r7, #8]

    if (string == NULL)
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d101      	bne.n	8000a54 <cJSON_strdup+0x1c>
    {
        return NULL;
 8000a50:	2300      	movs	r3, #0
 8000a52:	e015      	b.n	8000a80 <cJSON_strdup+0x48>
    }

    length = strlen((const char*)string) + sizeof("");
 8000a54:	6878      	ldr	r0, [r7, #4]
 8000a56:	f7ff fb7b 	bl	8000150 <strlen>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	3301      	adds	r3, #1
 8000a5e:	60fb      	str	r3, [r7, #12]
    copy = (unsigned char*)hooks->allocate(length);
 8000a60:	683b      	ldr	r3, [r7, #0]
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	68f8      	ldr	r0, [r7, #12]
 8000a66:	4798      	blx	r3
 8000a68:	60b8      	str	r0, [r7, #8]
    if (copy == NULL)
 8000a6a:	68bb      	ldr	r3, [r7, #8]
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d101      	bne.n	8000a74 <cJSON_strdup+0x3c>
    {
        return NULL;
 8000a70:	2300      	movs	r3, #0
 8000a72:	e005      	b.n	8000a80 <cJSON_strdup+0x48>
    }
    memcpy(copy, string, length);
 8000a74:	68fa      	ldr	r2, [r7, #12]
 8000a76:	6879      	ldr	r1, [r7, #4]
 8000a78:	68b8      	ldr	r0, [r7, #8]
 8000a7a:	f00c fa9d 	bl	800cfb8 <memcpy>

    return copy;
 8000a7e:	68bb      	ldr	r3, [r7, #8]
}
 8000a80:	4618      	mov	r0, r3
 8000a82:	3710      	adds	r7, #16
 8000a84:	46bd      	mov	sp, r7
 8000a86:	bd80      	pop	{r7, pc}

08000a88 <cJSON_New_Item>:
    }
}

/* Internal constructor. */
static cJSON *cJSON_New_Item(const internal_hooks * const hooks)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b084      	sub	sp, #16
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
    cJSON* node = (cJSON*)hooks->allocate(sizeof(cJSON));
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	2028      	movs	r0, #40	; 0x28
 8000a96:	4798      	blx	r3
 8000a98:	60f8      	str	r0, [r7, #12]
    if (node)
 8000a9a:	68fb      	ldr	r3, [r7, #12]
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d004      	beq.n	8000aaa <cJSON_New_Item+0x22>
    {
        memset(node, '\0', sizeof(cJSON));
 8000aa0:	2228      	movs	r2, #40	; 0x28
 8000aa2:	2100      	movs	r1, #0
 8000aa4:	68f8      	ldr	r0, [r7, #12]
 8000aa6:	f00c fa92 	bl	800cfce <memset>
    }

    return node;
 8000aaa:	68fb      	ldr	r3, [r7, #12]
}
 8000aac:	4618      	mov	r0, r3
 8000aae:	3710      	adds	r7, #16
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bd80      	pop	{r7, pc}

08000ab4 <cJSON_Delete>:

/* Delete a cJSON structure. */
CJSON_PUBLIC(void) cJSON_Delete(cJSON *item)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b084      	sub	sp, #16
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
    cJSON *next = NULL;
 8000abc:	2300      	movs	r3, #0
 8000abe:	60fb      	str	r3, [r7, #12]
    while (item != NULL)
 8000ac0:	e037      	b.n	8000b32 <cJSON_Delete+0x7e>
    {
        next = item->next;
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	60fb      	str	r3, [r7, #12]
        if (!(item->type & cJSON_IsReference) && (item->child != NULL))
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	68db      	ldr	r3, [r3, #12]
 8000acc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d108      	bne.n	8000ae6 <cJSON_Delete+0x32>
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	689b      	ldr	r3, [r3, #8]
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d004      	beq.n	8000ae6 <cJSON_Delete+0x32>
        {
            cJSON_Delete(item->child);
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	689b      	ldr	r3, [r3, #8]
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	f7ff ffe7 	bl	8000ab4 <cJSON_Delete>
        }
        if (!(item->type & cJSON_IsReference) && (item->valuestring != NULL))
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	68db      	ldr	r3, [r3, #12]
 8000aea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d109      	bne.n	8000b06 <cJSON_Delete+0x52>
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	691b      	ldr	r3, [r3, #16]
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d005      	beq.n	8000b06 <cJSON_Delete+0x52>
        {
            global_hooks.deallocate(item->valuestring);
 8000afa:	4b11      	ldr	r3, [pc, #68]	; (8000b40 <cJSON_Delete+0x8c>)
 8000afc:	685b      	ldr	r3, [r3, #4]
 8000afe:	687a      	ldr	r2, [r7, #4]
 8000b00:	6912      	ldr	r2, [r2, #16]
 8000b02:	4610      	mov	r0, r2
 8000b04:	4798      	blx	r3
        }
        if (!(item->type & cJSON_StringIsConst) && (item->string != NULL))
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	68db      	ldr	r3, [r3, #12]
 8000b0a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d109      	bne.n	8000b26 <cJSON_Delete+0x72>
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	6a1b      	ldr	r3, [r3, #32]
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d005      	beq.n	8000b26 <cJSON_Delete+0x72>
        {
            global_hooks.deallocate(item->string);
 8000b1a:	4b09      	ldr	r3, [pc, #36]	; (8000b40 <cJSON_Delete+0x8c>)
 8000b1c:	685b      	ldr	r3, [r3, #4]
 8000b1e:	687a      	ldr	r2, [r7, #4]
 8000b20:	6a12      	ldr	r2, [r2, #32]
 8000b22:	4610      	mov	r0, r2
 8000b24:	4798      	blx	r3
        }
        global_hooks.deallocate(item);
 8000b26:	4b06      	ldr	r3, [pc, #24]	; (8000b40 <cJSON_Delete+0x8c>)
 8000b28:	685b      	ldr	r3, [r3, #4]
 8000b2a:	6878      	ldr	r0, [r7, #4]
 8000b2c:	4798      	blx	r3
        item = next;
 8000b2e:	68fb      	ldr	r3, [r7, #12]
 8000b30:	607b      	str	r3, [r7, #4]
    while (item != NULL)
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d1c4      	bne.n	8000ac2 <cJSON_Delete+0xe>
    }
}
 8000b38:	bf00      	nop
 8000b3a:	3710      	adds	r7, #16
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bd80      	pop	{r7, pc}
 8000b40:	20000000 	.word	0x20000000

08000b44 <get_decimal_point>:

/* get the decimal point character of the current locale */
static unsigned char get_decimal_point(void)
{
 8000b44:	b480      	push	{r7}
 8000b46:	af00      	add	r7, sp, #0
#ifdef ENABLE_LOCALES
    struct lconv *lconv = localeconv();
    return (unsigned char) lconv->decimal_point[0];
#else
    return '.';
 8000b48:	232e      	movs	r3, #46	; 0x2e
#endif
}
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	bc80      	pop	{r7}
 8000b50:	4770      	bx	lr

08000b52 <ensure>:
    internal_hooks hooks;
} printbuffer;

/* realloc printbuffer if necessary to have at least "needed" bytes more */
static unsigned char* ensure(printbuffer * const p, size_t needed)
{
 8000b52:	b580      	push	{r7, lr}
 8000b54:	b084      	sub	sp, #16
 8000b56:	af00      	add	r7, sp, #0
 8000b58:	6078      	str	r0, [r7, #4]
 8000b5a:	6039      	str	r1, [r7, #0]
    unsigned char *newbuffer = NULL;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	60fb      	str	r3, [r7, #12]
    size_t newsize = 0;
 8000b60:	2300      	movs	r3, #0
 8000b62:	60bb      	str	r3, [r7, #8]

    if ((p == NULL) || (p->buffer == NULL))
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d003      	beq.n	8000b72 <ensure+0x20>
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d101      	bne.n	8000b76 <ensure+0x24>
    {
        return NULL;
 8000b72:	2300      	movs	r3, #0
 8000b74:	e083      	b.n	8000c7e <ensure+0x12c>
    }

    if ((p->length > 0) && (p->offset >= p->length))
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	685b      	ldr	r3, [r3, #4]
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d007      	beq.n	8000b8e <ensure+0x3c>
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	689a      	ldr	r2, [r3, #8]
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	685b      	ldr	r3, [r3, #4]
 8000b86:	429a      	cmp	r2, r3
 8000b88:	d301      	bcc.n	8000b8e <ensure+0x3c>
    {
        /* make sure that offset is valid */
        return NULL;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	e077      	b.n	8000c7e <ensure+0x12c>
    }

    if (needed > INT_MAX)
 8000b8e:	683b      	ldr	r3, [r7, #0]
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	da01      	bge.n	8000b98 <ensure+0x46>
    {
        /* sizes bigger than INT_MAX are currently not supported */
        return NULL;
 8000b94:	2300      	movs	r3, #0
 8000b96:	e072      	b.n	8000c7e <ensure+0x12c>
    }

    needed += p->offset + 1;
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	689a      	ldr	r2, [r3, #8]
 8000b9c:	683b      	ldr	r3, [r7, #0]
 8000b9e:	4413      	add	r3, r2
 8000ba0:	3301      	adds	r3, #1
 8000ba2:	603b      	str	r3, [r7, #0]
    if (needed <= p->length)
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	685b      	ldr	r3, [r3, #4]
 8000ba8:	683a      	ldr	r2, [r7, #0]
 8000baa:	429a      	cmp	r2, r3
 8000bac:	d805      	bhi.n	8000bba <ensure+0x68>
    {
        return p->buffer + p->offset;
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	681a      	ldr	r2, [r3, #0]
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	689b      	ldr	r3, [r3, #8]
 8000bb6:	4413      	add	r3, r2
 8000bb8:	e061      	b.n	8000c7e <ensure+0x12c>
    }

    if (p->noalloc) {
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	691b      	ldr	r3, [r3, #16]
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d001      	beq.n	8000bc6 <ensure+0x74>
        return NULL;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	e05b      	b.n	8000c7e <ensure+0x12c>
    }

    /* calculate new buffer size */
    if (needed > (INT_MAX / 2))
 8000bc6:	683b      	ldr	r3, [r7, #0]
 8000bc8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000bcc:	d308      	bcc.n	8000be0 <ensure+0x8e>
    {
        /* overflow of int, use INT_MAX if possible */
        if (needed <= INT_MAX)
 8000bce:	683b      	ldr	r3, [r7, #0]
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	db03      	blt.n	8000bdc <ensure+0x8a>
        {
            newsize = INT_MAX;
 8000bd4:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8000bd8:	60bb      	str	r3, [r7, #8]
 8000bda:	e004      	b.n	8000be6 <ensure+0x94>
        }
        else
        {
            return NULL;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	e04e      	b.n	8000c7e <ensure+0x12c>
        }
    }
    else
    {
        newsize = needed * 2;
 8000be0:	683b      	ldr	r3, [r7, #0]
 8000be2:	005b      	lsls	r3, r3, #1
 8000be4:	60bb      	str	r3, [r7, #8]
    }

    if (p->hooks.reallocate != NULL)
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	6a1b      	ldr	r3, [r3, #32]
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d018      	beq.n	8000c20 <ensure+0xce>
    {
        /* reallocate with realloc if available */
        newbuffer = (unsigned char*)p->hooks.reallocate(p->buffer, newsize);
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	6a1b      	ldr	r3, [r3, #32]
 8000bf2:	687a      	ldr	r2, [r7, #4]
 8000bf4:	6812      	ldr	r2, [r2, #0]
 8000bf6:	68b9      	ldr	r1, [r7, #8]
 8000bf8:	4610      	mov	r0, r2
 8000bfa:	4798      	blx	r3
 8000bfc:	60f8      	str	r0, [r7, #12]
        if (newbuffer == NULL)
 8000bfe:	68fb      	ldr	r3, [r7, #12]
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d132      	bne.n	8000c6a <ensure+0x118>
        {
            p->hooks.deallocate(p->buffer);
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	69db      	ldr	r3, [r3, #28]
 8000c08:	687a      	ldr	r2, [r7, #4]
 8000c0a:	6812      	ldr	r2, [r2, #0]
 8000c0c:	4610      	mov	r0, r2
 8000c0e:	4798      	blx	r3
            p->length = 0;
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	2200      	movs	r2, #0
 8000c14:	605a      	str	r2, [r3, #4]
            p->buffer = NULL;
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	2200      	movs	r2, #0
 8000c1a:	601a      	str	r2, [r3, #0]

            return NULL;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	e02e      	b.n	8000c7e <ensure+0x12c>
        }
    }
    else
    {
        /* otherwise reallocate manually */
        newbuffer = (unsigned char*)p->hooks.allocate(newsize);
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	699b      	ldr	r3, [r3, #24]
 8000c24:	68b8      	ldr	r0, [r7, #8]
 8000c26:	4798      	blx	r3
 8000c28:	60f8      	str	r0, [r7, #12]
        if (!newbuffer)
 8000c2a:	68fb      	ldr	r3, [r7, #12]
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d10d      	bne.n	8000c4c <ensure+0xfa>
        {
            p->hooks.deallocate(p->buffer);
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	69db      	ldr	r3, [r3, #28]
 8000c34:	687a      	ldr	r2, [r7, #4]
 8000c36:	6812      	ldr	r2, [r2, #0]
 8000c38:	4610      	mov	r0, r2
 8000c3a:	4798      	blx	r3
            p->length = 0;
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	2200      	movs	r2, #0
 8000c40:	605a      	str	r2, [r3, #4]
            p->buffer = NULL;
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	2200      	movs	r2, #0
 8000c46:	601a      	str	r2, [r3, #0]

            return NULL;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	e018      	b.n	8000c7e <ensure+0x12c>
        }

        memcpy(newbuffer, p->buffer, p->offset + 1);
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	6819      	ldr	r1, [r3, #0]
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	689b      	ldr	r3, [r3, #8]
 8000c54:	3301      	adds	r3, #1
 8000c56:	461a      	mov	r2, r3
 8000c58:	68f8      	ldr	r0, [r7, #12]
 8000c5a:	f00c f9ad 	bl	800cfb8 <memcpy>
        p->hooks.deallocate(p->buffer);
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	69db      	ldr	r3, [r3, #28]
 8000c62:	687a      	ldr	r2, [r7, #4]
 8000c64:	6812      	ldr	r2, [r2, #0]
 8000c66:	4610      	mov	r0, r2
 8000c68:	4798      	blx	r3
    }
    p->length = newsize;
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	68ba      	ldr	r2, [r7, #8]
 8000c6e:	605a      	str	r2, [r3, #4]
    p->buffer = newbuffer;
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	68fa      	ldr	r2, [r7, #12]
 8000c74:	601a      	str	r2, [r3, #0]

    return newbuffer + p->offset;
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	689b      	ldr	r3, [r3, #8]
 8000c7a:	68fa      	ldr	r2, [r7, #12]
 8000c7c:	4413      	add	r3, r2
}
 8000c7e:	4618      	mov	r0, r3
 8000c80:	3710      	adds	r7, #16
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}

08000c86 <update_offset>:

/* calculate the new length of the string in a printbuffer and update the offset */
static void update_offset(printbuffer * const buffer)
{
 8000c86:	b590      	push	{r4, r7, lr}
 8000c88:	b085      	sub	sp, #20
 8000c8a:	af00      	add	r7, sp, #0
 8000c8c:	6078      	str	r0, [r7, #4]
    const unsigned char *buffer_pointer = NULL;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	60fb      	str	r3, [r7, #12]
    if ((buffer == NULL) || (buffer->buffer == NULL))
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d013      	beq.n	8000cc0 <update_offset+0x3a>
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d00f      	beq.n	8000cc0 <update_offset+0x3a>
    {
        return;
    }
    buffer_pointer = buffer->buffer + buffer->offset;
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	681a      	ldr	r2, [r3, #0]
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	689b      	ldr	r3, [r3, #8]
 8000ca8:	4413      	add	r3, r2
 8000caa:	60fb      	str	r3, [r7, #12]

    buffer->offset += strlen((const char*)buffer_pointer);
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	689c      	ldr	r4, [r3, #8]
 8000cb0:	68f8      	ldr	r0, [r7, #12]
 8000cb2:	f7ff fa4d 	bl	8000150 <strlen>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	18e2      	adds	r2, r4, r3
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	609a      	str	r2, [r3, #8]
 8000cbe:	e000      	b.n	8000cc2 <update_offset+0x3c>
        return;
 8000cc0:	bf00      	nop
}
 8000cc2:	3714      	adds	r7, #20
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bd90      	pop	{r4, r7, pc}

08000cc8 <compare_double>:

/* securely comparison of floating-point variables */
static cJSON_bool compare_double(double a, double b)
{
 8000cc8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000ccc:	b08a      	sub	sp, #40	; 0x28
 8000cce:	af00      	add	r7, sp, #0
 8000cd0:	e9c7 0106 	strd	r0, r1, [r7, #24]
 8000cd4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    double maxVal = fabs(a) > fabs(b) ? fabs(a) : fabs(b);
 8000cd8:	69bb      	ldr	r3, [r7, #24]
 8000cda:	60bb      	str	r3, [r7, #8]
 8000cdc:	69fb      	ldr	r3, [r7, #28]
 8000cde:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8000ce2:	60fb      	str	r3, [r7, #12]
 8000ce4:	693b      	ldr	r3, [r7, #16]
 8000ce6:	603b      	str	r3, [r7, #0]
 8000ce8:	697b      	ldr	r3, [r7, #20]
 8000cea:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8000cee:	607b      	str	r3, [r7, #4]
 8000cf0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000cf4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000cf8:	f7ff fe7e 	bl	80009f8 <__aeabi_dcmpgt>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d004      	beq.n	8000d0c <compare_double+0x44>
 8000d02:	69bc      	ldr	r4, [r7, #24]
 8000d04:	69fb      	ldr	r3, [r7, #28]
 8000d06:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8000d0a:	e003      	b.n	8000d14 <compare_double+0x4c>
 8000d0c:	693c      	ldr	r4, [r7, #16]
 8000d0e:	697b      	ldr	r3, [r7, #20]
 8000d10:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8000d14:	e9c7 4508 	strd	r4, r5, [r7, #32]
    return (fabs(a - b) <= maxVal * DBL_EPSILON);
 8000d18:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8000d1c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8000d20:	f7ff fa22 	bl	8000168 <__aeabi_dsub>
 8000d24:	4603      	mov	r3, r0
 8000d26:	460c      	mov	r4, r1
 8000d28:	4698      	mov	r8, r3
 8000d2a:	f024 4900 	bic.w	r9, r4, #2147483648	; 0x80000000
 8000d2e:	f04f 0200 	mov.w	r2, #0
 8000d32:	4b0e      	ldr	r3, [pc, #56]	; (8000d6c <compare_double+0xa4>)
 8000d34:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8000d38:	f7ff fbce 	bl	80004d8 <__aeabi_dmul>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	460c      	mov	r4, r1
 8000d40:	4619      	mov	r1, r3
 8000d42:	4622      	mov	r2, r4
 8000d44:	2301      	movs	r3, #1
 8000d46:	461c      	mov	r4, r3
 8000d48:	4613      	mov	r3, r2
 8000d4a:	460a      	mov	r2, r1
 8000d4c:	4640      	mov	r0, r8
 8000d4e:	4649      	mov	r1, r9
 8000d50:	f7ff fe3e 	bl	80009d0 <__aeabi_dcmple>
 8000d54:	4603      	mov	r3, r0
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d101      	bne.n	8000d5e <compare_double+0x96>
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	461c      	mov	r4, r3
 8000d5e:	b2e3      	uxtb	r3, r4
}
 8000d60:	4618      	mov	r0, r3
 8000d62:	3728      	adds	r7, #40	; 0x28
 8000d64:	46bd      	mov	sp, r7
 8000d66:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8000d6a:	bf00      	nop
 8000d6c:	3cb00000 	.word	0x3cb00000

08000d70 <print_number>:

/* Render the number nicely from the given item into a string. */
static cJSON_bool print_number(const cJSON * const item, printbuffer * const output_buffer)
{
 8000d70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d72:	b093      	sub	sp, #76	; 0x4c
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
 8000d78:	6039      	str	r1, [r7, #0]
    unsigned char *output_pointer = NULL;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	63fb      	str	r3, [r7, #60]	; 0x3c
    double d = item->valuedouble;
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8000d84:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    int length = 0;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	647b      	str	r3, [r7, #68]	; 0x44
    size_t i = 0;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	643b      	str	r3, [r7, #64]	; 0x40
    unsigned char number_buffer[26] = {0}; /* temporary buffer to print the number into */
 8000d90:	f107 0314 	add.w	r3, r7, #20
 8000d94:	2200      	movs	r2, #0
 8000d96:	601a      	str	r2, [r3, #0]
 8000d98:	605a      	str	r2, [r3, #4]
 8000d9a:	609a      	str	r2, [r3, #8]
 8000d9c:	60da      	str	r2, [r3, #12]
 8000d9e:	611a      	str	r2, [r3, #16]
 8000da0:	615a      	str	r2, [r3, #20]
 8000da2:	831a      	strh	r2, [r3, #24]
    unsigned char decimal_point = get_decimal_point();
 8000da4:	f7ff fece 	bl	8000b44 <get_decimal_point>
 8000da8:	4603      	mov	r3, r0
 8000daa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    double test = 0.0;
 8000dae:	f04f 0200 	mov.w	r2, #0
 8000db2:	f04f 0300 	mov.w	r3, #0
 8000db6:	e9c7 2302 	strd	r2, r3, [r7, #8]

    if (output_buffer == NULL)
 8000dba:	683b      	ldr	r3, [r7, #0]
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d101      	bne.n	8000dc4 <print_number+0x54>
    {
        return false;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	e09b      	b.n	8000efc <print_number+0x18c>
    }

    /* This checks for NaN and Infinity */
    if (isnan(d) || isinf(d))
 8000dc4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8000dc8:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8000dcc:	f7ff fe1e 	bl	8000a0c <__aeabi_dcmpun>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d121      	bne.n	8000e1a <print_number+0xaa>
 8000dd6:	6b3c      	ldr	r4, [r7, #48]	; 0x30
 8000dd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000dda:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8000dde:	2301      	movs	r3, #1
 8000de0:	461e      	mov	r6, r3
 8000de2:	f04f 32ff 	mov.w	r2, #4294967295
 8000de6:	4b47      	ldr	r3, [pc, #284]	; (8000f04 <print_number+0x194>)
 8000de8:	4620      	mov	r0, r4
 8000dea:	4629      	mov	r1, r5
 8000dec:	f7ff fe0e 	bl	8000a0c <__aeabi_dcmpun>
 8000df0:	4603      	mov	r3, r0
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d10b      	bne.n	8000e0e <print_number+0x9e>
 8000df6:	f04f 32ff 	mov.w	r2, #4294967295
 8000dfa:	4b42      	ldr	r3, [pc, #264]	; (8000f04 <print_number+0x194>)
 8000dfc:	4620      	mov	r0, r4
 8000dfe:	4629      	mov	r1, r5
 8000e00:	f7ff fde6 	bl	80009d0 <__aeabi_dcmple>
 8000e04:	4603      	mov	r3, r0
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d101      	bne.n	8000e0e <print_number+0x9e>
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	461e      	mov	r6, r3
 8000e0e:	b2f3      	uxtb	r3, r6
 8000e10:	f083 0301 	eor.w	r3, r3, #1
 8000e14:	b2db      	uxtb	r3, r3
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d00a      	beq.n	8000e30 <print_number+0xc0>
    {
        length = sprintf((char*)number_buffer, "null");
 8000e1a:	f107 0314 	add.w	r3, r7, #20
 8000e1e:	4a3a      	ldr	r2, [pc, #232]	; (8000f08 <print_number+0x198>)
 8000e20:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000e24:	6018      	str	r0, [r3, #0]
 8000e26:	3304      	adds	r3, #4
 8000e28:	7019      	strb	r1, [r3, #0]
 8000e2a:	2304      	movs	r3, #4
 8000e2c:	647b      	str	r3, [r7, #68]	; 0x44
 8000e2e:	e023      	b.n	8000e78 <print_number+0x108>
    }
    else
    {
        /* Try 15 decimal places of precision to avoid nonsignificant nonzero digits */
        length = sprintf((char*)number_buffer, "%1.15g", d);
 8000e30:	f107 0014 	add.w	r0, r7, #20
 8000e34:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8000e38:	4934      	ldr	r1, [pc, #208]	; (8000f0c <print_number+0x19c>)
 8000e3a:	f00c f98f 	bl	800d15c <siprintf>
 8000e3e:	6478      	str	r0, [r7, #68]	; 0x44

        /* Check whether the original double can be recovered */
        if ((sscanf((char*)number_buffer, "%lg", &test) != 1) || !compare_double((double)test, d))
 8000e40:	f107 0208 	add.w	r2, r7, #8
 8000e44:	f107 0314 	add.w	r3, r7, #20
 8000e48:	4931      	ldr	r1, [pc, #196]	; (8000f10 <print_number+0x1a0>)
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	f00c f9a6 	bl	800d19c <siscanf>
 8000e50:	4603      	mov	r3, r0
 8000e52:	2b01      	cmp	r3, #1
 8000e54:	d108      	bne.n	8000e68 <print_number+0xf8>
 8000e56:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000e5a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8000e5e:	f7ff ff33 	bl	8000cc8 <compare_double>
 8000e62:	4603      	mov	r3, r0
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d107      	bne.n	8000e78 <print_number+0x108>
        {
            /* If not, print with 17 decimal places of precision */
            length = sprintf((char*)number_buffer, "%1.17g", d);
 8000e68:	f107 0014 	add.w	r0, r7, #20
 8000e6c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8000e70:	4928      	ldr	r1, [pc, #160]	; (8000f14 <print_number+0x1a4>)
 8000e72:	f00c f973 	bl	800d15c <siprintf>
 8000e76:	6478      	str	r0, [r7, #68]	; 0x44
        }
    }

    /* sprintf failed or buffer overrun occurred */
    if ((length < 0) || (length > (int)(sizeof(number_buffer) - 1)))
 8000e78:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	db02      	blt.n	8000e84 <print_number+0x114>
 8000e7e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000e80:	2b19      	cmp	r3, #25
 8000e82:	dd01      	ble.n	8000e88 <print_number+0x118>
    {
        return false;
 8000e84:	2300      	movs	r3, #0
 8000e86:	e039      	b.n	8000efc <print_number+0x18c>
    }

    /* reserve appropriate space in the output */
    output_pointer = ensure(output_buffer, (size_t)length + sizeof(""));
 8000e88:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000e8a:	3301      	adds	r3, #1
 8000e8c:	4619      	mov	r1, r3
 8000e8e:	6838      	ldr	r0, [r7, #0]
 8000e90:	f7ff fe5f 	bl	8000b52 <ensure>
 8000e94:	63f8      	str	r0, [r7, #60]	; 0x3c
    if (output_pointer == NULL)
 8000e96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d101      	bne.n	8000ea0 <print_number+0x130>
    {
        return false;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	e02d      	b.n	8000efc <print_number+0x18c>
    }

    /* copy the printed number to the output and replace locale
     * dependent decimal point with '.' */
    for (i = 0; i < ((size_t)length); i++)
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	643b      	str	r3, [r7, #64]	; 0x40
 8000ea4:	e01a      	b.n	8000edc <print_number+0x16c>
    {
        if (number_buffer[i] == decimal_point)
 8000ea6:	f107 0214 	add.w	r2, r7, #20
 8000eaa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000eac:	4413      	add	r3, r2
 8000eae:	781b      	ldrb	r3, [r3, #0]
 8000eb0:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8000eb4:	429a      	cmp	r2, r3
 8000eb6:	d105      	bne.n	8000ec4 <print_number+0x154>
        {
            output_pointer[i] = '.';
 8000eb8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000eba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000ebc:	4413      	add	r3, r2
 8000ebe:	222e      	movs	r2, #46	; 0x2e
 8000ec0:	701a      	strb	r2, [r3, #0]
            continue;
 8000ec2:	e008      	b.n	8000ed6 <print_number+0x166>
        }

        output_pointer[i] = number_buffer[i];
 8000ec4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000ec6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000ec8:	4413      	add	r3, r2
 8000eca:	f107 0114 	add.w	r1, r7, #20
 8000ece:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8000ed0:	440a      	add	r2, r1
 8000ed2:	7812      	ldrb	r2, [r2, #0]
 8000ed4:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < ((size_t)length); i++)
 8000ed6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000ed8:	3301      	adds	r3, #1
 8000eda:	643b      	str	r3, [r7, #64]	; 0x40
 8000edc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000ede:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8000ee0:	429a      	cmp	r2, r3
 8000ee2:	d3e0      	bcc.n	8000ea6 <print_number+0x136>
    }
    output_pointer[i] = '\0';
 8000ee4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000ee6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000ee8:	4413      	add	r3, r2
 8000eea:	2200      	movs	r2, #0
 8000eec:	701a      	strb	r2, [r3, #0]

    output_buffer->offset += (size_t)length;
 8000eee:	683b      	ldr	r3, [r7, #0]
 8000ef0:	689a      	ldr	r2, [r3, #8]
 8000ef2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000ef4:	441a      	add	r2, r3
 8000ef6:	683b      	ldr	r3, [r7, #0]
 8000ef8:	609a      	str	r2, [r3, #8]

    return true;
 8000efa:	2301      	movs	r3, #1
}
 8000efc:	4618      	mov	r0, r3
 8000efe:	374c      	adds	r7, #76	; 0x4c
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f04:	7fefffff 	.word	0x7fefffff
 8000f08:	0800e1b0 	.word	0x0800e1b0
 8000f0c:	0800e1b8 	.word	0x0800e1b8
 8000f10:	0800e1c0 	.word	0x0800e1c0
 8000f14:	0800e1c4 	.word	0x0800e1c4

08000f18 <print_string_ptr>:
    return false;
}

/* Render the cstring provided to an escaped version that can be printed. */
static cJSON_bool print_string_ptr(const unsigned char * const input, printbuffer * const output_buffer)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b088      	sub	sp, #32
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
 8000f20:	6039      	str	r1, [r7, #0]
    const unsigned char *input_pointer = NULL;
 8000f22:	2300      	movs	r3, #0
 8000f24:	61fb      	str	r3, [r7, #28]
    unsigned char *output = NULL;
 8000f26:	2300      	movs	r3, #0
 8000f28:	613b      	str	r3, [r7, #16]
    unsigned char *output_pointer = NULL;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	61bb      	str	r3, [r7, #24]
    size_t output_length = 0;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	60fb      	str	r3, [r7, #12]
    /* numbers of additional characters needed for escaping */
    size_t escape_characters = 0;
 8000f32:	2300      	movs	r3, #0
 8000f34:	617b      	str	r3, [r7, #20]

    if (output_buffer == NULL)
 8000f36:	683b      	ldr	r3, [r7, #0]
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d101      	bne.n	8000f40 <print_string_ptr+0x28>
    {
        return false;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	e0d7      	b.n	80010f0 <print_string_ptr+0x1d8>
    }

    /* empty string */
    if (input == NULL)
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d111      	bne.n	8000f6a <print_string_ptr+0x52>
    {
        output = ensure(output_buffer, sizeof("\"\""));
 8000f46:	2103      	movs	r1, #3
 8000f48:	6838      	ldr	r0, [r7, #0]
 8000f4a:	f7ff fe02 	bl	8000b52 <ensure>
 8000f4e:	6138      	str	r0, [r7, #16]
        if (output == NULL)
 8000f50:	693b      	ldr	r3, [r7, #16]
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d101      	bne.n	8000f5a <print_string_ptr+0x42>
        {
            return false;
 8000f56:	2300      	movs	r3, #0
 8000f58:	e0ca      	b.n	80010f0 <print_string_ptr+0x1d8>
        }
        strcpy((char*)output, "\"\"");
 8000f5a:	693b      	ldr	r3, [r7, #16]
 8000f5c:	4a66      	ldr	r2, [pc, #408]	; (80010f8 <print_string_ptr+0x1e0>)
 8000f5e:	8811      	ldrh	r1, [r2, #0]
 8000f60:	7892      	ldrb	r2, [r2, #2]
 8000f62:	8019      	strh	r1, [r3, #0]
 8000f64:	709a      	strb	r2, [r3, #2]

        return true;
 8000f66:	2301      	movs	r3, #1
 8000f68:	e0c2      	b.n	80010f0 <print_string_ptr+0x1d8>
    }

    /* set "flag" to 1 if something needs to be escaped */
    for (input_pointer = input; *input_pointer; input_pointer++)
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	61fb      	str	r3, [r7, #28]
 8000f6e:	e01c      	b.n	8000faa <print_string_ptr+0x92>
    {
        switch (*input_pointer)
 8000f70:	69fb      	ldr	r3, [r7, #28]
 8000f72:	781b      	ldrb	r3, [r3, #0]
 8000f74:	2b0d      	cmp	r3, #13
 8000f76:	dc05      	bgt.n	8000f84 <print_string_ptr+0x6c>
 8000f78:	2b0c      	cmp	r3, #12
 8000f7a:	da07      	bge.n	8000f8c <print_string_ptr+0x74>
 8000f7c:	3b08      	subs	r3, #8
 8000f7e:	2b02      	cmp	r3, #2
 8000f80:	d808      	bhi.n	8000f94 <print_string_ptr+0x7c>
 8000f82:	e003      	b.n	8000f8c <print_string_ptr+0x74>
 8000f84:	2b22      	cmp	r3, #34	; 0x22
 8000f86:	d001      	beq.n	8000f8c <print_string_ptr+0x74>
 8000f88:	2b5c      	cmp	r3, #92	; 0x5c
 8000f8a:	d103      	bne.n	8000f94 <print_string_ptr+0x7c>
            case '\f':
            case '\n':
            case '\r':
            case '\t':
                /* one character escape sequence */
                escape_characters++;
 8000f8c:	697b      	ldr	r3, [r7, #20]
 8000f8e:	3301      	adds	r3, #1
 8000f90:	617b      	str	r3, [r7, #20]
                break;
 8000f92:	e007      	b.n	8000fa4 <print_string_ptr+0x8c>
            default:
                if (*input_pointer < 32)
 8000f94:	69fb      	ldr	r3, [r7, #28]
 8000f96:	781b      	ldrb	r3, [r3, #0]
 8000f98:	2b1f      	cmp	r3, #31
 8000f9a:	d802      	bhi.n	8000fa2 <print_string_ptr+0x8a>
                {
                    /* UTF-16 escape sequence uXXXX */
                    escape_characters += 5;
 8000f9c:	697b      	ldr	r3, [r7, #20]
 8000f9e:	3305      	adds	r3, #5
 8000fa0:	617b      	str	r3, [r7, #20]
                }
                break;
 8000fa2:	bf00      	nop
    for (input_pointer = input; *input_pointer; input_pointer++)
 8000fa4:	69fb      	ldr	r3, [r7, #28]
 8000fa6:	3301      	adds	r3, #1
 8000fa8:	61fb      	str	r3, [r7, #28]
 8000faa:	69fb      	ldr	r3, [r7, #28]
 8000fac:	781b      	ldrb	r3, [r3, #0]
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d1de      	bne.n	8000f70 <print_string_ptr+0x58>
        }
    }
    output_length = (size_t)(input_pointer - input) + escape_characters;
 8000fb2:	69fa      	ldr	r2, [r7, #28]
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	1ad3      	subs	r3, r2, r3
 8000fb8:	461a      	mov	r2, r3
 8000fba:	697b      	ldr	r3, [r7, #20]
 8000fbc:	4413      	add	r3, r2
 8000fbe:	60fb      	str	r3, [r7, #12]

    output = ensure(output_buffer, output_length + sizeof("\"\""));
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	3303      	adds	r3, #3
 8000fc4:	4619      	mov	r1, r3
 8000fc6:	6838      	ldr	r0, [r7, #0]
 8000fc8:	f7ff fdc3 	bl	8000b52 <ensure>
 8000fcc:	6138      	str	r0, [r7, #16]
    if (output == NULL)
 8000fce:	693b      	ldr	r3, [r7, #16]
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d101      	bne.n	8000fd8 <print_string_ptr+0xc0>
    {
        return false;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	e08b      	b.n	80010f0 <print_string_ptr+0x1d8>
    }

    /* no characters have to be escaped */
    if (escape_characters == 0)
 8000fd8:	697b      	ldr	r3, [r7, #20]
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d117      	bne.n	800100e <print_string_ptr+0xf6>
    {
        output[0] = '\"';
 8000fde:	693b      	ldr	r3, [r7, #16]
 8000fe0:	2222      	movs	r2, #34	; 0x22
 8000fe2:	701a      	strb	r2, [r3, #0]
        memcpy(output + 1, input, output_length);
 8000fe4:	693b      	ldr	r3, [r7, #16]
 8000fe6:	3301      	adds	r3, #1
 8000fe8:	68fa      	ldr	r2, [r7, #12]
 8000fea:	6879      	ldr	r1, [r7, #4]
 8000fec:	4618      	mov	r0, r3
 8000fee:	f00b ffe3 	bl	800cfb8 <memcpy>
        output[output_length + 1] = '\"';
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	3301      	adds	r3, #1
 8000ff6:	693a      	ldr	r2, [r7, #16]
 8000ff8:	4413      	add	r3, r2
 8000ffa:	2222      	movs	r2, #34	; 0x22
 8000ffc:	701a      	strb	r2, [r3, #0]
        output[output_length + 2] = '\0';
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	3302      	adds	r3, #2
 8001002:	693a      	ldr	r2, [r7, #16]
 8001004:	4413      	add	r3, r2
 8001006:	2200      	movs	r2, #0
 8001008:	701a      	strb	r2, [r3, #0]

        return true;
 800100a:	2301      	movs	r3, #1
 800100c:	e070      	b.n	80010f0 <print_string_ptr+0x1d8>
    }

    output[0] = '\"';
 800100e:	693b      	ldr	r3, [r7, #16]
 8001010:	2222      	movs	r2, #34	; 0x22
 8001012:	701a      	strb	r2, [r3, #0]
    output_pointer = output + 1;
 8001014:	693b      	ldr	r3, [r7, #16]
 8001016:	3301      	adds	r3, #1
 8001018:	61bb      	str	r3, [r7, #24]
    /* copy the string */
    for (input_pointer = input; *input_pointer != '\0'; (void)input_pointer++, output_pointer++)
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	61fb      	str	r3, [r7, #28]
 800101e:	e056      	b.n	80010ce <print_string_ptr+0x1b6>
    {
        if ((*input_pointer > 31) && (*input_pointer != '\"') && (*input_pointer != '\\'))
 8001020:	69fb      	ldr	r3, [r7, #28]
 8001022:	781b      	ldrb	r3, [r3, #0]
 8001024:	2b1f      	cmp	r3, #31
 8001026:	d90c      	bls.n	8001042 <print_string_ptr+0x12a>
 8001028:	69fb      	ldr	r3, [r7, #28]
 800102a:	781b      	ldrb	r3, [r3, #0]
 800102c:	2b22      	cmp	r3, #34	; 0x22
 800102e:	d008      	beq.n	8001042 <print_string_ptr+0x12a>
 8001030:	69fb      	ldr	r3, [r7, #28]
 8001032:	781b      	ldrb	r3, [r3, #0]
 8001034:	2b5c      	cmp	r3, #92	; 0x5c
 8001036:	d004      	beq.n	8001042 <print_string_ptr+0x12a>
        {
            /* normal character, copy */
            *output_pointer = *input_pointer;
 8001038:	69fb      	ldr	r3, [r7, #28]
 800103a:	781a      	ldrb	r2, [r3, #0]
 800103c:	69bb      	ldr	r3, [r7, #24]
 800103e:	701a      	strb	r2, [r3, #0]
 8001040:	e03f      	b.n	80010c2 <print_string_ptr+0x1aa>
        }
        else
        {
            /* character needs to be escaped */
            *output_pointer++ = '\\';
 8001042:	69bb      	ldr	r3, [r7, #24]
 8001044:	1c5a      	adds	r2, r3, #1
 8001046:	61ba      	str	r2, [r7, #24]
 8001048:	225c      	movs	r2, #92	; 0x5c
 800104a:	701a      	strb	r2, [r3, #0]
            switch (*input_pointer)
 800104c:	69fb      	ldr	r3, [r7, #28]
 800104e:	781b      	ldrb	r3, [r3, #0]
 8001050:	2b0c      	cmp	r3, #12
 8001052:	d01b      	beq.n	800108c <print_string_ptr+0x174>
 8001054:	2b0c      	cmp	r3, #12
 8001056:	dc06      	bgt.n	8001066 <print_string_ptr+0x14e>
 8001058:	2b09      	cmp	r3, #9
 800105a:	d023      	beq.n	80010a4 <print_string_ptr+0x18c>
 800105c:	2b0a      	cmp	r3, #10
 800105e:	d019      	beq.n	8001094 <print_string_ptr+0x17c>
 8001060:	2b08      	cmp	r3, #8
 8001062:	d00f      	beq.n	8001084 <print_string_ptr+0x16c>
 8001064:	e022      	b.n	80010ac <print_string_ptr+0x194>
 8001066:	2b22      	cmp	r3, #34	; 0x22
 8001068:	d008      	beq.n	800107c <print_string_ptr+0x164>
 800106a:	2b5c      	cmp	r3, #92	; 0x5c
 800106c:	d002      	beq.n	8001074 <print_string_ptr+0x15c>
 800106e:	2b0d      	cmp	r3, #13
 8001070:	d014      	beq.n	800109c <print_string_ptr+0x184>
 8001072:	e01b      	b.n	80010ac <print_string_ptr+0x194>
            {
                case '\\':
                    *output_pointer = '\\';
 8001074:	69bb      	ldr	r3, [r7, #24]
 8001076:	225c      	movs	r2, #92	; 0x5c
 8001078:	701a      	strb	r2, [r3, #0]
                    break;
 800107a:	e022      	b.n	80010c2 <print_string_ptr+0x1aa>
                case '\"':
                    *output_pointer = '\"';
 800107c:	69bb      	ldr	r3, [r7, #24]
 800107e:	2222      	movs	r2, #34	; 0x22
 8001080:	701a      	strb	r2, [r3, #0]
                    break;
 8001082:	e01e      	b.n	80010c2 <print_string_ptr+0x1aa>
                case '\b':
                    *output_pointer = 'b';
 8001084:	69bb      	ldr	r3, [r7, #24]
 8001086:	2262      	movs	r2, #98	; 0x62
 8001088:	701a      	strb	r2, [r3, #0]
                    break;
 800108a:	e01a      	b.n	80010c2 <print_string_ptr+0x1aa>
                case '\f':
                    *output_pointer = 'f';
 800108c:	69bb      	ldr	r3, [r7, #24]
 800108e:	2266      	movs	r2, #102	; 0x66
 8001090:	701a      	strb	r2, [r3, #0]
                    break;
 8001092:	e016      	b.n	80010c2 <print_string_ptr+0x1aa>
                case '\n':
                    *output_pointer = 'n';
 8001094:	69bb      	ldr	r3, [r7, #24]
 8001096:	226e      	movs	r2, #110	; 0x6e
 8001098:	701a      	strb	r2, [r3, #0]
                    break;
 800109a:	e012      	b.n	80010c2 <print_string_ptr+0x1aa>
                case '\r':
                    *output_pointer = 'r';
 800109c:	69bb      	ldr	r3, [r7, #24]
 800109e:	2272      	movs	r2, #114	; 0x72
 80010a0:	701a      	strb	r2, [r3, #0]
                    break;
 80010a2:	e00e      	b.n	80010c2 <print_string_ptr+0x1aa>
                case '\t':
                    *output_pointer = 't';
 80010a4:	69bb      	ldr	r3, [r7, #24]
 80010a6:	2274      	movs	r2, #116	; 0x74
 80010a8:	701a      	strb	r2, [r3, #0]
                    break;
 80010aa:	e00a      	b.n	80010c2 <print_string_ptr+0x1aa>
                default:
                    /* escape and print as unicode codepoint */
                    sprintf((char*)output_pointer, "u%04x", *input_pointer);
 80010ac:	69fb      	ldr	r3, [r7, #28]
 80010ae:	781b      	ldrb	r3, [r3, #0]
 80010b0:	461a      	mov	r2, r3
 80010b2:	4912      	ldr	r1, [pc, #72]	; (80010fc <print_string_ptr+0x1e4>)
 80010b4:	69b8      	ldr	r0, [r7, #24]
 80010b6:	f00c f851 	bl	800d15c <siprintf>
                    output_pointer += 4;
 80010ba:	69bb      	ldr	r3, [r7, #24]
 80010bc:	3304      	adds	r3, #4
 80010be:	61bb      	str	r3, [r7, #24]
                    break;
 80010c0:	bf00      	nop
    for (input_pointer = input; *input_pointer != '\0'; (void)input_pointer++, output_pointer++)
 80010c2:	69fb      	ldr	r3, [r7, #28]
 80010c4:	3301      	adds	r3, #1
 80010c6:	61fb      	str	r3, [r7, #28]
 80010c8:	69bb      	ldr	r3, [r7, #24]
 80010ca:	3301      	adds	r3, #1
 80010cc:	61bb      	str	r3, [r7, #24]
 80010ce:	69fb      	ldr	r3, [r7, #28]
 80010d0:	781b      	ldrb	r3, [r3, #0]
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d1a4      	bne.n	8001020 <print_string_ptr+0x108>
            }
        }
    }
    output[output_length + 1] = '\"';
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	3301      	adds	r3, #1
 80010da:	693a      	ldr	r2, [r7, #16]
 80010dc:	4413      	add	r3, r2
 80010de:	2222      	movs	r2, #34	; 0x22
 80010e0:	701a      	strb	r2, [r3, #0]
    output[output_length + 2] = '\0';
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	3302      	adds	r3, #2
 80010e6:	693a      	ldr	r2, [r7, #16]
 80010e8:	4413      	add	r3, r2
 80010ea:	2200      	movs	r2, #0
 80010ec:	701a      	strb	r2, [r3, #0]

    return true;
 80010ee:	2301      	movs	r3, #1
}
 80010f0:	4618      	mov	r0, r3
 80010f2:	3720      	adds	r7, #32
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bd80      	pop	{r7, pc}
 80010f8:	0800e1cc 	.word	0x0800e1cc
 80010fc:	0800e1d0 	.word	0x0800e1d0

08001100 <print_string>:

/* Invoke print_string_ptr (which is useful) on an item. */
static cJSON_bool print_string(const cJSON * const item, printbuffer * const p)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b082      	sub	sp, #8
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
 8001108:	6039      	str	r1, [r7, #0]
    return print_string_ptr((unsigned char*)item->valuestring, p);
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	691b      	ldr	r3, [r3, #16]
 800110e:	6839      	ldr	r1, [r7, #0]
 8001110:	4618      	mov	r0, r3
 8001112:	f7ff ff01 	bl	8000f18 <print_string_ptr>
 8001116:	4603      	mov	r3, r0
}
 8001118:	4618      	mov	r0, r3
 800111a:	3708      	adds	r7, #8
 800111c:	46bd      	mov	sp, r7
 800111e:	bd80      	pop	{r7, pc}

08001120 <print>:
}

#define cjson_min(a, b) (((a) < (b)) ? (a) : (b))

static unsigned char *print(const cJSON * const item, cJSON_bool format, const internal_hooks * const hooks)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b08e      	sub	sp, #56	; 0x38
 8001124:	af00      	add	r7, sp, #0
 8001126:	60f8      	str	r0, [r7, #12]
 8001128:	60b9      	str	r1, [r7, #8]
 800112a:	607a      	str	r2, [r7, #4]
    static const size_t default_buffer_size = 256;
    printbuffer buffer[1];
    unsigned char *printed = NULL;
 800112c:	2300      	movs	r3, #0
 800112e:	637b      	str	r3, [r7, #52]	; 0x34

    memset(buffer, 0, sizeof(buffer));
 8001130:	f107 0310 	add.w	r3, r7, #16
 8001134:	2224      	movs	r2, #36	; 0x24
 8001136:	2100      	movs	r1, #0
 8001138:	4618      	mov	r0, r3
 800113a:	f00b ff48 	bl	800cfce <memset>

    /* create buffer */
    buffer->buffer = (unsigned char*) hooks->allocate(default_buffer_size);
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	4a38      	ldr	r2, [pc, #224]	; (8001224 <print+0x104>)
 8001144:	6812      	ldr	r2, [r2, #0]
 8001146:	4610      	mov	r0, r2
 8001148:	4798      	blx	r3
 800114a:	4603      	mov	r3, r0
 800114c:	613b      	str	r3, [r7, #16]
    buffer->length = default_buffer_size;
 800114e:	4b35      	ldr	r3, [pc, #212]	; (8001224 <print+0x104>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	617b      	str	r3, [r7, #20]
    buffer->format = format;
 8001154:	68bb      	ldr	r3, [r7, #8]
 8001156:	627b      	str	r3, [r7, #36]	; 0x24
    buffer->hooks = *hooks;
 8001158:	687a      	ldr	r2, [r7, #4]
 800115a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800115e:	ca07      	ldmia	r2, {r0, r1, r2}
 8001160:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    if (buffer->buffer == NULL)
 8001164:	693b      	ldr	r3, [r7, #16]
 8001166:	2b00      	cmp	r3, #0
 8001168:	d040      	beq.n	80011ec <print+0xcc>
    {
        goto fail;
    }

    /* print the value */
    if (!print_value(item, buffer))
 800116a:	f107 0310 	add.w	r3, r7, #16
 800116e:	4619      	mov	r1, r3
 8001170:	68f8      	ldr	r0, [r7, #12]
 8001172:	f000 f869 	bl	8001248 <print_value>
 8001176:	4603      	mov	r3, r0
 8001178:	2b00      	cmp	r3, #0
 800117a:	d039      	beq.n	80011f0 <print+0xd0>
    {
        goto fail;
    }
    update_offset(buffer);
 800117c:	f107 0310 	add.w	r3, r7, #16
 8001180:	4618      	mov	r0, r3
 8001182:	f7ff fd80 	bl	8000c86 <update_offset>

    /* check if reallocate is available */
    if (hooks->reallocate != NULL)
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	689b      	ldr	r3, [r3, #8]
 800118a:	2b00      	cmp	r3, #0
 800118c:	d00d      	beq.n	80011aa <print+0x8a>
    {
        printed = (unsigned char*) hooks->reallocate(buffer->buffer, buffer->offset + 1);
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	689b      	ldr	r3, [r3, #8]
 8001192:	6938      	ldr	r0, [r7, #16]
 8001194:	69ba      	ldr	r2, [r7, #24]
 8001196:	3201      	adds	r2, #1
 8001198:	4611      	mov	r1, r2
 800119a:	4798      	blx	r3
 800119c:	6378      	str	r0, [r7, #52]	; 0x34
        if (printed == NULL) {
 800119e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d027      	beq.n	80011f4 <print+0xd4>
            goto fail;
        }
        buffer->buffer = NULL;
 80011a4:	2300      	movs	r3, #0
 80011a6:	613b      	str	r3, [r7, #16]
 80011a8:	e01e      	b.n	80011e8 <print+0xc8>
    }
    else /* otherwise copy the JSON over to a new buffer */
    {
        printed = (unsigned char*) hooks->allocate(buffer->offset + 1);
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	69ba      	ldr	r2, [r7, #24]
 80011b0:	3201      	adds	r2, #1
 80011b2:	4610      	mov	r0, r2
 80011b4:	4798      	blx	r3
 80011b6:	6378      	str	r0, [r7, #52]	; 0x34
        if (printed == NULL)
 80011b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d01c      	beq.n	80011f8 <print+0xd8>
        {
            goto fail;
        }
        memcpy(printed, buffer->buffer, cjson_min(buffer->length, buffer->offset + 1));
 80011be:	6939      	ldr	r1, [r7, #16]
 80011c0:	69bb      	ldr	r3, [r7, #24]
 80011c2:	1c5a      	adds	r2, r3, #1
 80011c4:	697b      	ldr	r3, [r7, #20]
 80011c6:	4293      	cmp	r3, r2
 80011c8:	bf28      	it	cs
 80011ca:	4613      	movcs	r3, r2
 80011cc:	461a      	mov	r2, r3
 80011ce:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80011d0:	f00b fef2 	bl	800cfb8 <memcpy>
        printed[buffer->offset] = '\0'; /* just to be sure */
 80011d4:	69bb      	ldr	r3, [r7, #24]
 80011d6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80011d8:	4413      	add	r3, r2
 80011da:	2200      	movs	r2, #0
 80011dc:	701a      	strb	r2, [r3, #0]

        /* free the buffer */
        hooks->deallocate(buffer->buffer);
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	685b      	ldr	r3, [r3, #4]
 80011e2:	693a      	ldr	r2, [r7, #16]
 80011e4:	4610      	mov	r0, r2
 80011e6:	4798      	blx	r3
    }

    return printed;
 80011e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80011ea:	e016      	b.n	800121a <print+0xfa>
        goto fail;
 80011ec:	bf00      	nop
 80011ee:	e004      	b.n	80011fa <print+0xda>
        goto fail;
 80011f0:	bf00      	nop
 80011f2:	e002      	b.n	80011fa <print+0xda>
            goto fail;
 80011f4:	bf00      	nop
 80011f6:	e000      	b.n	80011fa <print+0xda>
            goto fail;
 80011f8:	bf00      	nop

fail:
    if (buffer->buffer != NULL)
 80011fa:	693b      	ldr	r3, [r7, #16]
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d004      	beq.n	800120a <print+0xea>
    {
        hooks->deallocate(buffer->buffer);
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	685b      	ldr	r3, [r3, #4]
 8001204:	693a      	ldr	r2, [r7, #16]
 8001206:	4610      	mov	r0, r2
 8001208:	4798      	blx	r3
    }

    if (printed != NULL)
 800120a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800120c:	2b00      	cmp	r3, #0
 800120e:	d003      	beq.n	8001218 <print+0xf8>
    {
        hooks->deallocate(printed);
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	685b      	ldr	r3, [r3, #4]
 8001214:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001216:	4798      	blx	r3
    }

    return NULL;
 8001218:	2300      	movs	r3, #0
}
 800121a:	4618      	mov	r0, r3
 800121c:	3738      	adds	r7, #56	; 0x38
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	0800e5cc 	.word	0x0800e5cc

08001228 <cJSON_Print>:

/* Render a cJSON item/entity/structure to text. */
CJSON_PUBLIC(char *) cJSON_Print(const cJSON *item)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b082      	sub	sp, #8
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
    return (char*)print(item, true, &global_hooks);
 8001230:	4a04      	ldr	r2, [pc, #16]	; (8001244 <cJSON_Print+0x1c>)
 8001232:	2101      	movs	r1, #1
 8001234:	6878      	ldr	r0, [r7, #4]
 8001236:	f7ff ff73 	bl	8001120 <print>
 800123a:	4603      	mov	r3, r0
}
 800123c:	4618      	mov	r0, r3
 800123e:	3708      	adds	r7, #8
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}
 8001244:	20000000 	.word	0x20000000

08001248 <print_value>:
    return false;
}

/* Render a value to text. */
static cJSON_bool print_value(const cJSON * const item, printbuffer * const output_buffer)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b084      	sub	sp, #16
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
 8001250:	6039      	str	r1, [r7, #0]
    unsigned char *output = NULL;
 8001252:	2300      	movs	r3, #0
 8001254:	60fb      	str	r3, [r7, #12]

    if ((item == NULL) || (output_buffer == NULL))
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	2b00      	cmp	r3, #0
 800125a:	d002      	beq.n	8001262 <print_value+0x1a>
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	2b00      	cmp	r3, #0
 8001260:	d101      	bne.n	8001266 <print_value+0x1e>
    {
        return false;
 8001262:	2300      	movs	r3, #0
 8001264:	e08b      	b.n	800137e <print_value+0x136>
    }

    switch ((item->type) & 0xFF)
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	68db      	ldr	r3, [r3, #12]
 800126a:	b2db      	uxtb	r3, r3
 800126c:	2b08      	cmp	r3, #8
 800126e:	d04a      	beq.n	8001306 <print_value+0xbe>
 8001270:	2b08      	cmp	r3, #8
 8001272:	dc06      	bgt.n	8001282 <print_value+0x3a>
 8001274:	2b02      	cmp	r3, #2
 8001276:	d034      	beq.n	80012e2 <print_value+0x9a>
 8001278:	2b04      	cmp	r3, #4
 800127a:	d00e      	beq.n	800129a <print_value+0x52>
 800127c:	2b01      	cmp	r3, #1
 800127e:	d01e      	beq.n	80012be <print_value+0x76>
 8001280:	e07c      	b.n	800137c <print_value+0x134>
 8001282:	2b20      	cmp	r3, #32
 8001284:	d06e      	beq.n	8001364 <print_value+0x11c>
 8001286:	2b20      	cmp	r3, #32
 8001288:	dc02      	bgt.n	8001290 <print_value+0x48>
 800128a:	2b10      	cmp	r3, #16
 800128c:	d064      	beq.n	8001358 <print_value+0x110>
 800128e:	e075      	b.n	800137c <print_value+0x134>
 8001290:	2b40      	cmp	r3, #64	; 0x40
 8001292:	d06d      	beq.n	8001370 <print_value+0x128>
 8001294:	2b80      	cmp	r3, #128	; 0x80
 8001296:	d03c      	beq.n	8001312 <print_value+0xca>
 8001298:	e070      	b.n	800137c <print_value+0x134>
    {
        case cJSON_NULL:
            output = ensure(output_buffer, 5);
 800129a:	2105      	movs	r1, #5
 800129c:	6838      	ldr	r0, [r7, #0]
 800129e:	f7ff fc58 	bl	8000b52 <ensure>
 80012a2:	60f8      	str	r0, [r7, #12]
            if (output == NULL)
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d101      	bne.n	80012ae <print_value+0x66>
            {
                return false;
 80012aa:	2300      	movs	r3, #0
 80012ac:	e067      	b.n	800137e <print_value+0x136>
            }
            strcpy((char*)output, "null");
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	4a35      	ldr	r2, [pc, #212]	; (8001388 <print_value+0x140>)
 80012b2:	6810      	ldr	r0, [r2, #0]
 80012b4:	6018      	str	r0, [r3, #0]
 80012b6:	7912      	ldrb	r2, [r2, #4]
 80012b8:	711a      	strb	r2, [r3, #4]
            return true;
 80012ba:	2301      	movs	r3, #1
 80012bc:	e05f      	b.n	800137e <print_value+0x136>

        case cJSON_False:
            output = ensure(output_buffer, 6);
 80012be:	2106      	movs	r1, #6
 80012c0:	6838      	ldr	r0, [r7, #0]
 80012c2:	f7ff fc46 	bl	8000b52 <ensure>
 80012c6:	60f8      	str	r0, [r7, #12]
            if (output == NULL)
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d101      	bne.n	80012d2 <print_value+0x8a>
            {
                return false;
 80012ce:	2300      	movs	r3, #0
 80012d0:	e055      	b.n	800137e <print_value+0x136>
            }
            strcpy((char*)output, "false");
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	4a2d      	ldr	r2, [pc, #180]	; (800138c <print_value+0x144>)
 80012d6:	6810      	ldr	r0, [r2, #0]
 80012d8:	6018      	str	r0, [r3, #0]
 80012da:	8892      	ldrh	r2, [r2, #4]
 80012dc:	809a      	strh	r2, [r3, #4]
            return true;
 80012de:	2301      	movs	r3, #1
 80012e0:	e04d      	b.n	800137e <print_value+0x136>

        case cJSON_True:
            output = ensure(output_buffer, 5);
 80012e2:	2105      	movs	r1, #5
 80012e4:	6838      	ldr	r0, [r7, #0]
 80012e6:	f7ff fc34 	bl	8000b52 <ensure>
 80012ea:	60f8      	str	r0, [r7, #12]
            if (output == NULL)
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d101      	bne.n	80012f6 <print_value+0xae>
            {
                return false;
 80012f2:	2300      	movs	r3, #0
 80012f4:	e043      	b.n	800137e <print_value+0x136>
            }
            strcpy((char*)output, "true");
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	4a25      	ldr	r2, [pc, #148]	; (8001390 <print_value+0x148>)
 80012fa:	6810      	ldr	r0, [r2, #0]
 80012fc:	6018      	str	r0, [r3, #0]
 80012fe:	7912      	ldrb	r2, [r2, #4]
 8001300:	711a      	strb	r2, [r3, #4]
            return true;
 8001302:	2301      	movs	r3, #1
 8001304:	e03b      	b.n	800137e <print_value+0x136>

        case cJSON_Number:
            return print_number(item, output_buffer);
 8001306:	6839      	ldr	r1, [r7, #0]
 8001308:	6878      	ldr	r0, [r7, #4]
 800130a:	f7ff fd31 	bl	8000d70 <print_number>
 800130e:	4603      	mov	r3, r0
 8001310:	e035      	b.n	800137e <print_value+0x136>

        case cJSON_Raw:
        {
            size_t raw_length = 0;
 8001312:	2300      	movs	r3, #0
 8001314:	60bb      	str	r3, [r7, #8]
            if (item->valuestring == NULL)
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	691b      	ldr	r3, [r3, #16]
 800131a:	2b00      	cmp	r3, #0
 800131c:	d101      	bne.n	8001322 <print_value+0xda>
            {
                return false;
 800131e:	2300      	movs	r3, #0
 8001320:	e02d      	b.n	800137e <print_value+0x136>
            }

            raw_length = strlen(item->valuestring) + sizeof("");
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	691b      	ldr	r3, [r3, #16]
 8001326:	4618      	mov	r0, r3
 8001328:	f7fe ff12 	bl	8000150 <strlen>
 800132c:	4603      	mov	r3, r0
 800132e:	3301      	adds	r3, #1
 8001330:	60bb      	str	r3, [r7, #8]
            output = ensure(output_buffer, raw_length);
 8001332:	68b9      	ldr	r1, [r7, #8]
 8001334:	6838      	ldr	r0, [r7, #0]
 8001336:	f7ff fc0c 	bl	8000b52 <ensure>
 800133a:	60f8      	str	r0, [r7, #12]
            if (output == NULL)
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	2b00      	cmp	r3, #0
 8001340:	d101      	bne.n	8001346 <print_value+0xfe>
            {
                return false;
 8001342:	2300      	movs	r3, #0
 8001344:	e01b      	b.n	800137e <print_value+0x136>
            }
            memcpy(output, item->valuestring, raw_length);
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	691b      	ldr	r3, [r3, #16]
 800134a:	68ba      	ldr	r2, [r7, #8]
 800134c:	4619      	mov	r1, r3
 800134e:	68f8      	ldr	r0, [r7, #12]
 8001350:	f00b fe32 	bl	800cfb8 <memcpy>
            return true;
 8001354:	2301      	movs	r3, #1
 8001356:	e012      	b.n	800137e <print_value+0x136>
        }

        case cJSON_String:
            return print_string(item, output_buffer);
 8001358:	6839      	ldr	r1, [r7, #0]
 800135a:	6878      	ldr	r0, [r7, #4]
 800135c:	f7ff fed0 	bl	8001100 <print_string>
 8001360:	4603      	mov	r3, r0
 8001362:	e00c      	b.n	800137e <print_value+0x136>

        case cJSON_Array:
            return print_array(item, output_buffer);
 8001364:	6839      	ldr	r1, [r7, #0]
 8001366:	6878      	ldr	r0, [r7, #4]
 8001368:	f000 f814 	bl	8001394 <print_array>
 800136c:	4603      	mov	r3, r0
 800136e:	e006      	b.n	800137e <print_value+0x136>

        case cJSON_Object:
            return print_object(item, output_buffer);
 8001370:	6839      	ldr	r1, [r7, #0]
 8001372:	6878      	ldr	r0, [r7, #4]
 8001374:	f000 f894 	bl	80014a0 <print_object>
 8001378:	4603      	mov	r3, r0
 800137a:	e000      	b.n	800137e <print_value+0x136>

        default:
            return false;
 800137c:	2300      	movs	r3, #0
    }
}
 800137e:	4618      	mov	r0, r3
 8001380:	3710      	adds	r7, #16
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}
 8001386:	bf00      	nop
 8001388:	0800e1b0 	.word	0x0800e1b0
 800138c:	0800e1dc 	.word	0x0800e1dc
 8001390:	0800e1e4 	.word	0x0800e1e4

08001394 <print_array>:
    return false;
}

/* Render an array to text */
static cJSON_bool print_array(const cJSON * const item, printbuffer * const output_buffer)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b086      	sub	sp, #24
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
 800139c:	6039      	str	r1, [r7, #0]
    unsigned char *output_pointer = NULL;
 800139e:	2300      	movs	r3, #0
 80013a0:	617b      	str	r3, [r7, #20]
    size_t length = 0;
 80013a2:	2300      	movs	r3, #0
 80013a4:	60fb      	str	r3, [r7, #12]
    cJSON *current_element = item->child;
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	689b      	ldr	r3, [r3, #8]
 80013aa:	613b      	str	r3, [r7, #16]

    if (output_buffer == NULL)
 80013ac:	683b      	ldr	r3, [r7, #0]
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d101      	bne.n	80013b6 <print_array+0x22>
    {
        return false;
 80013b2:	2300      	movs	r3, #0
 80013b4:	e070      	b.n	8001498 <print_array+0x104>
    }

    /* Compose the output array. */
    /* opening square bracket */
    output_pointer = ensure(output_buffer, 1);
 80013b6:	2101      	movs	r1, #1
 80013b8:	6838      	ldr	r0, [r7, #0]
 80013ba:	f7ff fbca 	bl	8000b52 <ensure>
 80013be:	6178      	str	r0, [r7, #20]
    if (output_pointer == NULL)
 80013c0:	697b      	ldr	r3, [r7, #20]
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d101      	bne.n	80013ca <print_array+0x36>
    {
        return false;
 80013c6:	2300      	movs	r3, #0
 80013c8:	e066      	b.n	8001498 <print_array+0x104>
    }

    *output_pointer = '[';
 80013ca:	697b      	ldr	r3, [r7, #20]
 80013cc:	225b      	movs	r2, #91	; 0x5b
 80013ce:	701a      	strb	r2, [r3, #0]
    output_buffer->offset++;
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	689b      	ldr	r3, [r3, #8]
 80013d4:	1c5a      	adds	r2, r3, #1
 80013d6:	683b      	ldr	r3, [r7, #0]
 80013d8:	609a      	str	r2, [r3, #8]
    output_buffer->depth++;
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	68db      	ldr	r3, [r3, #12]
 80013de:	1c5a      	adds	r2, r3, #1
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	60da      	str	r2, [r3, #12]

    while (current_element != NULL)
 80013e4:	e03d      	b.n	8001462 <print_array+0xce>
    {
        if (!print_value(current_element, output_buffer))
 80013e6:	6839      	ldr	r1, [r7, #0]
 80013e8:	6938      	ldr	r0, [r7, #16]
 80013ea:	f7ff ff2d 	bl	8001248 <print_value>
 80013ee:	4603      	mov	r3, r0
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d101      	bne.n	80013f8 <print_array+0x64>
        {
            return false;
 80013f4:	2300      	movs	r3, #0
 80013f6:	e04f      	b.n	8001498 <print_array+0x104>
        }
        update_offset(output_buffer);
 80013f8:	6838      	ldr	r0, [r7, #0]
 80013fa:	f7ff fc44 	bl	8000c86 <update_offset>
        if (current_element->next)
 80013fe:	693b      	ldr	r3, [r7, #16]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	2b00      	cmp	r3, #0
 8001404:	d02a      	beq.n	800145c <print_array+0xc8>
        {
            length = (size_t) (output_buffer->format ? 2 : 1);
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	695b      	ldr	r3, [r3, #20]
 800140a:	2b00      	cmp	r3, #0
 800140c:	d001      	beq.n	8001412 <print_array+0x7e>
 800140e:	2302      	movs	r3, #2
 8001410:	e000      	b.n	8001414 <print_array+0x80>
 8001412:	2301      	movs	r3, #1
 8001414:	60fb      	str	r3, [r7, #12]
            output_pointer = ensure(output_buffer, length + 1);
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	3301      	adds	r3, #1
 800141a:	4619      	mov	r1, r3
 800141c:	6838      	ldr	r0, [r7, #0]
 800141e:	f7ff fb98 	bl	8000b52 <ensure>
 8001422:	6178      	str	r0, [r7, #20]
            if (output_pointer == NULL)
 8001424:	697b      	ldr	r3, [r7, #20]
 8001426:	2b00      	cmp	r3, #0
 8001428:	d101      	bne.n	800142e <print_array+0x9a>
            {
                return false;
 800142a:	2300      	movs	r3, #0
 800142c:	e034      	b.n	8001498 <print_array+0x104>
            }
            *output_pointer++ = ',';
 800142e:	697b      	ldr	r3, [r7, #20]
 8001430:	1c5a      	adds	r2, r3, #1
 8001432:	617a      	str	r2, [r7, #20]
 8001434:	222c      	movs	r2, #44	; 0x2c
 8001436:	701a      	strb	r2, [r3, #0]
            if(output_buffer->format)
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	695b      	ldr	r3, [r3, #20]
 800143c:	2b00      	cmp	r3, #0
 800143e:	d004      	beq.n	800144a <print_array+0xb6>
            {
                *output_pointer++ = ' ';
 8001440:	697b      	ldr	r3, [r7, #20]
 8001442:	1c5a      	adds	r2, r3, #1
 8001444:	617a      	str	r2, [r7, #20]
 8001446:	2220      	movs	r2, #32
 8001448:	701a      	strb	r2, [r3, #0]
            }
            *output_pointer = '\0';
 800144a:	697b      	ldr	r3, [r7, #20]
 800144c:	2200      	movs	r2, #0
 800144e:	701a      	strb	r2, [r3, #0]
            output_buffer->offset += length;
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	689a      	ldr	r2, [r3, #8]
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	441a      	add	r2, r3
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	609a      	str	r2, [r3, #8]
        }
        current_element = current_element->next;
 800145c:	693b      	ldr	r3, [r7, #16]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	613b      	str	r3, [r7, #16]
    while (current_element != NULL)
 8001462:	693b      	ldr	r3, [r7, #16]
 8001464:	2b00      	cmp	r3, #0
 8001466:	d1be      	bne.n	80013e6 <print_array+0x52>
    }

    output_pointer = ensure(output_buffer, 2);
 8001468:	2102      	movs	r1, #2
 800146a:	6838      	ldr	r0, [r7, #0]
 800146c:	f7ff fb71 	bl	8000b52 <ensure>
 8001470:	6178      	str	r0, [r7, #20]
    if (output_pointer == NULL)
 8001472:	697b      	ldr	r3, [r7, #20]
 8001474:	2b00      	cmp	r3, #0
 8001476:	d101      	bne.n	800147c <print_array+0xe8>
    {
        return false;
 8001478:	2300      	movs	r3, #0
 800147a:	e00d      	b.n	8001498 <print_array+0x104>
    }
    *output_pointer++ = ']';
 800147c:	697b      	ldr	r3, [r7, #20]
 800147e:	1c5a      	adds	r2, r3, #1
 8001480:	617a      	str	r2, [r7, #20]
 8001482:	225d      	movs	r2, #93	; 0x5d
 8001484:	701a      	strb	r2, [r3, #0]
    *output_pointer = '\0';
 8001486:	697b      	ldr	r3, [r7, #20]
 8001488:	2200      	movs	r2, #0
 800148a:	701a      	strb	r2, [r3, #0]
    output_buffer->depth--;
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	68db      	ldr	r3, [r3, #12]
 8001490:	1e5a      	subs	r2, r3, #1
 8001492:	683b      	ldr	r3, [r7, #0]
 8001494:	60da      	str	r2, [r3, #12]

    return true;
 8001496:	2301      	movs	r3, #1
}
 8001498:	4618      	mov	r0, r3
 800149a:	3718      	adds	r7, #24
 800149c:	46bd      	mov	sp, r7
 800149e:	bd80      	pop	{r7, pc}

080014a0 <print_object>:
    return false;
}

/* Render an object to text. */
static cJSON_bool print_object(const cJSON * const item, printbuffer * const output_buffer)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b088      	sub	sp, #32
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
 80014a8:	6039      	str	r1, [r7, #0]
    unsigned char *output_pointer = NULL;
 80014aa:	2300      	movs	r3, #0
 80014ac:	61fb      	str	r3, [r7, #28]
    size_t length = 0;
 80014ae:	2300      	movs	r3, #0
 80014b0:	60fb      	str	r3, [r7, #12]
    cJSON *current_item = item->child;
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	689b      	ldr	r3, [r3, #8]
 80014b6:	61bb      	str	r3, [r7, #24]

    if (output_buffer == NULL)
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d101      	bne.n	80014c2 <print_object+0x22>
    {
        return false;
 80014be:	2300      	movs	r3, #0
 80014c0:	e108      	b.n	80016d4 <print_object+0x234>
    }

    /* Compose the output: */
    length = (size_t) (output_buffer->format ? 2 : 1); /* fmt: {\n */
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	695b      	ldr	r3, [r3, #20]
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d001      	beq.n	80014ce <print_object+0x2e>
 80014ca:	2302      	movs	r3, #2
 80014cc:	e000      	b.n	80014d0 <print_object+0x30>
 80014ce:	2301      	movs	r3, #1
 80014d0:	60fb      	str	r3, [r7, #12]
    output_pointer = ensure(output_buffer, length + 1);
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	3301      	adds	r3, #1
 80014d6:	4619      	mov	r1, r3
 80014d8:	6838      	ldr	r0, [r7, #0]
 80014da:	f7ff fb3a 	bl	8000b52 <ensure>
 80014de:	61f8      	str	r0, [r7, #28]
    if (output_pointer == NULL)
 80014e0:	69fb      	ldr	r3, [r7, #28]
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d101      	bne.n	80014ea <print_object+0x4a>
    {
        return false;
 80014e6:	2300      	movs	r3, #0
 80014e8:	e0f4      	b.n	80016d4 <print_object+0x234>
    }

    *output_pointer++ = '{';
 80014ea:	69fb      	ldr	r3, [r7, #28]
 80014ec:	1c5a      	adds	r2, r3, #1
 80014ee:	61fa      	str	r2, [r7, #28]
 80014f0:	227b      	movs	r2, #123	; 0x7b
 80014f2:	701a      	strb	r2, [r3, #0]
    output_buffer->depth++;
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	68db      	ldr	r3, [r3, #12]
 80014f8:	1c5a      	adds	r2, r3, #1
 80014fa:	683b      	ldr	r3, [r7, #0]
 80014fc:	60da      	str	r2, [r3, #12]
    if (output_buffer->format)
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	695b      	ldr	r3, [r3, #20]
 8001502:	2b00      	cmp	r3, #0
 8001504:	d004      	beq.n	8001510 <print_object+0x70>
    {
        *output_pointer++ = '\n';
 8001506:	69fb      	ldr	r3, [r7, #28]
 8001508:	1c5a      	adds	r2, r3, #1
 800150a:	61fa      	str	r2, [r7, #28]
 800150c:	220a      	movs	r2, #10
 800150e:	701a      	strb	r2, [r3, #0]
    }
    output_buffer->offset += length;
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	689a      	ldr	r2, [r3, #8]
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	441a      	add	r2, r3
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	609a      	str	r2, [r3, #8]

    while (current_item)
 800151c:	e0a0      	b.n	8001660 <print_object+0x1c0>
    {
        if (output_buffer->format)
 800151e:	683b      	ldr	r3, [r7, #0]
 8001520:	695b      	ldr	r3, [r3, #20]
 8001522:	2b00      	cmp	r3, #0
 8001524:	d022      	beq.n	800156c <print_object+0xcc>
        {
            size_t i;
            output_pointer = ensure(output_buffer, output_buffer->depth);
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	68db      	ldr	r3, [r3, #12]
 800152a:	4619      	mov	r1, r3
 800152c:	6838      	ldr	r0, [r7, #0]
 800152e:	f7ff fb10 	bl	8000b52 <ensure>
 8001532:	61f8      	str	r0, [r7, #28]
            if (output_pointer == NULL)
 8001534:	69fb      	ldr	r3, [r7, #28]
 8001536:	2b00      	cmp	r3, #0
 8001538:	d101      	bne.n	800153e <print_object+0x9e>
            {
                return false;
 800153a:	2300      	movs	r3, #0
 800153c:	e0ca      	b.n	80016d4 <print_object+0x234>
            }
            for (i = 0; i < output_buffer->depth; i++)
 800153e:	2300      	movs	r3, #0
 8001540:	617b      	str	r3, [r7, #20]
 8001542:	e007      	b.n	8001554 <print_object+0xb4>
            {
                *output_pointer++ = '\t';
 8001544:	69fb      	ldr	r3, [r7, #28]
 8001546:	1c5a      	adds	r2, r3, #1
 8001548:	61fa      	str	r2, [r7, #28]
 800154a:	2209      	movs	r2, #9
 800154c:	701a      	strb	r2, [r3, #0]
            for (i = 0; i < output_buffer->depth; i++)
 800154e:	697b      	ldr	r3, [r7, #20]
 8001550:	3301      	adds	r3, #1
 8001552:	617b      	str	r3, [r7, #20]
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	68db      	ldr	r3, [r3, #12]
 8001558:	697a      	ldr	r2, [r7, #20]
 800155a:	429a      	cmp	r2, r3
 800155c:	d3f2      	bcc.n	8001544 <print_object+0xa4>
            }
            output_buffer->offset += output_buffer->depth;
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	689a      	ldr	r2, [r3, #8]
 8001562:	683b      	ldr	r3, [r7, #0]
 8001564:	68db      	ldr	r3, [r3, #12]
 8001566:	441a      	add	r2, r3
 8001568:	683b      	ldr	r3, [r7, #0]
 800156a:	609a      	str	r2, [r3, #8]
        }

        /* print key */
        if (!print_string_ptr((unsigned char*)current_item->string, output_buffer))
 800156c:	69bb      	ldr	r3, [r7, #24]
 800156e:	6a1b      	ldr	r3, [r3, #32]
 8001570:	6839      	ldr	r1, [r7, #0]
 8001572:	4618      	mov	r0, r3
 8001574:	f7ff fcd0 	bl	8000f18 <print_string_ptr>
 8001578:	4603      	mov	r3, r0
 800157a:	2b00      	cmp	r3, #0
 800157c:	d101      	bne.n	8001582 <print_object+0xe2>
        {
            return false;
 800157e:	2300      	movs	r3, #0
 8001580:	e0a8      	b.n	80016d4 <print_object+0x234>
        }
        update_offset(output_buffer);
 8001582:	6838      	ldr	r0, [r7, #0]
 8001584:	f7ff fb7f 	bl	8000c86 <update_offset>

        length = (size_t) (output_buffer->format ? 2 : 1);
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	695b      	ldr	r3, [r3, #20]
 800158c:	2b00      	cmp	r3, #0
 800158e:	d001      	beq.n	8001594 <print_object+0xf4>
 8001590:	2302      	movs	r3, #2
 8001592:	e000      	b.n	8001596 <print_object+0xf6>
 8001594:	2301      	movs	r3, #1
 8001596:	60fb      	str	r3, [r7, #12]
        output_pointer = ensure(output_buffer, length);
 8001598:	68f9      	ldr	r1, [r7, #12]
 800159a:	6838      	ldr	r0, [r7, #0]
 800159c:	f7ff fad9 	bl	8000b52 <ensure>
 80015a0:	61f8      	str	r0, [r7, #28]
        if (output_pointer == NULL)
 80015a2:	69fb      	ldr	r3, [r7, #28]
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d101      	bne.n	80015ac <print_object+0x10c>
        {
            return false;
 80015a8:	2300      	movs	r3, #0
 80015aa:	e093      	b.n	80016d4 <print_object+0x234>
        }
        *output_pointer++ = ':';
 80015ac:	69fb      	ldr	r3, [r7, #28]
 80015ae:	1c5a      	adds	r2, r3, #1
 80015b0:	61fa      	str	r2, [r7, #28]
 80015b2:	223a      	movs	r2, #58	; 0x3a
 80015b4:	701a      	strb	r2, [r3, #0]
        if (output_buffer->format)
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	695b      	ldr	r3, [r3, #20]
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d004      	beq.n	80015c8 <print_object+0x128>
        {
            *output_pointer++ = '\t';
 80015be:	69fb      	ldr	r3, [r7, #28]
 80015c0:	1c5a      	adds	r2, r3, #1
 80015c2:	61fa      	str	r2, [r7, #28]
 80015c4:	2209      	movs	r2, #9
 80015c6:	701a      	strb	r2, [r3, #0]
        }
        output_buffer->offset += length;
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	689a      	ldr	r2, [r3, #8]
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	441a      	add	r2, r3
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	609a      	str	r2, [r3, #8]

        /* print value */
        if (!print_value(current_item, output_buffer))
 80015d4:	6839      	ldr	r1, [r7, #0]
 80015d6:	69b8      	ldr	r0, [r7, #24]
 80015d8:	f7ff fe36 	bl	8001248 <print_value>
 80015dc:	4603      	mov	r3, r0
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d101      	bne.n	80015e6 <print_object+0x146>
        {
            return false;
 80015e2:	2300      	movs	r3, #0
 80015e4:	e076      	b.n	80016d4 <print_object+0x234>
        }
        update_offset(output_buffer);
 80015e6:	6838      	ldr	r0, [r7, #0]
 80015e8:	f7ff fb4d 	bl	8000c86 <update_offset>

        /* print comma if not last */
        length = ((size_t)(output_buffer->format ? 1 : 0) + (size_t)(current_item->next ? 1 : 0));
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	695b      	ldr	r3, [r3, #20]
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d001      	beq.n	80015f8 <print_object+0x158>
 80015f4:	2201      	movs	r2, #1
 80015f6:	e000      	b.n	80015fa <print_object+0x15a>
 80015f8:	2200      	movs	r2, #0
 80015fa:	69bb      	ldr	r3, [r7, #24]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d001      	beq.n	8001606 <print_object+0x166>
 8001602:	2301      	movs	r3, #1
 8001604:	e000      	b.n	8001608 <print_object+0x168>
 8001606:	2300      	movs	r3, #0
 8001608:	4413      	add	r3, r2
 800160a:	60fb      	str	r3, [r7, #12]
        output_pointer = ensure(output_buffer, length + 1);
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	3301      	adds	r3, #1
 8001610:	4619      	mov	r1, r3
 8001612:	6838      	ldr	r0, [r7, #0]
 8001614:	f7ff fa9d 	bl	8000b52 <ensure>
 8001618:	61f8      	str	r0, [r7, #28]
        if (output_pointer == NULL)
 800161a:	69fb      	ldr	r3, [r7, #28]
 800161c:	2b00      	cmp	r3, #0
 800161e:	d101      	bne.n	8001624 <print_object+0x184>
        {
            return false;
 8001620:	2300      	movs	r3, #0
 8001622:	e057      	b.n	80016d4 <print_object+0x234>
        }
        if (current_item->next)
 8001624:	69bb      	ldr	r3, [r7, #24]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	2b00      	cmp	r3, #0
 800162a:	d004      	beq.n	8001636 <print_object+0x196>
        {
            *output_pointer++ = ',';
 800162c:	69fb      	ldr	r3, [r7, #28]
 800162e:	1c5a      	adds	r2, r3, #1
 8001630:	61fa      	str	r2, [r7, #28]
 8001632:	222c      	movs	r2, #44	; 0x2c
 8001634:	701a      	strb	r2, [r3, #0]
        }

        if (output_buffer->format)
 8001636:	683b      	ldr	r3, [r7, #0]
 8001638:	695b      	ldr	r3, [r3, #20]
 800163a:	2b00      	cmp	r3, #0
 800163c:	d004      	beq.n	8001648 <print_object+0x1a8>
        {
            *output_pointer++ = '\n';
 800163e:	69fb      	ldr	r3, [r7, #28]
 8001640:	1c5a      	adds	r2, r3, #1
 8001642:	61fa      	str	r2, [r7, #28]
 8001644:	220a      	movs	r2, #10
 8001646:	701a      	strb	r2, [r3, #0]
        }
        *output_pointer = '\0';
 8001648:	69fb      	ldr	r3, [r7, #28]
 800164a:	2200      	movs	r2, #0
 800164c:	701a      	strb	r2, [r3, #0]
        output_buffer->offset += length;
 800164e:	683b      	ldr	r3, [r7, #0]
 8001650:	689a      	ldr	r2, [r3, #8]
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	441a      	add	r2, r3
 8001656:	683b      	ldr	r3, [r7, #0]
 8001658:	609a      	str	r2, [r3, #8]

        current_item = current_item->next;
 800165a:	69bb      	ldr	r3, [r7, #24]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	61bb      	str	r3, [r7, #24]
    while (current_item)
 8001660:	69bb      	ldr	r3, [r7, #24]
 8001662:	2b00      	cmp	r3, #0
 8001664:	f47f af5b 	bne.w	800151e <print_object+0x7e>
    }

    output_pointer = ensure(output_buffer, output_buffer->format ? (output_buffer->depth + 1) : 2);
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	695b      	ldr	r3, [r3, #20]
 800166c:	2b00      	cmp	r3, #0
 800166e:	d003      	beq.n	8001678 <print_object+0x1d8>
 8001670:	683b      	ldr	r3, [r7, #0]
 8001672:	68db      	ldr	r3, [r3, #12]
 8001674:	3301      	adds	r3, #1
 8001676:	e000      	b.n	800167a <print_object+0x1da>
 8001678:	2302      	movs	r3, #2
 800167a:	4619      	mov	r1, r3
 800167c:	6838      	ldr	r0, [r7, #0]
 800167e:	f7ff fa68 	bl	8000b52 <ensure>
 8001682:	61f8      	str	r0, [r7, #28]
    if (output_pointer == NULL)
 8001684:	69fb      	ldr	r3, [r7, #28]
 8001686:	2b00      	cmp	r3, #0
 8001688:	d101      	bne.n	800168e <print_object+0x1ee>
    {
        return false;
 800168a:	2300      	movs	r3, #0
 800168c:	e022      	b.n	80016d4 <print_object+0x234>
    }
    if (output_buffer->format)
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	695b      	ldr	r3, [r3, #20]
 8001692:	2b00      	cmp	r3, #0
 8001694:	d010      	beq.n	80016b8 <print_object+0x218>
    {
        size_t i;
        for (i = 0; i < (output_buffer->depth - 1); i++)
 8001696:	2300      	movs	r3, #0
 8001698:	613b      	str	r3, [r7, #16]
 800169a:	e007      	b.n	80016ac <print_object+0x20c>
        {
            *output_pointer++ = '\t';
 800169c:	69fb      	ldr	r3, [r7, #28]
 800169e:	1c5a      	adds	r2, r3, #1
 80016a0:	61fa      	str	r2, [r7, #28]
 80016a2:	2209      	movs	r2, #9
 80016a4:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < (output_buffer->depth - 1); i++)
 80016a6:	693b      	ldr	r3, [r7, #16]
 80016a8:	3301      	adds	r3, #1
 80016aa:	613b      	str	r3, [r7, #16]
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	68db      	ldr	r3, [r3, #12]
 80016b0:	3b01      	subs	r3, #1
 80016b2:	693a      	ldr	r2, [r7, #16]
 80016b4:	429a      	cmp	r2, r3
 80016b6:	d3f1      	bcc.n	800169c <print_object+0x1fc>
        }
    }
    *output_pointer++ = '}';
 80016b8:	69fb      	ldr	r3, [r7, #28]
 80016ba:	1c5a      	adds	r2, r3, #1
 80016bc:	61fa      	str	r2, [r7, #28]
 80016be:	227d      	movs	r2, #125	; 0x7d
 80016c0:	701a      	strb	r2, [r3, #0]
    *output_pointer = '\0';
 80016c2:	69fb      	ldr	r3, [r7, #28]
 80016c4:	2200      	movs	r2, #0
 80016c6:	701a      	strb	r2, [r3, #0]
    output_buffer->depth--;
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	68db      	ldr	r3, [r3, #12]
 80016cc:	1e5a      	subs	r2, r3, #1
 80016ce:	683b      	ldr	r3, [r7, #0]
 80016d0:	60da      	str	r2, [r3, #12]

    return true;
 80016d2:	2301      	movs	r3, #1
}
 80016d4:	4618      	mov	r0, r3
 80016d6:	3720      	adds	r7, #32
 80016d8:	46bd      	mov	sp, r7
 80016da:	bd80      	pop	{r7, pc}

080016dc <suffix_object>:
    return cJSON_GetObjectItem(object, string) ? 1 : 0;
}

/* Utility for array list handling. */
static void suffix_object(cJSON *prev, cJSON *item)
{
 80016dc:	b480      	push	{r7}
 80016de:	b083      	sub	sp, #12
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
 80016e4:	6039      	str	r1, [r7, #0]
    prev->next = item;
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	683a      	ldr	r2, [r7, #0]
 80016ea:	601a      	str	r2, [r3, #0]
    item->prev = prev;
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	687a      	ldr	r2, [r7, #4]
 80016f0:	605a      	str	r2, [r3, #4]
}
 80016f2:	bf00      	nop
 80016f4:	370c      	adds	r7, #12
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bc80      	pop	{r7}
 80016fa:	4770      	bx	lr

080016fc <add_item_to_array>:
    reference->next = reference->prev = NULL;
    return reference;
}

static cJSON_bool add_item_to_array(cJSON *array, cJSON *item)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b084      	sub	sp, #16
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
 8001704:	6039      	str	r1, [r7, #0]
    cJSON *child = NULL;
 8001706:	2300      	movs	r3, #0
 8001708:	60fb      	str	r3, [r7, #12]

    if ((item == NULL) || (array == NULL) || (array == item))
 800170a:	683b      	ldr	r3, [r7, #0]
 800170c:	2b00      	cmp	r3, #0
 800170e:	d006      	beq.n	800171e <add_item_to_array+0x22>
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	2b00      	cmp	r3, #0
 8001714:	d003      	beq.n	800171e <add_item_to_array+0x22>
 8001716:	687a      	ldr	r2, [r7, #4]
 8001718:	683b      	ldr	r3, [r7, #0]
 800171a:	429a      	cmp	r2, r3
 800171c:	d101      	bne.n	8001722 <add_item_to_array+0x26>
    {
        return false;
 800171e:	2300      	movs	r3, #0
 8001720:	e01e      	b.n	8001760 <add_item_to_array+0x64>
    }

    child = array->child;
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	689b      	ldr	r3, [r3, #8]
 8001726:	60fb      	str	r3, [r7, #12]
    /*
     * To find the last item in array quickly, we use prev in array
     */
    if (child == NULL)
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	2b00      	cmp	r3, #0
 800172c:	d109      	bne.n	8001742 <add_item_to_array+0x46>
    {
        /* list is empty, start new one */
        array->child = item;
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	683a      	ldr	r2, [r7, #0]
 8001732:	609a      	str	r2, [r3, #8]
        item->prev = item;
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	683a      	ldr	r2, [r7, #0]
 8001738:	605a      	str	r2, [r3, #4]
        item->next = NULL;
 800173a:	683b      	ldr	r3, [r7, #0]
 800173c:	2200      	movs	r2, #0
 800173e:	601a      	str	r2, [r3, #0]
 8001740:	e00d      	b.n	800175e <add_item_to_array+0x62>
    }
    else
    {
        /* append to the end */
        if (child->prev)
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	685b      	ldr	r3, [r3, #4]
 8001746:	2b00      	cmp	r3, #0
 8001748:	d009      	beq.n	800175e <add_item_to_array+0x62>
        {
            suffix_object(child->prev, item);
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	685b      	ldr	r3, [r3, #4]
 800174e:	6839      	ldr	r1, [r7, #0]
 8001750:	4618      	mov	r0, r3
 8001752:	f7ff ffc3 	bl	80016dc <suffix_object>
            array->child->prev = item;
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	689b      	ldr	r3, [r3, #8]
 800175a:	683a      	ldr	r2, [r7, #0]
 800175c:	605a      	str	r2, [r3, #4]
        }
    }

    return true;
 800175e:	2301      	movs	r3, #1
}
 8001760:	4618      	mov	r0, r3
 8001762:	3710      	adds	r7, #16
 8001764:	46bd      	mov	sp, r7
 8001766:	bd80      	pop	{r7, pc}

08001768 <cJSON_AddItemToArray>:

/* Add item to array/object. */
CJSON_PUBLIC(cJSON_bool) cJSON_AddItemToArray(cJSON *array, cJSON *item)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b082      	sub	sp, #8
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
 8001770:	6039      	str	r1, [r7, #0]
    return add_item_to_array(array, item);
 8001772:	6839      	ldr	r1, [r7, #0]
 8001774:	6878      	ldr	r0, [r7, #4]
 8001776:	f7ff ffc1 	bl	80016fc <add_item_to_array>
 800177a:	4603      	mov	r3, r0
}
 800177c:	4618      	mov	r0, r3
 800177e:	3708      	adds	r7, #8
 8001780:	46bd      	mov	sp, r7
 8001782:	bd80      	pop	{r7, pc}

08001784 <cast_away_const>:
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wcast-qual"
#endif
/* helper function to cast away const */
static void* cast_away_const(const void* string)
{
 8001784:	b480      	push	{r7}
 8001786:	b083      	sub	sp, #12
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
    return (void*)string;
 800178c:	687b      	ldr	r3, [r7, #4]
}
 800178e:	4618      	mov	r0, r3
 8001790:	370c      	adds	r7, #12
 8001792:	46bd      	mov	sp, r7
 8001794:	bc80      	pop	{r7}
 8001796:	4770      	bx	lr

08001798 <add_item_to_object>:
    #pragma GCC diagnostic pop
#endif


static cJSON_bool add_item_to_object(cJSON * const object, const char * const string, cJSON * const item, const internal_hooks * const hooks, const cJSON_bool constant_key)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b086      	sub	sp, #24
 800179c:	af00      	add	r7, sp, #0
 800179e:	60f8      	str	r0, [r7, #12]
 80017a0:	60b9      	str	r1, [r7, #8]
 80017a2:	607a      	str	r2, [r7, #4]
 80017a4:	603b      	str	r3, [r7, #0]
    char *new_key = NULL;
 80017a6:	2300      	movs	r3, #0
 80017a8:	617b      	str	r3, [r7, #20]
    int new_type = cJSON_Invalid;
 80017aa:	2300      	movs	r3, #0
 80017ac:	613b      	str	r3, [r7, #16]

    if ((object == NULL) || (string == NULL) || (item == NULL) || (object == item))
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d009      	beq.n	80017c8 <add_item_to_object+0x30>
 80017b4:	68bb      	ldr	r3, [r7, #8]
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d006      	beq.n	80017c8 <add_item_to_object+0x30>
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d003      	beq.n	80017c8 <add_item_to_object+0x30>
 80017c0:	68fa      	ldr	r2, [r7, #12]
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	429a      	cmp	r2, r3
 80017c6:	d101      	bne.n	80017cc <add_item_to_object+0x34>
    {
        return false;
 80017c8:	2300      	movs	r3, #0
 80017ca:	e036      	b.n	800183a <add_item_to_object+0xa2>
    }

    if (constant_key)
 80017cc:	6a3b      	ldr	r3, [r7, #32]
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d009      	beq.n	80017e6 <add_item_to_object+0x4e>
    {
        new_key = (char*)cast_away_const(string);
 80017d2:	68b8      	ldr	r0, [r7, #8]
 80017d4:	f7ff ffd6 	bl	8001784 <cast_away_const>
 80017d8:	6178      	str	r0, [r7, #20]
        new_type = item->type | cJSON_StringIsConst;
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	68db      	ldr	r3, [r3, #12]
 80017de:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80017e2:	613b      	str	r3, [r7, #16]
 80017e4:	e00e      	b.n	8001804 <add_item_to_object+0x6c>
    }
    else
    {
        new_key = (char*)cJSON_strdup((const unsigned char*)string, hooks);
 80017e6:	6839      	ldr	r1, [r7, #0]
 80017e8:	68b8      	ldr	r0, [r7, #8]
 80017ea:	f7ff f925 	bl	8000a38 <cJSON_strdup>
 80017ee:	6178      	str	r0, [r7, #20]
        if (new_key == NULL)
 80017f0:	697b      	ldr	r3, [r7, #20]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d101      	bne.n	80017fa <add_item_to_object+0x62>
        {
            return false;
 80017f6:	2300      	movs	r3, #0
 80017f8:	e01f      	b.n	800183a <add_item_to_object+0xa2>
        }

        new_type = item->type & ~cJSON_StringIsConst;
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	68db      	ldr	r3, [r3, #12]
 80017fe:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001802:	613b      	str	r3, [r7, #16]
    }

    if (!(item->type & cJSON_StringIsConst) && (item->string != NULL))
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	68db      	ldr	r3, [r3, #12]
 8001808:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800180c:	2b00      	cmp	r3, #0
 800180e:	d109      	bne.n	8001824 <add_item_to_object+0x8c>
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	6a1b      	ldr	r3, [r3, #32]
 8001814:	2b00      	cmp	r3, #0
 8001816:	d005      	beq.n	8001824 <add_item_to_object+0x8c>
    {
        hooks->deallocate(item->string);
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	685b      	ldr	r3, [r3, #4]
 800181c:	687a      	ldr	r2, [r7, #4]
 800181e:	6a12      	ldr	r2, [r2, #32]
 8001820:	4610      	mov	r0, r2
 8001822:	4798      	blx	r3
    }

    item->string = new_key;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	697a      	ldr	r2, [r7, #20]
 8001828:	621a      	str	r2, [r3, #32]
    item->type = new_type;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	693a      	ldr	r2, [r7, #16]
 800182e:	60da      	str	r2, [r3, #12]

    return add_item_to_array(object, item);
 8001830:	6879      	ldr	r1, [r7, #4]
 8001832:	68f8      	ldr	r0, [r7, #12]
 8001834:	f7ff ff62 	bl	80016fc <add_item_to_array>
 8001838:	4603      	mov	r3, r0
}
 800183a:	4618      	mov	r0, r3
 800183c:	3718      	adds	r7, #24
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}
	...

08001844 <cJSON_AddItemToObject>:

CJSON_PUBLIC(cJSON_bool) cJSON_AddItemToObject(cJSON *object, const char *string, cJSON *item)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b086      	sub	sp, #24
 8001848:	af02      	add	r7, sp, #8
 800184a:	60f8      	str	r0, [r7, #12]
 800184c:	60b9      	str	r1, [r7, #8]
 800184e:	607a      	str	r2, [r7, #4]
    return add_item_to_object(object, string, item, &global_hooks, false);
 8001850:	2300      	movs	r3, #0
 8001852:	9300      	str	r3, [sp, #0]
 8001854:	4b05      	ldr	r3, [pc, #20]	; (800186c <cJSON_AddItemToObject+0x28>)
 8001856:	687a      	ldr	r2, [r7, #4]
 8001858:	68b9      	ldr	r1, [r7, #8]
 800185a:	68f8      	ldr	r0, [r7, #12]
 800185c:	f7ff ff9c 	bl	8001798 <add_item_to_object>
 8001860:	4603      	mov	r3, r0
}
 8001862:	4618      	mov	r0, r3
 8001864:	3710      	adds	r7, #16
 8001866:	46bd      	mov	sp, r7
 8001868:	bd80      	pop	{r7, pc}
 800186a:	bf00      	nop
 800186c:	20000000 	.word	0x20000000

08001870 <cJSON_AddStringToObject>:
    cJSON_Delete(number_item);
    return NULL;
}

CJSON_PUBLIC(cJSON*) cJSON_AddStringToObject(cJSON * const object, const char * const name, const char * const string)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b088      	sub	sp, #32
 8001874:	af02      	add	r7, sp, #8
 8001876:	60f8      	str	r0, [r7, #12]
 8001878:	60b9      	str	r1, [r7, #8]
 800187a:	607a      	str	r2, [r7, #4]
    cJSON *string_item = cJSON_CreateString(string);
 800187c:	6878      	ldr	r0, [r7, #4]
 800187e:	f000 f819 	bl	80018b4 <cJSON_CreateString>
 8001882:	6178      	str	r0, [r7, #20]
    if (add_item_to_object(object, name, string_item, &global_hooks, false))
 8001884:	2300      	movs	r3, #0
 8001886:	9300      	str	r3, [sp, #0]
 8001888:	4b09      	ldr	r3, [pc, #36]	; (80018b0 <cJSON_AddStringToObject+0x40>)
 800188a:	697a      	ldr	r2, [r7, #20]
 800188c:	68b9      	ldr	r1, [r7, #8]
 800188e:	68f8      	ldr	r0, [r7, #12]
 8001890:	f7ff ff82 	bl	8001798 <add_item_to_object>
 8001894:	4603      	mov	r3, r0
 8001896:	2b00      	cmp	r3, #0
 8001898:	d001      	beq.n	800189e <cJSON_AddStringToObject+0x2e>
    {
        return string_item;
 800189a:	697b      	ldr	r3, [r7, #20]
 800189c:	e003      	b.n	80018a6 <cJSON_AddStringToObject+0x36>
    }

    cJSON_Delete(string_item);
 800189e:	6978      	ldr	r0, [r7, #20]
 80018a0:	f7ff f908 	bl	8000ab4 <cJSON_Delete>
    return NULL;
 80018a4:	2300      	movs	r3, #0
}
 80018a6:	4618      	mov	r0, r3
 80018a8:	3718      	adds	r7, #24
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}
 80018ae:	bf00      	nop
 80018b0:	20000000 	.word	0x20000000

080018b4 <cJSON_CreateString>:

    return item;
}

CJSON_PUBLIC(cJSON *) cJSON_CreateString(const char *string)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b084      	sub	sp, #16
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
    cJSON *item = cJSON_New_Item(&global_hooks);
 80018bc:	480f      	ldr	r0, [pc, #60]	; (80018fc <cJSON_CreateString+0x48>)
 80018be:	f7ff f8e3 	bl	8000a88 <cJSON_New_Item>
 80018c2:	60f8      	str	r0, [r7, #12]
    if(item)
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d012      	beq.n	80018f0 <cJSON_CreateString+0x3c>
    {
        item->type = cJSON_String;
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	2210      	movs	r2, #16
 80018ce:	60da      	str	r2, [r3, #12]
        item->valuestring = (char*)cJSON_strdup((const unsigned char*)string, &global_hooks);
 80018d0:	490a      	ldr	r1, [pc, #40]	; (80018fc <cJSON_CreateString+0x48>)
 80018d2:	6878      	ldr	r0, [r7, #4]
 80018d4:	f7ff f8b0 	bl	8000a38 <cJSON_strdup>
 80018d8:	4602      	mov	r2, r0
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	611a      	str	r2, [r3, #16]
        if(!item->valuestring)
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	691b      	ldr	r3, [r3, #16]
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d104      	bne.n	80018f0 <cJSON_CreateString+0x3c>
        {
            cJSON_Delete(item);
 80018e6:	68f8      	ldr	r0, [r7, #12]
 80018e8:	f7ff f8e4 	bl	8000ab4 <cJSON_Delete>
            return NULL;
 80018ec:	2300      	movs	r3, #0
 80018ee:	e000      	b.n	80018f2 <cJSON_CreateString+0x3e>
        }
    }

    return item;
 80018f0:	68fb      	ldr	r3, [r7, #12]
}
 80018f2:	4618      	mov	r0, r3
 80018f4:	3710      	adds	r7, #16
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}
 80018fa:	bf00      	nop
 80018fc:	20000000 	.word	0x20000000

08001900 <cJSON_CreateArray>:

    return item;
}

CJSON_PUBLIC(cJSON *) cJSON_CreateArray(void)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b082      	sub	sp, #8
 8001904:	af00      	add	r7, sp, #0
    cJSON *item = cJSON_New_Item(&global_hooks);
 8001906:	4807      	ldr	r0, [pc, #28]	; (8001924 <cJSON_CreateArray+0x24>)
 8001908:	f7ff f8be 	bl	8000a88 <cJSON_New_Item>
 800190c:	6078      	str	r0, [r7, #4]
    if(item)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	2b00      	cmp	r3, #0
 8001912:	d002      	beq.n	800191a <cJSON_CreateArray+0x1a>
    {
        item->type=cJSON_Array;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	2220      	movs	r2, #32
 8001918:	60da      	str	r2, [r3, #12]
    }

    return item;
 800191a:	687b      	ldr	r3, [r7, #4]
}
 800191c:	4618      	mov	r0, r3
 800191e:	3708      	adds	r7, #8
 8001920:	46bd      	mov	sp, r7
 8001922:	bd80      	pop	{r7, pc}
 8001924:	20000000 	.word	0x20000000

08001928 <cJSON_CreateObject>:

CJSON_PUBLIC(cJSON *) cJSON_CreateObject(void)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b082      	sub	sp, #8
 800192c:	af00      	add	r7, sp, #0
    cJSON *item = cJSON_New_Item(&global_hooks);
 800192e:	4807      	ldr	r0, [pc, #28]	; (800194c <cJSON_CreateObject+0x24>)
 8001930:	f7ff f8aa 	bl	8000a88 <cJSON_New_Item>
 8001934:	6078      	str	r0, [r7, #4]
    if (item)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	2b00      	cmp	r3, #0
 800193a:	d002      	beq.n	8001942 <cJSON_CreateObject+0x1a>
    {
        item->type = cJSON_Object;
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	2240      	movs	r2, #64	; 0x40
 8001940:	60da      	str	r2, [r3, #12]
    }

    return item;
 8001942:	687b      	ldr	r3, [r7, #4]
}
 8001944:	4618      	mov	r0, r3
 8001946:	3708      	adds	r7, #8
 8001948:	46bd      	mov	sp, r7
 800194a:	bd80      	pop	{r7, pc}
 800194c:	20000000 	.word	0x20000000

08001950 <cJSON_free>:
{
    return global_hooks.allocate(size);
}

CJSON_PUBLIC(void) cJSON_free(void *object)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b082      	sub	sp, #8
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
    global_hooks.deallocate(object);
 8001958:	4b03      	ldr	r3, [pc, #12]	; (8001968 <cJSON_free+0x18>)
 800195a:	685b      	ldr	r3, [r3, #4]
 800195c:	6878      	ldr	r0, [r7, #4]
 800195e:	4798      	blx	r3
}
 8001960:	bf00      	nop
 8001962:	3708      	adds	r7, #8
 8001964:	46bd      	mov	sp, r7
 8001966:	bd80      	pop	{r7, pc}
 8001968:	20000000 	.word	0x20000000

0800196c <SELECT>:
static uint8_t CardType;                                /* SD 타입 0:MMC, 1:SDC, 2:Block addressing */
static uint8_t PowerFlag = 0;                           /* Power 상태 Flag */

/* SPI Chip Select */
static void SELECT(void)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8001970:	2200      	movs	r2, #0
 8001972:	2110      	movs	r1, #16
 8001974:	4802      	ldr	r0, [pc, #8]	; (8001980 <SELECT+0x14>)
 8001976:	f002 feb5 	bl	80046e4 <HAL_GPIO_WritePin>
}
 800197a:	bf00      	nop
 800197c:	bd80      	pop	{r7, pc}
 800197e:	bf00      	nop
 8001980:	40010800 	.word	0x40010800

08001984 <DESELECT>:

/* SPI Chip Deselect */
static void DESELECT(void)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 8001988:	2201      	movs	r2, #1
 800198a:	2110      	movs	r1, #16
 800198c:	4802      	ldr	r0, [pc, #8]	; (8001998 <DESELECT+0x14>)
 800198e:	f002 fea9 	bl	80046e4 <HAL_GPIO_WritePin>
}
 8001992:	bf00      	nop
 8001994:	bd80      	pop	{r7, pc}
 8001996:	bf00      	nop
 8001998:	40010800 	.word	0x40010800

0800199c <SPI_TxByte>:

/* SPI 데이터 전송 */
static void SPI_TxByte(BYTE data)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b082      	sub	sp, #8
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	4603      	mov	r3, r0
 80019a4:	71fb      	strb	r3, [r7, #7]
  while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 80019a6:	bf00      	nop
 80019a8:	4808      	ldr	r0, [pc, #32]	; (80019cc <SPI_TxByte+0x30>)
 80019aa:	f004 fdd5 	bl	8006558 <HAL_SPI_GetState>
 80019ae:	4603      	mov	r3, r0
 80019b0:	2b01      	cmp	r3, #1
 80019b2:	d1f9      	bne.n	80019a8 <SPI_TxByte+0xc>
  HAL_SPI_Transmit(&hspi1, &data, 1, SPI_TIMEOUT);
 80019b4:	1df9      	adds	r1, r7, #7
 80019b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019ba:	2201      	movs	r2, #1
 80019bc:	4803      	ldr	r0, [pc, #12]	; (80019cc <SPI_TxByte+0x30>)
 80019be:	f004 faed 	bl	8005f9c <HAL_SPI_Transmit>
}
 80019c2:	bf00      	nop
 80019c4:	3708      	adds	r7, #8
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}
 80019ca:	bf00      	nop
 80019cc:	2000261c 	.word	0x2000261c

080019d0 <SPI_RxByte>:

/* SPI 데이터 송수신 리턴형 함수 */
static uint8_t SPI_RxByte(void)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b084      	sub	sp, #16
 80019d4:	af02      	add	r7, sp, #8
  uint8_t dummy, data;
  dummy = 0xFF;
 80019d6:	23ff      	movs	r3, #255	; 0xff
 80019d8:	71fb      	strb	r3, [r7, #7]
  data = 0;
 80019da:	2300      	movs	r3, #0
 80019dc:	71bb      	strb	r3, [r7, #6]

  while ((HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY));
 80019de:	bf00      	nop
 80019e0:	4809      	ldr	r0, [pc, #36]	; (8001a08 <SPI_RxByte+0x38>)
 80019e2:	f004 fdb9 	bl	8006558 <HAL_SPI_GetState>
 80019e6:	4603      	mov	r3, r0
 80019e8:	2b01      	cmp	r3, #1
 80019ea:	d1f9      	bne.n	80019e0 <SPI_RxByte+0x10>
  HAL_SPI_TransmitReceive(&hspi1, &dummy, &data, 1, SPI_TIMEOUT);
 80019ec:	1dba      	adds	r2, r7, #6
 80019ee:	1df9      	adds	r1, r7, #7
 80019f0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019f4:	9300      	str	r3, [sp, #0]
 80019f6:	2301      	movs	r3, #1
 80019f8:	4803      	ldr	r0, [pc, #12]	; (8001a08 <SPI_RxByte+0x38>)
 80019fa:	f004 fc0b 	bl	8006214 <HAL_SPI_TransmitReceive>

  return data;
 80019fe:	79bb      	ldrb	r3, [r7, #6]
}
 8001a00:	4618      	mov	r0, r3
 8001a02:	3708      	adds	r7, #8
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bd80      	pop	{r7, pc}
 8001a08:	2000261c 	.word	0x2000261c

08001a0c <SPI_RxBytePtr>:

/* SPI 데이터 송수신 포인터형 함수 */
static void SPI_RxBytePtr(uint8_t *buff)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b082      	sub	sp, #8
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
  *buff = SPI_RxByte();
 8001a14:	f7ff ffdc 	bl	80019d0 <SPI_RxByte>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	461a      	mov	r2, r3
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	701a      	strb	r2, [r3, #0]
}
 8001a20:	bf00      	nop
 8001a22:	3708      	adds	r7, #8
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bd80      	pop	{r7, pc}

08001a28 <SD_ReadyWait>:

/* SD카드 Ready 대기 */
static uint8_t SD_ReadyWait(void)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b082      	sub	sp, #8
 8001a2c:	af00      	add	r7, sp, #0
  uint8_t res;

  /* 500ms 카운터 준비 */
  Timer2 = 50;
 8001a2e:	4b0b      	ldr	r3, [pc, #44]	; (8001a5c <SD_ReadyWait+0x34>)
 8001a30:	2232      	movs	r2, #50	; 0x32
 8001a32:	701a      	strb	r2, [r3, #0]
  SPI_RxByte();
 8001a34:	f7ff ffcc 	bl	80019d0 <SPI_RxByte>

  do
  {
    /* 0xFF 값이 수신될 때 까지 SPI 통신 */
    res = SPI_RxByte();
 8001a38:	f7ff ffca 	bl	80019d0 <SPI_RxByte>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	71fb      	strb	r3, [r7, #7]
  } while ((res != 0xFF) && Timer2);
 8001a40:	79fb      	ldrb	r3, [r7, #7]
 8001a42:	2bff      	cmp	r3, #255	; 0xff
 8001a44:	d004      	beq.n	8001a50 <SD_ReadyWait+0x28>
 8001a46:	4b05      	ldr	r3, [pc, #20]	; (8001a5c <SD_ReadyWait+0x34>)
 8001a48:	781b      	ldrb	r3, [r3, #0]
 8001a4a:	b2db      	uxtb	r3, r3
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d1f3      	bne.n	8001a38 <SD_ReadyWait+0x10>

  return res;
 8001a50:	79fb      	ldrb	r3, [r7, #7]
}
 8001a52:	4618      	mov	r0, r3
 8001a54:	3708      	adds	r7, #8
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}
 8001a5a:	bf00      	nop
 8001a5c:	20002b98 	.word	0x20002b98

08001a60 <SD_PowerOn>:

/* 전원 켜기 */
static void SD_PowerOn(void)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b086      	sub	sp, #24
 8001a64:	af00      	add	r7, sp, #0
  uint8_t cmd_arg[6];
  uint32_t Count = 0x1FFF;
 8001a66:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8001a6a:	617b      	str	r3, [r7, #20]

  /* Deselect 상태에서 SPI 메시지를 전송하여 대기상태로 만든다. */
  DESELECT();
 8001a6c:	f7ff ff8a 	bl	8001984 <DESELECT>

  for(int i = 0; i < 10; i++)
 8001a70:	2300      	movs	r3, #0
 8001a72:	613b      	str	r3, [r7, #16]
 8001a74:	e005      	b.n	8001a82 <SD_PowerOn+0x22>
  {
    SPI_TxByte(0xFF);
 8001a76:	20ff      	movs	r0, #255	; 0xff
 8001a78:	f7ff ff90 	bl	800199c <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 8001a7c:	693b      	ldr	r3, [r7, #16]
 8001a7e:	3301      	adds	r3, #1
 8001a80:	613b      	str	r3, [r7, #16]
 8001a82:	693b      	ldr	r3, [r7, #16]
 8001a84:	2b09      	cmp	r3, #9
 8001a86:	ddf6      	ble.n	8001a76 <SD_PowerOn+0x16>
  }

  /* SPI Chips Select */
  SELECT();
 8001a88:	f7ff ff70 	bl	800196c <SELECT>

  /* 초기 GO_IDLE_STATE 상태 전환 */
  cmd_arg[0] = (CMD0 | 0x40);
 8001a8c:	2340      	movs	r3, #64	; 0x40
 8001a8e:	713b      	strb	r3, [r7, #4]
  cmd_arg[1] = 0;
 8001a90:	2300      	movs	r3, #0
 8001a92:	717b      	strb	r3, [r7, #5]
  cmd_arg[2] = 0;
 8001a94:	2300      	movs	r3, #0
 8001a96:	71bb      	strb	r3, [r7, #6]
  cmd_arg[3] = 0;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	71fb      	strb	r3, [r7, #7]
  cmd_arg[4] = 0;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	723b      	strb	r3, [r7, #8]
  cmd_arg[5] = 0x95;
 8001aa0:	2395      	movs	r3, #149	; 0x95
 8001aa2:	727b      	strb	r3, [r7, #9]

  /* 명령 전송 */
  for (int i = 0; i < 6; i++)
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	60fb      	str	r3, [r7, #12]
 8001aa8:	e009      	b.n	8001abe <SD_PowerOn+0x5e>
  {
    SPI_TxByte(cmd_arg[i]);
 8001aaa:	1d3a      	adds	r2, r7, #4
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	4413      	add	r3, r2
 8001ab0:	781b      	ldrb	r3, [r3, #0]
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	f7ff ff72 	bl	800199c <SPI_TxByte>
  for (int i = 0; i < 6; i++)
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	3301      	adds	r3, #1
 8001abc:	60fb      	str	r3, [r7, #12]
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	2b05      	cmp	r3, #5
 8001ac2:	ddf2      	ble.n	8001aaa <SD_PowerOn+0x4a>
  }

  /* 응답 대기 */
  while ((SPI_RxByte() != 0x01) && Count)
 8001ac4:	e002      	b.n	8001acc <SD_PowerOn+0x6c>
  {
    Count--;
 8001ac6:	697b      	ldr	r3, [r7, #20]
 8001ac8:	3b01      	subs	r3, #1
 8001aca:	617b      	str	r3, [r7, #20]
  while ((SPI_RxByte() != 0x01) && Count)
 8001acc:	f7ff ff80 	bl	80019d0 <SPI_RxByte>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	2b01      	cmp	r3, #1
 8001ad4:	d002      	beq.n	8001adc <SD_PowerOn+0x7c>
 8001ad6:	697b      	ldr	r3, [r7, #20]
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d1f4      	bne.n	8001ac6 <SD_PowerOn+0x66>
  }

  DESELECT();
 8001adc:	f7ff ff52 	bl	8001984 <DESELECT>
  SPI_TxByte(0XFF);
 8001ae0:	20ff      	movs	r0, #255	; 0xff
 8001ae2:	f7ff ff5b 	bl	800199c <SPI_TxByte>

  PowerFlag = 1;
 8001ae6:	4b03      	ldr	r3, [pc, #12]	; (8001af4 <SD_PowerOn+0x94>)
 8001ae8:	2201      	movs	r2, #1
 8001aea:	701a      	strb	r2, [r3, #0]
}
 8001aec:	bf00      	nop
 8001aee:	3718      	adds	r7, #24
 8001af0:	46bd      	mov	sp, r7
 8001af2:	bd80      	pop	{r7, pc}
 8001af4:	20000221 	.word	0x20000221

08001af8 <SD_PowerOff>:

/* 전원 끄기 */
static void SD_PowerOff(void)
{
 8001af8:	b480      	push	{r7}
 8001afa:	af00      	add	r7, sp, #0
  PowerFlag = 0;
 8001afc:	4b03      	ldr	r3, [pc, #12]	; (8001b0c <SD_PowerOff+0x14>)
 8001afe:	2200      	movs	r2, #0
 8001b00:	701a      	strb	r2, [r3, #0]
}
 8001b02:	bf00      	nop
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bc80      	pop	{r7}
 8001b08:	4770      	bx	lr
 8001b0a:	bf00      	nop
 8001b0c:	20000221 	.word	0x20000221

08001b10 <SD_CheckPower>:

/* 전원 상태 확인 */
static uint8_t SD_CheckPower(void)
{
 8001b10:	b480      	push	{r7}
 8001b12:	af00      	add	r7, sp, #0
  /*  0=off, 1=on */
  return PowerFlag;
 8001b14:	4b02      	ldr	r3, [pc, #8]	; (8001b20 <SD_CheckPower+0x10>)
 8001b16:	781b      	ldrb	r3, [r3, #0]
}
 8001b18:	4618      	mov	r0, r3
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bc80      	pop	{r7}
 8001b1e:	4770      	bx	lr
 8001b20:	20000221 	.word	0x20000221

08001b24 <SD_RxDataBlock>:

/* 데이터 패킷 수신 */
static bool SD_RxDataBlock(BYTE *buff, UINT btr)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b084      	sub	sp, #16
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
 8001b2c:	6039      	str	r1, [r7, #0]
  uint8_t token;

  /* 100ms 타이머 */
  Timer1 = 10;
 8001b2e:	4b17      	ldr	r3, [pc, #92]	; (8001b8c <SD_RxDataBlock+0x68>)
 8001b30:	220a      	movs	r2, #10
 8001b32:	701a      	strb	r2, [r3, #0]

  /* 응답 대기 */
  do
  {
    token = SPI_RxByte();
 8001b34:	f7ff ff4c 	bl	80019d0 <SPI_RxByte>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	73fb      	strb	r3, [r7, #15]
  } while((token == 0xFF) && Timer1);
 8001b3c:	7bfb      	ldrb	r3, [r7, #15]
 8001b3e:	2bff      	cmp	r3, #255	; 0xff
 8001b40:	d104      	bne.n	8001b4c <SD_RxDataBlock+0x28>
 8001b42:	4b12      	ldr	r3, [pc, #72]	; (8001b8c <SD_RxDataBlock+0x68>)
 8001b44:	781b      	ldrb	r3, [r3, #0]
 8001b46:	b2db      	uxtb	r3, r3
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d1f3      	bne.n	8001b34 <SD_RxDataBlock+0x10>

  /* 0xFE 이외 Token 수신 시 에러 처리 */
  if(token != 0xFE)
 8001b4c:	7bfb      	ldrb	r3, [r7, #15]
 8001b4e:	2bfe      	cmp	r3, #254	; 0xfe
 8001b50:	d001      	beq.n	8001b56 <SD_RxDataBlock+0x32>
    return FALSE;
 8001b52:	2300      	movs	r3, #0
 8001b54:	e016      	b.n	8001b84 <SD_RxDataBlock+0x60>

  /* 버퍼에 데이터 수신 */
  do
  {
    SPI_RxBytePtr(buff++);
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	1c5a      	adds	r2, r3, #1
 8001b5a:	607a      	str	r2, [r7, #4]
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	f7ff ff55 	bl	8001a0c <SPI_RxBytePtr>
    SPI_RxBytePtr(buff++);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	1c5a      	adds	r2, r3, #1
 8001b66:	607a      	str	r2, [r7, #4]
 8001b68:	4618      	mov	r0, r3
 8001b6a:	f7ff ff4f 	bl	8001a0c <SPI_RxBytePtr>
  } while(btr -= 2);
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	3b02      	subs	r3, #2
 8001b72:	603b      	str	r3, [r7, #0]
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d1ed      	bne.n	8001b56 <SD_RxDataBlock+0x32>

  SPI_RxByte(); /* CRC 무시 */
 8001b7a:	f7ff ff29 	bl	80019d0 <SPI_RxByte>
  SPI_RxByte();
 8001b7e:	f7ff ff27 	bl	80019d0 <SPI_RxByte>

  return TRUE;
 8001b82:	2301      	movs	r3, #1
}
 8001b84:	4618      	mov	r0, r3
 8001b86:	3710      	adds	r7, #16
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bd80      	pop	{r7, pc}
 8001b8c:	20002b99 	.word	0x20002b99

08001b90 <SD_TxDataBlock>:

/* 데이터 전송 패킷 */
#if _READONLY == 0
static bool SD_TxDataBlock(const BYTE *buff, BYTE token)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b084      	sub	sp, #16
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
 8001b98:	460b      	mov	r3, r1
 8001b9a:	70fb      	strb	r3, [r7, #3]
  uint8_t resp, wc;
  uint8_t i = 0;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	737b      	strb	r3, [r7, #13]

  /* SD카드 준비 대기 */
  if (SD_ReadyWait() != 0xFF)
 8001ba0:	f7ff ff42 	bl	8001a28 <SD_ReadyWait>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	2bff      	cmp	r3, #255	; 0xff
 8001ba8:	d001      	beq.n	8001bae <SD_TxDataBlock+0x1e>
    return FALSE;
 8001baa:	2300      	movs	r3, #0
 8001bac:	e040      	b.n	8001c30 <SD_TxDataBlock+0xa0>

  /* 토큰 전송 */
  SPI_TxByte(token);
 8001bae:	78fb      	ldrb	r3, [r7, #3]
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	f7ff fef3 	bl	800199c <SPI_TxByte>

  /* 데이터 토큰인 경우 */
  if (token != 0xFD)
 8001bb6:	78fb      	ldrb	r3, [r7, #3]
 8001bb8:	2bfd      	cmp	r3, #253	; 0xfd
 8001bba:	d031      	beq.n	8001c20 <SD_TxDataBlock+0x90>
  {
    wc = 0;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	73bb      	strb	r3, [r7, #14]

    /* 512 바이트 데이터 전송 */
    do
    {
      SPI_TxByte(*buff++);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	1c5a      	adds	r2, r3, #1
 8001bc4:	607a      	str	r2, [r7, #4]
 8001bc6:	781b      	ldrb	r3, [r3, #0]
 8001bc8:	4618      	mov	r0, r3
 8001bca:	f7ff fee7 	bl	800199c <SPI_TxByte>
      SPI_TxByte(*buff++);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	1c5a      	adds	r2, r3, #1
 8001bd2:	607a      	str	r2, [r7, #4]
 8001bd4:	781b      	ldrb	r3, [r3, #0]
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	f7ff fee0 	bl	800199c <SPI_TxByte>
    } while (--wc);
 8001bdc:	7bbb      	ldrb	r3, [r7, #14]
 8001bde:	3b01      	subs	r3, #1
 8001be0:	73bb      	strb	r3, [r7, #14]
 8001be2:	7bbb      	ldrb	r3, [r7, #14]
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d1eb      	bne.n	8001bc0 <SD_TxDataBlock+0x30>

    SPI_RxByte();       /* CRC 무시 */
 8001be8:	f7ff fef2 	bl	80019d0 <SPI_RxByte>
    SPI_RxByte();
 8001bec:	f7ff fef0 	bl	80019d0 <SPI_RxByte>

    /* 데이트 응답 수신 */
    while (i <= 64)
 8001bf0:	e00b      	b.n	8001c0a <SD_TxDataBlock+0x7a>
    {
      resp = SPI_RxByte();
 8001bf2:	f7ff feed 	bl	80019d0 <SPI_RxByte>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	73fb      	strb	r3, [r7, #15]

      /* 에러 응답 처리 */
      if ((resp & 0x1F) == 0x05)
 8001bfa:	7bfb      	ldrb	r3, [r7, #15]
 8001bfc:	f003 031f 	and.w	r3, r3, #31
 8001c00:	2b05      	cmp	r3, #5
 8001c02:	d006      	beq.n	8001c12 <SD_TxDataBlock+0x82>
        break;

      i++;
 8001c04:	7b7b      	ldrb	r3, [r7, #13]
 8001c06:	3301      	adds	r3, #1
 8001c08:	737b      	strb	r3, [r7, #13]
    while (i <= 64)
 8001c0a:	7b7b      	ldrb	r3, [r7, #13]
 8001c0c:	2b40      	cmp	r3, #64	; 0x40
 8001c0e:	d9f0      	bls.n	8001bf2 <SD_TxDataBlock+0x62>
 8001c10:	e000      	b.n	8001c14 <SD_TxDataBlock+0x84>
        break;
 8001c12:	bf00      	nop
    }

    /* SPI 수신 버퍼 Clear */
    while (SPI_RxByte() == 0);
 8001c14:	bf00      	nop
 8001c16:	f7ff fedb 	bl	80019d0 <SPI_RxByte>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d0fa      	beq.n	8001c16 <SD_TxDataBlock+0x86>
  }

  if ((resp & 0x1F) == 0x05)
 8001c20:	7bfb      	ldrb	r3, [r7, #15]
 8001c22:	f003 031f 	and.w	r3, r3, #31
 8001c26:	2b05      	cmp	r3, #5
 8001c28:	d101      	bne.n	8001c2e <SD_TxDataBlock+0x9e>
    return TRUE;
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	e000      	b.n	8001c30 <SD_TxDataBlock+0xa0>
  else
    return FALSE;
 8001c2e:	2300      	movs	r3, #0
}
 8001c30:	4618      	mov	r0, r3
 8001c32:	3710      	adds	r7, #16
 8001c34:	46bd      	mov	sp, r7
 8001c36:	bd80      	pop	{r7, pc}

08001c38 <SD_SendCmd>:
#endif /* _READONLY */

/* CMD 패킷 전송 */
static BYTE SD_SendCmd(BYTE cmd, DWORD arg)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b084      	sub	sp, #16
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	4603      	mov	r3, r0
 8001c40:	6039      	str	r1, [r7, #0]
 8001c42:	71fb      	strb	r3, [r7, #7]
  uint8_t crc, res;

  /* SD카드 대기 */
  if (SD_ReadyWait() != 0xFF)
 8001c44:	f7ff fef0 	bl	8001a28 <SD_ReadyWait>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	2bff      	cmp	r3, #255	; 0xff
 8001c4c:	d001      	beq.n	8001c52 <SD_SendCmd+0x1a>
    return 0xFF;
 8001c4e:	23ff      	movs	r3, #255	; 0xff
 8001c50:	e040      	b.n	8001cd4 <SD_SendCmd+0x9c>

  /* 명령 패킷 전송 */
  SPI_TxByte(cmd); 			/* Command */
 8001c52:	79fb      	ldrb	r3, [r7, #7]
 8001c54:	4618      	mov	r0, r3
 8001c56:	f7ff fea1 	bl	800199c <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 24)); 	/* Argument[31..24] */
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	0e1b      	lsrs	r3, r3, #24
 8001c5e:	b2db      	uxtb	r3, r3
 8001c60:	4618      	mov	r0, r3
 8001c62:	f7ff fe9b 	bl	800199c <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 16)); 	/* Argument[23..16] */
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	0c1b      	lsrs	r3, r3, #16
 8001c6a:	b2db      	uxtb	r3, r3
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	f7ff fe95 	bl	800199c <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 8)); 	/* Argument[15..8] */
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	0a1b      	lsrs	r3, r3, #8
 8001c76:	b2db      	uxtb	r3, r3
 8001c78:	4618      	mov	r0, r3
 8001c7a:	f7ff fe8f 	bl	800199c <SPI_TxByte>
  SPI_TxByte((BYTE) arg); 		/* Argument[7..0] */
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	b2db      	uxtb	r3, r3
 8001c82:	4618      	mov	r0, r3
 8001c84:	f7ff fe8a 	bl	800199c <SPI_TxByte>

  /* 명령별 CRC 준비 */
  crc = 0;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	73fb      	strb	r3, [r7, #15]
  if (cmd == CMD0)
 8001c8c:	79fb      	ldrb	r3, [r7, #7]
 8001c8e:	2b40      	cmp	r3, #64	; 0x40
 8001c90:	d101      	bne.n	8001c96 <SD_SendCmd+0x5e>
    crc = 0x95; /* CRC for CMD0(0) */
 8001c92:	2395      	movs	r3, #149	; 0x95
 8001c94:	73fb      	strb	r3, [r7, #15]

  if (cmd == CMD8)
 8001c96:	79fb      	ldrb	r3, [r7, #7]
 8001c98:	2b48      	cmp	r3, #72	; 0x48
 8001c9a:	d101      	bne.n	8001ca0 <SD_SendCmd+0x68>
    crc = 0x87; /* CRC for CMD8(0x1AA) */
 8001c9c:	2387      	movs	r3, #135	; 0x87
 8001c9e:	73fb      	strb	r3, [r7, #15]

  /* CRC 전송 */
  SPI_TxByte(crc);
 8001ca0:	7bfb      	ldrb	r3, [r7, #15]
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	f7ff fe7a 	bl	800199c <SPI_TxByte>

  /* CMD12 Stop Reading 명령인 경우에는 응답 바이트 하나를 버린다 */
  if (cmd == CMD12)
 8001ca8:	79fb      	ldrb	r3, [r7, #7]
 8001caa:	2b4c      	cmp	r3, #76	; 0x4c
 8001cac:	d101      	bne.n	8001cb2 <SD_SendCmd+0x7a>
    SPI_RxByte();
 8001cae:	f7ff fe8f 	bl	80019d0 <SPI_RxByte>

  /* 10회 내에 정상 데이터를 수신한다. */
  uint8_t n = 10;
 8001cb2:	230a      	movs	r3, #10
 8001cb4:	73bb      	strb	r3, [r7, #14]
  do
  {
    res = SPI_RxByte();
 8001cb6:	f7ff fe8b 	bl	80019d0 <SPI_RxByte>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	737b      	strb	r3, [r7, #13]
  } while ((res & 0x80) && --n);
 8001cbe:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	da05      	bge.n	8001cd2 <SD_SendCmd+0x9a>
 8001cc6:	7bbb      	ldrb	r3, [r7, #14]
 8001cc8:	3b01      	subs	r3, #1
 8001cca:	73bb      	strb	r3, [r7, #14]
 8001ccc:	7bbb      	ldrb	r3, [r7, #14]
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d1f1      	bne.n	8001cb6 <SD_SendCmd+0x7e>

  return res;
 8001cd2:	7b7b      	ldrb	r3, [r7, #13]
}
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	3710      	adds	r7, #16
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bd80      	pop	{r7, pc}

08001cdc <SD_disk_initialize>:
  user_diskio.c 파일에서 사용된다.
-----------------------------------------------------------------------*/

/* SD카드 초기화 */
DSTATUS SD_disk_initialize(BYTE drv)
{
 8001cdc:	b590      	push	{r4, r7, lr}
 8001cde:	b085      	sub	sp, #20
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	71fb      	strb	r3, [r7, #7]
  uint8_t n, type, ocr[4];

  /* 한종류의 드라이브만 지원 */
  if(drv)
 8001ce6:	79fb      	ldrb	r3, [r7, #7]
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d001      	beq.n	8001cf0 <SD_disk_initialize+0x14>
    return STA_NOINIT;
 8001cec:	2301      	movs	r3, #1
 8001cee:	e0d5      	b.n	8001e9c <SD_disk_initialize+0x1c0>

  /* SD카드 미삽입 */
  if(Stat & STA_NODISK)
 8001cf0:	4b6c      	ldr	r3, [pc, #432]	; (8001ea4 <SD_disk_initialize+0x1c8>)
 8001cf2:	781b      	ldrb	r3, [r3, #0]
 8001cf4:	b2db      	uxtb	r3, r3
 8001cf6:	f003 0302 	and.w	r3, r3, #2
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d003      	beq.n	8001d06 <SD_disk_initialize+0x2a>
    return Stat;
 8001cfe:	4b69      	ldr	r3, [pc, #420]	; (8001ea4 <SD_disk_initialize+0x1c8>)
 8001d00:	781b      	ldrb	r3, [r3, #0]
 8001d02:	b2db      	uxtb	r3, r3
 8001d04:	e0ca      	b.n	8001e9c <SD_disk_initialize+0x1c0>

  /* SD카드 Power On */
  SD_PowerOn();
 8001d06:	f7ff feab 	bl	8001a60 <SD_PowerOn>

  /* SPI 통신을 위해 Chip Select */
  SELECT();
 8001d0a:	f7ff fe2f 	bl	800196c <SELECT>

  /* SD카드 타입변수 초기화 */
  type = 0;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	73bb      	strb	r3, [r7, #14]

  /* Idle 상태 진입 */
  if (SD_SendCmd(CMD0, 0) == 1)
 8001d12:	2100      	movs	r1, #0
 8001d14:	2040      	movs	r0, #64	; 0x40
 8001d16:	f7ff ff8f 	bl	8001c38 <SD_SendCmd>
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	2b01      	cmp	r3, #1
 8001d1e:	f040 80a5 	bne.w	8001e6c <SD_disk_initialize+0x190>
  {
    /* 타이머 1초 설정 */
    Timer1 = 100;
 8001d22:	4b61      	ldr	r3, [pc, #388]	; (8001ea8 <SD_disk_initialize+0x1cc>)
 8001d24:	2264      	movs	r2, #100	; 0x64
 8001d26:	701a      	strb	r2, [r3, #0]

    /* SD 인터페이스 동작 조건 확인 */
    if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8001d28:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8001d2c:	2048      	movs	r0, #72	; 0x48
 8001d2e:	f7ff ff83 	bl	8001c38 <SD_SendCmd>
 8001d32:	4603      	mov	r3, r0
 8001d34:	2b01      	cmp	r3, #1
 8001d36:	d158      	bne.n	8001dea <SD_disk_initialize+0x10e>
    {
      /* SDC Ver2+ */
      for (n = 0; n < 4; n++)
 8001d38:	2300      	movs	r3, #0
 8001d3a:	73fb      	strb	r3, [r7, #15]
 8001d3c:	e00c      	b.n	8001d58 <SD_disk_initialize+0x7c>
      {
        ocr[n] = SPI_RxByte();
 8001d3e:	7bfc      	ldrb	r4, [r7, #15]
 8001d40:	f7ff fe46 	bl	80019d0 <SPI_RxByte>
 8001d44:	4603      	mov	r3, r0
 8001d46:	461a      	mov	r2, r3
 8001d48:	f107 0310 	add.w	r3, r7, #16
 8001d4c:	4423      	add	r3, r4
 8001d4e:	f803 2c08 	strb.w	r2, [r3, #-8]
      for (n = 0; n < 4; n++)
 8001d52:	7bfb      	ldrb	r3, [r7, #15]
 8001d54:	3301      	adds	r3, #1
 8001d56:	73fb      	strb	r3, [r7, #15]
 8001d58:	7bfb      	ldrb	r3, [r7, #15]
 8001d5a:	2b03      	cmp	r3, #3
 8001d5c:	d9ef      	bls.n	8001d3e <SD_disk_initialize+0x62>
      }

      if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8001d5e:	7abb      	ldrb	r3, [r7, #10]
 8001d60:	2b01      	cmp	r3, #1
 8001d62:	f040 8083 	bne.w	8001e6c <SD_disk_initialize+0x190>
 8001d66:	7afb      	ldrb	r3, [r7, #11]
 8001d68:	2baa      	cmp	r3, #170	; 0xaa
 8001d6a:	d17f      	bne.n	8001e6c <SD_disk_initialize+0x190>
      {
        /* 2.7-3.6V 전압범위 동작 */
        do {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0)
 8001d6c:	2100      	movs	r1, #0
 8001d6e:	2077      	movs	r0, #119	; 0x77
 8001d70:	f7ff ff62 	bl	8001c38 <SD_SendCmd>
 8001d74:	4603      	mov	r3, r0
 8001d76:	2b01      	cmp	r3, #1
 8001d78:	d807      	bhi.n	8001d8a <SD_disk_initialize+0xae>
 8001d7a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001d7e:	2069      	movs	r0, #105	; 0x69
 8001d80:	f7ff ff5a 	bl	8001c38 <SD_SendCmd>
 8001d84:	4603      	mov	r3, r0
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d005      	beq.n	8001d96 <SD_disk_initialize+0xba>
            break; /* ACMD41 with HCS bit */
        } while (Timer1);
 8001d8a:	4b47      	ldr	r3, [pc, #284]	; (8001ea8 <SD_disk_initialize+0x1cc>)
 8001d8c:	781b      	ldrb	r3, [r3, #0]
 8001d8e:	b2db      	uxtb	r3, r3
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d1eb      	bne.n	8001d6c <SD_disk_initialize+0x90>
 8001d94:	e000      	b.n	8001d98 <SD_disk_initialize+0xbc>
            break; /* ACMD41 with HCS bit */
 8001d96:	bf00      	nop

        if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8001d98:	4b43      	ldr	r3, [pc, #268]	; (8001ea8 <SD_disk_initialize+0x1cc>)
 8001d9a:	781b      	ldrb	r3, [r3, #0]
 8001d9c:	b2db      	uxtb	r3, r3
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d064      	beq.n	8001e6c <SD_disk_initialize+0x190>
 8001da2:	2100      	movs	r1, #0
 8001da4:	207a      	movs	r0, #122	; 0x7a
 8001da6:	f7ff ff47 	bl	8001c38 <SD_SendCmd>
 8001daa:	4603      	mov	r3, r0
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d15d      	bne.n	8001e6c <SD_disk_initialize+0x190>
        {
          /* Check CCS bit */
          for (n = 0; n < 4; n++)
 8001db0:	2300      	movs	r3, #0
 8001db2:	73fb      	strb	r3, [r7, #15]
 8001db4:	e00c      	b.n	8001dd0 <SD_disk_initialize+0xf4>
          {
            ocr[n] = SPI_RxByte();
 8001db6:	7bfc      	ldrb	r4, [r7, #15]
 8001db8:	f7ff fe0a 	bl	80019d0 <SPI_RxByte>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	461a      	mov	r2, r3
 8001dc0:	f107 0310 	add.w	r3, r7, #16
 8001dc4:	4423      	add	r3, r4
 8001dc6:	f803 2c08 	strb.w	r2, [r3, #-8]
          for (n = 0; n < 4; n++)
 8001dca:	7bfb      	ldrb	r3, [r7, #15]
 8001dcc:	3301      	adds	r3, #1
 8001dce:	73fb      	strb	r3, [r7, #15]
 8001dd0:	7bfb      	ldrb	r3, [r7, #15]
 8001dd2:	2b03      	cmp	r3, #3
 8001dd4:	d9ef      	bls.n	8001db6 <SD_disk_initialize+0xda>
          }

          type = (ocr[0] & 0x40) ? 6 : 2;
 8001dd6:	7a3b      	ldrb	r3, [r7, #8]
 8001dd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d001      	beq.n	8001de4 <SD_disk_initialize+0x108>
 8001de0:	2306      	movs	r3, #6
 8001de2:	e000      	b.n	8001de6 <SD_disk_initialize+0x10a>
 8001de4:	2302      	movs	r3, #2
 8001de6:	73bb      	strb	r3, [r7, #14]
 8001de8:	e040      	b.n	8001e6c <SD_disk_initialize+0x190>
      }
    }
    else
    {
      /* SDC Ver1 or MMC */
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? 2 : 1; /* SDC : MMC */
 8001dea:	2100      	movs	r1, #0
 8001dec:	2077      	movs	r0, #119	; 0x77
 8001dee:	f7ff ff23 	bl	8001c38 <SD_SendCmd>
 8001df2:	4603      	mov	r3, r0
 8001df4:	2b01      	cmp	r3, #1
 8001df6:	d808      	bhi.n	8001e0a <SD_disk_initialize+0x12e>
 8001df8:	2100      	movs	r1, #0
 8001dfa:	2069      	movs	r0, #105	; 0x69
 8001dfc:	f7ff ff1c 	bl	8001c38 <SD_SendCmd>
 8001e00:	4603      	mov	r3, r0
 8001e02:	2b01      	cmp	r3, #1
 8001e04:	d801      	bhi.n	8001e0a <SD_disk_initialize+0x12e>
 8001e06:	2302      	movs	r3, #2
 8001e08:	e000      	b.n	8001e0c <SD_disk_initialize+0x130>
 8001e0a:	2301      	movs	r3, #1
 8001e0c:	73bb      	strb	r3, [r7, #14]

      do {
        if (type == 2)
 8001e0e:	7bbb      	ldrb	r3, [r7, #14]
 8001e10:	2b02      	cmp	r3, #2
 8001e12:	d10e      	bne.n	8001e32 <SD_disk_initialize+0x156>
        {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0)
 8001e14:	2100      	movs	r1, #0
 8001e16:	2077      	movs	r0, #119	; 0x77
 8001e18:	f7ff ff0e 	bl	8001c38 <SD_SendCmd>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	2b01      	cmp	r3, #1
 8001e20:	d80e      	bhi.n	8001e40 <SD_disk_initialize+0x164>
 8001e22:	2100      	movs	r1, #0
 8001e24:	2069      	movs	r0, #105	; 0x69
 8001e26:	f7ff ff07 	bl	8001c38 <SD_SendCmd>
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d107      	bne.n	8001e40 <SD_disk_initialize+0x164>
            break; /* ACMD41 */
 8001e30:	e00d      	b.n	8001e4e <SD_disk_initialize+0x172>
        }
        else
        {
          if (SD_SendCmd(CMD1, 0) == 0)
 8001e32:	2100      	movs	r1, #0
 8001e34:	2041      	movs	r0, #65	; 0x41
 8001e36:	f7ff feff 	bl	8001c38 <SD_SendCmd>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d005      	beq.n	8001e4c <SD_disk_initialize+0x170>
            break; /* CMD1 */
        }
      } while (Timer1);
 8001e40:	4b19      	ldr	r3, [pc, #100]	; (8001ea8 <SD_disk_initialize+0x1cc>)
 8001e42:	781b      	ldrb	r3, [r3, #0]
 8001e44:	b2db      	uxtb	r3, r3
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d1e1      	bne.n	8001e0e <SD_disk_initialize+0x132>
 8001e4a:	e000      	b.n	8001e4e <SD_disk_initialize+0x172>
            break; /* CMD1 */
 8001e4c:	bf00      	nop

      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0)
 8001e4e:	4b16      	ldr	r3, [pc, #88]	; (8001ea8 <SD_disk_initialize+0x1cc>)
 8001e50:	781b      	ldrb	r3, [r3, #0]
 8001e52:	b2db      	uxtb	r3, r3
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d007      	beq.n	8001e68 <SD_disk_initialize+0x18c>
 8001e58:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001e5c:	2050      	movs	r0, #80	; 0x50
 8001e5e:	f7ff feeb 	bl	8001c38 <SD_SendCmd>
 8001e62:	4603      	mov	r3, r0
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d001      	beq.n	8001e6c <SD_disk_initialize+0x190>
      {
        /* 블럭 길이 선택 */
        type = 0;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	73bb      	strb	r3, [r7, #14]
      }
    }
  }

  CardType = type;
 8001e6c:	4a0f      	ldr	r2, [pc, #60]	; (8001eac <SD_disk_initialize+0x1d0>)
 8001e6e:	7bbb      	ldrb	r3, [r7, #14]
 8001e70:	7013      	strb	r3, [r2, #0]

  DESELECT();
 8001e72:	f7ff fd87 	bl	8001984 <DESELECT>

  SPI_RxByte(); /* Idle 상태 전환 (Release DO) */
 8001e76:	f7ff fdab 	bl	80019d0 <SPI_RxByte>

  if (type)
 8001e7a:	7bbb      	ldrb	r3, [r7, #14]
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d008      	beq.n	8001e92 <SD_disk_initialize+0x1b6>
  {
    /* Clear STA_NOINIT */
    Stat &= ~STA_NOINIT;
 8001e80:	4b08      	ldr	r3, [pc, #32]	; (8001ea4 <SD_disk_initialize+0x1c8>)
 8001e82:	781b      	ldrb	r3, [r3, #0]
 8001e84:	b2db      	uxtb	r3, r3
 8001e86:	f023 0301 	bic.w	r3, r3, #1
 8001e8a:	b2da      	uxtb	r2, r3
 8001e8c:	4b05      	ldr	r3, [pc, #20]	; (8001ea4 <SD_disk_initialize+0x1c8>)
 8001e8e:	701a      	strb	r2, [r3, #0]
 8001e90:	e001      	b.n	8001e96 <SD_disk_initialize+0x1ba>
  }
  else
  {
    /* Initialization failed */
    SD_PowerOff();
 8001e92:	f7ff fe31 	bl	8001af8 <SD_PowerOff>
  }

  return Stat;
 8001e96:	4b03      	ldr	r3, [pc, #12]	; (8001ea4 <SD_disk_initialize+0x1c8>)
 8001e98:	781b      	ldrb	r3, [r3, #0]
 8001e9a:	b2db      	uxtb	r3, r3
}
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	3714      	adds	r7, #20
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bd90      	pop	{r4, r7, pc}
 8001ea4:	2000000c 	.word	0x2000000c
 8001ea8:	20002b99 	.word	0x20002b99
 8001eac:	20000220 	.word	0x20000220

08001eb0 <SD_disk_status>:

/* 디스크 상태 확인 */
DSTATUS SD_disk_status(BYTE drv)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	b083      	sub	sp, #12
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	71fb      	strb	r3, [r7, #7]
  if (drv)
 8001eba:	79fb      	ldrb	r3, [r7, #7]
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d001      	beq.n	8001ec4 <SD_disk_status+0x14>
    return STA_NOINIT;
 8001ec0:	2301      	movs	r3, #1
 8001ec2:	e002      	b.n	8001eca <SD_disk_status+0x1a>

  return Stat;
 8001ec4:	4b03      	ldr	r3, [pc, #12]	; (8001ed4 <SD_disk_status+0x24>)
 8001ec6:	781b      	ldrb	r3, [r3, #0]
 8001ec8:	b2db      	uxtb	r3, r3
}
 8001eca:	4618      	mov	r0, r3
 8001ecc:	370c      	adds	r7, #12
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bc80      	pop	{r7}
 8001ed2:	4770      	bx	lr
 8001ed4:	2000000c 	.word	0x2000000c

08001ed8 <SD_disk_read>:

/* 섹터 읽기 */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b084      	sub	sp, #16
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	60b9      	str	r1, [r7, #8]
 8001ee0:	607a      	str	r2, [r7, #4]
 8001ee2:	603b      	str	r3, [r7, #0]
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 8001ee8:	7bfb      	ldrb	r3, [r7, #15]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d102      	bne.n	8001ef4 <SD_disk_read+0x1c>
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d101      	bne.n	8001ef8 <SD_disk_read+0x20>
    return RES_PARERR;
 8001ef4:	2304      	movs	r3, #4
 8001ef6:	e051      	b.n	8001f9c <SD_disk_read+0xc4>

  if (Stat & STA_NOINIT)
 8001ef8:	4b2a      	ldr	r3, [pc, #168]	; (8001fa4 <SD_disk_read+0xcc>)
 8001efa:	781b      	ldrb	r3, [r3, #0]
 8001efc:	b2db      	uxtb	r3, r3
 8001efe:	f003 0301 	and.w	r3, r3, #1
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d001      	beq.n	8001f0a <SD_disk_read+0x32>
    return RES_NOTRDY;
 8001f06:	2303      	movs	r3, #3
 8001f08:	e048      	b.n	8001f9c <SD_disk_read+0xc4>

  if (!(CardType & 4))
 8001f0a:	4b27      	ldr	r3, [pc, #156]	; (8001fa8 <SD_disk_read+0xd0>)
 8001f0c:	781b      	ldrb	r3, [r3, #0]
 8001f0e:	f003 0304 	and.w	r3, r3, #4
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d102      	bne.n	8001f1c <SD_disk_read+0x44>
    sector *= 512;      /* 지정 sector를 Byte addressing 단위로 변경 */
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	025b      	lsls	r3, r3, #9
 8001f1a:	607b      	str	r3, [r7, #4]

  SELECT();
 8001f1c:	f7ff fd26 	bl	800196c <SELECT>

  if (count == 1)
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	2b01      	cmp	r3, #1
 8001f24:	d111      	bne.n	8001f4a <SD_disk_read+0x72>
  {
    /* 싱글 블록 읽기 */
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512))
 8001f26:	6879      	ldr	r1, [r7, #4]
 8001f28:	2051      	movs	r0, #81	; 0x51
 8001f2a:	f7ff fe85 	bl	8001c38 <SD_SendCmd>
 8001f2e:	4603      	mov	r3, r0
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d129      	bne.n	8001f88 <SD_disk_read+0xb0>
 8001f34:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001f38:	68b8      	ldr	r0, [r7, #8]
 8001f3a:	f7ff fdf3 	bl	8001b24 <SD_RxDataBlock>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d021      	beq.n	8001f88 <SD_disk_read+0xb0>
      count = 0;
 8001f44:	2300      	movs	r3, #0
 8001f46:	603b      	str	r3, [r7, #0]
 8001f48:	e01e      	b.n	8001f88 <SD_disk_read+0xb0>
  }
  else
  {
    /* 다중 블록 읽기 */
    if (SD_SendCmd(CMD18, sector) == 0)
 8001f4a:	6879      	ldr	r1, [r7, #4]
 8001f4c:	2052      	movs	r0, #82	; 0x52
 8001f4e:	f7ff fe73 	bl	8001c38 <SD_SendCmd>
 8001f52:	4603      	mov	r3, r0
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d117      	bne.n	8001f88 <SD_disk_read+0xb0>
    {
      do {
        if (!SD_RxDataBlock(buff, 512))
 8001f58:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001f5c:	68b8      	ldr	r0, [r7, #8]
 8001f5e:	f7ff fde1 	bl	8001b24 <SD_RxDataBlock>
 8001f62:	4603      	mov	r3, r0
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d00a      	beq.n	8001f7e <SD_disk_read+0xa6>
          break;

        buff += 512;
 8001f68:	68bb      	ldr	r3, [r7, #8]
 8001f6a:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001f6e:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	3b01      	subs	r3, #1
 8001f74:	603b      	str	r3, [r7, #0]
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d1ed      	bne.n	8001f58 <SD_disk_read+0x80>
 8001f7c:	e000      	b.n	8001f80 <SD_disk_read+0xa8>
          break;
 8001f7e:	bf00      	nop

      /* STOP_TRANSMISSION, 모든 블럭을 다 읽은 후, 전송 중지 요청 */
      SD_SendCmd(CMD12, 0);
 8001f80:	2100      	movs	r1, #0
 8001f82:	204c      	movs	r0, #76	; 0x4c
 8001f84:	f7ff fe58 	bl	8001c38 <SD_SendCmd>
    }
  }

  DESELECT();
 8001f88:	f7ff fcfc 	bl	8001984 <DESELECT>
  SPI_RxByte(); /* Idle 상태(Release DO) */
 8001f8c:	f7ff fd20 	bl	80019d0 <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	bf14      	ite	ne
 8001f96:	2301      	movne	r3, #1
 8001f98:	2300      	moveq	r3, #0
 8001f9a:	b2db      	uxtb	r3, r3
}
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	3710      	adds	r7, #16
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	bd80      	pop	{r7, pc}
 8001fa4:	2000000c 	.word	0x2000000c
 8001fa8:	20000220 	.word	0x20000220

08001fac <SD_disk_write>:

/* 섹터 쓰기 */
#if _READONLY == 0
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b084      	sub	sp, #16
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	60b9      	str	r1, [r7, #8]
 8001fb4:	607a      	str	r2, [r7, #4]
 8001fb6:	603b      	str	r3, [r7, #0]
 8001fb8:	4603      	mov	r3, r0
 8001fba:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 8001fbc:	7bfb      	ldrb	r3, [r7, #15]
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d102      	bne.n	8001fc8 <SD_disk_write+0x1c>
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d101      	bne.n	8001fcc <SD_disk_write+0x20>
    return RES_PARERR;
 8001fc8:	2304      	movs	r3, #4
 8001fca:	e06b      	b.n	80020a4 <SD_disk_write+0xf8>

  if (Stat & STA_NOINIT)
 8001fcc:	4b37      	ldr	r3, [pc, #220]	; (80020ac <SD_disk_write+0x100>)
 8001fce:	781b      	ldrb	r3, [r3, #0]
 8001fd0:	b2db      	uxtb	r3, r3
 8001fd2:	f003 0301 	and.w	r3, r3, #1
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d001      	beq.n	8001fde <SD_disk_write+0x32>
    return RES_NOTRDY;
 8001fda:	2303      	movs	r3, #3
 8001fdc:	e062      	b.n	80020a4 <SD_disk_write+0xf8>

  if (Stat & STA_PROTECT)
 8001fde:	4b33      	ldr	r3, [pc, #204]	; (80020ac <SD_disk_write+0x100>)
 8001fe0:	781b      	ldrb	r3, [r3, #0]
 8001fe2:	b2db      	uxtb	r3, r3
 8001fe4:	f003 0304 	and.w	r3, r3, #4
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d001      	beq.n	8001ff0 <SD_disk_write+0x44>
    return RES_WRPRT;
 8001fec:	2302      	movs	r3, #2
 8001fee:	e059      	b.n	80020a4 <SD_disk_write+0xf8>

  if (!(CardType & 4))
 8001ff0:	4b2f      	ldr	r3, [pc, #188]	; (80020b0 <SD_disk_write+0x104>)
 8001ff2:	781b      	ldrb	r3, [r3, #0]
 8001ff4:	f003 0304 	and.w	r3, r3, #4
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d102      	bne.n	8002002 <SD_disk_write+0x56>
    sector *= 512; /* 지정 sector를 Byte addressing 단위로 변경 */
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	025b      	lsls	r3, r3, #9
 8002000:	607b      	str	r3, [r7, #4]

  SELECT();
 8002002:	f7ff fcb3 	bl	800196c <SELECT>

  if (count == 1)
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	2b01      	cmp	r3, #1
 800200a:	d110      	bne.n	800202e <SD_disk_write+0x82>
  {
    /* 싱글 블록 쓰기 */
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 800200c:	6879      	ldr	r1, [r7, #4]
 800200e:	2058      	movs	r0, #88	; 0x58
 8002010:	f7ff fe12 	bl	8001c38 <SD_SendCmd>
 8002014:	4603      	mov	r3, r0
 8002016:	2b00      	cmp	r3, #0
 8002018:	d13a      	bne.n	8002090 <SD_disk_write+0xe4>
 800201a:	21fe      	movs	r1, #254	; 0xfe
 800201c:	68b8      	ldr	r0, [r7, #8]
 800201e:	f7ff fdb7 	bl	8001b90 <SD_TxDataBlock>
 8002022:	4603      	mov	r3, r0
 8002024:	2b00      	cmp	r3, #0
 8002026:	d033      	beq.n	8002090 <SD_disk_write+0xe4>
      count = 0;
 8002028:	2300      	movs	r3, #0
 800202a:	603b      	str	r3, [r7, #0]
 800202c:	e030      	b.n	8002090 <SD_disk_write+0xe4>
  }
  else
  {
    /* 다중 블록 쓰기 */
    if (CardType & 2)
 800202e:	4b20      	ldr	r3, [pc, #128]	; (80020b0 <SD_disk_write+0x104>)
 8002030:	781b      	ldrb	r3, [r3, #0]
 8002032:	f003 0302 	and.w	r3, r3, #2
 8002036:	2b00      	cmp	r3, #0
 8002038:	d007      	beq.n	800204a <SD_disk_write+0x9e>
    {
      SD_SendCmd(CMD55, 0);
 800203a:	2100      	movs	r1, #0
 800203c:	2077      	movs	r0, #119	; 0x77
 800203e:	f7ff fdfb 	bl	8001c38 <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 8002042:	6839      	ldr	r1, [r7, #0]
 8002044:	2057      	movs	r0, #87	; 0x57
 8002046:	f7ff fdf7 	bl	8001c38 <SD_SendCmd>
    }

    if (SD_SendCmd(CMD25, sector) == 0)
 800204a:	6879      	ldr	r1, [r7, #4]
 800204c:	2059      	movs	r0, #89	; 0x59
 800204e:	f7ff fdf3 	bl	8001c38 <SD_SendCmd>
 8002052:	4603      	mov	r3, r0
 8002054:	2b00      	cmp	r3, #0
 8002056:	d11b      	bne.n	8002090 <SD_disk_write+0xe4>
    {
      do {
        if(!SD_TxDataBlock(buff, 0xFC))
 8002058:	21fc      	movs	r1, #252	; 0xfc
 800205a:	68b8      	ldr	r0, [r7, #8]
 800205c:	f7ff fd98 	bl	8001b90 <SD_TxDataBlock>
 8002060:	4603      	mov	r3, r0
 8002062:	2b00      	cmp	r3, #0
 8002064:	d00a      	beq.n	800207c <SD_disk_write+0xd0>
          break;

        buff += 512;
 8002066:	68bb      	ldr	r3, [r7, #8]
 8002068:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800206c:	60bb      	str	r3, [r7, #8]
      } while (--count);
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	3b01      	subs	r3, #1
 8002072:	603b      	str	r3, [r7, #0]
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	2b00      	cmp	r3, #0
 8002078:	d1ee      	bne.n	8002058 <SD_disk_write+0xac>
 800207a:	e000      	b.n	800207e <SD_disk_write+0xd2>
          break;
 800207c:	bf00      	nop

      if(!SD_TxDataBlock(0, 0xFD))
 800207e:	21fd      	movs	r1, #253	; 0xfd
 8002080:	2000      	movs	r0, #0
 8002082:	f7ff fd85 	bl	8001b90 <SD_TxDataBlock>
 8002086:	4603      	mov	r3, r0
 8002088:	2b00      	cmp	r3, #0
 800208a:	d101      	bne.n	8002090 <SD_disk_write+0xe4>
      {
        count = 1;
 800208c:	2301      	movs	r3, #1
 800208e:	603b      	str	r3, [r7, #0]
      }
    }
  }

  DESELECT();
 8002090:	f7ff fc78 	bl	8001984 <DESELECT>
  SPI_RxByte();
 8002094:	f7ff fc9c 	bl	80019d0 <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	2b00      	cmp	r3, #0
 800209c:	bf14      	ite	ne
 800209e:	2301      	movne	r3, #1
 80020a0:	2300      	moveq	r3, #0
 80020a2:	b2db      	uxtb	r3, r3
}
 80020a4:	4618      	mov	r0, r3
 80020a6:	3710      	adds	r7, #16
 80020a8:	46bd      	mov	sp, r7
 80020aa:	bd80      	pop	{r7, pc}
 80020ac:	2000000c 	.word	0x2000000c
 80020b0:	20000220 	.word	0x20000220

080020b4 <SD_disk_ioctl>:
#endif /* _READONLY */

/* 기타 함수 */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 80020b4:	b590      	push	{r4, r7, lr}
 80020b6:	b08b      	sub	sp, #44	; 0x2c
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	4603      	mov	r3, r0
 80020bc:	603a      	str	r2, [r7, #0]
 80020be:	71fb      	strb	r3, [r7, #7]
 80020c0:	460b      	mov	r3, r1
 80020c2:	71bb      	strb	r3, [r7, #6]
  DRESULT res;
  BYTE n, csd[16], *ptr = buff;
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	623b      	str	r3, [r7, #32]
  WORD csize;

  if (drv)
 80020c8:	79fb      	ldrb	r3, [r7, #7]
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d001      	beq.n	80020d2 <SD_disk_ioctl+0x1e>
    return RES_PARERR;
 80020ce:	2304      	movs	r3, #4
 80020d0:	e117      	b.n	8002302 <SD_disk_ioctl+0x24e>

  res = RES_ERROR;
 80020d2:	2301      	movs	r3, #1
 80020d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  if (ctrl == CTRL_POWER)
 80020d8:	79bb      	ldrb	r3, [r7, #6]
 80020da:	2b05      	cmp	r3, #5
 80020dc:	d126      	bne.n	800212c <SD_disk_ioctl+0x78>
  {
    switch (*ptr)
 80020de:	6a3b      	ldr	r3, [r7, #32]
 80020e0:	781b      	ldrb	r3, [r3, #0]
 80020e2:	2b01      	cmp	r3, #1
 80020e4:	d00e      	beq.n	8002104 <SD_disk_ioctl+0x50>
 80020e6:	2b02      	cmp	r3, #2
 80020e8:	d012      	beq.n	8002110 <SD_disk_ioctl+0x5c>
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d11a      	bne.n	8002124 <SD_disk_ioctl+0x70>
    {
    case 0:
      if (SD_CheckPower())
 80020ee:	f7ff fd0f 	bl	8001b10 <SD_CheckPower>
 80020f2:	4603      	mov	r3, r0
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d001      	beq.n	80020fc <SD_disk_ioctl+0x48>
        SD_PowerOff();          /* Power Off */
 80020f8:	f7ff fcfe 	bl	8001af8 <SD_PowerOff>
      res = RES_OK;
 80020fc:	2300      	movs	r3, #0
 80020fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8002102:	e0fc      	b.n	80022fe <SD_disk_ioctl+0x24a>
    case 1:
      SD_PowerOn();             /* Power On */
 8002104:	f7ff fcac 	bl	8001a60 <SD_PowerOn>
      res = RES_OK;
 8002108:	2300      	movs	r3, #0
 800210a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 800210e:	e0f6      	b.n	80022fe <SD_disk_ioctl+0x24a>
    case 2:
      *(ptr + 1) = (BYTE) SD_CheckPower();
 8002110:	6a3b      	ldr	r3, [r7, #32]
 8002112:	1c5c      	adds	r4, r3, #1
 8002114:	f7ff fcfc 	bl	8001b10 <SD_CheckPower>
 8002118:	4603      	mov	r3, r0
 800211a:	7023      	strb	r3, [r4, #0]
      res = RES_OK;             /* Power Check */
 800211c:	2300      	movs	r3, #0
 800211e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8002122:	e0ec      	b.n	80022fe <SD_disk_ioctl+0x24a>
    default:
      res = RES_PARERR;
 8002124:	2304      	movs	r3, #4
 8002126:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800212a:	e0e8      	b.n	80022fe <SD_disk_ioctl+0x24a>
    }
  }
  else
  {
    if (Stat & STA_NOINIT)
 800212c:	4b77      	ldr	r3, [pc, #476]	; (800230c <SD_disk_ioctl+0x258>)
 800212e:	781b      	ldrb	r3, [r3, #0]
 8002130:	b2db      	uxtb	r3, r3
 8002132:	f003 0301 	and.w	r3, r3, #1
 8002136:	2b00      	cmp	r3, #0
 8002138:	d001      	beq.n	800213e <SD_disk_ioctl+0x8a>
      return RES_NOTRDY;
 800213a:	2303      	movs	r3, #3
 800213c:	e0e1      	b.n	8002302 <SD_disk_ioctl+0x24e>

    SELECT();
 800213e:	f7ff fc15 	bl	800196c <SELECT>

    switch (ctrl)
 8002142:	79bb      	ldrb	r3, [r7, #6]
 8002144:	2b0d      	cmp	r3, #13
 8002146:	f200 80cb 	bhi.w	80022e0 <SD_disk_ioctl+0x22c>
 800214a:	a201      	add	r2, pc, #4	; (adr r2, 8002150 <SD_disk_ioctl+0x9c>)
 800214c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002150:	0800224b 	.word	0x0800224b
 8002154:	08002189 	.word	0x08002189
 8002158:	0800223b 	.word	0x0800223b
 800215c:	080022e1 	.word	0x080022e1
 8002160:	080022e1 	.word	0x080022e1
 8002164:	080022e1 	.word	0x080022e1
 8002168:	080022e1 	.word	0x080022e1
 800216c:	080022e1 	.word	0x080022e1
 8002170:	080022e1 	.word	0x080022e1
 8002174:	080022e1 	.word	0x080022e1
 8002178:	080022e1 	.word	0x080022e1
 800217c:	0800225d 	.word	0x0800225d
 8002180:	08002281 	.word	0x08002281
 8002184:	080022a5 	.word	0x080022a5
    {
    case GET_SECTOR_COUNT:
      /* SD카드 내 Sector의 개수 (DWORD) */
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8002188:	2100      	movs	r1, #0
 800218a:	2049      	movs	r0, #73	; 0x49
 800218c:	f7ff fd54 	bl	8001c38 <SD_SendCmd>
 8002190:	4603      	mov	r3, r0
 8002192:	2b00      	cmp	r3, #0
 8002194:	f040 80a8 	bne.w	80022e8 <SD_disk_ioctl+0x234>
 8002198:	f107 030c 	add.w	r3, r7, #12
 800219c:	2110      	movs	r1, #16
 800219e:	4618      	mov	r0, r3
 80021a0:	f7ff fcc0 	bl	8001b24 <SD_RxDataBlock>
 80021a4:	4603      	mov	r3, r0
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	f000 809e 	beq.w	80022e8 <SD_disk_ioctl+0x234>
      {
        if ((csd[0] >> 6) == 1)
 80021ac:	7b3b      	ldrb	r3, [r7, #12]
 80021ae:	099b      	lsrs	r3, r3, #6
 80021b0:	b2db      	uxtb	r3, r3
 80021b2:	2b01      	cmp	r3, #1
 80021b4:	d10e      	bne.n	80021d4 <SD_disk_ioctl+0x120>
        {
          /* SDC ver 2.00 */
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 80021b6:	7d7b      	ldrb	r3, [r7, #21]
 80021b8:	b29a      	uxth	r2, r3
 80021ba:	7d3b      	ldrb	r3, [r7, #20]
 80021bc:	b29b      	uxth	r3, r3
 80021be:	021b      	lsls	r3, r3, #8
 80021c0:	b29b      	uxth	r3, r3
 80021c2:	4413      	add	r3, r2
 80021c4:	b29b      	uxth	r3, r3
 80021c6:	3301      	adds	r3, #1
 80021c8:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << 10;
 80021ca:	8bfb      	ldrh	r3, [r7, #30]
 80021cc:	029a      	lsls	r2, r3, #10
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	601a      	str	r2, [r3, #0]
 80021d2:	e02e      	b.n	8002232 <SD_disk_ioctl+0x17e>
        }
        else
        {
          /* MMC or SDC ver 1.XX */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 80021d4:	7c7b      	ldrb	r3, [r7, #17]
 80021d6:	f003 030f 	and.w	r3, r3, #15
 80021da:	b2da      	uxtb	r2, r3
 80021dc:	7dbb      	ldrb	r3, [r7, #22]
 80021de:	09db      	lsrs	r3, r3, #7
 80021e0:	b2db      	uxtb	r3, r3
 80021e2:	4413      	add	r3, r2
 80021e4:	b2da      	uxtb	r2, r3
 80021e6:	7d7b      	ldrb	r3, [r7, #21]
 80021e8:	005b      	lsls	r3, r3, #1
 80021ea:	b2db      	uxtb	r3, r3
 80021ec:	f003 0306 	and.w	r3, r3, #6
 80021f0:	b2db      	uxtb	r3, r3
 80021f2:	4413      	add	r3, r2
 80021f4:	b2db      	uxtb	r3, r3
 80021f6:	3302      	adds	r3, #2
 80021f8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 80021fc:	7d3b      	ldrb	r3, [r7, #20]
 80021fe:	099b      	lsrs	r3, r3, #6
 8002200:	b2db      	uxtb	r3, r3
 8002202:	b29a      	uxth	r2, r3
 8002204:	7cfb      	ldrb	r3, [r7, #19]
 8002206:	b29b      	uxth	r3, r3
 8002208:	009b      	lsls	r3, r3, #2
 800220a:	b29b      	uxth	r3, r3
 800220c:	4413      	add	r3, r2
 800220e:	b29a      	uxth	r2, r3
 8002210:	7cbb      	ldrb	r3, [r7, #18]
 8002212:	029b      	lsls	r3, r3, #10
 8002214:	b29b      	uxth	r3, r3
 8002216:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800221a:	b29b      	uxth	r3, r3
 800221c:	4413      	add	r3, r2
 800221e:	b29b      	uxth	r3, r3
 8002220:	3301      	adds	r3, #1
 8002222:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 8002224:	8bfa      	ldrh	r2, [r7, #30]
 8002226:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800222a:	3b09      	subs	r3, #9
 800222c:	409a      	lsls	r2, r3
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	601a      	str	r2, [r3, #0]
        }

        res = RES_OK;
 8002232:	2300      	movs	r3, #0
 8002234:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }
      break;
 8002238:	e056      	b.n	80022e8 <SD_disk_ioctl+0x234>

    case GET_SECTOR_SIZE:
      /* 섹터의 단위 크기 (WORD) */
      *(WORD*) buff = 512;
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002240:	801a      	strh	r2, [r3, #0]
      res = RES_OK;
 8002242:	2300      	movs	r3, #0
 8002244:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8002248:	e055      	b.n	80022f6 <SD_disk_ioctl+0x242>

    case CTRL_SYNC:
      /* 쓰기 동기화 */
      if (SD_ReadyWait() == 0xFF)
 800224a:	f7ff fbed 	bl	8001a28 <SD_ReadyWait>
 800224e:	4603      	mov	r3, r0
 8002250:	2bff      	cmp	r3, #255	; 0xff
 8002252:	d14b      	bne.n	80022ec <SD_disk_ioctl+0x238>
        res = RES_OK;
 8002254:	2300      	movs	r3, #0
 8002256:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 800225a:	e047      	b.n	80022ec <SD_disk_ioctl+0x238>

    case MMC_GET_CSD:
      /* CSD 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16))
 800225c:	2100      	movs	r1, #0
 800225e:	2049      	movs	r0, #73	; 0x49
 8002260:	f7ff fcea 	bl	8001c38 <SD_SendCmd>
 8002264:	4603      	mov	r3, r0
 8002266:	2b00      	cmp	r3, #0
 8002268:	d142      	bne.n	80022f0 <SD_disk_ioctl+0x23c>
 800226a:	2110      	movs	r1, #16
 800226c:	6a38      	ldr	r0, [r7, #32]
 800226e:	f7ff fc59 	bl	8001b24 <SD_RxDataBlock>
 8002272:	4603      	mov	r3, r0
 8002274:	2b00      	cmp	r3, #0
 8002276:	d03b      	beq.n	80022f0 <SD_disk_ioctl+0x23c>
        res = RES_OK;
 8002278:	2300      	movs	r3, #0
 800227a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 800227e:	e037      	b.n	80022f0 <SD_disk_ioctl+0x23c>

    case MMC_GET_CID:
      /* CID 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16))
 8002280:	2100      	movs	r1, #0
 8002282:	204a      	movs	r0, #74	; 0x4a
 8002284:	f7ff fcd8 	bl	8001c38 <SD_SendCmd>
 8002288:	4603      	mov	r3, r0
 800228a:	2b00      	cmp	r3, #0
 800228c:	d132      	bne.n	80022f4 <SD_disk_ioctl+0x240>
 800228e:	2110      	movs	r1, #16
 8002290:	6a38      	ldr	r0, [r7, #32]
 8002292:	f7ff fc47 	bl	8001b24 <SD_RxDataBlock>
 8002296:	4603      	mov	r3, r0
 8002298:	2b00      	cmp	r3, #0
 800229a:	d02b      	beq.n	80022f4 <SD_disk_ioctl+0x240>
        res = RES_OK;
 800229c:	2300      	movs	r3, #0
 800229e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 80022a2:	e027      	b.n	80022f4 <SD_disk_ioctl+0x240>

    case MMC_GET_OCR:
      /* OCR 정보 수신 (4 bytes) */
      if (SD_SendCmd(CMD58, 0) == 0)
 80022a4:	2100      	movs	r1, #0
 80022a6:	207a      	movs	r0, #122	; 0x7a
 80022a8:	f7ff fcc6 	bl	8001c38 <SD_SendCmd>
 80022ac:	4603      	mov	r3, r0
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d116      	bne.n	80022e0 <SD_disk_ioctl+0x22c>
      {
        for (n = 0; n < 4; n++)
 80022b2:	2300      	movs	r3, #0
 80022b4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80022b8:	e00b      	b.n	80022d2 <SD_disk_ioctl+0x21e>
        {
          *ptr++ = SPI_RxByte();
 80022ba:	6a3c      	ldr	r4, [r7, #32]
 80022bc:	1c63      	adds	r3, r4, #1
 80022be:	623b      	str	r3, [r7, #32]
 80022c0:	f7ff fb86 	bl	80019d0 <SPI_RxByte>
 80022c4:	4603      	mov	r3, r0
 80022c6:	7023      	strb	r3, [r4, #0]
        for (n = 0; n < 4; n++)
 80022c8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80022cc:	3301      	adds	r3, #1
 80022ce:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80022d2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80022d6:	2b03      	cmp	r3, #3
 80022d8:	d9ef      	bls.n	80022ba <SD_disk_ioctl+0x206>
        }

        res = RES_OK;
 80022da:	2300      	movs	r3, #0
 80022dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }

    default:
      res = RES_PARERR;
 80022e0:	2304      	movs	r3, #4
 80022e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80022e6:	e006      	b.n	80022f6 <SD_disk_ioctl+0x242>
      break;
 80022e8:	bf00      	nop
 80022ea:	e004      	b.n	80022f6 <SD_disk_ioctl+0x242>
      break;
 80022ec:	bf00      	nop
 80022ee:	e002      	b.n	80022f6 <SD_disk_ioctl+0x242>
      break;
 80022f0:	bf00      	nop
 80022f2:	e000      	b.n	80022f6 <SD_disk_ioctl+0x242>
      break;
 80022f4:	bf00      	nop
    }

    DESELECT();
 80022f6:	f7ff fb45 	bl	8001984 <DESELECT>
    SPI_RxByte();
 80022fa:	f7ff fb69 	bl	80019d0 <SPI_RxByte>
  }

  return res;
 80022fe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002302:	4618      	mov	r0, r3
 8002304:	372c      	adds	r7, #44	; 0x2c
 8002306:	46bd      	mov	sp, r7
 8002308:	bd90      	pop	{r4, r7, pc}
 800230a:	bf00      	nop
 800230c:	2000000c 	.word	0x2000000c

08002310 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8002310:	b480      	push	{r7}
 8002312:	b085      	sub	sp, #20
 8002314:	af00      	add	r7, sp, #0
 8002316:	60f8      	str	r0, [r7, #12]
 8002318:	60b9      	str	r1, [r7, #8]
 800231a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	4a06      	ldr	r2, [pc, #24]	; (8002338 <vApplicationGetIdleTaskMemory+0x28>)
 8002320:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8002322:	68bb      	ldr	r3, [r7, #8]
 8002324:	4a05      	ldr	r2, [pc, #20]	; (800233c <vApplicationGetIdleTaskMemory+0x2c>)
 8002326:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	229e      	movs	r2, #158	; 0x9e
 800232c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800232e:	bf00      	nop
 8002330:	3714      	adds	r7, #20
 8002332:	46bd      	mov	sp, r7
 8002334:	bc80      	pop	{r7}
 8002336:	4770      	bx	lr
 8002338:	20000224 	.word	0x20000224
 800233c:	20000278 	.word	0x20000278

08002340 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002340:	b480      	push	{r7}
 8002342:	b083      	sub	sp, #12
 8002344:	af00      	add	r7, sp, #0
 8002346:	4603      	mov	r3, r0
 8002348:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800234a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800234e:	2b00      	cmp	r3, #0
 8002350:	db0b      	blt.n	800236a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002352:	79fb      	ldrb	r3, [r7, #7]
 8002354:	f003 021f 	and.w	r2, r3, #31
 8002358:	4906      	ldr	r1, [pc, #24]	; (8002374 <__NVIC_EnableIRQ+0x34>)
 800235a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800235e:	095b      	lsrs	r3, r3, #5
 8002360:	2001      	movs	r0, #1
 8002362:	fa00 f202 	lsl.w	r2, r0, r2
 8002366:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800236a:	bf00      	nop
 800236c:	370c      	adds	r7, #12
 800236e:	46bd      	mov	sp, r7
 8002370:	bc80      	pop	{r7}
 8002372:	4770      	bx	lr
 8002374:	e000e100 	.word	0xe000e100

08002378 <main>:




int main(void)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b082      	sub	sp, #8
 800237c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800237e:	f001 ff23 	bl	80041c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002382:	f001 fae1 	bl	8003948 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002386:	f001 fca7 	bl	8003cd8 <MX_GPIO_Init>
  MX_SPI1_Init();
 800238a:	f001 fc1b 	bl	8003bc4 <MX_SPI1_Init>
  MX_FATFS_Init();
 800238e:	f004 fe37 	bl	8007000 <MX_FATFS_Init>
  MX_USART2_UART_Init();
 8002392:	f001 fc77 	bl	8003c84 <MX_USART2_UART_Init>
  //MX_RTC_Init();
  MX_USART1_UART_Init();
 8002396:	f001 fc4b 	bl	8003c30 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
	NVIC_EnableIRQ(USART1_IRQn);
 800239a:	2025      	movs	r0, #37	; 0x25
 800239c:	f7ff ffd0 	bl	8002340 <__NVIC_EnableIRQ>
	USART1->CR1  |= USART_CR1_UE;
 80023a0:	4b1d      	ldr	r3, [pc, #116]	; (8002418 <main+0xa0>)
 80023a2:	68db      	ldr	r3, [r3, #12]
 80023a4:	4a1c      	ldr	r2, [pc, #112]	; (8002418 <main+0xa0>)
 80023a6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80023aa:	60d3      	str	r3, [r2, #12]
	USART1->CR1  |= USART_CR1_RXNEIE;
 80023ac:	4b1a      	ldr	r3, [pc, #104]	; (8002418 <main+0xa0>)
 80023ae:	68db      	ldr	r3, [r3, #12]
 80023b0:	4a19      	ldr	r2, [pc, #100]	; (8002418 <main+0xa0>)
 80023b2:	f043 0320 	orr.w	r3, r3, #32
 80023b6:	60d3      	str	r3, [r2, #12]
	USART1->CR1  |= (USART_CR1_RE );  // RX, TX enable.
 80023b8:	4b17      	ldr	r3, [pc, #92]	; (8002418 <main+0xa0>)
 80023ba:	68db      	ldr	r3, [r3, #12]
 80023bc:	4a16      	ldr	r2, [pc, #88]	; (8002418 <main+0xa0>)
 80023be:	f043 0304 	orr.w	r3, r3, #4
 80023c2:	60d3      	str	r3, [r2, #12]
                       // USART3 enable.


sdcard_status(); //checks the sd is in working condition or not
 80023c4:	f000 fa0a 	bl	80027dc <sdcard_status>
RTCinit();     // checks the rtc clcok is intialized or not ,if not initalizes it
 80023c8:	f001 fb84 	bl	8003ad4 <RTCinit>
		datas2("  -----   ");
	}

*/

wifi_connection_setup();
 80023cc:	f000 fe20 	bl	8003010 <wifi_connection_setup>
xTaskCreate(main_reciever,"main_send",recieve,NULL,2,main_recieve);
 80023d0:	4b12      	ldr	r3, [pc, #72]	; (800241c <main+0xa4>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	9301      	str	r3, [sp, #4]
 80023d6:	2302      	movs	r3, #2
 80023d8:	9300      	str	r3, [sp, #0]
 80023da:	2300      	movs	r3, #0
 80023dc:	f44f 72af 	mov.w	r2, #350	; 0x15e
 80023e0:	490f      	ldr	r1, [pc, #60]	; (8002420 <main+0xa8>)
 80023e2:	4810      	ldr	r0, [pc, #64]	; (8002424 <main+0xac>)
 80023e4:	f009 fa37 	bl	800b856 <xTaskCreate>
xTaskCreate(send_datas,"main_send",sends,NULL,2,send_data);
 80023e8:	4b0f      	ldr	r3, [pc, #60]	; (8002428 <main+0xb0>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	9301      	str	r3, [sp, #4]
 80023ee:	2302      	movs	r3, #2
 80023f0:	9300      	str	r3, [sp, #0]
 80023f2:	2300      	movs	r3, #0
 80023f4:	f44f 72e1 	mov.w	r2, #450	; 0x1c2
 80023f8:	4909      	ldr	r1, [pc, #36]	; (8002420 <main+0xa8>)
 80023fa:	480c      	ldr	r0, [pc, #48]	; (800242c <main+0xb4>)
 80023fc:	f009 fa2b 	bl	800b856 <xTaskCreate>


sd_card=xSemaphoreCreateMutex();
 8002400:	2001      	movs	r0, #1
 8002402:	f008 fcd7 	bl	800adb4 <xQueueCreateMutex>
 8002406:	4602      	mov	r2, r0
 8002408:	4b09      	ldr	r3, [pc, #36]	; (8002430 <main+0xb8>)
 800240a:	601a      	str	r2, [r3, #0]
vTaskStartScheduler();
 800240c:	f009 fb84 	bl	800bb18 <vTaskStartScheduler>
 8002410:	2300      	movs	r3, #0

		}
	}
  */

}
 8002412:	4618      	mov	r0, r3
 8002414:	46bd      	mov	sp, r7
 8002416:	bd80      	pop	{r7, pc}
 8002418:	40013800 	.word	0x40013800
 800241c:	20000504 	.word	0x20000504
 8002420:	0800e1ec 	.word	0x0800e1ec
 8002424:	08002435 	.word	0x08002435
 8002428:	20000508 	.word	0x20000508
 800242c:	08002581 	.word	0x08002581
 8002430:	2000050c 	.word	0x2000050c

08002434 <main_reciever>:

void main_reciever()
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b08e      	sub	sp, #56	; 0x38
 8002438:	af00      	add	r7, sp, #0
xSemaphoreGive(sd_card);
 800243a:	4b49      	ldr	r3, [pc, #292]	; (8002560 <main_reciever+0x12c>)
 800243c:	6818      	ldr	r0, [r3, #0]
 800243e:	2300      	movs	r3, #0
 8002440:	2200      	movs	r2, #0
 8002442:	2100      	movs	r1, #0
 8002444:	f008 fd34 	bl	800aeb0 <xQueueGenericSend>
sd_to_sram();                                        //copies the database names to sram
 8002448:	f000 fe0c 	bl	8003064 <sd_to_sram>
 while(1)
 {
  if(HAL_UART_Receive(&huart2,datar,1,100)==HAL_OK)   //recieve data from external device if availabe
 800244c:	2364      	movs	r3, #100	; 0x64
 800244e:	2201      	movs	r2, #1
 8002450:	4944      	ldr	r1, [pc, #272]	; (8002564 <main_reciever+0x130>)
 8002452:	4845      	ldr	r0, [pc, #276]	; (8002568 <main_reciever+0x134>)
 8002454:	f004 fc5d 	bl	8006d12 <HAL_UART_Receive>
 8002458:	4603      	mov	r3, r0
 800245a:	2b00      	cmp	r3, #0
 800245c:	d17c      	bne.n	8002558 <main_reciever+0x124>
   {

    int j=0;
 800245e:	2300      	movs	r3, #0
 8002460:	637b      	str	r3, [r7, #52]	; 0x34
	  datat=(char *)datar;
 8002462:	4b42      	ldr	r3, [pc, #264]	; (800256c <main_reciever+0x138>)
 8002464:	4a3f      	ldr	r2, [pc, #252]	; (8002564 <main_reciever+0x130>)
 8002466:	601a      	str	r2, [r3, #0]
		strcpy(dat3,datat);
 8002468:	4b40      	ldr	r3, [pc, #256]	; (800256c <main_reciever+0x138>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4619      	mov	r1, r3
 800246e:	4840      	ldr	r0, [pc, #256]	; (8002570 <main_reciever+0x13c>)
 8002470:	f00a fec0 	bl	800d1f4 <strcpy>
		dat2[j]=dat3[0];
 8002474:	4b3e      	ldr	r3, [pc, #248]	; (8002570 <main_reciever+0x13c>)
 8002476:	7819      	ldrb	r1, [r3, #0]
 8002478:	4a3e      	ldr	r2, [pc, #248]	; (8002574 <main_reciever+0x140>)
 800247a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800247c:	4413      	add	r3, r2
 800247e:	460a      	mov	r2, r1
 8002480:	701a      	strb	r2, [r3, #0]
		j++;
 8002482:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002484:	3301      	adds	r3, #1
 8002486:	637b      	str	r3, [r7, #52]	; 0x34
	  while(HAL_UART_Receive(&huart2,datar,1,100)==HAL_OK)
 8002488:	e012      	b.n	80024b0 <main_reciever+0x7c>
			{
			datat=(char *)datar;
 800248a:	4b38      	ldr	r3, [pc, #224]	; (800256c <main_reciever+0x138>)
 800248c:	4a35      	ldr	r2, [pc, #212]	; (8002564 <main_reciever+0x130>)
 800248e:	601a      	str	r2, [r3, #0]
			strcpy(dat3,datat);
 8002490:	4b36      	ldr	r3, [pc, #216]	; (800256c <main_reciever+0x138>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	4619      	mov	r1, r3
 8002496:	4836      	ldr	r0, [pc, #216]	; (8002570 <main_reciever+0x13c>)
 8002498:	f00a feac 	bl	800d1f4 <strcpy>
			dat2[j]=dat3[0];
 800249c:	4b34      	ldr	r3, [pc, #208]	; (8002570 <main_reciever+0x13c>)
 800249e:	7819      	ldrb	r1, [r3, #0]
 80024a0:	4a34      	ldr	r2, [pc, #208]	; (8002574 <main_reciever+0x140>)
 80024a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024a4:	4413      	add	r3, r2
 80024a6:	460a      	mov	r2, r1
 80024a8:	701a      	strb	r2, [r3, #0]
			j++;
 80024aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024ac:	3301      	adds	r3, #1
 80024ae:	637b      	str	r3, [r7, #52]	; 0x34
	  while(HAL_UART_Receive(&huart2,datar,1,100)==HAL_OK)
 80024b0:	2364      	movs	r3, #100	; 0x64
 80024b2:	2201      	movs	r2, #1
 80024b4:	492b      	ldr	r1, [pc, #172]	; (8002564 <main_reciever+0x130>)
 80024b6:	482c      	ldr	r0, [pc, #176]	; (8002568 <main_reciever+0x134>)
 80024b8:	f004 fc2b 	bl	8006d12 <HAL_UART_Receive>
 80024bc:	4603      	mov	r3, r0
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d0e3      	beq.n	800248a <main_reciever+0x56>
		  }
//interrupt=0;
		xSemaphoreTake(sd_card,portMAX_DELAY);
 80024c2:	4b27      	ldr	r3, [pc, #156]	; (8002560 <main_reciever+0x12c>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f04f 31ff 	mov.w	r1, #4294967295
 80024ca:	4618      	mov	r0, r3
 80024cc:	f008 fe74 	bl	800b1b8 <xQueueSemaphoreTake>
	 datas2(dat2);
 80024d0:	4828      	ldr	r0, [pc, #160]	; (8002574 <main_reciever+0x140>)
 80024d2:	f000 fed3 	bl	800327c <datas2>
	 id_time_storage(dat2);                    //storing data with time date to sd card
 80024d6:	4827      	ldr	r0, [pc, #156]	; (8002574 <main_reciever+0x140>)
 80024d8:	f001 f9aa 	bl	8003830 <id_time_storage>

   char buff[40];
	 strcpy(buff,dat2);
 80024dc:	1d3b      	adds	r3, r7, #4
 80024de:	4925      	ldr	r1, [pc, #148]	; (8002574 <main_reciever+0x140>)
 80024e0:	4618      	mov	r0, r3
 80024e2:	f00a fe87 	bl	800d1f4 <strcpy>

   int h=strlen(buff);
 80024e6:	1d3b      	adds	r3, r7, #4
 80024e8:	4618      	mov	r0, r3
 80024ea:	f7fd fe31 	bl	8000150 <strlen>
 80024ee:	4603      	mov	r3, r0
 80024f0:	62fb      	str	r3, [r7, #44]	; 0x2c
   buff[h]='\n';
 80024f2:	1d3a      	adds	r2, r7, #4
 80024f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024f6:	4413      	add	r3, r2
 80024f8:	220a      	movs	r2, #10
 80024fa:	701a      	strb	r2, [r3, #0]
   memset(dat2,0,sizeof(dat2));
 80024fc:	2214      	movs	r2, #20
 80024fe:	2100      	movs	r1, #0
 8002500:	481c      	ldr	r0, [pc, #112]	; (8002574 <main_reciever+0x140>)
 8002502:	f00a fd64 	bl	800cfce <memset>

   int d=check_sram(buff);                     //checking sram to check the match of name
 8002506:	1d3b      	adds	r3, r7, #4
 8002508:	4618      	mov	r0, r3
 800250a:	f000 fdeb 	bl	80030e4 <check_sram>
 800250e:	6338      	str	r0, [r7, #48]	; 0x30

	 if(d==0)
 8002510:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002512:	2b00      	cmp	r3, #0
 8002514:	d104      	bne.n	8002520 <main_reciever+0xec>
		{d=sd_data_check(buff);                 //if not found check sd card database
 8002516:	1d3b      	adds	r3, r7, #4
 8002518:	4618      	mov	r0, r3
 800251a:	f000 fe21 	bl	8003160 <sd_data_check>
 800251e:	6338      	str	r0, [r7, #48]	; 0x30


		}
   if(d!=1)
 8002520:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002522:	2b01      	cmp	r3, #1
 8002524:	d003      	beq.n	800252e <main_reciever+0xfa>
	   datas2("access denied");
 8002526:	4814      	ldr	r0, [pc, #80]	; (8002578 <main_reciever+0x144>)
 8002528:	f000 fea8 	bl	800327c <datas2>
 800252c:	e002      	b.n	8002534 <main_reciever+0x100>
    else
     {datas2("access granted");
 800252e:	4813      	ldr	r0, [pc, #76]	; (800257c <main_reciever+0x148>)
 8002530:	f000 fea4 	bl	800327c <datas2>

//HAL_GPIO_WritePin(DOOR_PORT,DOOR_OPEN,GPIO_PIN_SET);  //OPEN THE DOOR ,THEN PUT SOME DELAY AND INVOKE CLOSE THE DOOR

      }
	memset(buff,0,sizeof(buff));
 8002534:	1d3b      	adds	r3, r7, #4
 8002536:	2228      	movs	r2, #40	; 0x28
 8002538:	2100      	movs	r1, #0
 800253a:	4618      	mov	r0, r3
 800253c:	f00a fd47 	bl	800cfce <memset>
	memset(dat2,0,sizeof(dat2));
 8002540:	2214      	movs	r2, #20
 8002542:	2100      	movs	r1, #0
 8002544:	480b      	ldr	r0, [pc, #44]	; (8002574 <main_reciever+0x140>)
 8002546:	f00a fd42 	bl	800cfce <memset>
  xSemaphoreGive(sd_card);
 800254a:	4b05      	ldr	r3, [pc, #20]	; (8002560 <main_reciever+0x12c>)
 800254c:	6818      	ldr	r0, [r3, #0]
 800254e:	2300      	movs	r3, #0
 8002550:	2200      	movs	r2, #0
 8002552:	2100      	movs	r1, #0
 8002554:	f008 fcac 	bl	800aeb0 <xQueueGenericSend>
	 }

	vTaskDelay(1);
 8002558:	2001      	movs	r0, #1
 800255a:	f009 faa9 	bl	800bab0 <vTaskDelay>
  if(HAL_UART_Receive(&huart2,datar,1,100)==HAL_OK)   //recieve data from external device if availabe
 800255e:	e775      	b.n	800244c <main_reciever+0x18>
 8002560:	2000050c 	.word	0x2000050c
 8002564:	20002674 	.word	0x20002674
 8002568:	200026a8 	.word	0x200026a8
 800256c:	200026e8 	.word	0x200026e8
 8002570:	20001d90 	.word	0x20001d90
 8002574:	20002694 	.word	0x20002694
 8002578:	0800e1f8 	.word	0x0800e1f8
 800257c:	0800e208 	.word	0x0800e208

08002580 <send_datas>:
 }



 void send_datas()            //TASK FUNCTION to check internet status and send data to esp8266 till no data with "FAILED status
{
 8002580:	b580      	push	{r7, lr}
 8002582:	af00      	add	r7, sp, #0
while(1)
{

	//taskYIELD();
	//datas2("*");
	datas("AT+PING=\"www.google.com\"\r\n");
 8002584:	4811      	ldr	r0, [pc, #68]	; (80025cc <send_datas+0x4c>)
 8002586:	f000 fe63 	bl	8003250 <datas>
	vTaskDelay(3000);
 800258a:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800258e:	f009 fa8f 	bl	800bab0 <vTaskDelay>

	if(counter==1)
 8002592:	4b0f      	ldr	r3, [pc, #60]	; (80025d0 <send_datas+0x50>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	2b01      	cmp	r3, #1
 8002598:	d1f4      	bne.n	8002584 <send_datas+0x4>
	{
 xSemaphoreTake(sd_card,portMAX_DELAY);
 800259a:	4b0e      	ldr	r3, [pc, #56]	; (80025d4 <send_datas+0x54>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f04f 31ff 	mov.w	r1, #4294967295
 80025a2:	4618      	mov	r0, r3
 80025a4:	f008 fe08 	bl	800b1b8 <xQueueSemaphoreTake>
 sd_check_send();
 80025a8:	f000 f982 	bl	80028b0 <sd_check_send>
xSemaphoreGive(sd_card);
 80025ac:	4b09      	ldr	r3, [pc, #36]	; (80025d4 <send_datas+0x54>)
 80025ae:	6818      	ldr	r0, [r3, #0]
 80025b0:	2300      	movs	r3, #0
 80025b2:	2200      	movs	r2, #0
 80025b4:	2100      	movs	r1, #0
 80025b6:	f008 fc7b 	bl	800aeb0 <xQueueGenericSend>
		counter=0;
 80025ba:	4b05      	ldr	r3, [pc, #20]	; (80025d0 <send_datas+0x50>)
 80025bc:	2200      	movs	r2, #0
 80025be:	601a      	str	r2, [r3, #0]
		vTaskDelay(DATA_SEND_DELAY);
 80025c0:	f644 6020 	movw	r0, #20000	; 0x4e20
 80025c4:	f009 fa74 	bl	800bab0 <vTaskDelay>
	datas("AT+PING=\"www.google.com\"\r\n");
 80025c8:	e7dc      	b.n	8002584 <send_datas+0x4>
 80025ca:	bf00      	nop
 80025cc:	0800e218 	.word	0x0800e218
 80025d0:	200004f0 	.word	0x200004f0
 80025d4:	2000050c 	.word	0x2000050c

080025d8 <wifisender>:
 * */



 void wifisender(char *m)
 {
 80025d8:	b580      	push	{r7, lr}
 80025da:	b0c0      	sub	sp, #256	; 0x100
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]

 	char store[]="POST /gym-acs-portal/api/v1.0/devicelogs HTTP/1.1\r\nHost: robatosystems.com\r\nAccept: */*\r\n";
 80025e0:	4a47      	ldr	r2, [pc, #284]	; (8002700 <wifisender+0x128>)
 80025e2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80025e6:	4611      	mov	r1, r2
 80025e8:	225a      	movs	r2, #90	; 0x5a
 80025ea:	4618      	mov	r0, r3
 80025ec:	f00a fce4 	bl	800cfb8 <memcpy>

 char mains[]="POST /analog-reading/api/v1.0/logs HTTP/1.1\r\nHost: robatosystems.com\r\nAccept: */*\r\nContent-Length: 187\r\nContent-Type: application/json\r\n\r\n";
 80025f0:	4a44      	ldr	r2, [pc, #272]	; (8002704 <wifisender+0x12c>)
 80025f2:	f107 0310 	add.w	r3, r7, #16
 80025f6:	4611      	mov	r1, r2
 80025f8:	228b      	movs	r2, #139	; 0x8b
 80025fa:	4618      	mov	r0, r3
 80025fc:	f00a fcdc 	bl	800cfb8 <memcpy>

 	int o=strlen(mains);
 8002600:	f107 0310 	add.w	r3, r7, #16
 8002604:	4618      	mov	r0, r3
 8002606:	f7fd fda3 	bl	8000150 <strlen>
 800260a:	4603      	mov	r3, r0
 800260c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 	char v[2];

 	int s;
 	//char t[2];

 	datas("   ");
 8002610:	483d      	ldr	r0, [pc, #244]	; (8002708 <wifisender+0x130>)
 8002612:	f000 fe1d 	bl	8003250 <datas>
 	char content_length[2];

 	s=strlen(m);
 8002616:	6878      	ldr	r0, [r7, #4]
 8002618:	f7fd fd9a 	bl	8000150 <strlen>
 800261c:	4603      	mov	r3, r0
 800261e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
//s=s-14;
 itoa(s,content_length,10);
 8002622:	f107 0308 	add.w	r3, r7, #8
 8002626:	220a      	movs	r2, #10
 8002628:	4619      	mov	r1, r3
 800262a:	f8d7 00f8 	ldr.w	r0, [r7, #248]	; 0xf8
 800262e:	f001 f885 	bl	800373c <itoa>
 datas(content_length);
 8002632:	f107 0308 	add.w	r3, r7, #8
 8002636:	4618      	mov	r0, r3
 8002638:	f000 fe0a 	bl	8003250 <datas>
 o=o+s+6;
 800263c:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 8002640:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002644:	4413      	add	r3, r2
 8002646:	3306      	adds	r3, #6
 8002648:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 itoa(o,v,10);
 800264c:	f107 030c 	add.w	r3, r7, #12
 8002650:	220a      	movs	r2, #10
 8002652:	4619      	mov	r1, r3
 8002654:	f8d7 00fc 	ldr.w	r0, [r7, #252]	; 0xfc
 8002658:	f001 f870 	bl	800373c <itoa>
 	datas(v);
 800265c:	f107 030c 	add.w	r3, r7, #12
 8002660:	4618      	mov	r0, r3
 8002662:	f000 fdf5 	bl	8003250 <datas>

 //datas("AT+PING=\"www.google.com\"\r\n");
 //vTaskDelay(4000);
 datas("AT+CIPSTART=\"TCP\",\"robatosystems.com\",80\r\n");
 8002666:	4829      	ldr	r0, [pc, #164]	; (800270c <wifisender+0x134>)
 8002668:	f000 fdf2 	bl	8003250 <datas>
 vTaskDelay(3000);
 800266c:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8002670:	f009 fa1e 	bl	800bab0 <vTaskDelay>
 datas("AT+CIPSEND=");
 8002674:	4826      	ldr	r0, [pc, #152]	; (8002710 <wifisender+0x138>)
 8002676:	f000 fdeb 	bl	8003250 <datas>
 datas(v);
 800267a:	f107 030c 	add.w	r3, r7, #12
 800267e:	4618      	mov	r0, r3
 8002680:	f000 fde6 	bl	8003250 <datas>
 datas("\r\n");
 8002684:	4823      	ldr	r0, [pc, #140]	; (8002714 <wifisender+0x13c>)
 8002686:	f000 fde3 	bl	8003250 <datas>
 vTaskDelay(2000);
 800268a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800268e:	f009 fa0f 	bl	800bab0 <vTaskDelay>
 datas(store);
 8002692:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002696:	4618      	mov	r0, r3
 8002698:	f000 fdda 	bl	8003250 <datas>
 datas("Content-Length: ");
 800269c:	481e      	ldr	r0, [pc, #120]	; (8002718 <wifisender+0x140>)
 800269e:	f000 fdd7 	bl	8003250 <datas>
 datas(content_length);
 80026a2:	f107 0308 	add.w	r3, r7, #8
 80026a6:	4618      	mov	r0, r3
 80026a8:	f000 fdd2 	bl	8003250 <datas>
 datas("\r\n");
 80026ac:	4819      	ldr	r0, [pc, #100]	; (8002714 <wifisender+0x13c>)
 80026ae:	f000 fdcf 	bl	8003250 <datas>
 datas("Content-Type: application/json\r\n\r\n");
 80026b2:	481a      	ldr	r0, [pc, #104]	; (800271c <wifisender+0x144>)
 80026b4:	f000 fdcc 	bl	8003250 <datas>

 divide_send(m);
 80026b8:	6878      	ldr	r0, [r7, #4]
 80026ba:	f000 f835 	bl	8002728 <divide_send>
 datas("\r\n");
 80026be:	4815      	ldr	r0, [pc, #84]	; (8002714 <wifisender+0x13c>)
 80026c0:	f000 fdc6 	bl	8003250 <datas>

 vTaskDelay(500);
 80026c4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80026c8:	f009 f9f2 	bl	800bab0 <vTaskDelay>
 datas("AT+CIPCLOSE\r\n");
 80026cc:	4814      	ldr	r0, [pc, #80]	; (8002720 <wifisender+0x148>)
 80026ce:	f000 fdbf 	bl	8003250 <datas>
 xSemaphoreGive(sd_card);
 80026d2:	4b14      	ldr	r3, [pc, #80]	; (8002724 <wifisender+0x14c>)
 80026d4:	6818      	ldr	r0, [r3, #0]
 80026d6:	2300      	movs	r3, #0
 80026d8:	2200      	movs	r2, #0
 80026da:	2100      	movs	r1, #0
 80026dc:	f008 fbe8 	bl	800aeb0 <xQueueGenericSend>
 vTaskDelay(2000);
 80026e0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80026e4:	f009 f9e4 	bl	800bab0 <vTaskDelay>
xSemaphoreTake(sd_card,portMAX_DELAY);
 80026e8:	4b0e      	ldr	r3, [pc, #56]	; (8002724 <wifisender+0x14c>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f04f 31ff 	mov.w	r1, #4294967295
 80026f0:	4618      	mov	r0, r3
 80026f2:	f008 fd61 	bl	800b1b8 <xQueueSemaphoreTake>



 }
 80026f6:	bf00      	nop
 80026f8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80026fc:	46bd      	mov	sp, r7
 80026fe:	bd80      	pop	{r7, pc}
 8002700:	0800e2bc 	.word	0x0800e2bc
 8002704:	0800e318 	.word	0x0800e318
 8002708:	0800e234 	.word	0x0800e234
 800270c:	0800e238 	.word	0x0800e238
 8002710:	0800e264 	.word	0x0800e264
 8002714:	0800e270 	.word	0x0800e270
 8002718:	0800e274 	.word	0x0800e274
 800271c:	0800e288 	.word	0x0800e288
 8002720:	0800e2ac 	.word	0x0800e2ac
 8002724:	2000050c 	.word	0x2000050c

08002728 <divide_send>:
  */



 void divide_send(char *m)
 {
 8002728:	b580      	push	{r7, lr}
 800272a:	b0a2      	sub	sp, #136	; 0x88
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
 	//datas(m);
 	int y1=0;
 8002730:	2300      	movs	r3, #0
 8002732:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 int g=strlen(m);
 8002736:	6878      	ldr	r0, [r7, #4]
 8002738:	f7fd fd0a 	bl	8000150 <strlen>
 800273c:	4603      	mov	r3, r0
 800273e:	67bb      	str	r3, [r7, #120]	; 0x78
 	//integer_2_string(g);
 	int m1=20;
 8002740:	2314      	movs	r3, #20
 8002742:	677b      	str	r3, [r7, #116]	; 0x74

 	int k1=0;
 8002744:	2300      	movs	r3, #0
 8002746:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 	int s1=(g/m1)+2;
 800274a:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800274c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800274e:	fb92 f3f3 	sdiv	r3, r2, r3
 8002752:	3302      	adds	r3, #2
 8002754:	673b      	str	r3, [r7, #112]	; 0x70
 	int x;

 	for(int t=0;t<s1;t++)
 8002756:	2300      	movs	r3, #0
 8002758:	67fb      	str	r3, [r7, #124]	; 0x7c
 800275a:	e037      	b.n	80027cc <divide_send+0xa4>
 	{
 		char sp21[100];
 	 x=(m1*t);
 800275c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800275e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8002760:	fb02 f303 	mul.w	r3, r2, r3
 8002764:	66fb      	str	r3, [r7, #108]	; 0x6c
 	for( ;y1<x;y1++,k1++)
 8002766:	e015      	b.n	8002794 <divide_send+0x6c>
 	{

 		sp21[k1]=m[y1];
 8002768:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800276c:	687a      	ldr	r2, [r7, #4]
 800276e:	4413      	add	r3, r2
 8002770:	7819      	ldrb	r1, [r3, #0]
 8002772:	f107 0208 	add.w	r2, r7, #8
 8002776:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800277a:	4413      	add	r3, r2
 800277c:	460a      	mov	r2, r1
 800277e:	701a      	strb	r2, [r3, #0]
 	for( ;y1<x;y1++,k1++)
 8002780:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002784:	3301      	adds	r3, #1
 8002786:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800278a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800278e:	3301      	adds	r3, #1
 8002790:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002794:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8002798:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800279a:	429a      	cmp	r2, r3
 800279c:	dbe4      	blt.n	8002768 <divide_send+0x40>
 	}
 	datas(sp21);
 800279e:	f107 0308 	add.w	r3, r7, #8
 80027a2:	4618      	mov	r0, r3
 80027a4:	f000 fd54 	bl	8003250 <datas>
    datas2(sp21);
 80027a8:	f107 0308 	add.w	r3, r7, #8
 80027ac:	4618      	mov	r0, r3
 80027ae:	f000 fd65 	bl	800327c <datas2>
 	k1=0;
 80027b2:	2300      	movs	r3, #0
 80027b4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 	memset(sp21,0,sizeof(sp21));
 80027b8:	f107 0308 	add.w	r3, r7, #8
 80027bc:	2264      	movs	r2, #100	; 0x64
 80027be:	2100      	movs	r1, #0
 80027c0:	4618      	mov	r0, r3
 80027c2:	f00a fc04 	bl	800cfce <memset>
 	for(int t=0;t<s1;t++)
 80027c6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80027c8:	3301      	adds	r3, #1
 80027ca:	67fb      	str	r3, [r7, #124]	; 0x7c
 80027cc:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80027ce:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80027d0:	429a      	cmp	r2, r3
 80027d2:	dbc3      	blt.n	800275c <divide_send+0x34>
 	}
 }
 80027d4:	bf00      	nop
 80027d6:	3788      	adds	r7, #136	; 0x88
 80027d8:	46bd      	mov	sp, r7
 80027da:	bd80      	pop	{r7, pc}

080027dc <sdcard_status>:

void sdcard_status()
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	af00      	add	r7, sp, #0
	if(f_mount(&fs, "", 0) != FR_OK)
 80027e0:	2200      	movs	r2, #0
 80027e2:	4911      	ldr	r1, [pc, #68]	; (8002828 <sdcard_status+0x4c>)
 80027e4:	4811      	ldr	r0, [pc, #68]	; (800282c <sdcard_status+0x50>)
 80027e6:	f006 fbd1 	bl	8008f8c <f_mount>
 80027ea:	4603      	mov	r3, r0
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d003      	beq.n	80027f8 <sdcard_status+0x1c>
	{
		datas("sd card is not opened");
 80027f0:	480f      	ldr	r0, [pc, #60]	; (8002830 <sdcard_status+0x54>)
 80027f2:	f000 fd2d 	bl	8003250 <datas>
		else
			datas2("sd card failed");
	}


}
 80027f6:	e014      	b.n	8002822 <sdcard_status+0x46>
		datas2("started");
 80027f8:	480e      	ldr	r0, [pc, #56]	; (8002834 <sdcard_status+0x58>)
 80027fa:	f000 fd3f 	bl	800327c <datas2>
	  if((f_open(&f,FILE_NAME,FA_WRITE |FA_OPEN_ALWAYS 		)== FR_OK))
 80027fe:	2212      	movs	r2, #18
 8002800:	490d      	ldr	r1, [pc, #52]	; (8002838 <sdcard_status+0x5c>)
 8002802:	480e      	ldr	r0, [pc, #56]	; (800283c <sdcard_status+0x60>)
 8002804:	f006 fc2a 	bl	800905c <f_open>
 8002808:	4603      	mov	r3, r0
 800280a:	2b00      	cmp	r3, #0
 800280c:	d106      	bne.n	800281c <sdcard_status+0x40>
      datas2("sd card test success.....");
 800280e:	480c      	ldr	r0, [pc, #48]	; (8002840 <sdcard_status+0x64>)
 8002810:	f000 fd34 	bl	800327c <datas2>
	    f_close(&f);
 8002814:	4809      	ldr	r0, [pc, #36]	; (800283c <sdcard_status+0x60>)
 8002816:	f007 faab 	bl	8009d70 <f_close>
}
 800281a:	e002      	b.n	8002822 <sdcard_status+0x46>
			datas2("sd card failed");
 800281c:	4809      	ldr	r0, [pc, #36]	; (8002844 <sdcard_status+0x68>)
 800281e:	f000 fd2d 	bl	800327c <datas2>
}
 8002822:	bf00      	nop
 8002824:	bd80      	pop	{r7, pc}
 8002826:	bf00      	nop
 8002828:	0800e3a4 	.word	0x0800e3a4
 800282c:	20001930 	.word	0x20001930
 8002830:	0800e3a8 	.word	0x0800e3a8
 8002834:	0800e3c0 	.word	0x0800e3c0
 8002838:	0800e3c8 	.word	0x0800e3c8
 800283c:	20001704 	.word	0x20001704
 8002840:	0800e3d4 	.word	0x0800e3d4
 8002844:	0800e3f0 	.word	0x0800e3f0

08002848 <USART1_IRQHandler>:




void USART1_IRQHandler()    //RECIEVING THE INTERNET CONNECTIVITY STATUS FROM USART1
{
 8002848:	b580      	push	{r7, lr}
 800284a:	af00      	add	r7, sp, #0

if(HAL_UART_Receive(&huart1,datar,1,10)==HAL_OK)
 800284c:	230a      	movs	r3, #10
 800284e:	2201      	movs	r2, #1
 8002850:	4912      	ldr	r1, [pc, #72]	; (800289c <USART1_IRQHandler+0x54>)
 8002852:	4813      	ldr	r0, [pc, #76]	; (80028a0 <USART1_IRQHandler+0x58>)
 8002854:	f004 fa5d 	bl	8006d12 <HAL_UART_Receive>
 8002858:	4603      	mov	r3, r0
 800285a:	2b00      	cmp	r3, #0
 800285c:	d11b      	bne.n	8002896 <USART1_IRQHandler+0x4e>
		{

			datat=(char *)datar;
 800285e:	4b11      	ldr	r3, [pc, #68]	; (80028a4 <USART1_IRQHandler+0x5c>)
 8002860:	4a0e      	ldr	r2, [pc, #56]	; (800289c <USART1_IRQHandler+0x54>)
 8002862:	601a      	str	r2, [r3, #0]
			strcpy(ch,datat);
 8002864:	4b0f      	ldr	r3, [pc, #60]	; (80028a4 <USART1_IRQHandler+0x5c>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	4619      	mov	r1, r3
 800286a:	480f      	ldr	r0, [pc, #60]	; (80028a8 <USART1_IRQHandler+0x60>)
 800286c:	f00a fcc2 	bl	800d1f4 <strcpy>

			if(ch[0]=='E')
 8002870:	4b0d      	ldr	r3, [pc, #52]	; (80028a8 <USART1_IRQHandler+0x60>)
 8002872:	781b      	ldrb	r3, [r3, #0]
 8002874:	2b45      	cmp	r3, #69	; 0x45
 8002876:	d103      	bne.n	8002880 <USART1_IRQHandler+0x38>
			{
				counter=0;}
 8002878:	4b0c      	ldr	r3, [pc, #48]	; (80028ac <USART1_IRQHandler+0x64>)
 800287a:	2200      	movs	r2, #0
 800287c:	601a      	str	r2, [r3, #0]
				counter=1;

			}
		}

}
 800287e:	e00a      	b.n	8002896 <USART1_IRQHandler+0x4e>
			else if(ch[0]=='K'||(ch[1]=='K'))
 8002880:	4b09      	ldr	r3, [pc, #36]	; (80028a8 <USART1_IRQHandler+0x60>)
 8002882:	781b      	ldrb	r3, [r3, #0]
 8002884:	2b4b      	cmp	r3, #75	; 0x4b
 8002886:	d003      	beq.n	8002890 <USART1_IRQHandler+0x48>
 8002888:	4b07      	ldr	r3, [pc, #28]	; (80028a8 <USART1_IRQHandler+0x60>)
 800288a:	785b      	ldrb	r3, [r3, #1]
 800288c:	2b4b      	cmp	r3, #75	; 0x4b
 800288e:	d102      	bne.n	8002896 <USART1_IRQHandler+0x4e>
				counter=1;
 8002890:	4b06      	ldr	r3, [pc, #24]	; (80028ac <USART1_IRQHandler+0x64>)
 8002892:	2201      	movs	r2, #1
 8002894:	601a      	str	r2, [r3, #0]
}
 8002896:	bf00      	nop
 8002898:	bd80      	pop	{r7, pc}
 800289a:	bf00      	nop
 800289c:	20002674 	.word	0x20002674
 80028a0:	20002310 	.word	0x20002310
 80028a4:	200026e8 	.word	0x200026e8
 80028a8:	2000291c 	.word	0x2000291c
 80028ac:	200004f0 	.word	0x200004f0

080028b0 <sd_check_send>:



void sd_check_send()              //function for sending checking "FAILED STATUS" on storage data and send to esp8266 and update status to sucess
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b082      	sub	sp, #8
 80028b4:	af00      	add	r7, sp, #0

	int l=sd_check();
 80028b6:	f000 fad3 	bl	8002e60 <sd_check>
 80028ba:	6078      	str	r0, [r7, #4]
	datas("AT+PING=\"www.google.com\"\r\n");
 80028bc:	4811      	ldr	r0, [pc, #68]	; (8002904 <sd_check_send+0x54>)
 80028be:	f000 fcc7 	bl	8003250 <datas>
	vTaskDelay(2000);
 80028c2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80028c6:	f009 f8f3 	bl	800bab0 <vTaskDelay>
while(l>0&&counter==1)
 80028ca:	e00f      	b.n	80028ec <sd_check_send+0x3c>
{

	l=sd_check();
 80028cc:	f000 fac8 	bl	8002e60 <sd_check>
 80028d0:	6078      	str	r0, [r7, #4]

	sd_send(l);
 80028d2:	6878      	ldr	r0, [r7, #4]
 80028d4:	f000 f9ee 	bl	8002cb4 <sd_send>
	integer_2_string(l);
 80028d8:	6878      	ldr	r0, [r7, #4]
 80028da:	f000 fc2d 	bl	8003138 <integer_2_string>
	datas("AT+PING=\"www.google.com\"\r\n");
 80028de:	4809      	ldr	r0, [pc, #36]	; (8002904 <sd_check_send+0x54>)
 80028e0:	f000 fcb6 	bl	8003250 <datas>
		vTaskDelay(2000);
 80028e4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80028e8:	f009 f8e2 	bl	800bab0 <vTaskDelay>
while(l>0&&counter==1)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	dd03      	ble.n	80028fa <sd_check_send+0x4a>
 80028f2:	4b05      	ldr	r3, [pc, #20]	; (8002908 <sd_check_send+0x58>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	2b01      	cmp	r3, #1
 80028f8:	d0e8      	beq.n	80028cc <sd_check_send+0x1c>
}


}
 80028fa:	bf00      	nop
 80028fc:	3708      	adds	r7, #8
 80028fe:	46bd      	mov	sp, r7
 8002900:	bd80      	pop	{r7, pc}
 8002902:	bf00      	nop
 8002904:	0800e218 	.word	0x0800e218
 8002908:	200004f0 	.word	0x200004f0

0800290c <queuer>:
void queuer(char *data)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b086      	sub	sp, #24
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
	//integer_2_string(stop);
	int i=strlen(data);
 8002914:	6878      	ldr	r0, [r7, #4]
 8002916:	f7fd fc1b 	bl	8000150 <strlen>
 800291a:	4603      	mov	r3, r0
 800291c:	613b      	str	r3, [r7, #16]




int h=size+i;
 800291e:	4b13      	ldr	r3, [pc, #76]	; (800296c <queuer+0x60>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	693a      	ldr	r2, [r7, #16]
 8002924:	4413      	add	r3, r2
 8002926:	60fb      	str	r3, [r7, #12]
for(int p=0;size<h;size++,p++)
 8002928:	2300      	movs	r3, #0
 800292a:	617b      	str	r3, [r7, #20]
 800292c:	e00f      	b.n	800294e <queuer+0x42>
queue[size]=data[p];
 800292e:	697b      	ldr	r3, [r7, #20]
 8002930:	687a      	ldr	r2, [r7, #4]
 8002932:	441a      	add	r2, r3
 8002934:	4b0d      	ldr	r3, [pc, #52]	; (800296c <queuer+0x60>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	7811      	ldrb	r1, [r2, #0]
 800293a:	4a0d      	ldr	r2, [pc, #52]	; (8002970 <queuer+0x64>)
 800293c:	54d1      	strb	r1, [r2, r3]
for(int p=0;size<h;size++,p++)
 800293e:	4b0b      	ldr	r3, [pc, #44]	; (800296c <queuer+0x60>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	3301      	adds	r3, #1
 8002944:	4a09      	ldr	r2, [pc, #36]	; (800296c <queuer+0x60>)
 8002946:	6013      	str	r3, [r2, #0]
 8002948:	697b      	ldr	r3, [r7, #20]
 800294a:	3301      	adds	r3, #1
 800294c:	617b      	str	r3, [r7, #20]
 800294e:	4b07      	ldr	r3, [pc, #28]	; (800296c <queuer+0x60>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	68fa      	ldr	r2, [r7, #12]
 8002954:	429a      	cmp	r2, r3
 8002956:	dcea      	bgt.n	800292e <queuer+0x22>
stop++;
 8002958:	4b06      	ldr	r3, [pc, #24]	; (8002974 <queuer+0x68>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	3301      	adds	r3, #1
 800295e:	4a05      	ldr	r2, [pc, #20]	; (8002974 <queuer+0x68>)
 8002960:	6013      	str	r3, [r2, #0]

}
 8002962:	bf00      	nop
 8002964:	3718      	adds	r7, #24
 8002966:	46bd      	mov	sp, r7
 8002968:	bd80      	pop	{r7, pc}
 800296a:	bf00      	nop
 800296c:	200004f8 	.word	0x200004f8
 8002970:	20001fe4 	.word	0x20001fe4
 8002974:	200004f4 	.word	0x200004f4

08002978 <json_conversion>:
    cJSON_Delete(root);
  //  datas2(string);
    return string;
} */
char  *json_conversion(char h[])
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b0fa      	sub	sp, #488	; 0x1e8
 800297c:	af00      	add	r7, sp, #0
 800297e:	1d3b      	adds	r3, r7, #4
 8002980:	6018      	str	r0, [r3, #0]

 char *string = NULL;
 8002982:	2300      	movs	r3, #0
 8002984:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
    cJSON *name = NULL;
 8002988:	2300      	movs	r3, #0
 800298a:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
    cJSON *resolutions = NULL;
 800298e:	2300      	movs	r3, #0
 8002990:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
    cJSON *resolution = NULL;
 8002994:	2300      	movs	r3, #0
 8002996:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
    cJSON *width = NULL;
 800299a:	2300      	movs	r3, #0
 800299c:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
    cJSON *height = NULL;
 80029a0:	2300      	movs	r3, #0
 80029a2:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
    size_t index = 0;
 80029a6:	2300      	movs	r3, #0
 80029a8:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0

    cJSON *monitor = cJSON_CreateObject();
 80029ac:	f7fe ffbc 	bl	8001928 <cJSON_CreateObject>
 80029b0:	f8c7 01ac 	str.w	r0, [r7, #428]	; 0x1ac


    name = cJSON_CreateString("00000001");
 80029b4:	48b1      	ldr	r0, [pc, #708]	; (8002c7c <json_conversion+0x304>)
 80029b6:	f7fe ff7d 	bl	80018b4 <cJSON_CreateString>
 80029ba:	f8c7 01c4 	str.w	r0, [r7, #452]	; 0x1c4

    /* after creation was successful, immediately add it to the monitor,
     * thereby transferring ownership of the pointer to it */
    cJSON_AddItemToObject(monitor, "did", name);
 80029be:	f8d7 21c4 	ldr.w	r2, [r7, #452]	; 0x1c4
 80029c2:	49af      	ldr	r1, [pc, #700]	; (8002c80 <json_conversion+0x308>)
 80029c4:	f8d7 01ac 	ldr.w	r0, [r7, #428]	; 0x1ac
 80029c8:	f7fe ff3c 	bl	8001844 <cJSON_AddItemToObject>
     cJSON_AddStringToObject(monitor, "gid","00000001");
 80029cc:	4aab      	ldr	r2, [pc, #684]	; (8002c7c <json_conversion+0x304>)
 80029ce:	49ad      	ldr	r1, [pc, #692]	; (8002c84 <json_conversion+0x30c>)
 80029d0:	f8d7 01ac 	ldr.w	r0, [r7, #428]	; 0x1ac
 80029d4:	f7fe ff4c 	bl	8001870 <cJSON_AddStringToObject>
    resolutions = cJSON_CreateArray();
 80029d8:	f7fe ff92 	bl	8001900 <cJSON_CreateArray>
 80029dc:	f8c7 01c0 	str.w	r0, [r7, #448]	; 0x1c0

    cJSON_AddItemToObject(monitor, "rc", resolutions);
 80029e0:	f8d7 21c0 	ldr.w	r2, [r7, #448]	; 0x1c0
 80029e4:	49a8      	ldr	r1, [pc, #672]	; (8002c88 <json_conversion+0x310>)
 80029e6:	f8d7 01ac 	ldr.w	r0, [r7, #428]	; 0x1ac
 80029ea:	f7fe ff2b 	bl	8001844 <cJSON_AddItemToObject>
	 int h1=0;
 80029ee:	2300      	movs	r3, #0
 80029f0:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8

char person[100];
char times[100];
char dates[100];

	int count=0;
 80029f4:	2300      	movs	r3, #0
 80029f6:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
int f1=0;
 80029fa:	2300      	movs	r3, #0
 80029fc:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
int c2=0;
 8002a00:	2300      	movs	r3, #0
 8002a02:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
int per1=0;
 8002a06:	2300      	movs	r3, #0
 8002a08:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
int tim1=0;
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
int date1=0;
 8002a12:	2300      	movs	r3, #0
 8002a14:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
//int y=;
//Serial.print("entered");
while((f1<strlen(h)))                                  //iterate the loop till the end of h[c] ,till the data recieved finishes
 8002a18:	e10f      	b.n	8002c3a <json_conversion+0x2c2>
{                                                                  // our stm32 msg format $stijojoseph\t19;34;21\t1;5;21\tarun kumar\t12;14;51\t1;5;21\t# likewise,here for eg i have shown only two datas

if(h[f1]=='\t')                                                     //increments count on reaching \t
 8002a1a:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8002a1e:	1d3a      	adds	r2, r7, #4
 8002a20:	6812      	ldr	r2, [r2, #0]
 8002a22:	4413      	add	r3, r2
 8002a24:	781b      	ldrb	r3, [r3, #0]
 8002a26:	2b09      	cmp	r3, #9
 8002a28:	d104      	bne.n	8002a34 <json_conversion+0xbc>
count++;
 8002a2a:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8002a2e:	3301      	adds	r3, #1
 8002a30:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
if((count==0)&&(h[f1]!='\t'))                                     //till count becomes 1 the character gets added to String person ,till h[f1] meets its first count it will be storing the ID
 8002a34:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d119      	bne.n	8002a70 <json_conversion+0xf8>
 8002a3c:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8002a40:	1d3a      	adds	r2, r7, #4
 8002a42:	6812      	ldr	r2, [r2, #0]
 8002a44:	4413      	add	r3, r2
 8002a46:	781b      	ldrb	r3, [r3, #0]
 8002a48:	2b09      	cmp	r3, #9
 8002a4a:	d011      	beq.n	8002a70 <json_conversion+0xf8>
{
person[per1]=h[f1];
 8002a4c:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8002a50:	1d3a      	adds	r2, r7, #4
 8002a52:	6812      	ldr	r2, [r2, #0]
 8002a54:	4413      	add	r3, r2
 8002a56:	7819      	ldrb	r1, [r3, #0]
 8002a58:	f507 729a 	add.w	r2, r7, #308	; 0x134
 8002a5c:	f8d7 31dc 	ldr.w	r3, [r7, #476]	; 0x1dc
 8002a60:	4413      	add	r3, r2
 8002a62:	460a      	mov	r2, r1
 8002a64:	701a      	strb	r2, [r3, #0]
per1++;
 8002a66:	f8d7 31dc 	ldr.w	r3, [r7, #476]	; 0x1dc
 8002a6a:	3301      	adds	r3, #1
 8002a6c:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc

}

if((count==1)&&(h[f1]!='\t'))                                       //if count==1 means next data is time ,till next '\t' the character getrs stored on to String time
 8002a70:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8002a74:	2b01      	cmp	r3, #1
 8002a76:	d119      	bne.n	8002aac <json_conversion+0x134>
 8002a78:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8002a7c:	1d3a      	adds	r2, r7, #4
 8002a7e:	6812      	ldr	r2, [r2, #0]
 8002a80:	4413      	add	r3, r2
 8002a82:	781b      	ldrb	r3, [r3, #0]
 8002a84:	2b09      	cmp	r3, #9
 8002a86:	d011      	beq.n	8002aac <json_conversion+0x134>
{
times[tim1]=h[f1];
 8002a88:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8002a8c:	1d3a      	adds	r2, r7, #4
 8002a8e:	6812      	ldr	r2, [r2, #0]
 8002a90:	4413      	add	r3, r2
 8002a92:	7819      	ldrb	r1, [r3, #0]
 8002a94:	f107 02d0 	add.w	r2, r7, #208	; 0xd0
 8002a98:	f8d7 31d8 	ldr.w	r3, [r7, #472]	; 0x1d8
 8002a9c:	4413      	add	r3, r2
 8002a9e:	460a      	mov	r2, r1
 8002aa0:	701a      	strb	r2, [r3, #0]
  tim1++;
 8002aa2:	f8d7 31d8 	ldr.w	r3, [r7, #472]	; 0x1d8
 8002aa6:	3301      	adds	r3, #1
 8002aa8:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
  //Serial.print(h[f1]);
}
if((count==2)&&(h[f1]!='\t'))// similary date get stored to String date
 8002aac:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8002ab0:	2b02      	cmp	r3, #2
 8002ab2:	d119      	bne.n	8002ae8 <json_conversion+0x170>
 8002ab4:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8002ab8:	1d3a      	adds	r2, r7, #4
 8002aba:	6812      	ldr	r2, [r2, #0]
 8002abc:	4413      	add	r3, r2
 8002abe:	781b      	ldrb	r3, [r3, #0]
 8002ac0:	2b09      	cmp	r3, #9
 8002ac2:	d011      	beq.n	8002ae8 <json_conversion+0x170>
{
dates[date1]=h[f1];
 8002ac4:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8002ac8:	1d3a      	adds	r2, r7, #4
 8002aca:	6812      	ldr	r2, [r2, #0]
 8002acc:	4413      	add	r3, r2
 8002ace:	7819      	ldrb	r1, [r3, #0]
 8002ad0:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8002ad4:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8002ad8:	4413      	add	r3, r2
 8002ada:	460a      	mov	r2, r1
 8002adc:	701a      	strb	r2, [r3, #0]
   //Serial.print(h[f1]);
date1++;
 8002ade:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8002ae2:	3301      	adds	r3, #1
 8002ae4:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
}
if(count==3)  //if count==3 means a person's id,time,date has been stored to STRING person,timesdates  variables
 8002ae8:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8002aec:	2b03      	cmp	r3, #3
 8002aee:	f040 809f 	bne.w	8002c30 <json_conversion+0x2b8>
{
count=0;
 8002af2:	2300      	movs	r3, #0
 8002af4:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
//datas(person);
//datas(times);
//===datas(dates);
per1=0;
 8002af8:	2300      	movs	r3, #0
 8002afa:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
tim1=0;
 8002afe:	2300      	movs	r3, #0
 8002b00:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
date1=0;
 8002b04:	2300      	movs	r3, #0
 8002b06:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
char datetime[100];
strcpy(datetime,times);
 8002b0a:	f107 02d0 	add.w	r2, r7, #208	; 0xd0
 8002b0e:	f107 0308 	add.w	r3, r7, #8
 8002b12:	4611      	mov	r1, r2
 8002b14:	4618      	mov	r0, r3
 8002b16:	f00a fb6d 	bl	800d1f4 <strcpy>
int count3=0;
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
int timesize=strlen(times);
 8002b20:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8002b24:	4618      	mov	r0, r3
 8002b26:	f7fd fb13 	bl	8000150 <strlen>
 8002b2a:	4603      	mov	r3, r0
 8002b2c:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0

int totalsize=strlen(dates)+timesize;
 8002b30:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002b34:	4618      	mov	r0, r3
 8002b36:	f7fd fb0b 	bl	8000150 <strlen>
 8002b3a:	4602      	mov	r2, r0
 8002b3c:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8002b40:	4413      	add	r3, r2
 8002b42:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
int count4=0;
 8002b46:	2300      	movs	r3, #0
 8002b48:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
datetime[timesize++]=' ';
 8002b4c:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8002b50:	1c5a      	adds	r2, r3, #1
 8002b52:	f8c7 21d0 	str.w	r2, [r7, #464]	; 0x1d0
 8002b56:	f107 0208 	add.w	r2, r7, #8
 8002b5a:	2120      	movs	r1, #32
 8002b5c:	54d1      	strb	r1, [r2, r3]
for(;timesize<totalsize;timesize++,count4++)
 8002b5e:	e016      	b.n	8002b8e <json_conversion+0x216>
{


	datetime[timesize]=dates[count4];
 8002b60:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8002b64:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8002b68:	4413      	add	r3, r2
 8002b6a:	7819      	ldrb	r1, [r3, #0]
 8002b6c:	f107 0208 	add.w	r2, r7, #8
 8002b70:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8002b74:	4413      	add	r3, r2
 8002b76:	460a      	mov	r2, r1
 8002b78:	701a      	strb	r2, [r3, #0]
for(;timesize<totalsize;timesize++,count4++)
 8002b7a:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8002b7e:	3301      	adds	r3, #1
 8002b80:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
 8002b84:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8002b88:	3301      	adds	r3, #1
 8002b8a:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
 8002b8e:	f8d7 21d0 	ldr.w	r2, [r7, #464]	; 0x1d0
 8002b92:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 8002b96:	429a      	cmp	r2, r3
 8002b98:	dbe2      	blt.n	8002b60 <json_conversion+0x1e8>

}
        resolution = cJSON_CreateObject();
 8002b9a:	f7fe fec5 	bl	8001928 <cJSON_CreateObject>
 8002b9e:	f8c7 01bc 	str.w	r0, [r7, #444]	; 0x1bc


       cJSON_AddItemToArray(resolutions, resolution);
 8002ba2:	f8d7 11bc 	ldr.w	r1, [r7, #444]	; 0x1bc
 8002ba6:	f8d7 01c0 	ldr.w	r0, [r7, #448]	; 0x1c0
 8002baa:	f7fe fddd 	bl	8001768 <cJSON_AddItemToArray>
       cJSON_AddStringToObject(resolution, "uid",person);
 8002bae:	f507 739a 	add.w	r3, r7, #308	; 0x134
 8002bb2:	461a      	mov	r2, r3
 8002bb4:	4935      	ldr	r1, [pc, #212]	; (8002c8c <json_conversion+0x314>)
 8002bb6:	f8d7 01bc 	ldr.w	r0, [r7, #444]	; 0x1bc
 8002bba:	f7fe fe59 	bl	8001870 <cJSON_AddStringToObject>
      cJSON_AddStringToObject(resolution, "atp","1");
 8002bbe:	4a34      	ldr	r2, [pc, #208]	; (8002c90 <json_conversion+0x318>)
 8002bc0:	4934      	ldr	r1, [pc, #208]	; (8002c94 <json_conversion+0x31c>)
 8002bc2:	f8d7 01bc 	ldr.w	r0, [r7, #444]	; 0x1bc
 8002bc6:	f7fe fe53 	bl	8001870 <cJSON_AddStringToObject>
      cJSON_AddStringToObject(resolution, "as", "VALID");
 8002bca:	4a33      	ldr	r2, [pc, #204]	; (8002c98 <json_conversion+0x320>)
 8002bcc:	4933      	ldr	r1, [pc, #204]	; (8002c9c <json_conversion+0x324>)
 8002bce:	f8d7 01bc 	ldr.w	r0, [r7, #444]	; 0x1bc
 8002bd2:	f7fe fe4d 	bl	8001870 <cJSON_AddStringToObject>
      cJSON_AddStringToObject(resolution,"qr","ABC");
 8002bd6:	4a32      	ldr	r2, [pc, #200]	; (8002ca0 <json_conversion+0x328>)
 8002bd8:	4932      	ldr	r1, [pc, #200]	; (8002ca4 <json_conversion+0x32c>)
 8002bda:	f8d7 01bc 	ldr.w	r0, [r7, #444]	; 0x1bc
 8002bde:	f7fe fe47 	bl	8001870 <cJSON_AddStringToObject>
      cJSON_AddStringToObject(resolution,"dt",datetime);
 8002be2:	f107 0308 	add.w	r3, r7, #8
 8002be6:	461a      	mov	r2, r3
 8002be8:	492f      	ldr	r1, [pc, #188]	; (8002ca8 <json_conversion+0x330>)
 8002bea:	f8d7 01bc 	ldr.w	r0, [r7, #444]	; 0x1bc
 8002bee:	f7fe fe3f 	bl	8001870 <cJSON_AddStringToObject>
memset(person,0,sizeof(person));
 8002bf2:	f507 739a 	add.w	r3, r7, #308	; 0x134
 8002bf6:	2264      	movs	r2, #100	; 0x64
 8002bf8:	2100      	movs	r1, #0
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	f00a f9e7 	bl	800cfce <memset>
memset(times,0,sizeof(times));
 8002c00:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8002c04:	2264      	movs	r2, #100	; 0x64
 8002c06:	2100      	movs	r1, #0
 8002c08:	4618      	mov	r0, r3
 8002c0a:	f00a f9e0 	bl	800cfce <memset>
memset(dates,0,sizeof(dates));
 8002c0e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002c12:	2264      	movs	r2, #100	; 0x64
 8002c14:	2100      	movs	r1, #0
 8002c16:	4618      	mov	r0, r3
 8002c18:	f00a f9d9 	bl	800cfce <memset>
memset(datetime,0,sizeof(datetime));
 8002c1c:	f107 0308 	add.w	r3, r7, #8
 8002c20:	2264      	movs	r2, #100	; 0x64
 8002c22:	2100      	movs	r1, #0
 8002c24:	4618      	mov	r0, r3
 8002c26:	f00a f9d2 	bl	800cfce <memset>
datas("\n");
 8002c2a:	4820      	ldr	r0, [pc, #128]	; (8002cac <json_conversion+0x334>)
 8002c2c:	f000 fb10 	bl	8003250 <datas>
}

f1++;
 8002c30:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8002c34:	3301      	adds	r3, #1
 8002c36:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
while((f1<strlen(h)))                                  //iterate the loop till the end of h[c] ,till the data recieved finishes
 8002c3a:	1d3b      	adds	r3, r7, #4
 8002c3c:	6818      	ldr	r0, [r3, #0]
 8002c3e:	f7fd fa87 	bl	8000150 <strlen>
 8002c42:	4602      	mov	r2, r0
 8002c44:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8002c48:	429a      	cmp	r2, r3
 8002c4a:	f63f aee6 	bhi.w	8002a1a <json_conversion+0xa2>





  char *json =cJSON_Print(monitor);
 8002c4e:	f8d7 01ac 	ldr.w	r0, [r7, #428]	; 0x1ac
 8002c52:	f7fe fae9 	bl	8001228 <cJSON_Print>
 8002c56:	f8c7 01a0 	str.w	r0, [r7, #416]	; 0x1a0

  cJSON_Delete(monitor);
 8002c5a:	f8d7 01ac 	ldr.w	r0, [r7, #428]	; 0x1ac
 8002c5e:	f7fd ff29 	bl	8000ab4 <cJSON_Delete>
memset(queue,0,sizeof(queue));
 8002c62:	f240 322a 	movw	r2, #810	; 0x32a
 8002c66:	2100      	movs	r1, #0
 8002c68:	4811      	ldr	r0, [pc, #68]	; (8002cb0 <json_conversion+0x338>)
 8002c6a:	f00a f9b0 	bl	800cfce <memset>
//datas2(json);
return json;
 8002c6e:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
}
 8002c72:	4618      	mov	r0, r3
 8002c74:	f507 77f4 	add.w	r7, r7, #488	; 0x1e8
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	bd80      	pop	{r7, pc}
 8002c7c:	0800e400 	.word	0x0800e400
 8002c80:	0800e40c 	.word	0x0800e40c
 8002c84:	0800e410 	.word	0x0800e410
 8002c88:	0800e414 	.word	0x0800e414
 8002c8c:	0800e418 	.word	0x0800e418
 8002c90:	0800e41c 	.word	0x0800e41c
 8002c94:	0800e420 	.word	0x0800e420
 8002c98:	0800e424 	.word	0x0800e424
 8002c9c:	0800e42c 	.word	0x0800e42c
 8002ca0:	0800e430 	.word	0x0800e430
 8002ca4:	0800e434 	.word	0x0800e434
 8002ca8:	0800e438 	.word	0x0800e438
 8002cac:	0800e43c 	.word	0x0800e43c
 8002cb0:	20001fe4 	.word	0x20001fe4

08002cb4 <sd_send>:


void sd_send(int h1)     //function for sending the  data from sd card to esp8266 by updating the status on sd card as "success"
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b09c      	sub	sp, #112	; 0x70
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
char buffer[40];
char sender[40];

	int coun=0;
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	66fb      	str	r3, [r7, #108]	; 0x6c

if(h1==-5||stop>JSON_NUM)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	f113 0f05 	cmn.w	r3, #5
 8002cc6:	d004      	beq.n	8002cd2 <sd_send+0x1e>
 8002cc8:	4b61      	ldr	r3, [pc, #388]	; (8002e50 <sd_send+0x19c>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	2b02      	cmp	r3, #2
 8002cce:	f340 80b6 	ble.w	8002e3e <sd_send+0x18a>
{
//datas("#");
//queuer("#");
if(stop!=0)
 8002cd2:	4b5f      	ldr	r3, [pc, #380]	; (8002e50 <sd_send+0x19c>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	f000 80b5 	beq.w	8002e46 <sd_send+0x192>
{queue_send();
 8002cdc:	f000 fd84 	bl	80037e8 <queue_send>
//queuer('#');
stop=0;
 8002ce0:	4b5b      	ldr	r3, [pc, #364]	; (8002e50 <sd_send+0x19c>)
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	601a      	str	r2, [r3, #0]
if(stop!=0)
 8002ce6:	e0ae      	b.n	8002e46 <sd_send+0x192>
}
}else
{
 while(coun<3)
 {
	 if(h1==-5||stop>JSON_NUM)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	f113 0f05 	cmn.w	r3, #5
 8002cee:	d003      	beq.n	8002cf8 <sd_send+0x44>
 8002cf0:	4b57      	ldr	r3, [pc, #348]	; (8002e50 <sd_send+0x19c>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	2b02      	cmp	r3, #2
 8002cf6:	dd09      	ble.n	8002d0c <sd_send+0x58>
	 {
	 //datas("#");
	 //queuer("#");
	 if(stop!=0)
 8002cf8:	4b55      	ldr	r3, [pc, #340]	; (8002e50 <sd_send+0x19c>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d00a      	beq.n	8002d16 <sd_send+0x62>
	 { queue_send();
 8002d00:	f000 fd72 	bl	80037e8 <queue_send>
	// queuer("#");
	 stop=0;
 8002d04:	4b52      	ldr	r3, [pc, #328]	; (8002e50 <sd_send+0x19c>)
 8002d06:	2200      	movs	r2, #0
 8002d08:	601a      	str	r2, [r3, #0]
	 if(stop!=0)
 8002d0a:	e004      	b.n	8002d16 <sd_send+0x62>
	// queuer("#");
	 }
	 }else
 if(f_open(&f, "storage1.txt", FA_OPEN_ALWAYS |FA_READ|FA_WRITE) == FR_OK)
 8002d0c:	2213      	movs	r2, #19
 8002d0e:	4951      	ldr	r1, [pc, #324]	; (8002e54 <sd_send+0x1a0>)
 8002d10:	4851      	ldr	r0, [pc, #324]	; (8002e58 <sd_send+0x1a4>)
 8002d12:	f006 f9a3 	bl	800905c <f_open>
 { //datas("opened storage \n");
  	 }
 int o=1;
 8002d16:	2301      	movs	r3, #1
 8002d18:	66bb      	str	r3, [r7, #104]	; 0x68
 int h=0;
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	667b      	str	r3, [r7, #100]	; 0x64
 int x;
  if((coun==1)&&(h1==1))
 8002d1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d20:	2b01      	cmp	r3, #1
 8002d22:	d17c      	bne.n	8002e1e <sd_send+0x16a>
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2b01      	cmp	r3, #1
 8002d28:	d179      	bne.n	8002e1e <sd_send+0x16a>

{

	//datas2(sender);
	queuer(sender);
 8002d2a:	f107 030c 	add.w	r3, r7, #12
 8002d2e:	4618      	mov	r0, r3
 8002d30:	f7ff fdec 	bl	800290c <queuer>
  //datas("$");
	//datas(sender);
f_puts(sender,&f);
 8002d34:	f107 030c 	add.w	r3, r7, #12
 8002d38:	4947      	ldr	r1, [pc, #284]	; (8002e58 <sd_send+0x1a4>)
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	f007 fc74 	bl	800a628 <f_puts>
f_puts("sucess\t\n",&f);
 8002d40:	4945      	ldr	r1, [pc, #276]	; (8002e58 <sd_send+0x1a4>)
 8002d42:	4846      	ldr	r0, [pc, #280]	; (8002e5c <sd_send+0x1a8>)
 8002d44:	f007 fc70 	bl	800a628 <f_puts>


	memset(sender, 0, bufsize(sender));
 8002d48:	f107 030c 	add.w	r3, r7, #12
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	f000 faab 	bl	80032a8 <bufsize>
 8002d52:	4603      	mov	r3, r0
 8002d54:	461a      	mov	r2, r3
 8002d56:	f107 030c 	add.w	r3, r7, #12
 8002d5a:	2100      	movs	r1, #0
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	f00a f936 	bl	800cfce <memset>


}
  while(f_gets(buffer, sizeof(buffer), &f))
 8002d62:	e05c      	b.n	8002e1e <sd_send+0x16a>
  {



		if((coun==0)&&(o==h1))
 8002d64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d120      	bne.n	8002dac <sd_send+0xf8>
 8002d6a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	429a      	cmp	r2, r3
 8002d70:	d11c      	bne.n	8002dac <sd_send+0xf8>
		{
			 x=strlen(buffer)-8;
 8002d72:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002d76:	4618      	mov	r0, r3
 8002d78:	f7fd f9ea 	bl	8000150 <strlen>
 8002d7c:	4603      	mov	r3, r0
 8002d7e:	3b08      	subs	r3, #8
 8002d80:	663b      	str	r3, [r7, #96]	; 0x60
   h=0;
 8002d82:	2300      	movs	r3, #0
 8002d84:	667b      	str	r3, [r7, #100]	; 0x64
   for(;h<x;h++)
 8002d86:	e00d      	b.n	8002da4 <sd_send+0xf0>
		sender[h]=buffer[h];
 8002d88:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8002d8c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002d8e:	4413      	add	r3, r2
 8002d90:	7819      	ldrb	r1, [r3, #0]
 8002d92:	f107 020c 	add.w	r2, r7, #12
 8002d96:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002d98:	4413      	add	r3, r2
 8002d9a:	460a      	mov	r2, r1
 8002d9c:	701a      	strb	r2, [r3, #0]
   for(;h<x;h++)
 8002d9e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002da0:	3301      	adds	r3, #1
 8002da2:	667b      	str	r3, [r7, #100]	; 0x64
 8002da4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8002da6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002da8:	429a      	cmp	r2, r3
 8002daa:	dbed      	blt.n	8002d88 <sd_send+0xd4>


		}
		int s=h1-1;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	3b01      	subs	r3, #1
 8002db0:	65fb      	str	r3, [r7, #92]	; 0x5c
		if((coun==1)&&(o==s)&&(h1!=1))
 8002db2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002db4:	2b01      	cmp	r3, #1
 8002db6:	d122      	bne.n	8002dfe <sd_send+0x14a>
 8002db8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002dba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002dbc:	429a      	cmp	r2, r3
 8002dbe:	d11e      	bne.n	8002dfe <sd_send+0x14a>
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2b01      	cmp	r3, #1
 8002dc4:	d01b      	beq.n	8002dfe <sd_send+0x14a>
			{

//	datas(sender);
	//datas2(sender);

	queuer(sender);
 8002dc6:	f107 030c 	add.w	r3, r7, #12
 8002dca:	4618      	mov	r0, r3
 8002dcc:	f7ff fd9e 	bl	800290c <queuer>
f_puts(sender,&f);
 8002dd0:	f107 030c 	add.w	r3, r7, #12
 8002dd4:	4920      	ldr	r1, [pc, #128]	; (8002e58 <sd_send+0x1a4>)
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	f007 fc26 	bl	800a628 <f_puts>
f_puts("sucess\t\n",&f);
 8002ddc:	491e      	ldr	r1, [pc, #120]	; (8002e58 <sd_send+0x1a4>)
 8002dde:	481f      	ldr	r0, [pc, #124]	; (8002e5c <sd_send+0x1a8>)
 8002de0:	f007 fc22 	bl	800a628 <f_puts>

	memset(sender, 0, bufsize(sender));
 8002de4:	f107 030c 	add.w	r3, r7, #12
 8002de8:	4618      	mov	r0, r3
 8002dea:	f000 fa5d 	bl	80032a8 <bufsize>
 8002dee:	4603      	mov	r3, r0
 8002df0:	461a      	mov	r2, r3
 8002df2:	f107 030c 	add.w	r3, r7, #12
 8002df6:	2100      	movs	r1, #0
 8002df8:	4618      	mov	r0, r3
 8002dfa:	f00a f8e8 	bl	800cfce <memset>

}

		o++;
 8002dfe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002e00:	3301      	adds	r3, #1
 8002e02:	66bb      	str	r3, [r7, #104]	; 0x68
	 memset(buffer, 0, bufsize(buffer));
 8002e04:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002e08:	4618      	mov	r0, r3
 8002e0a:	f000 fa4d 	bl	80032a8 <bufsize>
 8002e0e:	4603      	mov	r3, r0
 8002e10:	461a      	mov	r2, r3
 8002e12:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002e16:	2100      	movs	r1, #0
 8002e18:	4618      	mov	r0, r3
 8002e1a:	f00a f8d8 	bl	800cfce <memset>
  while(f_gets(buffer, sizeof(buffer), &f))
 8002e1e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002e22:	4a0d      	ldr	r2, [pc, #52]	; (8002e58 <sd_send+0x1a4>)
 8002e24:	2128      	movs	r1, #40	; 0x28
 8002e26:	4618      	mov	r0, r3
 8002e28:	f007 fb84 	bl	800a534 <f_gets>
 8002e2c:	4603      	mov	r3, r0
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d198      	bne.n	8002d64 <sd_send+0xb0>

	}


	coun++;
 8002e32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e34:	3301      	adds	r3, #1
 8002e36:	66fb      	str	r3, [r7, #108]	; 0x6c
	f_close(&f);
 8002e38:	4807      	ldr	r0, [pc, #28]	; (8002e58 <sd_send+0x1a4>)
 8002e3a:	f006 ff99 	bl	8009d70 <f_close>
 while(coun<3)
 8002e3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e40:	2b02      	cmp	r3, #2
 8002e42:	f77f af51 	ble.w	8002ce8 <sd_send+0x34>


}


}
 8002e46:	bf00      	nop
 8002e48:	3770      	adds	r7, #112	; 0x70
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	bd80      	pop	{r7, pc}
 8002e4e:	bf00      	nop
 8002e50:	200004f4 	.word	0x200004f4
 8002e54:	0800e440 	.word	0x0800e440
 8002e58:	20001704 	.word	0x20001704
 8002e5c:	0800e450 	.word	0x0800e450

08002e60 <sd_check>:


int sd_check() //function for checking any data on sd card with "FAILED" status ,return the line number of data with failed status on file "storage1.txt"
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b0a4      	sub	sp, #144	; 0x90
 8002e64:	af00      	add	r7, sp, #0
char buffer[40];
char sender[40]="FAILED";
 8002e66:	4a66      	ldr	r2, [pc, #408]	; (8003000 <sd_check+0x1a0>)
 8002e68:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002e6c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002e70:	6018      	str	r0, [r3, #0]
 8002e72:	3304      	adds	r3, #4
 8002e74:	8019      	strh	r1, [r3, #0]
 8002e76:	3302      	adds	r3, #2
 8002e78:	0c0a      	lsrs	r2, r1, #16
 8002e7a:	701a      	strb	r2, [r3, #0]
 8002e7c:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 8002e80:	2221      	movs	r2, #33	; 0x21
 8002e82:	2100      	movs	r1, #0
 8002e84:	4618      	mov	r0, r3
 8002e86:	f00a f8a2 	bl	800cfce <memset>
 char sender1[40];

if(f_open(&c1, "storage1.txt", FA_OPEN_ALWAYS |FA_READ|FA_WRITE) == FR_OK)
 8002e8a:	2213      	movs	r2, #19
 8002e8c:	495d      	ldr	r1, [pc, #372]	; (8003004 <sd_check+0x1a4>)
 8002e8e:	485e      	ldr	r0, [pc, #376]	; (8003008 <sd_check+0x1a8>)
 8002e90:	f006 f8e4 	bl	800905c <f_open>
 8002e94:	4603      	mov	r3, r0
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	f040 80a5 	bne.w	8002fe6 <sd_check+0x186>
 {
  int o=0;
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
while(f_gets(buffer, sizeof(buffer), &c1))
 8002ea2:	e092      	b.n	8002fca <sd_check+0x16a>
  {

  int x=strlen(buffer)-8;
 8002ea4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	f7fd f951 	bl	8000150 <strlen>
 8002eae:	4603      	mov	r3, r0
 8002eb0:	3b08      	subs	r3, #8
 8002eb2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  int r=(strlen(buffer)-2);
 8002eb6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002eba:	4618      	mov	r0, r3
 8002ebc:	f7fd f948 	bl	8000150 <strlen>
 8002ec0:	4603      	mov	r3, r0
 8002ec2:	3b02      	subs	r3, #2
 8002ec4:	67bb      	str	r3, [r7, #120]	; 0x78
	int coun=0;
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	int	h=0;
 8002ecc:	2300      	movs	r3, #0
 8002ece:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   for(;x<r;h++,x++)
 8002ed2:	e01c      	b.n	8002f0e <sd_check+0xae>
		if(sender[h]==buffer[x])
 8002ed4:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002ed8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002edc:	4413      	add	r3, r2
 8002ede:	781a      	ldrb	r2, [r3, #0]
 8002ee0:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8002ee4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002ee8:	440b      	add	r3, r1
 8002eea:	781b      	ldrb	r3, [r3, #0]
 8002eec:	429a      	cmp	r2, r3
 8002eee:	d104      	bne.n	8002efa <sd_check+0x9a>
		{

			coun++;
 8002ef0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002ef4:	3301      	adds	r3, #1
 8002ef6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   for(;x<r;h++,x++)
 8002efa:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002efe:	3301      	adds	r3, #1
 8002f00:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002f04:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002f08:	3301      	adds	r3, #1
 8002f0a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002f0e:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8002f12:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002f14:	429a      	cmp	r2, r3
 8002f16:	dbdd      	blt.n	8002ed4 <sd_check+0x74>

		}
		h=0;
 8002f18:	2300      	movs	r3, #0
 8002f1a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80


		o++;
 8002f1e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002f22:	3301      	adds	r3, #1
 8002f24:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
		if(coun>5)
 8002f28:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002f2c:	2b05      	cmp	r3, #5
 8002f2e:	dd34      	ble.n	8002f9a <sd_check+0x13a>
		{	 x=strlen(buffer)-8;
 8002f30:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002f34:	4618      	mov	r0, r3
 8002f36:	f7fd f90b 	bl	8000150 <strlen>
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	3b08      	subs	r3, #8
 8002f3e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
		 int p1=0;
 8002f42:	2300      	movs	r3, #0
 8002f44:	67fb      	str	r3, [r7, #124]	; 0x7c
   for(;p1<x;h++,p1++)
 8002f46:	e012      	b.n	8002f6e <sd_check+0x10e>
		sender1[p1]=buffer[h];
 8002f48:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8002f4c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002f50:	4413      	add	r3, r2
 8002f52:	7819      	ldrb	r1, [r3, #0]
 8002f54:	463a      	mov	r2, r7
 8002f56:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002f58:	4413      	add	r3, r2
 8002f5a:	460a      	mov	r2, r1
 8002f5c:	701a      	strb	r2, [r3, #0]
   for(;p1<x;h++,p1++)
 8002f5e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002f62:	3301      	adds	r3, #1
 8002f64:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002f68:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002f6a:	3301      	adds	r3, #1
 8002f6c:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002f6e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8002f70:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002f74:	429a      	cmp	r2, r3
 8002f76:	dbe7      	blt.n	8002f48 <sd_check+0xe8>

memset(sender1, 0, bufsize(sender1));
 8002f78:	463b      	mov	r3, r7
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	f000 f994 	bl	80032a8 <bufsize>
 8002f80:	4603      	mov	r3, r0
 8002f82:	461a      	mov	r2, r3
 8002f84:	463b      	mov	r3, r7
 8002f86:	2100      	movs	r1, #0
 8002f88:	4618      	mov	r0, r3
 8002f8a:	f00a f820 	bl	800cfce <memset>
		//	datas(sender1);
			f_close(&c1);
 8002f8e:	481e      	ldr	r0, [pc, #120]	; (8003008 <sd_check+0x1a8>)
 8002f90:	f006 feee 	bl	8009d70 <f_close>
			return o;
 8002f94:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002f98:	e02d      	b.n	8002ff6 <sd_check+0x196>

		}



	memset(sender1, 0, bufsize(sender1));
 8002f9a:	463b      	mov	r3, r7
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	f000 f983 	bl	80032a8 <bufsize>
 8002fa2:	4603      	mov	r3, r0
 8002fa4:	461a      	mov	r2, r3
 8002fa6:	463b      	mov	r3, r7
 8002fa8:	2100      	movs	r1, #0
 8002faa:	4618      	mov	r0, r3
 8002fac:	f00a f80f 	bl	800cfce <memset>
	memset(buffer, 0, bufsize(buffer));
 8002fb0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	f000 f977 	bl	80032a8 <bufsize>
 8002fba:	4603      	mov	r3, r0
 8002fbc:	461a      	mov	r2, r3
 8002fbe:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002fc2:	2100      	movs	r1, #0
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	f00a f802 	bl	800cfce <memset>
while(f_gets(buffer, sizeof(buffer), &c1))
 8002fca:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002fce:	4a0e      	ldr	r2, [pc, #56]	; (8003008 <sd_check+0x1a8>)
 8002fd0:	2128      	movs	r1, #40	; 0x28
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	f007 faae 	bl	800a534 <f_gets>
 8002fd8:	4603      	mov	r3, r0
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	f47f af62 	bne.w	8002ea4 <sd_check+0x44>
}

	f_close(&c1);
 8002fe0:	4809      	ldr	r0, [pc, #36]	; (8003008 <sd_check+0x1a8>)
 8002fe2:	f006 fec5 	bl	8009d70 <f_close>


}

f_unlink ((TCHAR const*)"STORAGE1.TXT");
 8002fe6:	4809      	ldr	r0, [pc, #36]	; (800300c <sd_check+0x1ac>)
 8002fe8:	f007 f9c1 	bl	800a36e <f_unlink>
f_close(&c1);
 8002fec:	4806      	ldr	r0, [pc, #24]	; (8003008 <sd_check+0x1a8>)
 8002fee:	f006 febf 	bl	8009d70 <f_close>
return -5;
 8002ff2:	f06f 0304 	mvn.w	r3, #4

}
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	3790      	adds	r7, #144	; 0x90
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	bd80      	pop	{r7, pc}
 8002ffe:	bf00      	nop
 8003000:	0800e46c 	.word	0x0800e46c
 8003004:	0800e440 	.word	0x0800e440
 8003008:	20002350 	.word	0x20002350
 800300c:	0800e45c 	.word	0x0800e45c

08003010 <wifi_connection_setup>:
void wifi_connection_setup()
{
 8003010:	b580      	push	{r7, lr}
 8003012:	af00      	add	r7, sp, #0
datas("AT+CWMODE=3\r\n");
 8003014:	480d      	ldr	r0, [pc, #52]	; (800304c <wifi_connection_setup+0x3c>)
 8003016:	f000 f91b 	bl	8003250 <datas>
HAL_Delay(1500);
 800301a:	f240 50dc 	movw	r0, #1500	; 0x5dc
 800301e:	f001 f905 	bl	800422c <HAL_Delay>
datas("AT+CWJAP_DEF=");
 8003022:	480b      	ldr	r0, [pc, #44]	; (8003050 <wifi_connection_setup+0x40>)
 8003024:	f000 f914 	bl	8003250 <datas>
datas(SSID);
 8003028:	480a      	ldr	r0, [pc, #40]	; (8003054 <wifi_connection_setup+0x44>)
 800302a:	f000 f911 	bl	8003250 <datas>
datas(",");
 800302e:	480a      	ldr	r0, [pc, #40]	; (8003058 <wifi_connection_setup+0x48>)
 8003030:	f000 f90e 	bl	8003250 <datas>
datas(PASSWORD);
 8003034:	4809      	ldr	r0, [pc, #36]	; (800305c <wifi_connection_setup+0x4c>)
 8003036:	f000 f90b 	bl	8003250 <datas>
datas("\r\n");
 800303a:	4809      	ldr	r0, [pc, #36]	; (8003060 <wifi_connection_setup+0x50>)
 800303c:	f000 f908 	bl	8003250 <datas>
HAL_Delay(8000);
 8003040:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 8003044:	f001 f8f2 	bl	800422c <HAL_Delay>

}
 8003048:	bf00      	nop
 800304a:	bd80      	pop	{r7, pc}
 800304c:	0800e494 	.word	0x0800e494
 8003050:	0800e4a4 	.word	0x0800e4a4
 8003054:	0800e4b4 	.word	0x0800e4b4
 8003058:	0800e4bc 	.word	0x0800e4bc
 800305c:	0800e4c0 	.word	0x0800e4c0
 8003060:	0800e270 	.word	0x0800e270

08003064 <sd_to_sram>:




void sd_to_sram()               //function to copy names from sd card to sram based on sram size (NAME_SIZE)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b082      	sub	sp, #8
 8003068:	af00      	add	r7, sp, #0
	 int i=0;
 800306a:	2300      	movs	r3, #0
 800306c:	607b      	str	r3, [r7, #4]
if(f_open(&d1,FILE_NAME, FA_OPEN_ALWAYS |FA_READ) == FR_OK)
 800306e:	2211      	movs	r2, #17
 8003070:	4916      	ldr	r1, [pc, #88]	; (80030cc <sd_to_sram+0x68>)
 8003072:	4817      	ldr	r0, [pc, #92]	; (80030d0 <sd_to_sram+0x6c>)
 8003074:	f005 fff2 	bl	800905c <f_open>
 8003078:	4603      	mov	r3, r0
 800307a:	2b00      	cmp	r3, #0
 800307c:	d111      	bne.n	80030a2 <sd_to_sram+0x3e>
 { datas2("opened storage ");
 800307e:	4815      	ldr	r0, [pc, #84]	; (80030d4 <sd_to_sram+0x70>)
 8003080:	f000 f8fc 	bl	800327c <datas2>
 }
while((f_gets(buffer, sizeof(buffer), &d1))&&(i<NAME_SIZE))
 8003084:	e00d      	b.n	80030a2 <sd_to_sram+0x3e>
  {

	if(i<NAME_SIZE)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	2b01      	cmp	r3, #1
 800308a:	dc0a      	bgt.n	80030a2 <sd_to_sram+0x3e>
	{
	strcpy(sd[i].names,buffer);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	011b      	lsls	r3, r3, #4
 8003090:	4a11      	ldr	r2, [pc, #68]	; (80030d8 <sd_to_sram+0x74>)
 8003092:	4413      	add	r3, r2
 8003094:	4911      	ldr	r1, [pc, #68]	; (80030dc <sd_to_sram+0x78>)
 8003096:	4618      	mov	r0, r3
 8003098:	f00a f8ac 	bl	800d1f4 <strcpy>

		i++;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	3301      	adds	r3, #1
 80030a0:	607b      	str	r3, [r7, #4]
while((f_gets(buffer, sizeof(buffer), &d1))&&(i<NAME_SIZE))
 80030a2:	4a0b      	ldr	r2, [pc, #44]	; (80030d0 <sd_to_sram+0x6c>)
 80030a4:	2164      	movs	r1, #100	; 0x64
 80030a6:	480d      	ldr	r0, [pc, #52]	; (80030dc <sd_to_sram+0x78>)
 80030a8:	f007 fa44 	bl	800a534 <f_gets>
 80030ac:	4603      	mov	r3, r0
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d002      	beq.n	80030b8 <sd_to_sram+0x54>
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	2b01      	cmp	r3, #1
 80030b6:	dde6      	ble.n	8003086 <sd_to_sram+0x22>
	}

	}
	f_close(&d1);
 80030b8:	4805      	ldr	r0, [pc, #20]	; (80030d0 <sd_to_sram+0x6c>)
 80030ba:	f006 fe59 	bl	8009d70 <f_close>

datas2("done");
 80030be:	4808      	ldr	r0, [pc, #32]	; (80030e0 <sd_to_sram+0x7c>)
 80030c0:	f000 f8dc 	bl	800327c <datas2>




}
 80030c4:	bf00      	nop
 80030c6:	3708      	adds	r7, #8
 80030c8:	46bd      	mov	sp, r7
 80030ca:	bd80      	pop	{r7, pc}
 80030cc:	0800e3c8 	.word	0x0800e3c8
 80030d0:	20001b64 	.word	0x20001b64
 80030d4:	0800e4d0 	.word	0x0800e4d0
 80030d8:	200025f8 	.word	0x200025f8
 80030dc:	2000257c 	.word	0x2000257c
 80030e0:	0800e4e0 	.word	0x0800e4e0

080030e4 <check_sram>:
int check_sram(char names[20])   //function for data comparison on sram
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b088      	sub	sp, #32
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]

	char nam[NAME_LENGTH]; //NAME LENGHT USER CAN DEFINE IN MAIN.H
	strcpy(nam,names);
 80030ec:	f107 030c 	add.w	r3, r7, #12
 80030f0:	6879      	ldr	r1, [r7, #4]
 80030f2:	4618      	mov	r0, r3
 80030f4:	f00a f87e 	bl	800d1f4 <strcpy>


	int i=0;
 80030f8:	2300      	movs	r3, #0
 80030fa:	61fb      	str	r3, [r7, #28]
	while(i<NAME_SIZE)
 80030fc:	e011      	b.n	8003122 <check_sram+0x3e>
	{
		if( check(sd[i].names,nam)==1)
 80030fe:	69fb      	ldr	r3, [r7, #28]
 8003100:	011b      	lsls	r3, r3, #4
 8003102:	4a0c      	ldr	r2, [pc, #48]	; (8003134 <check_sram+0x50>)
 8003104:	4413      	add	r3, r2
 8003106:	f107 020c 	add.w	r2, r7, #12
 800310a:	4611      	mov	r1, r2
 800310c:	4618      	mov	r0, r3
 800310e:	f000 f8e1 	bl	80032d4 <check>
 8003112:	4603      	mov	r3, r0
 8003114:	2b01      	cmp	r3, #1
 8003116:	d101      	bne.n	800311c <check_sram+0x38>
		{

		return 1;
 8003118:	2301      	movs	r3, #1
 800311a:	e006      	b.n	800312a <check_sram+0x46>
		}
			i++;
 800311c:	69fb      	ldr	r3, [r7, #28]
 800311e:	3301      	adds	r3, #1
 8003120:	61fb      	str	r3, [r7, #28]
	while(i<NAME_SIZE)
 8003122:	69fb      	ldr	r3, [r7, #28]
 8003124:	2b01      	cmp	r3, #1
 8003126:	ddea      	ble.n	80030fe <check_sram+0x1a>
	}

return 0;
 8003128:	2300      	movs	r3, #0
}
 800312a:	4618      	mov	r0, r3
 800312c:	3720      	adds	r7, #32
 800312e:	46bd      	mov	sp, r7
 8003130:	bd80      	pop	{r7, pc}
 8003132:	bf00      	nop
 8003134:	200025f8 	.word	0x200025f8

08003138 <integer_2_string>:
void integer_2_string(int s)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	b084      	sub	sp, #16
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
char p[2];
itoa(s,p,10);
 8003140:	f107 030c 	add.w	r3, r7, #12
 8003144:	220a      	movs	r2, #10
 8003146:	4619      	mov	r1, r3
 8003148:	6878      	ldr	r0, [r7, #4]
 800314a:	f000 faf7 	bl	800373c <itoa>
datas2(p);
 800314e:	f107 030c 	add.w	r3, r7, #12
 8003152:	4618      	mov	r0, r3
 8003154:	f000 f892 	bl	800327c <datas2>



}
 8003158:	bf00      	nop
 800315a:	3710      	adds	r7, #16
 800315c:	46bd      	mov	sp, r7
 800315e:	bd80      	pop	{r7, pc}

08003160 <sd_data_check>:


int sd_data_check(char buffer4[40])  //function for checking the remaining data on sd card which is not uploaded to sram
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b094      	sub	sp, #80	; 0x50
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
char buffers[NAME_LENGTH];
	int i=0;
 8003168:	2300      	movs	r3, #0
 800316a:	64fb      	str	r3, [r7, #76]	; 0x4c
	int g=0;
 800316c:	2300      	movs	r3, #0
 800316e:	64bb      	str	r3, [r7, #72]	; 0x48
	int f=strlen(buffer4);
 8003170:	6878      	ldr	r0, [r7, #4]
 8003172:	f7fc ffed 	bl	8000150 <strlen>
 8003176:	4603      	mov	r3, r0
 8003178:	647b      	str	r3, [r7, #68]	; 0x44
	i=0;
 800317a:	2300      	movs	r3, #0
 800317c:	64fb      	str	r3, [r7, #76]	; 0x4c
	strcpy(buffers,buffer4);
 800317e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003182:	6879      	ldr	r1, [r7, #4]
 8003184:	4618      	mov	r0, r3
 8003186:	f00a f835 	bl	800d1f4 <strcpy>
datas2(buffers);
 800318a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800318e:	4618      	mov	r0, r3
 8003190:	f000 f874 	bl	800327c <datas2>
	char buffer1[40];
		if((f_open(&m,FILE_NAME,FA_READ |FA_OPEN_ALWAYS	)== FR_OK))
 8003194:	2211      	movs	r2, #17
 8003196:	492b      	ldr	r1, [pc, #172]	; (8003244 <sd_data_check+0xe4>)
 8003198:	482b      	ldr	r0, [pc, #172]	; (8003248 <sd_data_check+0xe8>)
 800319a:	f005 ff5f 	bl	800905c <f_open>
 800319e:	4603      	mov	r3, r0
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d147      	bne.n	8003234 <sd_data_check+0xd4>
	{

		  while((f_gets(buffer1, sizeof(buffer1), &m)))
 80031a4:	e02b      	b.n	80031fe <sd_data_check+0x9e>
  {
		//datas2(buffer1);
		if(i>=NAME_SIZE)
 80031a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80031a8:	2b01      	cmp	r3, #1
 80031aa:	dd1e      	ble.n	80031ea <sd_data_check+0x8a>
		{


	if(check(buffer1,buffers)==1)
 80031ac:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80031b0:	f107 030c 	add.w	r3, r7, #12
 80031b4:	4611      	mov	r1, r2
 80031b6:	4618      	mov	r0, r3
 80031b8:	f000 f88c 	bl	80032d4 <check>
 80031bc:	4603      	mov	r3, r0
 80031be:	2b01      	cmp	r3, #1
 80031c0:	d113      	bne.n	80031ea <sd_data_check+0x8a>
	{
	//datas2(buffers);
		memset(buffers,0,strlen(buffers));
 80031c2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80031c6:	4618      	mov	r0, r3
 80031c8:	f7fc ffc2 	bl	8000150 <strlen>
 80031cc:	4602      	mov	r2, r0
 80031ce:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80031d2:	2100      	movs	r1, #0
 80031d4:	4618      	mov	r0, r3
 80031d6:	f009 fefa 	bl	800cfce <memset>
		datas2("sdcard success");
 80031da:	481c      	ldr	r0, [pc, #112]	; (800324c <sd_data_check+0xec>)
 80031dc:	f000 f84e 	bl	800327c <datas2>
		f_close(&m);
 80031e0:	4819      	ldr	r0, [pc, #100]	; (8003248 <sd_data_check+0xe8>)
 80031e2:	f006 fdc5 	bl	8009d70 <f_close>
	return 1;
 80031e6:	2301      	movs	r3, #1
 80031e8:	e027      	b.n	800323a <sd_data_check+0xda>
	}
			}
	memset(buffer1, 0, sizeof(buffer1));
 80031ea:	f107 030c 	add.w	r3, r7, #12
 80031ee:	2228      	movs	r2, #40	; 0x28
 80031f0:	2100      	movs	r1, #0
 80031f2:	4618      	mov	r0, r3
 80031f4:	f009 feeb 	bl	800cfce <memset>
	i++;
 80031f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80031fa:	3301      	adds	r3, #1
 80031fc:	64fb      	str	r3, [r7, #76]	; 0x4c
		  while((f_gets(buffer1, sizeof(buffer1), &m)))
 80031fe:	f107 030c 	add.w	r3, r7, #12
 8003202:	4a11      	ldr	r2, [pc, #68]	; (8003248 <sd_data_check+0xe8>)
 8003204:	2128      	movs	r1, #40	; 0x28
 8003206:	4618      	mov	r0, r3
 8003208:	f007 f994 	bl	800a534 <f_gets>
 800320c:	4603      	mov	r3, r0
 800320e:	2b00      	cmp	r3, #0
 8003210:	d1c9      	bne.n	80031a6 <sd_data_check+0x46>
	}

	memset(buffers,0,strlen(buffers));
 8003212:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003216:	4618      	mov	r0, r3
 8003218:	f7fc ff9a 	bl	8000150 <strlen>
 800321c:	4602      	mov	r2, r0
 800321e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003222:	2100      	movs	r1, #0
 8003224:	4618      	mov	r0, r3
 8003226:	f009 fed2 	bl	800cfce <memset>
f_close(&m);
 800322a:	4807      	ldr	r0, [pc, #28]	; (8003248 <sd_data_check+0xe8>)
 800322c:	f006 fda0 	bl	8009d70 <f_close>
return 0;
 8003230:	2300      	movs	r3, #0
 8003232:	e002      	b.n	800323a <sd_data_check+0xda>
	}
	f_close(&m);
 8003234:	4804      	ldr	r0, [pc, #16]	; (8003248 <sd_data_check+0xe8>)
 8003236:	f006 fd9b 	bl	8009d70 <f_close>
}
 800323a:	4618      	mov	r0, r3
 800323c:	3750      	adds	r7, #80	; 0x50
 800323e:	46bd      	mov	sp, r7
 8003240:	bd80      	pop	{r7, pc}
 8003242:	bf00      	nop
 8003244:	0800e3c8 	.word	0x0800e3c8
 8003248:	200026f0 	.word	0x200026f0
 800324c:	0800e4e8 	.word	0x0800e4e8

08003250 <datas>:



void datas(char *data)                             //function for sending data to esp8266 (USART1TX) PA9
{
 8003250:	b580      	push	{r7, lr}
 8003252:	b084      	sub	sp, #16
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]

uint16_t p=strlen(data);
 8003258:	6878      	ldr	r0, [r7, #4]
 800325a:	f7fc ff79 	bl	8000150 <strlen>
 800325e:	4603      	mov	r3, r0
 8003260:	81fb      	strh	r3, [r7, #14]

HAL_UART_Transmit(&huart1,(uint8_t *)data,p,1000);
 8003262:	89fa      	ldrh	r2, [r7, #14]
 8003264:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003268:	6879      	ldr	r1, [r7, #4]
 800326a:	4803      	ldr	r0, [pc, #12]	; (8003278 <datas+0x28>)
 800326c:	f003 fcbf 	bl	8006bee <HAL_UART_Transmit>




}
 8003270:	bf00      	nop
 8003272:	3710      	adds	r7, #16
 8003274:	46bd      	mov	sp, r7
 8003276:	bd80      	pop	{r7, pc}
 8003278:	20002310 	.word	0x20002310

0800327c <datas2>:
void datas2(char *data) //function for debuging ,connect usb to ttl to get the printf statements of the program (USART2TX) A2
{
 800327c:	b580      	push	{r7, lr}
 800327e:	b084      	sub	sp, #16
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]

uint16_t p=strlen(data);
 8003284:	6878      	ldr	r0, [r7, #4]
 8003286:	f7fc ff63 	bl	8000150 <strlen>
 800328a:	4603      	mov	r3, r0
 800328c:	81fb      	strh	r3, [r7, #14]

HAL_UART_Transmit(&huart2,(uint8_t *)data,p,1000);
 800328e:	89fa      	ldrh	r2, [r7, #14]
 8003290:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003294:	6879      	ldr	r1, [r7, #4]
 8003296:	4803      	ldr	r0, [pc, #12]	; (80032a4 <datas2+0x28>)
 8003298:	f003 fca9 	bl	8006bee <HAL_UART_Transmit>




}
 800329c:	bf00      	nop
 800329e:	3710      	adds	r7, #16
 80032a0:	46bd      	mov	sp, r7
 80032a2:	bd80      	pop	{r7, pc}
 80032a4:	200026a8 	.word	0x200026a8

080032a8 <bufsize>:




int bufsize (char *buf)   //fucntion for calculation of datasize for  memset conversion when pointers used
{
 80032a8:	b480      	push	{r7}
 80032aa:	b085      	sub	sp, #20
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
	int i=0;
 80032b0:	2300      	movs	r3, #0
 80032b2:	60fb      	str	r3, [r7, #12]
	while (*buf++ != '\0') i++;
 80032b4:	e002      	b.n	80032bc <bufsize+0x14>
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	3301      	adds	r3, #1
 80032ba:	60fb      	str	r3, [r7, #12]
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	1c5a      	adds	r2, r3, #1
 80032c0:	607a      	str	r2, [r7, #4]
 80032c2:	781b      	ldrb	r3, [r3, #0]
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d1f6      	bne.n	80032b6 <bufsize+0xe>
	return i;
 80032c8:	68fb      	ldr	r3, [r7, #12]
}
 80032ca:	4618      	mov	r0, r3
 80032cc:	3714      	adds	r7, #20
 80032ce:	46bd      	mov	sp, r7
 80032d0:	bc80      	pop	{r7}
 80032d2:	4770      	bx	lr

080032d4 <check>:
int check(char a[50],char b[50]) //function for comparing two strings return 1 if same else 0
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b0a0      	sub	sp, #128	; 0x80
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
 80032dc:	6039      	str	r1, [r7, #0]


	int p=strlen(a);
 80032de:	6878      	ldr	r0, [r7, #4]
 80032e0:	f7fc ff36 	bl	8000150 <strlen>
 80032e4:	4603      	mov	r3, r0
 80032e6:	67bb      	str	r3, [r7, #120]	; 0x78
	int s=strlen(b);
 80032e8:	6838      	ldr	r0, [r7, #0]
 80032ea:	f7fc ff31 	bl	8000150 <strlen>
 80032ee:	4603      	mov	r3, r0
 80032f0:	677b      	str	r3, [r7, #116]	; 0x74
if(p==s)
 80032f2:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80032f4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80032f6:	429a      	cmp	r2, r3
 80032f8:	d173      	bne.n	80033e2 <check+0x10e>
{
int i=0;
 80032fa:	2300      	movs	r3, #0
 80032fc:	67fb      	str	r3, [r7, #124]	; 0x7c
	char j[50],k[50];
for(i=0;i<strlen(a);i++)  //converting to lower case for comparison
 80032fe:	2300      	movs	r3, #0
 8003300:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003302:	e040      	b.n	8003386 <check+0xb2>
{

j[i]=tolower(a[i]);
 8003304:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003306:	687a      	ldr	r2, [r7, #4]
 8003308:	4413      	add	r3, r2
 800330a:	781b      	ldrb	r3, [r3, #0]
 800330c:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
 8003310:	f009 fe22 	bl	800cf58 <__locale_ctype_ptr>
 8003314:	4602      	mov	r2, r0
 8003316:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 800331a:	3301      	adds	r3, #1
 800331c:	4413      	add	r3, r2
 800331e:	781b      	ldrb	r3, [r3, #0]
 8003320:	f003 0303 	and.w	r3, r3, #3
 8003324:	2b01      	cmp	r3, #1
 8003326:	d103      	bne.n	8003330 <check+0x5c>
 8003328:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 800332c:	3320      	adds	r3, #32
 800332e:	e001      	b.n	8003334 <check+0x60>
 8003330:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8003334:	b2d9      	uxtb	r1, r3
 8003336:	f107 020c 	add.w	r2, r7, #12
 800333a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800333c:	4413      	add	r3, r2
 800333e:	460a      	mov	r2, r1
 8003340:	701a      	strb	r2, [r3, #0]

k[i]=tolower(b[i]);
 8003342:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003344:	683a      	ldr	r2, [r7, #0]
 8003346:	4413      	add	r3, r2
 8003348:	781b      	ldrb	r3, [r3, #0]
 800334a:	f887 3072 	strb.w	r3, [r7, #114]	; 0x72
 800334e:	f009 fe03 	bl	800cf58 <__locale_ctype_ptr>
 8003352:	4602      	mov	r2, r0
 8003354:	f897 3072 	ldrb.w	r3, [r7, #114]	; 0x72
 8003358:	3301      	adds	r3, #1
 800335a:	4413      	add	r3, r2
 800335c:	781b      	ldrb	r3, [r3, #0]
 800335e:	f003 0303 	and.w	r3, r3, #3
 8003362:	2b01      	cmp	r3, #1
 8003364:	d103      	bne.n	800336e <check+0x9a>
 8003366:	f897 3072 	ldrb.w	r3, [r7, #114]	; 0x72
 800336a:	3320      	adds	r3, #32
 800336c:	e001      	b.n	8003372 <check+0x9e>
 800336e:	f897 3072 	ldrb.w	r3, [r7, #114]	; 0x72
 8003372:	b2d9      	uxtb	r1, r3
 8003374:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8003378:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800337a:	4413      	add	r3, r2
 800337c:	460a      	mov	r2, r1
 800337e:	701a      	strb	r2, [r3, #0]
for(i=0;i<strlen(a);i++)  //converting to lower case for comparison
 8003380:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003382:	3301      	adds	r3, #1
 8003384:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003386:	6878      	ldr	r0, [r7, #4]
 8003388:	f7fc fee2 	bl	8000150 <strlen>
 800338c:	4602      	mov	r2, r0
 800338e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003390:	429a      	cmp	r2, r3
 8003392:	d8b7      	bhi.n	8003304 <check+0x30>

}
i=0;
 8003394:	2300      	movs	r3, #0
 8003396:	67fb      	str	r3, [r7, #124]	; 0x7c
while(i<strlen(a))
 8003398:	e010      	b.n	80033bc <check+0xe8>
{

if(j[i]!=k[i])
 800339a:	f107 020c 	add.w	r2, r7, #12
 800339e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80033a0:	4413      	add	r3, r2
 80033a2:	781a      	ldrb	r2, [r3, #0]
 80033a4:	f107 0140 	add.w	r1, r7, #64	; 0x40
 80033a8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80033aa:	440b      	add	r3, r1
 80033ac:	781b      	ldrb	r3, [r3, #0]
 80033ae:	429a      	cmp	r2, r3
 80033b0:	d001      	beq.n	80033b6 <check+0xe2>
{

return 0;
 80033b2:	2300      	movs	r3, #0
 80033b4:	e015      	b.n	80033e2 <check+0x10e>

}


i++;
 80033b6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80033b8:	3301      	adds	r3, #1
 80033ba:	67fb      	str	r3, [r7, #124]	; 0x7c
while(i<strlen(a))
 80033bc:	6878      	ldr	r0, [r7, #4]
 80033be:	f7fc fec7 	bl	8000150 <strlen>
 80033c2:	4602      	mov	r2, r0
 80033c4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80033c6:	429a      	cmp	r2, r3
 80033c8:	d8e7      	bhi.n	800339a <check+0xc6>
}

if(i==strlen(a))
 80033ca:	6878      	ldr	r0, [r7, #4]
 80033cc:	f7fc fec0 	bl	8000150 <strlen>
 80033d0:	4602      	mov	r2, r0
 80033d2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80033d4:	429a      	cmp	r2, r3
 80033d6:	d101      	bne.n	80033dc <check+0x108>
{

	return 1;
 80033d8:	2301      	movs	r3, #1
 80033da:	e002      	b.n	80033e2 <check+0x10e>

}
else
return -1;
 80033dc:	f04f 33ff 	mov.w	r3, #4294967295
 80033e0:	e7ff      	b.n	80033e2 <check+0x10e>
}

}
 80033e2:	4618      	mov	r0, r3
 80033e4:	3780      	adds	r7, #128	; 0x80
 80033e6:	46bd      	mov	sp, r7
 80033e8:	bd80      	pop	{r7, pc}

080033ea <join>:
void join(char *m,char x[],char p[],char j[],int b) //function for joining the date or time format to string DD;MM;YY or HH;MM;SS
{
 80033ea:	b580      	push	{r7, lr}
 80033ec:	b088      	sub	sp, #32
 80033ee:	af00      	add	r7, sp, #0
 80033f0:	60f8      	str	r0, [r7, #12]
 80033f2:	60b9      	str	r1, [r7, #8]
 80033f4:	607a      	str	r2, [r7, #4]
 80033f6:	603b      	str	r3, [r7, #0]
int i=0;
 80033f8:	2300      	movs	r3, #0
 80033fa:	61fb      	str	r3, [r7, #28]
int k=0;
 80033fc:	2300      	movs	r3, #0
 80033fe:	61bb      	str	r3, [r7, #24]
memset(m, 0, bufsize(m));
 8003400:	68f8      	ldr	r0, [r7, #12]
 8003402:	f7ff ff51 	bl	80032a8 <bufsize>
 8003406:	4603      	mov	r3, r0
 8003408:	461a      	mov	r2, r3
 800340a:	2100      	movs	r1, #0
 800340c:	68f8      	ldr	r0, [r7, #12]
 800340e:	f009 fdde 	bl	800cfce <memset>
while(k<strlen(x))
 8003412:	e00d      	b.n	8003430 <join+0x46>
{
m[i]=x[k];
 8003414:	69bb      	ldr	r3, [r7, #24]
 8003416:	68ba      	ldr	r2, [r7, #8]
 8003418:	441a      	add	r2, r3
 800341a:	69fb      	ldr	r3, [r7, #28]
 800341c:	68f9      	ldr	r1, [r7, #12]
 800341e:	440b      	add	r3, r1
 8003420:	7812      	ldrb	r2, [r2, #0]
 8003422:	701a      	strb	r2, [r3, #0]
i++;
 8003424:	69fb      	ldr	r3, [r7, #28]
 8003426:	3301      	adds	r3, #1
 8003428:	61fb      	str	r3, [r7, #28]
k++;
 800342a:	69bb      	ldr	r3, [r7, #24]
 800342c:	3301      	adds	r3, #1
 800342e:	61bb      	str	r3, [r7, #24]
while(k<strlen(x))
 8003430:	68b8      	ldr	r0, [r7, #8]
 8003432:	f7fc fe8d 	bl	8000150 <strlen>
 8003436:	4602      	mov	r2, r0
 8003438:	69bb      	ldr	r3, [r7, #24]
 800343a:	429a      	cmp	r2, r3
 800343c:	d8ea      	bhi.n	8003414 <join+0x2a>

}
k=0;
 800343e:	2300      	movs	r3, #0
 8003440:	61bb      	str	r3, [r7, #24]
m[i]=';';
 8003442:	69fb      	ldr	r3, [r7, #28]
 8003444:	68fa      	ldr	r2, [r7, #12]
 8003446:	4413      	add	r3, r2
 8003448:	223b      	movs	r2, #59	; 0x3b
 800344a:	701a      	strb	r2, [r3, #0]
i++;
 800344c:	69fb      	ldr	r3, [r7, #28]
 800344e:	3301      	adds	r3, #1
 8003450:	61fb      	str	r3, [r7, #28]
while(k<strlen(p))
 8003452:	e01b      	b.n	800348c <join+0xa2>
{
if(isdigit(p[k]))
 8003454:	f009 fd80 	bl	800cf58 <__locale_ctype_ptr>
 8003458:	4601      	mov	r1, r0
 800345a:	69bb      	ldr	r3, [r7, #24]
 800345c:	687a      	ldr	r2, [r7, #4]
 800345e:	4413      	add	r3, r2
 8003460:	781b      	ldrb	r3, [r3, #0]
 8003462:	3301      	adds	r3, #1
 8003464:	440b      	add	r3, r1
 8003466:	781b      	ldrb	r3, [r3, #0]
 8003468:	f003 0304 	and.w	r3, r3, #4
 800346c:	2b00      	cmp	r3, #0
 800346e:	d00d      	beq.n	800348c <join+0xa2>
{
	m[i]=p[k];
 8003470:	69bb      	ldr	r3, [r7, #24]
 8003472:	687a      	ldr	r2, [r7, #4]
 8003474:	441a      	add	r2, r3
 8003476:	69fb      	ldr	r3, [r7, #28]
 8003478:	68f9      	ldr	r1, [r7, #12]
 800347a:	440b      	add	r3, r1
 800347c:	7812      	ldrb	r2, [r2, #0]
 800347e:	701a      	strb	r2, [r3, #0]
i++;
 8003480:	69fb      	ldr	r3, [r7, #28]
 8003482:	3301      	adds	r3, #1
 8003484:	61fb      	str	r3, [r7, #28]
k++;
 8003486:	69bb      	ldr	r3, [r7, #24]
 8003488:	3301      	adds	r3, #1
 800348a:	61bb      	str	r3, [r7, #24]
while(k<strlen(p))
 800348c:	6878      	ldr	r0, [r7, #4]
 800348e:	f7fc fe5f 	bl	8000150 <strlen>
 8003492:	4602      	mov	r2, r0
 8003494:	69bb      	ldr	r3, [r7, #24]
 8003496:	429a      	cmp	r2, r3
 8003498:	d8dc      	bhi.n	8003454 <join+0x6a>
}
}

k=0;
 800349a:	2300      	movs	r3, #0
 800349c:	61bb      	str	r3, [r7, #24]
m[i]=';';
 800349e:	69fb      	ldr	r3, [r7, #28]
 80034a0:	68fa      	ldr	r2, [r7, #12]
 80034a2:	4413      	add	r3, r2
 80034a4:	223b      	movs	r2, #59	; 0x3b
 80034a6:	701a      	strb	r2, [r3, #0]
i++;
 80034a8:	69fb      	ldr	r3, [r7, #28]
 80034aa:	3301      	adds	r3, #1
 80034ac:	61fb      	str	r3, [r7, #28]

while(k<strlen(j))
 80034ae:	e01b      	b.n	80034e8 <join+0xfe>
{
if(isdigit(j[k]))
 80034b0:	f009 fd52 	bl	800cf58 <__locale_ctype_ptr>
 80034b4:	4601      	mov	r1, r0
 80034b6:	69bb      	ldr	r3, [r7, #24]
 80034b8:	683a      	ldr	r2, [r7, #0]
 80034ba:	4413      	add	r3, r2
 80034bc:	781b      	ldrb	r3, [r3, #0]
 80034be:	3301      	adds	r3, #1
 80034c0:	440b      	add	r3, r1
 80034c2:	781b      	ldrb	r3, [r3, #0]
 80034c4:	f003 0304 	and.w	r3, r3, #4
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d00d      	beq.n	80034e8 <join+0xfe>
{m[i]=j[k];
 80034cc:	69bb      	ldr	r3, [r7, #24]
 80034ce:	683a      	ldr	r2, [r7, #0]
 80034d0:	441a      	add	r2, r3
 80034d2:	69fb      	ldr	r3, [r7, #28]
 80034d4:	68f9      	ldr	r1, [r7, #12]
 80034d6:	440b      	add	r3, r1
 80034d8:	7812      	ldrb	r2, [r2, #0]
 80034da:	701a      	strb	r2, [r3, #0]
i++;
 80034dc:	69fb      	ldr	r3, [r7, #28]
 80034de:	3301      	adds	r3, #1
 80034e0:	61fb      	str	r3, [r7, #28]
k++;
 80034e2:	69bb      	ldr	r3, [r7, #24]
 80034e4:	3301      	adds	r3, #1
 80034e6:	61bb      	str	r3, [r7, #24]
while(k<strlen(j))
 80034e8:	6838      	ldr	r0, [r7, #0]
 80034ea:	f7fc fe31 	bl	8000150 <strlen>
 80034ee:	4602      	mov	r2, r0
 80034f0:	69bb      	ldr	r3, [r7, #24]
 80034f2:	429a      	cmp	r2, r3
 80034f4:	d8dc      	bhi.n	80034b0 <join+0xc6>
}
}
i=0;
 80034f6:	2300      	movs	r3, #0
 80034f8:	61fb      	str	r3, [r7, #28]
k=0;
 80034fa:	2300      	movs	r3, #0
 80034fc:	61bb      	str	r3, [r7, #24]

int z=strlen(m);
 80034fe:	68f8      	ldr	r0, [r7, #12]
 8003500:	f7fc fe26 	bl	8000150 <strlen>
 8003504:	4603      	mov	r3, r0
 8003506:	617b      	str	r3, [r7, #20]


}
 8003508:	bf00      	nop
 800350a:	3720      	adds	r7, #32
 800350c:	46bd      	mov	sp, r7
 800350e:	bd80      	pop	{r7, pc}

08003510 <currenttime>:
void currenttime(char *time,int b)
{
 8003510:	b590      	push	{r4, r7, lr}
 8003512:	b0bf      	sub	sp, #252	; 0xfc
 8003514:	af02      	add	r7, sp, #8
 8003516:	6078      	str	r0, [r7, #4]
 8003518:	6039      	str	r1, [r7, #0]

	if(HAL_RTC_GetTime(&hrtc,&sTime,RTC_FORMAT_BIN)==HAL_OK)
 800351a:	2200      	movs	r2, #0
 800351c:	493e      	ldr	r1, [pc, #248]	; (8003618 <currenttime+0x108>)
 800351e:	483f      	ldr	r0, [pc, #252]	; (800361c <currenttime+0x10c>)
 8003520:	f001 fff0 	bl	8005504 <HAL_RTC_GetTime>
 8003524:	4603      	mov	r3, r0
 8003526:	2b00      	cmp	r3, #0
 8003528:	d171      	bne.n	800360e <currenttime+0xfe>
		char p[40];
		char q[40];
		char s[40];
		char r[100];
		uint8_t hr[3];
		hr[0]=sTime.Hours;
 800352a:	4b3b      	ldr	r3, [pc, #236]	; (8003618 <currenttime+0x108>)
 800352c:	781b      	ldrb	r3, [r3, #0]
 800352e:	f887 30e4 	strb.w	r3, [r7, #228]	; 0xe4
		hr[1]=sTime.Minutes;
 8003532:	4b39      	ldr	r3, [pc, #228]	; (8003618 <currenttime+0x108>)
 8003534:	785b      	ldrb	r3, [r3, #1]
 8003536:	f887 30e5 	strb.w	r3, [r7, #229]	; 0xe5
		hr[2]=sTime.Seconds;
 800353a:	4b37      	ldr	r3, [pc, #220]	; (8003618 <currenttime+0x108>)
 800353c:	789b      	ldrb	r3, [r3, #2]
 800353e:	f887 30e6 	strb.w	r3, [r7, #230]	; 0xe6
	 itoa(hr[0],p,10);
 8003542:	f897 30e4 	ldrb.w	r3, [r7, #228]	; 0xe4
 8003546:	4618      	mov	r0, r3
 8003548:	f107 0308 	add.w	r3, r7, #8
 800354c:	220a      	movs	r2, #10
 800354e:	4619      	mov	r1, r3
 8003550:	f000 f8f4 	bl	800373c <itoa>
//		p[2]=';';

	itoa(hr[1],q,10);
 8003554:	f897 30e5 	ldrb.w	r3, [r7, #229]	; 0xe5
 8003558:	4618      	mov	r0, r3
 800355a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800355e:	220a      	movs	r2, #10
 8003560:	4619      	mov	r1, r3
 8003562:	f000 f8eb 	bl	800373c <itoa>
  //  q[2]=';';

		itoa(hr[2],s,10);
 8003566:	f897 30e6 	ldrb.w	r3, [r7, #230]	; 0xe6
 800356a:	4618      	mov	r0, r3
 800356c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003570:	220a      	movs	r2, #10
 8003572:	4619      	mov	r1, r3
 8003574:	f000 f8e2 	bl	800373c <itoa>



join(r,p,q,s,b);
 8003578:	f107 0458 	add.w	r4, r7, #88	; 0x58
 800357c:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8003580:	f107 0108 	add.w	r1, r7, #8
 8003584:	f107 0080 	add.w	r0, r7, #128	; 0x80
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	9300      	str	r3, [sp, #0]
 800358c:	4623      	mov	r3, r4
 800358e:	f7ff ff2c 	bl	80033ea <join>
//char dater[20];
int h=0;
 8003592:	2300      	movs	r3, #0
 8003594:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
int o=0;
 8003598:	2300      	movs	r3, #0
 800359a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
while(o<strlen(r))
 800359e:	e02c      	b.n	80035fa <currenttime+0xea>
{
if(isdigit(r[o])||r[o]==';')
 80035a0:	f009 fcda 	bl	800cf58 <__locale_ctype_ptr>
 80035a4:	4601      	mov	r1, r0
 80035a6:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80035aa:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80035ae:	4413      	add	r3, r2
 80035b0:	781b      	ldrb	r3, [r3, #0]
 80035b2:	3301      	adds	r3, #1
 80035b4:	440b      	add	r3, r1
 80035b6:	781b      	ldrb	r3, [r3, #0]
 80035b8:	f003 0304 	and.w	r3, r3, #4
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d107      	bne.n	80035d0 <currenttime+0xc0>
 80035c0:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80035c4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80035c8:	4413      	add	r3, r2
 80035ca:	781b      	ldrb	r3, [r3, #0]
 80035cc:	2b3b      	cmp	r3, #59	; 0x3b
 80035ce:	d10f      	bne.n	80035f0 <currenttime+0xe0>
{
time[h]=r[o];
 80035d0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80035d4:	687a      	ldr	r2, [r7, #4]
 80035d6:	4413      	add	r3, r2
 80035d8:	f107 0180 	add.w	r1, r7, #128	; 0x80
 80035dc:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 80035e0:	440a      	add	r2, r1
 80035e2:	7812      	ldrb	r2, [r2, #0]
 80035e4:	701a      	strb	r2, [r3, #0]
	h++;
 80035e6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80035ea:	3301      	adds	r3, #1
 80035ec:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
}

o++;
 80035f0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80035f4:	3301      	adds	r3, #1
 80035f6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
while(o<strlen(r))
 80035fa:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80035fe:	4618      	mov	r0, r3
 8003600:	f7fc fda6 	bl	8000150 <strlen>
 8003604:	4602      	mov	r2, r0
 8003606:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800360a:	429a      	cmp	r2, r3
 800360c:	d8c8      	bhi.n	80035a0 <currenttime+0x90>

	}

}
}
 800360e:	bf00      	nop
 8003610:	37f4      	adds	r7, #244	; 0xf4
 8003612:	46bd      	mov	sp, r7
 8003614:	bd90      	pop	{r4, r7, pc}
 8003616:	bf00      	nop
 8003618:	200004fc 	.word	0x200004fc
 800361c:	200025e0 	.word	0x200025e0

08003620 <currentdate>:
void currentdate(char *date,int b)   //function for getiing the current time to time pointer, time format DD;MM;yy
{
 8003620:	b590      	push	{r4, r7, lr}
 8003622:	b0b9      	sub	sp, #228	; 0xe4
 8003624:	af02      	add	r7, sp, #8
 8003626:	6078      	str	r0, [r7, #4]
 8003628:	6039      	str	r1, [r7, #0]
	if(HAL_RTC_GetDate(&hrtc,&DateToUpdate,RTC_FORMAT_BIN)==HAL_OK)
 800362a:	2200      	movs	r2, #0
 800362c:	4940      	ldr	r1, [pc, #256]	; (8003730 <currentdate+0x110>)
 800362e:	4841      	ldr	r0, [pc, #260]	; (8003734 <currentdate+0x114>)
 8003630:	f002 f8f6 	bl	8005820 <HAL_RTC_GetDate>
 8003634:	4603      	mov	r3, r0
 8003636:	2b00      	cmp	r3, #0
 8003638:	d175      	bne.n	8003726 <currentdate+0x106>
		char q[50];
		char v[50];
		char u[50];

			uint8_t hr[3];
		hr[0]=DateToUpdate.Date;
 800363a:	4b3d      	ldr	r3, [pc, #244]	; (8003730 <currentdate+0x110>)
 800363c:	789b      	ldrb	r3, [r3, #2]
 800363e:	f887 30cc 	strb.w	r3, [r7, #204]	; 0xcc
		hr[1]=DateToUpdate.Month;
 8003642:	4b3b      	ldr	r3, [pc, #236]	; (8003730 <currentdate+0x110>)
 8003644:	785b      	ldrb	r3, [r3, #1]
 8003646:	f887 30cd 	strb.w	r3, [r7, #205]	; 0xcd
		hr[2]=DateToUpdate.Year;
 800364a:	4b39      	ldr	r3, [pc, #228]	; (8003730 <currentdate+0x110>)
 800364c:	78db      	ldrb	r3, [r3, #3]
 800364e:	f887 30ce 	strb.w	r3, [r7, #206]	; 0xce
	 itoa(hr[0],a,10);
 8003652:	f897 30cc 	ldrb.w	r3, [r7, #204]	; 0xcc
 8003656:	4618      	mov	r0, r3
 8003658:	f107 0308 	add.w	r3, r7, #8
 800365c:	220a      	movs	r2, #10
 800365e:	4619      	mov	r1, r3
 8003660:	f000 f86c 	bl	800373c <itoa>


	itoa(hr[1],q,10);
 8003664:	f897 30cd 	ldrb.w	r3, [r7, #205]	; 0xcd
 8003668:	4618      	mov	r0, r3
 800366a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800366e:	220a      	movs	r2, #10
 8003670:	4619      	mov	r1, r3
 8003672:	f000 f863 	bl	800373c <itoa>


		d=u;
 8003676:	4a30      	ldr	r2, [pc, #192]	; (8003738 <currentdate+0x118>)
 8003678:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800367c:	6013      	str	r3, [r2, #0]
			itoa(hr[2],v,10);
 800367e:	f897 30ce 	ldrb.w	r3, [r7, #206]	; 0xce
 8003682:	4618      	mov	r0, r3
 8003684:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8003688:	220a      	movs	r2, #10
 800368a:	4619      	mov	r1, r3
 800368c:	f000 f856 	bl	800373c <itoa>


join(u,a,q,v,b);
 8003690:	f107 0464 	add.w	r4, r7, #100	; 0x64
 8003694:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8003698:	f107 0108 	add.w	r1, r7, #8
 800369c:	f107 0098 	add.w	r0, r7, #152	; 0x98
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	9300      	str	r3, [sp, #0]
 80036a4:	4623      	mov	r3, r4
 80036a6:	f7ff fea0 	bl	80033ea <join>

			int h=0;
 80036aa:	2300      	movs	r3, #0
 80036ac:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
int o=0;
 80036b0:	2300      	movs	r3, #0
 80036b2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
while(o<strlen(u))
 80036b6:	e02c      	b.n	8003712 <currentdate+0xf2>
{
if(isdigit(u[o])||u[o]==';')
 80036b8:	f009 fc4e 	bl	800cf58 <__locale_ctype_ptr>
 80036bc:	4601      	mov	r1, r0
 80036be:	f107 0298 	add.w	r2, r7, #152	; 0x98
 80036c2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80036c6:	4413      	add	r3, r2
 80036c8:	781b      	ldrb	r3, [r3, #0]
 80036ca:	3301      	adds	r3, #1
 80036cc:	440b      	add	r3, r1
 80036ce:	781b      	ldrb	r3, [r3, #0]
 80036d0:	f003 0304 	and.w	r3, r3, #4
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d107      	bne.n	80036e8 <currentdate+0xc8>
 80036d8:	f107 0298 	add.w	r2, r7, #152	; 0x98
 80036dc:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80036e0:	4413      	add	r3, r2
 80036e2:	781b      	ldrb	r3, [r3, #0]
 80036e4:	2b3b      	cmp	r3, #59	; 0x3b
 80036e6:	d10f      	bne.n	8003708 <currentdate+0xe8>
{date[h]=u[o];
 80036e8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80036ec:	687a      	ldr	r2, [r7, #4]
 80036ee:	4413      	add	r3, r2
 80036f0:	f107 0198 	add.w	r1, r7, #152	; 0x98
 80036f4:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80036f8:	440a      	add	r2, r1
 80036fa:	7812      	ldrb	r2, [r2, #0]
 80036fc:	701a      	strb	r2, [r3, #0]
	h++;
 80036fe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003702:	3301      	adds	r3, #1
 8003704:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
}

o++;
 8003708:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800370c:	3301      	adds	r3, #1
 800370e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
while(o<strlen(u))
 8003712:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8003716:	4618      	mov	r0, r3
 8003718:	f7fc fd1a 	bl	8000150 <strlen>
 800371c:	4602      	mov	r2, r0
 800371e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003722:	429a      	cmp	r2, r3
 8003724:	d8c8      	bhi.n	80036b8 <currentdate+0x98>

	}


		}
}
 8003726:	bf00      	nop
 8003728:	37dc      	adds	r7, #220	; 0xdc
 800372a:	46bd      	mov	sp, r7
 800372c:	bd90      	pop	{r4, r7, pc}
 800372e:	bf00      	nop
 8003730:	20000500 	.word	0x20000500
 8003734:	200025e0 	.word	0x200025e0
 8003738:	200025f4 	.word	0x200025f4

0800373c <itoa>:

char* itoa(int value, char* result, int base) {
 800373c:	b480      	push	{r7}
 800373e:	b089      	sub	sp, #36	; 0x24
 8003740:	af00      	add	r7, sp, #0
 8003742:	60f8      	str	r0, [r7, #12]
 8003744:	60b9      	str	r1, [r7, #8]
 8003746:	607a      	str	r2, [r7, #4]
    // check that the base if valid
    if (base < 2 || base > 36) { *result = '\0'; return result; }
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2b01      	cmp	r3, #1
 800374c:	dd02      	ble.n	8003754 <itoa+0x18>
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	2b24      	cmp	r3, #36	; 0x24
 8003752:	dd04      	ble.n	800375e <itoa+0x22>
 8003754:	68bb      	ldr	r3, [r7, #8]
 8003756:	2200      	movs	r2, #0
 8003758:	701a      	strb	r2, [r3, #0]
 800375a:	68bb      	ldr	r3, [r7, #8]
 800375c:	e03c      	b.n	80037d8 <itoa+0x9c>

    char* ptr = result, *ptr1 = result, tmp_char;
 800375e:	68bb      	ldr	r3, [r7, #8]
 8003760:	61fb      	str	r3, [r7, #28]
 8003762:	68bb      	ldr	r3, [r7, #8]
 8003764:	61bb      	str	r3, [r7, #24]
    int tmp_value;

    do {
        tmp_value = value;
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	617b      	str	r3, [r7, #20]
        value /= base;
 800376a:	68fa      	ldr	r2, [r7, #12]
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	fb92 f3f3 	sdiv	r3, r2, r3
 8003772:	60fb      	str	r3, [r7, #12]
        *ptr++ = "zyxwvutsrqponmlkjihgfedcba9876543210123456789abcdefghijklmnopqrstuvwxyz" [35 + (tmp_value - value * base)];
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	687a      	ldr	r2, [r7, #4]
 8003778:	fb02 f303 	mul.w	r3, r2, r3
 800377c:	697a      	ldr	r2, [r7, #20]
 800377e:	1ad3      	subs	r3, r2, r3
 8003780:	f103 0223 	add.w	r2, r3, #35	; 0x23
 8003784:	69fb      	ldr	r3, [r7, #28]
 8003786:	1c59      	adds	r1, r3, #1
 8003788:	61f9      	str	r1, [r7, #28]
 800378a:	4916      	ldr	r1, [pc, #88]	; (80037e4 <itoa+0xa8>)
 800378c:	5c8a      	ldrb	r2, [r1, r2]
 800378e:	701a      	strb	r2, [r3, #0]
    } while ( value );
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	2b00      	cmp	r3, #0
 8003794:	d1e7      	bne.n	8003766 <itoa+0x2a>

    // Apply negative sign
    if (tmp_value < 0) *ptr++ = '-';
 8003796:	697b      	ldr	r3, [r7, #20]
 8003798:	2b00      	cmp	r3, #0
 800379a:	da04      	bge.n	80037a6 <itoa+0x6a>
 800379c:	69fb      	ldr	r3, [r7, #28]
 800379e:	1c5a      	adds	r2, r3, #1
 80037a0:	61fa      	str	r2, [r7, #28]
 80037a2:	222d      	movs	r2, #45	; 0x2d
 80037a4:	701a      	strb	r2, [r3, #0]
    *ptr-- = '\0';
 80037a6:	69fb      	ldr	r3, [r7, #28]
 80037a8:	1e5a      	subs	r2, r3, #1
 80037aa:	61fa      	str	r2, [r7, #28]
 80037ac:	2200      	movs	r2, #0
 80037ae:	701a      	strb	r2, [r3, #0]
    while(ptr1 < ptr) {
 80037b0:	e00d      	b.n	80037ce <itoa+0x92>
        tmp_char = *ptr;
 80037b2:	69fb      	ldr	r3, [r7, #28]
 80037b4:	781b      	ldrb	r3, [r3, #0]
 80037b6:	74fb      	strb	r3, [r7, #19]
        *ptr--= *ptr1;
 80037b8:	69fb      	ldr	r3, [r7, #28]
 80037ba:	1e5a      	subs	r2, r3, #1
 80037bc:	61fa      	str	r2, [r7, #28]
 80037be:	69ba      	ldr	r2, [r7, #24]
 80037c0:	7812      	ldrb	r2, [r2, #0]
 80037c2:	701a      	strb	r2, [r3, #0]
        *ptr1++ = tmp_char;
 80037c4:	69bb      	ldr	r3, [r7, #24]
 80037c6:	1c5a      	adds	r2, r3, #1
 80037c8:	61ba      	str	r2, [r7, #24]
 80037ca:	7cfa      	ldrb	r2, [r7, #19]
 80037cc:	701a      	strb	r2, [r3, #0]
    while(ptr1 < ptr) {
 80037ce:	69ba      	ldr	r2, [r7, #24]
 80037d0:	69fb      	ldr	r3, [r7, #28]
 80037d2:	429a      	cmp	r2, r3
 80037d4:	d3ed      	bcc.n	80037b2 <itoa+0x76>
    }
    return result;
 80037d6:	68bb      	ldr	r3, [r7, #8]
}
 80037d8:	4618      	mov	r0, r3
 80037da:	3724      	adds	r7, #36	; 0x24
 80037dc:	46bd      	mov	sp, r7
 80037de:	bc80      	pop	{r7}
 80037e0:	4770      	bx	lr
 80037e2:	bf00      	nop
 80037e4:	0800e4f8 	.word	0x0800e4f8

080037e8 <queue_send>:

void queue_send()
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b082      	sub	sp, #8
 80037ec:	af00      	add	r7, sp, #0
char *sp;
	//char *sp=(char *)malloc(500*sizeof(char));
sp=json_conversion(queue);
 80037ee:	480d      	ldr	r0, [pc, #52]	; (8003824 <queue_send+0x3c>)
 80037f0:	f7ff f8c2 	bl	8002978 <json_conversion>
 80037f4:	6078      	str	r0, [r7, #4]
	//datas(sp);
wifisender(sp);
 80037f6:	6878      	ldr	r0, [r7, #4]
 80037f8:	f7fe feee 	bl	80025d8 <wifisender>
	memset(queue,0,sizeof(queue));
 80037fc:	f240 322a 	movw	r2, #810	; 0x32a
 8003800:	2100      	movs	r1, #0
 8003802:	4808      	ldr	r0, [pc, #32]	; (8003824 <queue_send+0x3c>)
 8003804:	f009 fbe3 	bl	800cfce <memset>
	cJSON_free(sp);
 8003808:	6878      	ldr	r0, [r7, #4]
 800380a:	f7fe f8a1 	bl	8001950 <cJSON_free>
	size=0;
 800380e:	4b06      	ldr	r3, [pc, #24]	; (8003828 <queue_send+0x40>)
 8003810:	2200      	movs	r2, #0
 8003812:	601a      	str	r2, [r3, #0]
	stop=0;
 8003814:	4b05      	ldr	r3, [pc, #20]	; (800382c <queue_send+0x44>)
 8003816:	2200      	movs	r2, #0
 8003818:	601a      	str	r2, [r3, #0]
}
 800381a:	bf00      	nop
 800381c:	3708      	adds	r7, #8
 800381e:	46bd      	mov	sp, r7
 8003820:	bd80      	pop	{r7, pc}
 8003822:	bf00      	nop
 8003824:	20001fe4 	.word	0x20001fe4
 8003828:	200004f8 	.word	0x200004f8
 800382c:	200004f4 	.word	0x200004f4

08003830 <id_time_storage>:
void id_time_storage(char d[])  //storing incomming name ,along with the current time and date with FAILED status on sd CARD
{
 8003830:	b580      	push	{r7, lr}
 8003832:	b0a0      	sub	sp, #128	; 0x80
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
	char buffer1[30];
strcpy(buffer1,d);
 8003838:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800383c:	6879      	ldr	r1, [r7, #4]
 800383e:	4618      	mov	r0, r3
 8003840:	f009 fcd8 	bl	800d1f4 <strcpy>
FRESULT res;
UINT numread;
DWORD size;
int e=0;
 8003844:	2300      	movs	r3, #0
 8003846:	67fb      	str	r3, [r7, #124]	; 0x7c
while((f_open(&g,"storage1.txt",FA_WRITE |FA_OPEN_ALWAYS	)== FR_OK)&&(e<9))
 8003848:	e066      	b.n	8003918 <id_time_storage+0xe8>
   FRESULT res;
   UINT numread;
   DWORD size;
	 char time1[40];
	 char date1[40];
	 currenttime(time1,0);
 800384a:	f107 0308 	add.w	r3, r7, #8
 800384e:	2100      	movs	r1, #0
 8003850:	4618      	mov	r0, r3
 8003852:	f7ff fe5d 	bl	8003510 <currenttime>
   currentdate(date1,0);
 8003856:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800385a:	2100      	movs	r1, #0
 800385c:	4618      	mov	r0, r3
 800385e:	f7ff fedf 	bl	8003620 <currentdate>
	 if(e==2)
 8003862:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003864:	2b02      	cmp	r3, #2
 8003866:	d107      	bne.n	8003878 <id_time_storage+0x48>
	 {strcpy(buffer1,time1);
 8003868:	f107 0208 	add.w	r2, r7, #8
 800386c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003870:	4611      	mov	r1, r2
 8003872:	4618      	mov	r0, r3
 8003874:	f009 fcbe 	bl	800d1f4 <strcpy>

		}
		if(e==4)
 8003878:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800387a:	2b04      	cmp	r3, #4
 800387c:	d107      	bne.n	800388e <id_time_storage+0x5e>
			{
		  strcpy(buffer1,date1);
 800387e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8003882:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003886:	4611      	mov	r1, r2
 8003888:	4618      	mov	r0, r3
 800388a:	f009 fcb3 	bl	800d1f4 <strcpy>
	    }

		if(e==8)
 800388e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003890:	2b08      	cmp	r3, #8
 8003892:	d103      	bne.n	800389c <id_time_storage+0x6c>
		 strcpy(buffer1,"\n");
 8003894:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003898:	220a      	movs	r2, #10
 800389a:	801a      	strh	r2, [r3, #0]
	  if(e==6)
 800389c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800389e:	2b06      	cmp	r3, #6
 80038a0:	d10a      	bne.n	80038b8 <id_time_storage+0x88>
		  strcpy(buffer1,"FAILED");
 80038a2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80038a6:	4a25      	ldr	r2, [pc, #148]	; (800393c <id_time_storage+0x10c>)
 80038a8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80038ac:	6018      	str	r0, [r3, #0]
 80038ae:	3304      	adds	r3, #4
 80038b0:	8019      	strh	r1, [r3, #0]
 80038b2:	3302      	adds	r3, #2
 80038b4:	0c0a      	lsrs	r2, r1, #16
 80038b6:	701a      	strb	r2, [r3, #0]
	   if(e%2==1)
 80038b8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	f003 0301 	and.w	r3, r3, #1
 80038c0:	bfb8      	it	lt
 80038c2:	425b      	neglt	r3, r3
 80038c4:	2b01      	cmp	r3, #1
 80038c6:	d103      	bne.n	80038d0 <id_time_storage+0xa0>
		 strcpy(buffer1,"\t");
 80038c8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80038cc:	2209      	movs	r2, #9
 80038ce:	801a      	strh	r2, [r3, #0]
   size = (&g)->fsize;
 80038d0:	4b1b      	ldr	r3, [pc, #108]	; (8003940 <id_time_storage+0x110>)
 80038d2:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 80038d6:	67bb      	str	r3, [r7, #120]	; 0x78

    res = f_lseek(&g,size);
 80038d8:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 80038da:	4819      	ldr	r0, [pc, #100]	; (8003940 <id_time_storage+0x110>)
 80038dc:	f006 fa78 	bl	8009dd0 <f_lseek>
 80038e0:	4603      	mov	r3, r0
 80038e2:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
   f_puts(buffer1, &g);
 80038e6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80038ea:	4915      	ldr	r1, [pc, #84]	; (8003940 <id_time_storage+0x110>)
 80038ec:	4618      	mov	r0, r3
 80038ee:	f006 fe9b 	bl	800a628 <f_puts>
  //datas2(buffer1);

	memset(buffer1, 0, bufsize(buffer1));
 80038f2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80038f6:	4618      	mov	r0, r3
 80038f8:	f7ff fcd6 	bl	80032a8 <bufsize>
 80038fc:	4603      	mov	r3, r0
 80038fe:	461a      	mov	r2, r3
 8003900:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003904:	2100      	movs	r1, #0
 8003906:	4618      	mov	r0, r3
 8003908:	f009 fb61 	bl	800cfce <memset>

	 e++;
 800390c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800390e:	3301      	adds	r3, #1
 8003910:	67fb      	str	r3, [r7, #124]	; 0x7c
		f_close(&g);
 8003912:	480b      	ldr	r0, [pc, #44]	; (8003940 <id_time_storage+0x110>)
 8003914:	f006 fa2c 	bl	8009d70 <f_close>
while((f_open(&g,"storage1.txt",FA_WRITE |FA_OPEN_ALWAYS	)== FR_OK)&&(e<9))
 8003918:	2212      	movs	r2, #18
 800391a:	490a      	ldr	r1, [pc, #40]	; (8003944 <id_time_storage+0x114>)
 800391c:	4808      	ldr	r0, [pc, #32]	; (8003940 <id_time_storage+0x110>)
 800391e:	f005 fb9d 	bl	800905c <f_open>
 8003922:	4603      	mov	r3, r0
 8003924:	2b00      	cmp	r3, #0
 8003926:	d102      	bne.n	800392e <id_time_storage+0xfe>
 8003928:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800392a:	2b08      	cmp	r3, #8
 800392c:	dd8d      	ble.n	800384a <id_time_storage+0x1a>

 }

 f_close(&g);
 800392e:	4804      	ldr	r0, [pc, #16]	; (8003940 <id_time_storage+0x110>)
 8003930:	f006 fa1e 	bl	8009d70 <f_close>

}
 8003934:	bf00      	nop
 8003936:	3780      	adds	r7, #128	; 0x80
 8003938:	46bd      	mov	sp, r7
 800393a:	bd80      	pop	{r7, pc}
 800393c:	0800e46c 	.word	0x0800e46c
 8003940:	20001db8 	.word	0x20001db8
 8003944:	0800e440 	.word	0x0800e440

08003948 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	b094      	sub	sp, #80	; 0x50
 800394c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800394e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003952:	2228      	movs	r2, #40	; 0x28
 8003954:	2100      	movs	r1, #0
 8003956:	4618      	mov	r0, r3
 8003958:	f009 fb39 	bl	800cfce <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800395c:	f107 0314 	add.w	r3, r7, #20
 8003960:	2200      	movs	r2, #0
 8003962:	601a      	str	r2, [r3, #0]
 8003964:	605a      	str	r2, [r3, #4]
 8003966:	609a      	str	r2, [r3, #8]
 8003968:	60da      	str	r2, [r3, #12]
 800396a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800396c:	1d3b      	adds	r3, r7, #4
 800396e:	2200      	movs	r2, #0
 8003970:	601a      	str	r2, [r3, #0]
 8003972:	605a      	str	r2, [r3, #4]
 8003974:	609a      	str	r2, [r3, #8]
 8003976:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 8003978:	2306      	movs	r3, #6
 800397a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800397c:	2301      	movs	r3, #1
 800397e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003980:	2301      	movs	r3, #1
 8003982:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003984:	2310      	movs	r3, #16
 8003986:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003988:	2302      	movs	r3, #2
 800398a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 800398c:	2300      	movs	r3, #0
 800398e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8003990:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8003994:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003996:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800399a:	4618      	mov	r0, r3
 800399c:	f000 fec6 	bl	800472c <HAL_RCC_OscConfig>
 80039a0:	4603      	mov	r3, r0
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d001      	beq.n	80039aa <SystemClock_Config+0x62>
  {
    Error_Handler();
 80039a6:	f000 fa1f 	bl	8003de8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80039aa:	230f      	movs	r3, #15
 80039ac:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80039ae:	2302      	movs	r3, #2
 80039b0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80039b2:	2300      	movs	r3, #0
 80039b4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80039b6:	2300      	movs	r3, #0
 80039b8:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80039ba:	2300      	movs	r3, #0
 80039bc:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80039be:	f107 0314 	add.w	r3, r7, #20
 80039c2:	2101      	movs	r1, #1
 80039c4:	4618      	mov	r0, r3
 80039c6:	f001 f931 	bl	8004c2c <HAL_RCC_ClockConfig>
 80039ca:	4603      	mov	r3, r0
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d001      	beq.n	80039d4 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80039d0:	f000 fa0a 	bl	8003de8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80039d4:	2301      	movs	r3, #1
 80039d6:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80039d8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80039dc:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80039de:	1d3b      	adds	r3, r7, #4
 80039e0:	4618      	mov	r0, r3
 80039e2:	f001 faef 	bl	8004fc4 <HAL_RCCEx_PeriphCLKConfig>
 80039e6:	4603      	mov	r3, r0
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d001      	beq.n	80039f0 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 80039ec:	f000 f9fc 	bl	8003de8 <Error_Handler>
  }
}
 80039f0:	bf00      	nop
 80039f2:	3750      	adds	r7, #80	; 0x50
 80039f4:	46bd      	mov	sp, r7
 80039f6:	bd80      	pop	{r7, pc}

080039f8 <MX_RTC_Init>:
static void MX_RTC_Init(void)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b084      	sub	sp, #16
 80039fc:	af00      	add	r7, sp, #0



		__HAL_RCC_BKP_CLK_ENABLE();
 80039fe:	4b32      	ldr	r3, [pc, #200]	; (8003ac8 <MX_RTC_Init+0xd0>)
 8003a00:	69db      	ldr	r3, [r3, #28]
 8003a02:	4a31      	ldr	r2, [pc, #196]	; (8003ac8 <MX_RTC_Init+0xd0>)
 8003a04:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003a08:	61d3      	str	r3, [r2, #28]
 8003a0a:	4b2f      	ldr	r3, [pc, #188]	; (8003ac8 <MX_RTC_Init+0xd0>)
 8003a0c:	69db      	ldr	r3, [r3, #28]
 8003a0e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003a12:	607b      	str	r3, [r7, #4]
 8003a14:	687b      	ldr	r3, [r7, #4]


  RTC_TimeTypeDef sTime = {0};
 8003a16:	f107 030c 	add.w	r3, r7, #12
 8003a1a:	2100      	movs	r1, #0
 8003a1c:	460a      	mov	r2, r1
 8003a1e:	801a      	strh	r2, [r3, #0]
 8003a20:	460a      	mov	r2, r1
 8003a22:	709a      	strb	r2, [r3, #2]
  RTC_DateTypeDef DateToUpdate = {0};
 8003a24:	2300      	movs	r3, #0
 8003a26:	60bb      	str	r3, [r7, #8]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8003a28:	4b28      	ldr	r3, [pc, #160]	; (8003acc <MX_RTC_Init+0xd4>)
 8003a2a:	4a29      	ldr	r2, [pc, #164]	; (8003ad0 <MX_RTC_Init+0xd8>)
 8003a2c:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 8003a2e:	4b27      	ldr	r3, [pc, #156]	; (8003acc <MX_RTC_Init+0xd4>)
 8003a30:	f04f 32ff 	mov.w	r2, #4294967295
 8003a34:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 8003a36:	4b25      	ldr	r3, [pc, #148]	; (8003acc <MX_RTC_Init+0xd4>)
 8003a38:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003a3c:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8003a3e:	4823      	ldr	r0, [pc, #140]	; (8003acc <MX_RTC_Init+0xd4>)
 8003a40:	f001 fc32 	bl	80052a8 <HAL_RTC_Init>
 8003a44:	4603      	mov	r3, r0
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d001      	beq.n	8003a4e <MX_RTC_Init+0x56>
  {
    Error_Handler();
 8003a4a:	f000 f9cd 	bl	8003de8 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = HOUR;
 8003a4e:	2317      	movs	r3, #23
 8003a50:	733b      	strb	r3, [r7, #12]
  sTime.Minutes = MIN;
 8003a52:	233b      	movs	r3, #59	; 0x3b
 8003a54:	737b      	strb	r3, [r7, #13]
  sTime.Seconds = SECOND;
 8003a56:	2334      	movs	r3, #52	; 0x34
 8003a58:	73bb      	strb	r3, [r7, #14]

  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8003a5a:	f107 030c 	add.w	r3, r7, #12
 8003a5e:	2200      	movs	r2, #0
 8003a60:	4619      	mov	r1, r3
 8003a62:	481a      	ldr	r0, [pc, #104]	; (8003acc <MX_RTC_Init+0xd4>)
 8003a64:	f001 fcb6 	bl	80053d4 <HAL_RTC_SetTime>
 8003a68:	4603      	mov	r3, r0
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d001      	beq.n	8003a72 <MX_RTC_Init+0x7a>
  {
    Error_Handler();
 8003a6e:	f000 f9bb 	bl	8003de8 <Error_Handler>
  }
  DateToUpdate.WeekDay = RTC_WEEKDAY_MONDAY;
 8003a72:	2301      	movs	r3, #1
 8003a74:	723b      	strb	r3, [r7, #8]
  DateToUpdate.Month = MONTH;
 8003a76:	2302      	movs	r3, #2
 8003a78:	727b      	strb	r3, [r7, #9]
  DateToUpdate.Date =DAY;
 8003a7a:	231c      	movs	r3, #28
 8003a7c:	72bb      	strb	r3, [r7, #10]
  DateToUpdate.Year = YEAR;
 8003a7e:	2315      	movs	r3, #21
 8003a80:	72fb      	strb	r3, [r7, #11]

  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BIN) != HAL_OK)
 8003a82:	f107 0308 	add.w	r3, r7, #8
 8003a86:	2200      	movs	r2, #0
 8003a88:	4619      	mov	r1, r3
 8003a8a:	4810      	ldr	r0, [pc, #64]	; (8003acc <MX_RTC_Init+0xd4>)
 8003a8c:	f001 fe12 	bl	80056b4 <HAL_RTC_SetDate>
 8003a90:	4603      	mov	r3, r0
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d001      	beq.n	8003a9a <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 8003a96:	f000 f9a7 	bl	8003de8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */
HAL_RTCEx_BKUPWrite(&hrtc,RTC_BKP_DR6,(uint32_t )DateToUpdate.Date);
 8003a9a:	7abb      	ldrb	r3, [r7, #10]
 8003a9c:	461a      	mov	r2, r3
 8003a9e:	2106      	movs	r1, #6
 8003aa0:	480a      	ldr	r0, [pc, #40]	; (8003acc <MX_RTC_Init+0xd4>)
 8003aa2:	f002 f9c1 	bl	8005e28 <HAL_RTCEx_BKUPWrite>
HAL_RTCEx_BKUPWrite(&hrtc,RTC_BKP_DR7,(uint32_t )DateToUpdate.Month);
 8003aa6:	7a7b      	ldrb	r3, [r7, #9]
 8003aa8:	461a      	mov	r2, r3
 8003aaa:	2107      	movs	r1, #7
 8003aac:	4807      	ldr	r0, [pc, #28]	; (8003acc <MX_RTC_Init+0xd4>)
 8003aae:	f002 f9bb 	bl	8005e28 <HAL_RTCEx_BKUPWrite>
HAL_RTCEx_BKUPWrite(&hrtc,RTC_BKP_DR8,(uint32_t )DateToUpdate.Year);
 8003ab2:	7afb      	ldrb	r3, [r7, #11]
 8003ab4:	461a      	mov	r2, r3
 8003ab6:	2108      	movs	r1, #8
 8003ab8:	4804      	ldr	r0, [pc, #16]	; (8003acc <MX_RTC_Init+0xd4>)
 8003aba:	f002 f9b5 	bl	8005e28 <HAL_RTCEx_BKUPWrite>

}
 8003abe:	bf00      	nop
 8003ac0:	3710      	adds	r7, #16
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	bd80      	pop	{r7, pc}
 8003ac6:	bf00      	nop
 8003ac8:	40021000 	.word	0x40021000
 8003acc:	200025e0 	.word	0x200025e0
 8003ad0:	40002800 	.word	0x40002800

08003ad4 <RTCinit>:

void RTCinit()
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b084      	sub	sp, #16
 8003ad8:	af00      	add	r7, sp, #0

		__HAL_RCC_PWR_CLK_ENABLE();
 8003ada:	4b35      	ldr	r3, [pc, #212]	; (8003bb0 <RTCinit+0xdc>)
 8003adc:	69db      	ldr	r3, [r3, #28]
 8003ade:	4a34      	ldr	r2, [pc, #208]	; (8003bb0 <RTCinit+0xdc>)
 8003ae0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ae4:	61d3      	str	r3, [r2, #28]
 8003ae6:	4b32      	ldr	r3, [pc, #200]	; (8003bb0 <RTCinit+0xdc>)
 8003ae8:	69db      	ldr	r3, [r3, #28]
 8003aea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003aee:	60bb      	str	r3, [r7, #8]
 8003af0:	68bb      	ldr	r3, [r7, #8]

	HAL_PWR_EnableBkUpAccess();
 8003af2:	f000 fe0f 	bl	8004714 <HAL_PWR_EnableBkUpAccess>

		uint32_t s;



	 hrtc.Instance = RTC;
 8003af6:	4b2f      	ldr	r3, [pc, #188]	; (8003bb4 <RTCinit+0xe0>)
 8003af8:	4a2f      	ldr	r2, [pc, #188]	; (8003bb8 <RTCinit+0xe4>)
 8003afa:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 8003afc:	4b2d      	ldr	r3, [pc, #180]	; (8003bb4 <RTCinit+0xe0>)
 8003afe:	f04f 32ff 	mov.w	r2, #4294967295
 8003b02:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 8003b04:	4b2b      	ldr	r3, [pc, #172]	; (8003bb4 <RTCinit+0xe0>)
 8003b06:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003b0a:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8003b0c:	4829      	ldr	r0, [pc, #164]	; (8003bb4 <RTCinit+0xe0>)
 8003b0e:	f001 fbcb 	bl	80052a8 <HAL_RTC_Init>
 8003b12:	4603      	mov	r3, r0
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d001      	beq.n	8003b1c <RTCinit+0x48>
  {
    Error_Handler();
 8003b18:	f000 f966 	bl	8003de8 <Error_Handler>
  }

		__HAL_RCC_BKP_CLK_ENABLE();
 8003b1c:	4b24      	ldr	r3, [pc, #144]	; (8003bb0 <RTCinit+0xdc>)
 8003b1e:	69db      	ldr	r3, [r3, #28]
 8003b20:	4a23      	ldr	r2, [pc, #140]	; (8003bb0 <RTCinit+0xdc>)
 8003b22:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003b26:	61d3      	str	r3, [r2, #28]
 8003b28:	4b21      	ldr	r3, [pc, #132]	; (8003bb0 <RTCinit+0xdc>)
 8003b2a:	69db      	ldr	r3, [r3, #28]
 8003b2c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003b30:	607b      	str	r3, [r7, #4]
 8003b32:	687b      	ldr	r3, [r7, #4]





	s=(uint32_t )HAL_RTCEx_BKUPRead(&hrtc,RTC_BKP_DR5);
 8003b34:	2105      	movs	r1, #5
 8003b36:	481f      	ldr	r0, [pc, #124]	; (8003bb4 <RTCinit+0xe0>)
 8003b38:	f002 f990 	bl	8005e5c <HAL_RTCEx_BKUPRead>
 8003b3c:	60f8      	str	r0, [r7, #12]
	if(s!=TIMERESET)
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	2b02      	cmp	r3, #2
 8003b42:	d00a      	beq.n	8003b5a <RTCinit+0x86>
	{


		HAL_RTCEx_BKUPWrite(&hrtc,RTC_BKP_DR5,(uint32_t )TIMERESET);
 8003b44:	2202      	movs	r2, #2
 8003b46:	2105      	movs	r1, #5
 8003b48:	481a      	ldr	r0, [pc, #104]	; (8003bb4 <RTCinit+0xe0>)
 8003b4a:	f002 f96d 	bl	8005e28 <HAL_RTCEx_BKUPWrite>
	datas2("intilized");
 8003b4e:	481b      	ldr	r0, [pc, #108]	; (8003bbc <RTCinit+0xe8>)
 8003b50:	f7ff fb94 	bl	800327c <datas2>
MX_RTC_Init();
 8003b54:	f7ff ff50 	bl	80039f8 <MX_RTC_Init>
 8003b58:	e021      	b.n	8003b9e <RTCinit+0xca>

	}
else
{
	  DateToUpdate.Date =HAL_RTCEx_BKUPRead(&hrtc,RTC_BKP_DR6);
 8003b5a:	2106      	movs	r1, #6
 8003b5c:	4815      	ldr	r0, [pc, #84]	; (8003bb4 <RTCinit+0xe0>)
 8003b5e:	f002 f97d 	bl	8005e5c <HAL_RTCEx_BKUPRead>
 8003b62:	4603      	mov	r3, r0
 8003b64:	b2da      	uxtb	r2, r3
 8003b66:	4b16      	ldr	r3, [pc, #88]	; (8003bc0 <RTCinit+0xec>)
 8003b68:	709a      	strb	r2, [r3, #2]
  DateToUpdate.Month = HAL_RTCEx_BKUPRead(&hrtc,RTC_BKP_DR7);
 8003b6a:	2107      	movs	r1, #7
 8003b6c:	4811      	ldr	r0, [pc, #68]	; (8003bb4 <RTCinit+0xe0>)
 8003b6e:	f002 f975 	bl	8005e5c <HAL_RTCEx_BKUPRead>
 8003b72:	4603      	mov	r3, r0
 8003b74:	b2da      	uxtb	r2, r3
 8003b76:	4b12      	ldr	r3, [pc, #72]	; (8003bc0 <RTCinit+0xec>)
 8003b78:	705a      	strb	r2, [r3, #1]
  DateToUpdate.Year = HAL_RTCEx_BKUPRead(&hrtc,RTC_BKP_DR8);
 8003b7a:	2108      	movs	r1, #8
 8003b7c:	480d      	ldr	r0, [pc, #52]	; (8003bb4 <RTCinit+0xe0>)
 8003b7e:	f002 f96d 	bl	8005e5c <HAL_RTCEx_BKUPRead>
 8003b82:	4603      	mov	r3, r0
 8003b84:	b2da      	uxtb	r2, r3
 8003b86:	4b0e      	ldr	r3, [pc, #56]	; (8003bc0 <RTCinit+0xec>)
 8003b88:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BIN) != HAL_OK)
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	490c      	ldr	r1, [pc, #48]	; (8003bc0 <RTCinit+0xec>)
 8003b8e:	4809      	ldr	r0, [pc, #36]	; (8003bb4 <RTCinit+0xe0>)
 8003b90:	f001 fd90 	bl	80056b4 <HAL_RTC_SetDate>
 8003b94:	4603      	mov	r3, r0
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d001      	beq.n	8003b9e <RTCinit+0xca>
  {
    Error_Handler();
 8003b9a:	f000 f925 	bl	8003de8 <Error_Handler>
}



//__HAL_RCC_BKP_CLK_DISABLE();
	integer_2_string(s);
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	f7ff fac9 	bl	8003138 <integer_2_string>

}
 8003ba6:	bf00      	nop
 8003ba8:	3710      	adds	r7, #16
 8003baa:	46bd      	mov	sp, r7
 8003bac:	bd80      	pop	{r7, pc}
 8003bae:	bf00      	nop
 8003bb0:	40021000 	.word	0x40021000
 8003bb4:	200025e0 	.word	0x200025e0
 8003bb8:	40002800 	.word	0x40002800
 8003bbc:	0800e540 	.word	0x0800e540
 8003bc0:	20000500 	.word	0x20000500

08003bc4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8003bc8:	4b17      	ldr	r3, [pc, #92]	; (8003c28 <MX_SPI1_Init+0x64>)
 8003bca:	4a18      	ldr	r2, [pc, #96]	; (8003c2c <MX_SPI1_Init+0x68>)
 8003bcc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003bce:	4b16      	ldr	r3, [pc, #88]	; (8003c28 <MX_SPI1_Init+0x64>)
 8003bd0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003bd4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003bd6:	4b14      	ldr	r3, [pc, #80]	; (8003c28 <MX_SPI1_Init+0x64>)
 8003bd8:	2200      	movs	r2, #0
 8003bda:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003bdc:	4b12      	ldr	r3, [pc, #72]	; (8003c28 <MX_SPI1_Init+0x64>)
 8003bde:	2200      	movs	r2, #0
 8003be0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003be2:	4b11      	ldr	r3, [pc, #68]	; (8003c28 <MX_SPI1_Init+0x64>)
 8003be4:	2200      	movs	r2, #0
 8003be6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003be8:	4b0f      	ldr	r3, [pc, #60]	; (8003c28 <MX_SPI1_Init+0x64>)
 8003bea:	2200      	movs	r2, #0
 8003bec:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003bee:	4b0e      	ldr	r3, [pc, #56]	; (8003c28 <MX_SPI1_Init+0x64>)
 8003bf0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003bf4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8003bf6:	4b0c      	ldr	r3, [pc, #48]	; (8003c28 <MX_SPI1_Init+0x64>)
 8003bf8:	2208      	movs	r2, #8
 8003bfa:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003bfc:	4b0a      	ldr	r3, [pc, #40]	; (8003c28 <MX_SPI1_Init+0x64>)
 8003bfe:	2200      	movs	r2, #0
 8003c00:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003c02:	4b09      	ldr	r3, [pc, #36]	; (8003c28 <MX_SPI1_Init+0x64>)
 8003c04:	2200      	movs	r2, #0
 8003c06:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003c08:	4b07      	ldr	r3, [pc, #28]	; (8003c28 <MX_SPI1_Init+0x64>)
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8003c0e:	4b06      	ldr	r3, [pc, #24]	; (8003c28 <MX_SPI1_Init+0x64>)
 8003c10:	220a      	movs	r2, #10
 8003c12:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003c14:	4804      	ldr	r0, [pc, #16]	; (8003c28 <MX_SPI1_Init+0x64>)
 8003c16:	f002 f93d 	bl	8005e94 <HAL_SPI_Init>
 8003c1a:	4603      	mov	r3, r0
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d001      	beq.n	8003c24 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8003c20:	f000 f8e2 	bl	8003de8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003c24:	bf00      	nop
 8003c26:	bd80      	pop	{r7, pc}
 8003c28:	2000261c 	.word	0x2000261c
 8003c2c:	40013000 	.word	0x40013000

08003c30 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003c34:	4b11      	ldr	r3, [pc, #68]	; (8003c7c <MX_USART1_UART_Init+0x4c>)
 8003c36:	4a12      	ldr	r2, [pc, #72]	; (8003c80 <MX_USART1_UART_Init+0x50>)
 8003c38:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate =115200;
 8003c3a:	4b10      	ldr	r3, [pc, #64]	; (8003c7c <MX_USART1_UART_Init+0x4c>)
 8003c3c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003c40:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003c42:	4b0e      	ldr	r3, [pc, #56]	; (8003c7c <MX_USART1_UART_Init+0x4c>)
 8003c44:	2200      	movs	r2, #0
 8003c46:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003c48:	4b0c      	ldr	r3, [pc, #48]	; (8003c7c <MX_USART1_UART_Init+0x4c>)
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003c4e:	4b0b      	ldr	r3, [pc, #44]	; (8003c7c <MX_USART1_UART_Init+0x4c>)
 8003c50:	2200      	movs	r2, #0
 8003c52:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003c54:	4b09      	ldr	r3, [pc, #36]	; (8003c7c <MX_USART1_UART_Init+0x4c>)
 8003c56:	220c      	movs	r2, #12
 8003c58:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003c5a:	4b08      	ldr	r3, [pc, #32]	; (8003c7c <MX_USART1_UART_Init+0x4c>)
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003c60:	4b06      	ldr	r3, [pc, #24]	; (8003c7c <MX_USART1_UART_Init+0x4c>)
 8003c62:	2200      	movs	r2, #0
 8003c64:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003c66:	4805      	ldr	r0, [pc, #20]	; (8003c7c <MX_USART1_UART_Init+0x4c>)
 8003c68:	f002 ff74 	bl	8006b54 <HAL_UART_Init>
 8003c6c:	4603      	mov	r3, r0
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d001      	beq.n	8003c76 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8003c72:	f000 f8b9 	bl	8003de8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003c76:	bf00      	nop
 8003c78:	bd80      	pop	{r7, pc}
 8003c7a:	bf00      	nop
 8003c7c:	20002310 	.word	0x20002310
 8003c80:	40013800 	.word	0x40013800

08003c84 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003c88:	4b11      	ldr	r3, [pc, #68]	; (8003cd0 <MX_USART2_UART_Init+0x4c>)
 8003c8a:	4a12      	ldr	r2, [pc, #72]	; (8003cd4 <MX_USART2_UART_Init+0x50>)
 8003c8c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8003c8e:	4b10      	ldr	r3, [pc, #64]	; (8003cd0 <MX_USART2_UART_Init+0x4c>)
 8003c90:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8003c94:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003c96:	4b0e      	ldr	r3, [pc, #56]	; (8003cd0 <MX_USART2_UART_Init+0x4c>)
 8003c98:	2200      	movs	r2, #0
 8003c9a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003c9c:	4b0c      	ldr	r3, [pc, #48]	; (8003cd0 <MX_USART2_UART_Init+0x4c>)
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003ca2:	4b0b      	ldr	r3, [pc, #44]	; (8003cd0 <MX_USART2_UART_Init+0x4c>)
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003ca8:	4b09      	ldr	r3, [pc, #36]	; (8003cd0 <MX_USART2_UART_Init+0x4c>)
 8003caa:	220c      	movs	r2, #12
 8003cac:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003cae:	4b08      	ldr	r3, [pc, #32]	; (8003cd0 <MX_USART2_UART_Init+0x4c>)
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003cb4:	4b06      	ldr	r3, [pc, #24]	; (8003cd0 <MX_USART2_UART_Init+0x4c>)
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003cba:	4805      	ldr	r0, [pc, #20]	; (8003cd0 <MX_USART2_UART_Init+0x4c>)
 8003cbc:	f002 ff4a 	bl	8006b54 <HAL_UART_Init>
 8003cc0:	4603      	mov	r3, r0
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d001      	beq.n	8003cca <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8003cc6:	f000 f88f 	bl	8003de8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003cca:	bf00      	nop
 8003ccc:	bd80      	pop	{r7, pc}
 8003cce:	bf00      	nop
 8003cd0:	200026a8 	.word	0x200026a8
 8003cd4:	40004400 	.word	0x40004400

08003cd8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b088      	sub	sp, #32
 8003cdc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003cde:	f107 0310 	add.w	r3, r7, #16
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	601a      	str	r2, [r3, #0]
 8003ce6:	605a      	str	r2, [r3, #4]
 8003ce8:	609a      	str	r2, [r3, #8]
 8003cea:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003cec:	4b32      	ldr	r3, [pc, #200]	; (8003db8 <MX_GPIO_Init+0xe0>)
 8003cee:	699b      	ldr	r3, [r3, #24]
 8003cf0:	4a31      	ldr	r2, [pc, #196]	; (8003db8 <MX_GPIO_Init+0xe0>)
 8003cf2:	f043 0320 	orr.w	r3, r3, #32
 8003cf6:	6193      	str	r3, [r2, #24]
 8003cf8:	4b2f      	ldr	r3, [pc, #188]	; (8003db8 <MX_GPIO_Init+0xe0>)
 8003cfa:	699b      	ldr	r3, [r3, #24]
 8003cfc:	f003 0320 	and.w	r3, r3, #32
 8003d00:	60fb      	str	r3, [r7, #12]
 8003d02:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d04:	4b2c      	ldr	r3, [pc, #176]	; (8003db8 <MX_GPIO_Init+0xe0>)
 8003d06:	699b      	ldr	r3, [r3, #24]
 8003d08:	4a2b      	ldr	r2, [pc, #172]	; (8003db8 <MX_GPIO_Init+0xe0>)
 8003d0a:	f043 0304 	orr.w	r3, r3, #4
 8003d0e:	6193      	str	r3, [r2, #24]
 8003d10:	4b29      	ldr	r3, [pc, #164]	; (8003db8 <MX_GPIO_Init+0xe0>)
 8003d12:	699b      	ldr	r3, [r3, #24]
 8003d14:	f003 0304 	and.w	r3, r3, #4
 8003d18:	60bb      	str	r3, [r7, #8]
 8003d1a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003d1c:	4b26      	ldr	r3, [pc, #152]	; (8003db8 <MX_GPIO_Init+0xe0>)
 8003d1e:	699b      	ldr	r3, [r3, #24]
 8003d20:	4a25      	ldr	r2, [pc, #148]	; (8003db8 <MX_GPIO_Init+0xe0>)
 8003d22:	f043 0310 	orr.w	r3, r3, #16
 8003d26:	6193      	str	r3, [r2, #24]
 8003d28:	4b23      	ldr	r3, [pc, #140]	; (8003db8 <MX_GPIO_Init+0xe0>)
 8003d2a:	699b      	ldr	r3, [r3, #24]
 8003d2c:	f003 0310 	and.w	r3, r3, #16
 8003d30:	607b      	str	r3, [r7, #4]
 8003d32:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 8003d34:	2201      	movs	r2, #1
 8003d36:	2110      	movs	r1, #16
 8003d38:	4820      	ldr	r0, [pc, #128]	; (8003dbc <MX_GPIO_Init+0xe4>)
 8003d3a:	f000 fcd3 	bl	80046e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SD_CS_Pin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
 8003d3e:	2310      	movs	r3, #16
 8003d40:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003d42:	2301      	movs	r3, #1
 8003d44:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d46:	2300      	movs	r3, #0
 8003d48:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8003d4a:	2301      	movs	r3, #1
 8003d4c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 8003d4e:	f107 0310 	add.w	r3, r7, #16
 8003d52:	4619      	mov	r1, r3
 8003d54:	4819      	ldr	r0, [pc, #100]	; (8003dbc <MX_GPIO_Init+0xe4>)
 8003d56:	f000 fb6b 	bl	8004430 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = GPIO_PIN_13;
 8003d5a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003d5e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003d60:	2301      	movs	r3, #1
 8003d62:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d64:	2300      	movs	r3, #0
 8003d66:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8003d68:	2301      	movs	r3, #1
 8003d6a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DOOR_PORT, &GPIO_InitStruct);
 8003d6c:	f107 0310 	add.w	r3, r7, #16
 8003d70:	4619      	mov	r1, r3
 8003d72:	4813      	ldr	r0, [pc, #76]	; (8003dc0 <MX_GPIO_Init+0xe8>)
 8003d74:	f000 fb5c 	bl	8004430 <HAL_GPIO_Init>

	HAL_GPIO_WritePin(DOOR_PORT,DOOR_OPEN,GPIO_PIN_RESET);
 8003d78:	2200      	movs	r2, #0
 8003d7a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003d7e:	4810      	ldr	r0, [pc, #64]	; (8003dc0 <MX_GPIO_Init+0xe8>)
 8003d80:	f000 fcb0 	bl	80046e4 <HAL_GPIO_WritePin>

GPIO_InitStruct.Pin = GPIO_PIN_14;
 8003d84:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003d88:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003d8a:	2301      	movs	r3, #1
 8003d8c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d8e:	2300      	movs	r3, #0
 8003d90:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8003d92:	2301      	movs	r3, #1
 8003d94:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DOOR_PORT, &GPIO_InitStruct);
 8003d96:	f107 0310 	add.w	r3, r7, #16
 8003d9a:	4619      	mov	r1, r3
 8003d9c:	4808      	ldr	r0, [pc, #32]	; (8003dc0 <MX_GPIO_Init+0xe8>)
 8003d9e:	f000 fb47 	bl	8004430 <HAL_GPIO_Init>

	HAL_GPIO_WritePin(DOOR_PORT,DOOR_CLOSE,GPIO_PIN_RESET);
 8003da2:	2200      	movs	r2, #0
 8003da4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003da8:	4805      	ldr	r0, [pc, #20]	; (8003dc0 <MX_GPIO_Init+0xe8>)
 8003daa:	f000 fc9b 	bl	80046e4 <HAL_GPIO_WritePin>
}
 8003dae:	bf00      	nop
 8003db0:	3720      	adds	r7, #32
 8003db2:	46bd      	mov	sp, r7
 8003db4:	bd80      	pop	{r7, pc}
 8003db6:	bf00      	nop
 8003db8:	40021000 	.word	0x40021000
 8003dbc:	40010800 	.word	0x40010800
 8003dc0:	40010c00 	.word	0x40010c00

08003dc4 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE END 4 */


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	b082      	sub	sp, #8
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	4a04      	ldr	r2, [pc, #16]	; (8003de4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8003dd2:	4293      	cmp	r3, r2
 8003dd4:	d101      	bne.n	8003dda <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8003dd6:	f000 fa0d 	bl	80041f4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8003dda:	bf00      	nop
 8003ddc:	3708      	adds	r7, #8
 8003dde:	46bd      	mov	sp, r7
 8003de0:	bd80      	pop	{r7, pc}
 8003de2:	bf00      	nop
 8003de4:	40012c00 	.word	0x40012c00

08003de8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003de8:	b480      	push	{r7}
 8003dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while(1)
 8003dec:	e7fe      	b.n	8003dec <Error_Handler+0x4>
	...

08003df0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	b084      	sub	sp, #16
 8003df4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8003df6:	4b18      	ldr	r3, [pc, #96]	; (8003e58 <HAL_MspInit+0x68>)
 8003df8:	699b      	ldr	r3, [r3, #24]
 8003dfa:	4a17      	ldr	r2, [pc, #92]	; (8003e58 <HAL_MspInit+0x68>)
 8003dfc:	f043 0301 	orr.w	r3, r3, #1
 8003e00:	6193      	str	r3, [r2, #24]
 8003e02:	4b15      	ldr	r3, [pc, #84]	; (8003e58 <HAL_MspInit+0x68>)
 8003e04:	699b      	ldr	r3, [r3, #24]
 8003e06:	f003 0301 	and.w	r3, r3, #1
 8003e0a:	60bb      	str	r3, [r7, #8]
 8003e0c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003e0e:	4b12      	ldr	r3, [pc, #72]	; (8003e58 <HAL_MspInit+0x68>)
 8003e10:	69db      	ldr	r3, [r3, #28]
 8003e12:	4a11      	ldr	r2, [pc, #68]	; (8003e58 <HAL_MspInit+0x68>)
 8003e14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e18:	61d3      	str	r3, [r2, #28]
 8003e1a:	4b0f      	ldr	r3, [pc, #60]	; (8003e58 <HAL_MspInit+0x68>)
 8003e1c:	69db      	ldr	r3, [r3, #28]
 8003e1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e22:	607b      	str	r3, [r7, #4]
 8003e24:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003e26:	2200      	movs	r2, #0
 8003e28:	210f      	movs	r1, #15
 8003e2a:	f06f 0001 	mvn.w	r0, #1
 8003e2e:	f000 fad4 	bl	80043da <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8003e32:	4b0a      	ldr	r3, [pc, #40]	; (8003e5c <HAL_MspInit+0x6c>)
 8003e34:	685b      	ldr	r3, [r3, #4]
 8003e36:	60fb      	str	r3, [r7, #12]
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8003e3e:	60fb      	str	r3, [r7, #12]
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003e46:	60fb      	str	r3, [r7, #12]
 8003e48:	4a04      	ldr	r2, [pc, #16]	; (8003e5c <HAL_MspInit+0x6c>)
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003e4e:	bf00      	nop
 8003e50:	3710      	adds	r7, #16
 8003e52:	46bd      	mov	sp, r7
 8003e54:	bd80      	pop	{r7, pc}
 8003e56:	bf00      	nop
 8003e58:	40021000 	.word	0x40021000
 8003e5c:	40010000 	.word	0x40010000

08003e60 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b084      	sub	sp, #16
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	4a0b      	ldr	r2, [pc, #44]	; (8003e9c <HAL_RTC_MspInit+0x3c>)
 8003e6e:	4293      	cmp	r3, r2
 8003e70:	d110      	bne.n	8003e94 <HAL_RTC_MspInit+0x34>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 8003e72:	f000 fc4f 	bl	8004714 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 8003e76:	4b0a      	ldr	r3, [pc, #40]	; (8003ea0 <HAL_RTC_MspInit+0x40>)
 8003e78:	69db      	ldr	r3, [r3, #28]
 8003e7a:	4a09      	ldr	r2, [pc, #36]	; (8003ea0 <HAL_RTC_MspInit+0x40>)
 8003e7c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003e80:	61d3      	str	r3, [r2, #28]
 8003e82:	4b07      	ldr	r3, [pc, #28]	; (8003ea0 <HAL_RTC_MspInit+0x40>)
 8003e84:	69db      	ldr	r3, [r3, #28]
 8003e86:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003e8a:	60fb      	str	r3, [r7, #12]
 8003e8c:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003e8e:	4b05      	ldr	r3, [pc, #20]	; (8003ea4 <HAL_RTC_MspInit+0x44>)
 8003e90:	2201      	movs	r2, #1
 8003e92:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8003e94:	bf00      	nop
 8003e96:	3710      	adds	r7, #16
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	bd80      	pop	{r7, pc}
 8003e9c:	40002800 	.word	0x40002800
 8003ea0:	40021000 	.word	0x40021000
 8003ea4:	4242043c 	.word	0x4242043c

08003ea8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b088      	sub	sp, #32
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003eb0:	f107 0310 	add.w	r3, r7, #16
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	601a      	str	r2, [r3, #0]
 8003eb8:	605a      	str	r2, [r3, #4]
 8003eba:	609a      	str	r2, [r3, #8]
 8003ebc:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	4a1b      	ldr	r2, [pc, #108]	; (8003f30 <HAL_SPI_MspInit+0x88>)
 8003ec4:	4293      	cmp	r3, r2
 8003ec6:	d12f      	bne.n	8003f28 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003ec8:	4b1a      	ldr	r3, [pc, #104]	; (8003f34 <HAL_SPI_MspInit+0x8c>)
 8003eca:	699b      	ldr	r3, [r3, #24]
 8003ecc:	4a19      	ldr	r2, [pc, #100]	; (8003f34 <HAL_SPI_MspInit+0x8c>)
 8003ece:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003ed2:	6193      	str	r3, [r2, #24]
 8003ed4:	4b17      	ldr	r3, [pc, #92]	; (8003f34 <HAL_SPI_MspInit+0x8c>)
 8003ed6:	699b      	ldr	r3, [r3, #24]
 8003ed8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003edc:	60fb      	str	r3, [r7, #12]
 8003ede:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ee0:	4b14      	ldr	r3, [pc, #80]	; (8003f34 <HAL_SPI_MspInit+0x8c>)
 8003ee2:	699b      	ldr	r3, [r3, #24]
 8003ee4:	4a13      	ldr	r2, [pc, #76]	; (8003f34 <HAL_SPI_MspInit+0x8c>)
 8003ee6:	f043 0304 	orr.w	r3, r3, #4
 8003eea:	6193      	str	r3, [r2, #24]
 8003eec:	4b11      	ldr	r3, [pc, #68]	; (8003f34 <HAL_SPI_MspInit+0x8c>)
 8003eee:	699b      	ldr	r3, [r3, #24]
 8003ef0:	f003 0304 	and.w	r3, r3, #4
 8003ef4:	60bb      	str	r3, [r7, #8]
 8003ef6:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8003ef8:	23a0      	movs	r3, #160	; 0xa0
 8003efa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003efc:	2302      	movs	r3, #2
 8003efe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003f00:	2303      	movs	r3, #3
 8003f02:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f04:	f107 0310 	add.w	r3, r7, #16
 8003f08:	4619      	mov	r1, r3
 8003f0a:	480b      	ldr	r0, [pc, #44]	; (8003f38 <HAL_SPI_MspInit+0x90>)
 8003f0c:	f000 fa90 	bl	8004430 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003f10:	2340      	movs	r3, #64	; 0x40
 8003f12:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003f14:	2300      	movs	r3, #0
 8003f16:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f18:	2300      	movs	r3, #0
 8003f1a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f1c:	f107 0310 	add.w	r3, r7, #16
 8003f20:	4619      	mov	r1, r3
 8003f22:	4805      	ldr	r0, [pc, #20]	; (8003f38 <HAL_SPI_MspInit+0x90>)
 8003f24:	f000 fa84 	bl	8004430 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8003f28:	bf00      	nop
 8003f2a:	3720      	adds	r7, #32
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	bd80      	pop	{r7, pc}
 8003f30:	40013000 	.word	0x40013000
 8003f34:	40021000 	.word	0x40021000
 8003f38:	40010800 	.word	0x40010800

08003f3c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	b08a      	sub	sp, #40	; 0x28
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f44:	f107 0318 	add.w	r3, r7, #24
 8003f48:	2200      	movs	r2, #0
 8003f4a:	601a      	str	r2, [r3, #0]
 8003f4c:	605a      	str	r2, [r3, #4]
 8003f4e:	609a      	str	r2, [r3, #8]
 8003f50:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	4a37      	ldr	r2, [pc, #220]	; (8004034 <HAL_UART_MspInit+0xf8>)
 8003f58:	4293      	cmp	r3, r2
 8003f5a:	d132      	bne.n	8003fc2 <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003f5c:	4b36      	ldr	r3, [pc, #216]	; (8004038 <HAL_UART_MspInit+0xfc>)
 8003f5e:	699b      	ldr	r3, [r3, #24]
 8003f60:	4a35      	ldr	r2, [pc, #212]	; (8004038 <HAL_UART_MspInit+0xfc>)
 8003f62:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003f66:	6193      	str	r3, [r2, #24]
 8003f68:	4b33      	ldr	r3, [pc, #204]	; (8004038 <HAL_UART_MspInit+0xfc>)
 8003f6a:	699b      	ldr	r3, [r3, #24]
 8003f6c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f70:	617b      	str	r3, [r7, #20]
 8003f72:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f74:	4b30      	ldr	r3, [pc, #192]	; (8004038 <HAL_UART_MspInit+0xfc>)
 8003f76:	699b      	ldr	r3, [r3, #24]
 8003f78:	4a2f      	ldr	r2, [pc, #188]	; (8004038 <HAL_UART_MspInit+0xfc>)
 8003f7a:	f043 0304 	orr.w	r3, r3, #4
 8003f7e:	6193      	str	r3, [r2, #24]
 8003f80:	4b2d      	ldr	r3, [pc, #180]	; (8004038 <HAL_UART_MspInit+0xfc>)
 8003f82:	699b      	ldr	r3, [r3, #24]
 8003f84:	f003 0304 	and.w	r3, r3, #4
 8003f88:	613b      	str	r3, [r7, #16]
 8003f8a:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003f8c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003f90:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f92:	2302      	movs	r3, #2
 8003f94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003f96:	2303      	movs	r3, #3
 8003f98:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f9a:	f107 0318 	add.w	r3, r7, #24
 8003f9e:	4619      	mov	r1, r3
 8003fa0:	4826      	ldr	r0, [pc, #152]	; (800403c <HAL_UART_MspInit+0x100>)
 8003fa2:	f000 fa45 	bl	8004430 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003fa6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003faa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003fac:	2300      	movs	r3, #0
 8003fae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fb0:	2300      	movs	r3, #0
 8003fb2:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003fb4:	f107 0318 	add.w	r3, r7, #24
 8003fb8:	4619      	mov	r1, r3
 8003fba:	4820      	ldr	r0, [pc, #128]	; (800403c <HAL_UART_MspInit+0x100>)
 8003fbc:	f000 fa38 	bl	8004430 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003fc0:	e034      	b.n	800402c <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART2)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	4a1e      	ldr	r2, [pc, #120]	; (8004040 <HAL_UART_MspInit+0x104>)
 8003fc8:	4293      	cmp	r3, r2
 8003fca:	d12f      	bne.n	800402c <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003fcc:	4b1a      	ldr	r3, [pc, #104]	; (8004038 <HAL_UART_MspInit+0xfc>)
 8003fce:	69db      	ldr	r3, [r3, #28]
 8003fd0:	4a19      	ldr	r2, [pc, #100]	; (8004038 <HAL_UART_MspInit+0xfc>)
 8003fd2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003fd6:	61d3      	str	r3, [r2, #28]
 8003fd8:	4b17      	ldr	r3, [pc, #92]	; (8004038 <HAL_UART_MspInit+0xfc>)
 8003fda:	69db      	ldr	r3, [r3, #28]
 8003fdc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fe0:	60fb      	str	r3, [r7, #12]
 8003fe2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003fe4:	4b14      	ldr	r3, [pc, #80]	; (8004038 <HAL_UART_MspInit+0xfc>)
 8003fe6:	699b      	ldr	r3, [r3, #24]
 8003fe8:	4a13      	ldr	r2, [pc, #76]	; (8004038 <HAL_UART_MspInit+0xfc>)
 8003fea:	f043 0304 	orr.w	r3, r3, #4
 8003fee:	6193      	str	r3, [r2, #24]
 8003ff0:	4b11      	ldr	r3, [pc, #68]	; (8004038 <HAL_UART_MspInit+0xfc>)
 8003ff2:	699b      	ldr	r3, [r3, #24]
 8003ff4:	f003 0304 	and.w	r3, r3, #4
 8003ff8:	60bb      	str	r3, [r7, #8]
 8003ffa:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003ffc:	2304      	movs	r3, #4
 8003ffe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004000:	2302      	movs	r3, #2
 8004002:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004004:	2303      	movs	r3, #3
 8004006:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004008:	f107 0318 	add.w	r3, r7, #24
 800400c:	4619      	mov	r1, r3
 800400e:	480b      	ldr	r0, [pc, #44]	; (800403c <HAL_UART_MspInit+0x100>)
 8004010:	f000 fa0e 	bl	8004430 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8004014:	2308      	movs	r3, #8
 8004016:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004018:	2300      	movs	r3, #0
 800401a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800401c:	2300      	movs	r3, #0
 800401e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004020:	f107 0318 	add.w	r3, r7, #24
 8004024:	4619      	mov	r1, r3
 8004026:	4805      	ldr	r0, [pc, #20]	; (800403c <HAL_UART_MspInit+0x100>)
 8004028:	f000 fa02 	bl	8004430 <HAL_GPIO_Init>
}
 800402c:	bf00      	nop
 800402e:	3728      	adds	r7, #40	; 0x28
 8004030:	46bd      	mov	sp, r7
 8004032:	bd80      	pop	{r7, pc}
 8004034:	40013800 	.word	0x40013800
 8004038:	40021000 	.word	0x40021000
 800403c:	40010800 	.word	0x40010800
 8004040:	40004400 	.word	0x40004400

08004044 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004044:	b580      	push	{r7, lr}
 8004046:	b08c      	sub	sp, #48	; 0x30
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800404c:	2300      	movs	r3, #0
 800404e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8004050:	2300      	movs	r3, #0
 8004052:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0);
 8004054:	2200      	movs	r2, #0
 8004056:	6879      	ldr	r1, [r7, #4]
 8004058:	2019      	movs	r0, #25
 800405a:	f000 f9be 	bl	80043da <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 800405e:	2019      	movs	r0, #25
 8004060:	f000 f9d7 	bl	8004412 <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8004064:	4b1e      	ldr	r3, [pc, #120]	; (80040e0 <HAL_InitTick+0x9c>)
 8004066:	699b      	ldr	r3, [r3, #24]
 8004068:	4a1d      	ldr	r2, [pc, #116]	; (80040e0 <HAL_InitTick+0x9c>)
 800406a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800406e:	6193      	str	r3, [r2, #24]
 8004070:	4b1b      	ldr	r3, [pc, #108]	; (80040e0 <HAL_InitTick+0x9c>)
 8004072:	699b      	ldr	r3, [r3, #24]
 8004074:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004078:	60fb      	str	r3, [r7, #12]
 800407a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800407c:	f107 0210 	add.w	r2, r7, #16
 8004080:	f107 0314 	add.w	r3, r7, #20
 8004084:	4611      	mov	r1, r2
 8004086:	4618      	mov	r0, r3
 8004088:	f000 ff4e 	bl	8004f28 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 800408c:	f000 ff38 	bl	8004f00 <HAL_RCC_GetPCLK2Freq>
 8004090:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8004092:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004094:	4a13      	ldr	r2, [pc, #76]	; (80040e4 <HAL_InitTick+0xa0>)
 8004096:	fba2 2303 	umull	r2, r3, r2, r3
 800409a:	0c9b      	lsrs	r3, r3, #18
 800409c:	3b01      	subs	r3, #1
 800409e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80040a0:	4b11      	ldr	r3, [pc, #68]	; (80040e8 <HAL_InitTick+0xa4>)
 80040a2:	4a12      	ldr	r2, [pc, #72]	; (80040ec <HAL_InitTick+0xa8>)
 80040a4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80040a6:	4b10      	ldr	r3, [pc, #64]	; (80040e8 <HAL_InitTick+0xa4>)
 80040a8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80040ac:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80040ae:	4a0e      	ldr	r2, [pc, #56]	; (80040e8 <HAL_InitTick+0xa4>)
 80040b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040b2:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80040b4:	4b0c      	ldr	r3, [pc, #48]	; (80040e8 <HAL_InitTick+0xa4>)
 80040b6:	2200      	movs	r2, #0
 80040b8:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80040ba:	4b0b      	ldr	r3, [pc, #44]	; (80040e8 <HAL_InitTick+0xa4>)
 80040bc:	2200      	movs	r2, #0
 80040be:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80040c0:	4809      	ldr	r0, [pc, #36]	; (80040e8 <HAL_InitTick+0xa4>)
 80040c2:	f002 fafd 	bl	80066c0 <HAL_TIM_Base_Init>
 80040c6:	4603      	mov	r3, r0
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d104      	bne.n	80040d6 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80040cc:	4806      	ldr	r0, [pc, #24]	; (80040e8 <HAL_InitTick+0xa4>)
 80040ce:	f002 fb4f 	bl	8006770 <HAL_TIM_Base_Start_IT>
 80040d2:	4603      	mov	r3, r0
 80040d4:	e000      	b.n	80040d8 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 80040d6:	2301      	movs	r3, #1
}
 80040d8:	4618      	mov	r0, r3
 80040da:	3730      	adds	r7, #48	; 0x30
 80040dc:	46bd      	mov	sp, r7
 80040de:	bd80      	pop	{r7, pc}
 80040e0:	40021000 	.word	0x40021000
 80040e4:	431bde83 	.word	0x431bde83
 80040e8:	20002b50 	.word	0x20002b50
 80040ec:	40012c00 	.word	0x40012c00

080040f0 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80040f4:	4802      	ldr	r0, [pc, #8]	; (8004100 <TIM1_UP_IRQHandler+0x10>)
 80040f6:	f002 fb8d 	bl	8006814 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80040fa:	bf00      	nop
 80040fc:	bd80      	pop	{r7, pc}
 80040fe:	bf00      	nop
 8004100:	20002b50 	.word	0x20002b50

08004104 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004104:	b580      	push	{r7, lr}
 8004106:	b086      	sub	sp, #24
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800410c:	4a14      	ldr	r2, [pc, #80]	; (8004160 <_sbrk+0x5c>)
 800410e:	4b15      	ldr	r3, [pc, #84]	; (8004164 <_sbrk+0x60>)
 8004110:	1ad3      	subs	r3, r2, r3
 8004112:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004114:	697b      	ldr	r3, [r7, #20]
 8004116:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004118:	4b13      	ldr	r3, [pc, #76]	; (8004168 <_sbrk+0x64>)
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	2b00      	cmp	r3, #0
 800411e:	d102      	bne.n	8004126 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004120:	4b11      	ldr	r3, [pc, #68]	; (8004168 <_sbrk+0x64>)
 8004122:	4a12      	ldr	r2, [pc, #72]	; (800416c <_sbrk+0x68>)
 8004124:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004126:	4b10      	ldr	r3, [pc, #64]	; (8004168 <_sbrk+0x64>)
 8004128:	681a      	ldr	r2, [r3, #0]
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	4413      	add	r3, r2
 800412e:	693a      	ldr	r2, [r7, #16]
 8004130:	429a      	cmp	r2, r3
 8004132:	d207      	bcs.n	8004144 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004134:	f008 fee2 	bl	800cefc <__errno>
 8004138:	4602      	mov	r2, r0
 800413a:	230c      	movs	r3, #12
 800413c:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800413e:	f04f 33ff 	mov.w	r3, #4294967295
 8004142:	e009      	b.n	8004158 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004144:	4b08      	ldr	r3, [pc, #32]	; (8004168 <_sbrk+0x64>)
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800414a:	4b07      	ldr	r3, [pc, #28]	; (8004168 <_sbrk+0x64>)
 800414c:	681a      	ldr	r2, [r3, #0]
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	4413      	add	r3, r2
 8004152:	4a05      	ldr	r2, [pc, #20]	; (8004168 <_sbrk+0x64>)
 8004154:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004156:	68fb      	ldr	r3, [r7, #12]
}
 8004158:	4618      	mov	r0, r3
 800415a:	3718      	adds	r7, #24
 800415c:	46bd      	mov	sp, r7
 800415e:	bd80      	pop	{r7, pc}
 8004160:	20005000 	.word	0x20005000
 8004164:	00000400 	.word	0x00000400
 8004168:	20000510 	.word	0x20000510
 800416c:	20003050 	.word	0x20003050

08004170 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8004170:	b480      	push	{r7}
 8004172:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004174:	bf00      	nop
 8004176:	46bd      	mov	sp, r7
 8004178:	bc80      	pop	{r7}
 800417a:	4770      	bx	lr

0800417c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800417c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800417e:	e003      	b.n	8004188 <LoopCopyDataInit>

08004180 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8004180:	4b0b      	ldr	r3, [pc, #44]	; (80041b0 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8004182:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8004184:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8004186:	3104      	adds	r1, #4

08004188 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8004188:	480a      	ldr	r0, [pc, #40]	; (80041b4 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800418a:	4b0b      	ldr	r3, [pc, #44]	; (80041b8 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 800418c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800418e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8004190:	d3f6      	bcc.n	8004180 <CopyDataInit>
  ldr r2, =_sbss
 8004192:	4a0a      	ldr	r2, [pc, #40]	; (80041bc <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8004194:	e002      	b.n	800419c <LoopFillZerobss>

08004196 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8004196:	2300      	movs	r3, #0
  str r3, [r2], #4
 8004198:	f842 3b04 	str.w	r3, [r2], #4

0800419c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 800419c:	4b08      	ldr	r3, [pc, #32]	; (80041c0 <LoopFillZerobss+0x24>)
  cmp r2, r3
 800419e:	429a      	cmp	r2, r3
  bcc FillZerobss
 80041a0:	d3f9      	bcc.n	8004196 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80041a2:	f7ff ffe5 	bl	8004170 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80041a6:	f008 feaf 	bl	800cf08 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80041aa:	f7fe f8e5 	bl	8002378 <main>
  bx lr
 80041ae:	4770      	bx	lr
  ldr r3, =_sidata
 80041b0:	0800e82c 	.word	0x0800e82c
  ldr r0, =_sdata
 80041b4:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80041b8:	20000204 	.word	0x20000204
  ldr r2, =_sbss
 80041bc:	20000204 	.word	0x20000204
  ldr r3, = _ebss
 80041c0:	2000304c 	.word	0x2000304c

080041c4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80041c4:	e7fe      	b.n	80041c4 <ADC1_2_IRQHandler>
	...

080041c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80041cc:	4b08      	ldr	r3, [pc, #32]	; (80041f0 <HAL_Init+0x28>)
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	4a07      	ldr	r2, [pc, #28]	; (80041f0 <HAL_Init+0x28>)
 80041d2:	f043 0310 	orr.w	r3, r3, #16
 80041d6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80041d8:	2003      	movs	r0, #3
 80041da:	f000 f8f3 	bl	80043c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80041de:	2000      	movs	r0, #0
 80041e0:	f7ff ff30 	bl	8004044 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80041e4:	f7ff fe04 	bl	8003df0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80041e8:	2300      	movs	r3, #0
}
 80041ea:	4618      	mov	r0, r3
 80041ec:	bd80      	pop	{r7, pc}
 80041ee:	bf00      	nop
 80041f0:	40022000 	.word	0x40022000

080041f4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80041f4:	b480      	push	{r7}
 80041f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80041f8:	4b05      	ldr	r3, [pc, #20]	; (8004210 <HAL_IncTick+0x1c>)
 80041fa:	781b      	ldrb	r3, [r3, #0]
 80041fc:	461a      	mov	r2, r3
 80041fe:	4b05      	ldr	r3, [pc, #20]	; (8004214 <HAL_IncTick+0x20>)
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	4413      	add	r3, r2
 8004204:	4a03      	ldr	r2, [pc, #12]	; (8004214 <HAL_IncTick+0x20>)
 8004206:	6013      	str	r3, [r2, #0]
}
 8004208:	bf00      	nop
 800420a:	46bd      	mov	sp, r7
 800420c:	bc80      	pop	{r7}
 800420e:	4770      	bx	lr
 8004210:	20000018 	.word	0x20000018
 8004214:	20002b9c 	.word	0x20002b9c

08004218 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004218:	b480      	push	{r7}
 800421a:	af00      	add	r7, sp, #0
  return uwTick;
 800421c:	4b02      	ldr	r3, [pc, #8]	; (8004228 <HAL_GetTick+0x10>)
 800421e:	681b      	ldr	r3, [r3, #0]
}
 8004220:	4618      	mov	r0, r3
 8004222:	46bd      	mov	sp, r7
 8004224:	bc80      	pop	{r7}
 8004226:	4770      	bx	lr
 8004228:	20002b9c 	.word	0x20002b9c

0800422c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800422c:	b580      	push	{r7, lr}
 800422e:	b084      	sub	sp, #16
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004234:	f7ff fff0 	bl	8004218 <HAL_GetTick>
 8004238:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004244:	d005      	beq.n	8004252 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004246:	4b09      	ldr	r3, [pc, #36]	; (800426c <HAL_Delay+0x40>)
 8004248:	781b      	ldrb	r3, [r3, #0]
 800424a:	461a      	mov	r2, r3
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	4413      	add	r3, r2
 8004250:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004252:	bf00      	nop
 8004254:	f7ff ffe0 	bl	8004218 <HAL_GetTick>
 8004258:	4602      	mov	r2, r0
 800425a:	68bb      	ldr	r3, [r7, #8]
 800425c:	1ad3      	subs	r3, r2, r3
 800425e:	68fa      	ldr	r2, [r7, #12]
 8004260:	429a      	cmp	r2, r3
 8004262:	d8f7      	bhi.n	8004254 <HAL_Delay+0x28>
  {
  }
}
 8004264:	bf00      	nop
 8004266:	3710      	adds	r7, #16
 8004268:	46bd      	mov	sp, r7
 800426a:	bd80      	pop	{r7, pc}
 800426c:	20000018 	.word	0x20000018

08004270 <__NVIC_SetPriorityGrouping>:
{
 8004270:	b480      	push	{r7}
 8004272:	b085      	sub	sp, #20
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	f003 0307 	and.w	r3, r3, #7
 800427e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004280:	4b0c      	ldr	r3, [pc, #48]	; (80042b4 <__NVIC_SetPriorityGrouping+0x44>)
 8004282:	68db      	ldr	r3, [r3, #12]
 8004284:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004286:	68ba      	ldr	r2, [r7, #8]
 8004288:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800428c:	4013      	ands	r3, r2
 800428e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004294:	68bb      	ldr	r3, [r7, #8]
 8004296:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004298:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800429c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80042a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80042a2:	4a04      	ldr	r2, [pc, #16]	; (80042b4 <__NVIC_SetPriorityGrouping+0x44>)
 80042a4:	68bb      	ldr	r3, [r7, #8]
 80042a6:	60d3      	str	r3, [r2, #12]
}
 80042a8:	bf00      	nop
 80042aa:	3714      	adds	r7, #20
 80042ac:	46bd      	mov	sp, r7
 80042ae:	bc80      	pop	{r7}
 80042b0:	4770      	bx	lr
 80042b2:	bf00      	nop
 80042b4:	e000ed00 	.word	0xe000ed00

080042b8 <__NVIC_GetPriorityGrouping>:
{
 80042b8:	b480      	push	{r7}
 80042ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80042bc:	4b04      	ldr	r3, [pc, #16]	; (80042d0 <__NVIC_GetPriorityGrouping+0x18>)
 80042be:	68db      	ldr	r3, [r3, #12]
 80042c0:	0a1b      	lsrs	r3, r3, #8
 80042c2:	f003 0307 	and.w	r3, r3, #7
}
 80042c6:	4618      	mov	r0, r3
 80042c8:	46bd      	mov	sp, r7
 80042ca:	bc80      	pop	{r7}
 80042cc:	4770      	bx	lr
 80042ce:	bf00      	nop
 80042d0:	e000ed00 	.word	0xe000ed00

080042d4 <__NVIC_EnableIRQ>:
{
 80042d4:	b480      	push	{r7}
 80042d6:	b083      	sub	sp, #12
 80042d8:	af00      	add	r7, sp, #0
 80042da:	4603      	mov	r3, r0
 80042dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80042de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	db0b      	blt.n	80042fe <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80042e6:	79fb      	ldrb	r3, [r7, #7]
 80042e8:	f003 021f 	and.w	r2, r3, #31
 80042ec:	4906      	ldr	r1, [pc, #24]	; (8004308 <__NVIC_EnableIRQ+0x34>)
 80042ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042f2:	095b      	lsrs	r3, r3, #5
 80042f4:	2001      	movs	r0, #1
 80042f6:	fa00 f202 	lsl.w	r2, r0, r2
 80042fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80042fe:	bf00      	nop
 8004300:	370c      	adds	r7, #12
 8004302:	46bd      	mov	sp, r7
 8004304:	bc80      	pop	{r7}
 8004306:	4770      	bx	lr
 8004308:	e000e100 	.word	0xe000e100

0800430c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800430c:	b480      	push	{r7}
 800430e:	b083      	sub	sp, #12
 8004310:	af00      	add	r7, sp, #0
 8004312:	4603      	mov	r3, r0
 8004314:	6039      	str	r1, [r7, #0]
 8004316:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004318:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800431c:	2b00      	cmp	r3, #0
 800431e:	db0a      	blt.n	8004336 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004320:	683b      	ldr	r3, [r7, #0]
 8004322:	b2da      	uxtb	r2, r3
 8004324:	490c      	ldr	r1, [pc, #48]	; (8004358 <__NVIC_SetPriority+0x4c>)
 8004326:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800432a:	0112      	lsls	r2, r2, #4
 800432c:	b2d2      	uxtb	r2, r2
 800432e:	440b      	add	r3, r1
 8004330:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004334:	e00a      	b.n	800434c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	b2da      	uxtb	r2, r3
 800433a:	4908      	ldr	r1, [pc, #32]	; (800435c <__NVIC_SetPriority+0x50>)
 800433c:	79fb      	ldrb	r3, [r7, #7]
 800433e:	f003 030f 	and.w	r3, r3, #15
 8004342:	3b04      	subs	r3, #4
 8004344:	0112      	lsls	r2, r2, #4
 8004346:	b2d2      	uxtb	r2, r2
 8004348:	440b      	add	r3, r1
 800434a:	761a      	strb	r2, [r3, #24]
}
 800434c:	bf00      	nop
 800434e:	370c      	adds	r7, #12
 8004350:	46bd      	mov	sp, r7
 8004352:	bc80      	pop	{r7}
 8004354:	4770      	bx	lr
 8004356:	bf00      	nop
 8004358:	e000e100 	.word	0xe000e100
 800435c:	e000ed00 	.word	0xe000ed00

08004360 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004360:	b480      	push	{r7}
 8004362:	b089      	sub	sp, #36	; 0x24
 8004364:	af00      	add	r7, sp, #0
 8004366:	60f8      	str	r0, [r7, #12]
 8004368:	60b9      	str	r1, [r7, #8]
 800436a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	f003 0307 	and.w	r3, r3, #7
 8004372:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004374:	69fb      	ldr	r3, [r7, #28]
 8004376:	f1c3 0307 	rsb	r3, r3, #7
 800437a:	2b04      	cmp	r3, #4
 800437c:	bf28      	it	cs
 800437e:	2304      	movcs	r3, #4
 8004380:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004382:	69fb      	ldr	r3, [r7, #28]
 8004384:	3304      	adds	r3, #4
 8004386:	2b06      	cmp	r3, #6
 8004388:	d902      	bls.n	8004390 <NVIC_EncodePriority+0x30>
 800438a:	69fb      	ldr	r3, [r7, #28]
 800438c:	3b03      	subs	r3, #3
 800438e:	e000      	b.n	8004392 <NVIC_EncodePriority+0x32>
 8004390:	2300      	movs	r3, #0
 8004392:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004394:	f04f 32ff 	mov.w	r2, #4294967295
 8004398:	69bb      	ldr	r3, [r7, #24]
 800439a:	fa02 f303 	lsl.w	r3, r2, r3
 800439e:	43da      	mvns	r2, r3
 80043a0:	68bb      	ldr	r3, [r7, #8]
 80043a2:	401a      	ands	r2, r3
 80043a4:	697b      	ldr	r3, [r7, #20]
 80043a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80043a8:	f04f 31ff 	mov.w	r1, #4294967295
 80043ac:	697b      	ldr	r3, [r7, #20]
 80043ae:	fa01 f303 	lsl.w	r3, r1, r3
 80043b2:	43d9      	mvns	r1, r3
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80043b8:	4313      	orrs	r3, r2
         );
}
 80043ba:	4618      	mov	r0, r3
 80043bc:	3724      	adds	r7, #36	; 0x24
 80043be:	46bd      	mov	sp, r7
 80043c0:	bc80      	pop	{r7}
 80043c2:	4770      	bx	lr

080043c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80043c4:	b580      	push	{r7, lr}
 80043c6:	b082      	sub	sp, #8
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80043cc:	6878      	ldr	r0, [r7, #4]
 80043ce:	f7ff ff4f 	bl	8004270 <__NVIC_SetPriorityGrouping>
}
 80043d2:	bf00      	nop
 80043d4:	3708      	adds	r7, #8
 80043d6:	46bd      	mov	sp, r7
 80043d8:	bd80      	pop	{r7, pc}

080043da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80043da:	b580      	push	{r7, lr}
 80043dc:	b086      	sub	sp, #24
 80043de:	af00      	add	r7, sp, #0
 80043e0:	4603      	mov	r3, r0
 80043e2:	60b9      	str	r1, [r7, #8]
 80043e4:	607a      	str	r2, [r7, #4]
 80043e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80043e8:	2300      	movs	r3, #0
 80043ea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80043ec:	f7ff ff64 	bl	80042b8 <__NVIC_GetPriorityGrouping>
 80043f0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80043f2:	687a      	ldr	r2, [r7, #4]
 80043f4:	68b9      	ldr	r1, [r7, #8]
 80043f6:	6978      	ldr	r0, [r7, #20]
 80043f8:	f7ff ffb2 	bl	8004360 <NVIC_EncodePriority>
 80043fc:	4602      	mov	r2, r0
 80043fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004402:	4611      	mov	r1, r2
 8004404:	4618      	mov	r0, r3
 8004406:	f7ff ff81 	bl	800430c <__NVIC_SetPriority>
}
 800440a:	bf00      	nop
 800440c:	3718      	adds	r7, #24
 800440e:	46bd      	mov	sp, r7
 8004410:	bd80      	pop	{r7, pc}

08004412 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004412:	b580      	push	{r7, lr}
 8004414:	b082      	sub	sp, #8
 8004416:	af00      	add	r7, sp, #0
 8004418:	4603      	mov	r3, r0
 800441a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800441c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004420:	4618      	mov	r0, r3
 8004422:	f7ff ff57 	bl	80042d4 <__NVIC_EnableIRQ>
}
 8004426:	bf00      	nop
 8004428:	3708      	adds	r7, #8
 800442a:	46bd      	mov	sp, r7
 800442c:	bd80      	pop	{r7, pc}
	...

08004430 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004430:	b480      	push	{r7}
 8004432:	b08b      	sub	sp, #44	; 0x2c
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]
 8004438:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800443a:	2300      	movs	r3, #0
 800443c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800443e:	2300      	movs	r3, #0
 8004440:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004442:	e127      	b.n	8004694 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8004444:	2201      	movs	r2, #1
 8004446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004448:	fa02 f303 	lsl.w	r3, r2, r3
 800444c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800444e:	683b      	ldr	r3, [r7, #0]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	69fa      	ldr	r2, [r7, #28]
 8004454:	4013      	ands	r3, r2
 8004456:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8004458:	69ba      	ldr	r2, [r7, #24]
 800445a:	69fb      	ldr	r3, [r7, #28]
 800445c:	429a      	cmp	r2, r3
 800445e:	f040 8116 	bne.w	800468e <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	685b      	ldr	r3, [r3, #4]
 8004466:	2b12      	cmp	r3, #18
 8004468:	d034      	beq.n	80044d4 <HAL_GPIO_Init+0xa4>
 800446a:	2b12      	cmp	r3, #18
 800446c:	d80d      	bhi.n	800448a <HAL_GPIO_Init+0x5a>
 800446e:	2b02      	cmp	r3, #2
 8004470:	d02b      	beq.n	80044ca <HAL_GPIO_Init+0x9a>
 8004472:	2b02      	cmp	r3, #2
 8004474:	d804      	bhi.n	8004480 <HAL_GPIO_Init+0x50>
 8004476:	2b00      	cmp	r3, #0
 8004478:	d031      	beq.n	80044de <HAL_GPIO_Init+0xae>
 800447a:	2b01      	cmp	r3, #1
 800447c:	d01c      	beq.n	80044b8 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800447e:	e048      	b.n	8004512 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8004480:	2b03      	cmp	r3, #3
 8004482:	d043      	beq.n	800450c <HAL_GPIO_Init+0xdc>
 8004484:	2b11      	cmp	r3, #17
 8004486:	d01b      	beq.n	80044c0 <HAL_GPIO_Init+0x90>
          break;
 8004488:	e043      	b.n	8004512 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800448a:	4a89      	ldr	r2, [pc, #548]	; (80046b0 <HAL_GPIO_Init+0x280>)
 800448c:	4293      	cmp	r3, r2
 800448e:	d026      	beq.n	80044de <HAL_GPIO_Init+0xae>
 8004490:	4a87      	ldr	r2, [pc, #540]	; (80046b0 <HAL_GPIO_Init+0x280>)
 8004492:	4293      	cmp	r3, r2
 8004494:	d806      	bhi.n	80044a4 <HAL_GPIO_Init+0x74>
 8004496:	4a87      	ldr	r2, [pc, #540]	; (80046b4 <HAL_GPIO_Init+0x284>)
 8004498:	4293      	cmp	r3, r2
 800449a:	d020      	beq.n	80044de <HAL_GPIO_Init+0xae>
 800449c:	4a86      	ldr	r2, [pc, #536]	; (80046b8 <HAL_GPIO_Init+0x288>)
 800449e:	4293      	cmp	r3, r2
 80044a0:	d01d      	beq.n	80044de <HAL_GPIO_Init+0xae>
          break;
 80044a2:	e036      	b.n	8004512 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80044a4:	4a85      	ldr	r2, [pc, #532]	; (80046bc <HAL_GPIO_Init+0x28c>)
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d019      	beq.n	80044de <HAL_GPIO_Init+0xae>
 80044aa:	4a85      	ldr	r2, [pc, #532]	; (80046c0 <HAL_GPIO_Init+0x290>)
 80044ac:	4293      	cmp	r3, r2
 80044ae:	d016      	beq.n	80044de <HAL_GPIO_Init+0xae>
 80044b0:	4a84      	ldr	r2, [pc, #528]	; (80046c4 <HAL_GPIO_Init+0x294>)
 80044b2:	4293      	cmp	r3, r2
 80044b4:	d013      	beq.n	80044de <HAL_GPIO_Init+0xae>
          break;
 80044b6:	e02c      	b.n	8004512 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80044b8:	683b      	ldr	r3, [r7, #0]
 80044ba:	68db      	ldr	r3, [r3, #12]
 80044bc:	623b      	str	r3, [r7, #32]
          break;
 80044be:	e028      	b.n	8004512 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80044c0:	683b      	ldr	r3, [r7, #0]
 80044c2:	68db      	ldr	r3, [r3, #12]
 80044c4:	3304      	adds	r3, #4
 80044c6:	623b      	str	r3, [r7, #32]
          break;
 80044c8:	e023      	b.n	8004512 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	68db      	ldr	r3, [r3, #12]
 80044ce:	3308      	adds	r3, #8
 80044d0:	623b      	str	r3, [r7, #32]
          break;
 80044d2:	e01e      	b.n	8004512 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80044d4:	683b      	ldr	r3, [r7, #0]
 80044d6:	68db      	ldr	r3, [r3, #12]
 80044d8:	330c      	adds	r3, #12
 80044da:	623b      	str	r3, [r7, #32]
          break;
 80044dc:	e019      	b.n	8004512 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80044de:	683b      	ldr	r3, [r7, #0]
 80044e0:	689b      	ldr	r3, [r3, #8]
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d102      	bne.n	80044ec <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80044e6:	2304      	movs	r3, #4
 80044e8:	623b      	str	r3, [r7, #32]
          break;
 80044ea:	e012      	b.n	8004512 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	689b      	ldr	r3, [r3, #8]
 80044f0:	2b01      	cmp	r3, #1
 80044f2:	d105      	bne.n	8004500 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80044f4:	2308      	movs	r3, #8
 80044f6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	69fa      	ldr	r2, [r7, #28]
 80044fc:	611a      	str	r2, [r3, #16]
          break;
 80044fe:	e008      	b.n	8004512 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004500:	2308      	movs	r3, #8
 8004502:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	69fa      	ldr	r2, [r7, #28]
 8004508:	615a      	str	r2, [r3, #20]
          break;
 800450a:	e002      	b.n	8004512 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800450c:	2300      	movs	r3, #0
 800450e:	623b      	str	r3, [r7, #32]
          break;
 8004510:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8004512:	69bb      	ldr	r3, [r7, #24]
 8004514:	2bff      	cmp	r3, #255	; 0xff
 8004516:	d801      	bhi.n	800451c <HAL_GPIO_Init+0xec>
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	e001      	b.n	8004520 <HAL_GPIO_Init+0xf0>
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	3304      	adds	r3, #4
 8004520:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8004522:	69bb      	ldr	r3, [r7, #24]
 8004524:	2bff      	cmp	r3, #255	; 0xff
 8004526:	d802      	bhi.n	800452e <HAL_GPIO_Init+0xfe>
 8004528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800452a:	009b      	lsls	r3, r3, #2
 800452c:	e002      	b.n	8004534 <HAL_GPIO_Init+0x104>
 800452e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004530:	3b08      	subs	r3, #8
 8004532:	009b      	lsls	r3, r3, #2
 8004534:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8004536:	697b      	ldr	r3, [r7, #20]
 8004538:	681a      	ldr	r2, [r3, #0]
 800453a:	210f      	movs	r1, #15
 800453c:	693b      	ldr	r3, [r7, #16]
 800453e:	fa01 f303 	lsl.w	r3, r1, r3
 8004542:	43db      	mvns	r3, r3
 8004544:	401a      	ands	r2, r3
 8004546:	6a39      	ldr	r1, [r7, #32]
 8004548:	693b      	ldr	r3, [r7, #16]
 800454a:	fa01 f303 	lsl.w	r3, r1, r3
 800454e:	431a      	orrs	r2, r3
 8004550:	697b      	ldr	r3, [r7, #20]
 8004552:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004554:	683b      	ldr	r3, [r7, #0]
 8004556:	685b      	ldr	r3, [r3, #4]
 8004558:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800455c:	2b00      	cmp	r3, #0
 800455e:	f000 8096 	beq.w	800468e <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8004562:	4b59      	ldr	r3, [pc, #356]	; (80046c8 <HAL_GPIO_Init+0x298>)
 8004564:	699b      	ldr	r3, [r3, #24]
 8004566:	4a58      	ldr	r2, [pc, #352]	; (80046c8 <HAL_GPIO_Init+0x298>)
 8004568:	f043 0301 	orr.w	r3, r3, #1
 800456c:	6193      	str	r3, [r2, #24]
 800456e:	4b56      	ldr	r3, [pc, #344]	; (80046c8 <HAL_GPIO_Init+0x298>)
 8004570:	699b      	ldr	r3, [r3, #24]
 8004572:	f003 0301 	and.w	r3, r3, #1
 8004576:	60bb      	str	r3, [r7, #8]
 8004578:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800457a:	4a54      	ldr	r2, [pc, #336]	; (80046cc <HAL_GPIO_Init+0x29c>)
 800457c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800457e:	089b      	lsrs	r3, r3, #2
 8004580:	3302      	adds	r3, #2
 8004582:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004586:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8004588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800458a:	f003 0303 	and.w	r3, r3, #3
 800458e:	009b      	lsls	r3, r3, #2
 8004590:	220f      	movs	r2, #15
 8004592:	fa02 f303 	lsl.w	r3, r2, r3
 8004596:	43db      	mvns	r3, r3
 8004598:	68fa      	ldr	r2, [r7, #12]
 800459a:	4013      	ands	r3, r2
 800459c:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	4a4b      	ldr	r2, [pc, #300]	; (80046d0 <HAL_GPIO_Init+0x2a0>)
 80045a2:	4293      	cmp	r3, r2
 80045a4:	d013      	beq.n	80045ce <HAL_GPIO_Init+0x19e>
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	4a4a      	ldr	r2, [pc, #296]	; (80046d4 <HAL_GPIO_Init+0x2a4>)
 80045aa:	4293      	cmp	r3, r2
 80045ac:	d00d      	beq.n	80045ca <HAL_GPIO_Init+0x19a>
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	4a49      	ldr	r2, [pc, #292]	; (80046d8 <HAL_GPIO_Init+0x2a8>)
 80045b2:	4293      	cmp	r3, r2
 80045b4:	d007      	beq.n	80045c6 <HAL_GPIO_Init+0x196>
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	4a48      	ldr	r2, [pc, #288]	; (80046dc <HAL_GPIO_Init+0x2ac>)
 80045ba:	4293      	cmp	r3, r2
 80045bc:	d101      	bne.n	80045c2 <HAL_GPIO_Init+0x192>
 80045be:	2303      	movs	r3, #3
 80045c0:	e006      	b.n	80045d0 <HAL_GPIO_Init+0x1a0>
 80045c2:	2304      	movs	r3, #4
 80045c4:	e004      	b.n	80045d0 <HAL_GPIO_Init+0x1a0>
 80045c6:	2302      	movs	r3, #2
 80045c8:	e002      	b.n	80045d0 <HAL_GPIO_Init+0x1a0>
 80045ca:	2301      	movs	r3, #1
 80045cc:	e000      	b.n	80045d0 <HAL_GPIO_Init+0x1a0>
 80045ce:	2300      	movs	r3, #0
 80045d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045d2:	f002 0203 	and.w	r2, r2, #3
 80045d6:	0092      	lsls	r2, r2, #2
 80045d8:	4093      	lsls	r3, r2
 80045da:	68fa      	ldr	r2, [r7, #12]
 80045dc:	4313      	orrs	r3, r2
 80045de:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80045e0:	493a      	ldr	r1, [pc, #232]	; (80046cc <HAL_GPIO_Init+0x29c>)
 80045e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045e4:	089b      	lsrs	r3, r3, #2
 80045e6:	3302      	adds	r3, #2
 80045e8:	68fa      	ldr	r2, [r7, #12]
 80045ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	685b      	ldr	r3, [r3, #4]
 80045f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d006      	beq.n	8004608 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80045fa:	4b39      	ldr	r3, [pc, #228]	; (80046e0 <HAL_GPIO_Init+0x2b0>)
 80045fc:	681a      	ldr	r2, [r3, #0]
 80045fe:	4938      	ldr	r1, [pc, #224]	; (80046e0 <HAL_GPIO_Init+0x2b0>)
 8004600:	69bb      	ldr	r3, [r7, #24]
 8004602:	4313      	orrs	r3, r2
 8004604:	600b      	str	r3, [r1, #0]
 8004606:	e006      	b.n	8004616 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8004608:	4b35      	ldr	r3, [pc, #212]	; (80046e0 <HAL_GPIO_Init+0x2b0>)
 800460a:	681a      	ldr	r2, [r3, #0]
 800460c:	69bb      	ldr	r3, [r7, #24]
 800460e:	43db      	mvns	r3, r3
 8004610:	4933      	ldr	r1, [pc, #204]	; (80046e0 <HAL_GPIO_Init+0x2b0>)
 8004612:	4013      	ands	r3, r2
 8004614:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004616:	683b      	ldr	r3, [r7, #0]
 8004618:	685b      	ldr	r3, [r3, #4]
 800461a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800461e:	2b00      	cmp	r3, #0
 8004620:	d006      	beq.n	8004630 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8004622:	4b2f      	ldr	r3, [pc, #188]	; (80046e0 <HAL_GPIO_Init+0x2b0>)
 8004624:	685a      	ldr	r2, [r3, #4]
 8004626:	492e      	ldr	r1, [pc, #184]	; (80046e0 <HAL_GPIO_Init+0x2b0>)
 8004628:	69bb      	ldr	r3, [r7, #24]
 800462a:	4313      	orrs	r3, r2
 800462c:	604b      	str	r3, [r1, #4]
 800462e:	e006      	b.n	800463e <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8004630:	4b2b      	ldr	r3, [pc, #172]	; (80046e0 <HAL_GPIO_Init+0x2b0>)
 8004632:	685a      	ldr	r2, [r3, #4]
 8004634:	69bb      	ldr	r3, [r7, #24]
 8004636:	43db      	mvns	r3, r3
 8004638:	4929      	ldr	r1, [pc, #164]	; (80046e0 <HAL_GPIO_Init+0x2b0>)
 800463a:	4013      	ands	r3, r2
 800463c:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	685b      	ldr	r3, [r3, #4]
 8004642:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004646:	2b00      	cmp	r3, #0
 8004648:	d006      	beq.n	8004658 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800464a:	4b25      	ldr	r3, [pc, #148]	; (80046e0 <HAL_GPIO_Init+0x2b0>)
 800464c:	689a      	ldr	r2, [r3, #8]
 800464e:	4924      	ldr	r1, [pc, #144]	; (80046e0 <HAL_GPIO_Init+0x2b0>)
 8004650:	69bb      	ldr	r3, [r7, #24]
 8004652:	4313      	orrs	r3, r2
 8004654:	608b      	str	r3, [r1, #8]
 8004656:	e006      	b.n	8004666 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8004658:	4b21      	ldr	r3, [pc, #132]	; (80046e0 <HAL_GPIO_Init+0x2b0>)
 800465a:	689a      	ldr	r2, [r3, #8]
 800465c:	69bb      	ldr	r3, [r7, #24]
 800465e:	43db      	mvns	r3, r3
 8004660:	491f      	ldr	r1, [pc, #124]	; (80046e0 <HAL_GPIO_Init+0x2b0>)
 8004662:	4013      	ands	r3, r2
 8004664:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004666:	683b      	ldr	r3, [r7, #0]
 8004668:	685b      	ldr	r3, [r3, #4]
 800466a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800466e:	2b00      	cmp	r3, #0
 8004670:	d006      	beq.n	8004680 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8004672:	4b1b      	ldr	r3, [pc, #108]	; (80046e0 <HAL_GPIO_Init+0x2b0>)
 8004674:	68da      	ldr	r2, [r3, #12]
 8004676:	491a      	ldr	r1, [pc, #104]	; (80046e0 <HAL_GPIO_Init+0x2b0>)
 8004678:	69bb      	ldr	r3, [r7, #24]
 800467a:	4313      	orrs	r3, r2
 800467c:	60cb      	str	r3, [r1, #12]
 800467e:	e006      	b.n	800468e <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8004680:	4b17      	ldr	r3, [pc, #92]	; (80046e0 <HAL_GPIO_Init+0x2b0>)
 8004682:	68da      	ldr	r2, [r3, #12]
 8004684:	69bb      	ldr	r3, [r7, #24]
 8004686:	43db      	mvns	r3, r3
 8004688:	4915      	ldr	r1, [pc, #84]	; (80046e0 <HAL_GPIO_Init+0x2b0>)
 800468a:	4013      	ands	r3, r2
 800468c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800468e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004690:	3301      	adds	r3, #1
 8004692:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	681a      	ldr	r2, [r3, #0]
 8004698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800469a:	fa22 f303 	lsr.w	r3, r2, r3
 800469e:	2b00      	cmp	r3, #0
 80046a0:	f47f aed0 	bne.w	8004444 <HAL_GPIO_Init+0x14>
  }
}
 80046a4:	bf00      	nop
 80046a6:	372c      	adds	r7, #44	; 0x2c
 80046a8:	46bd      	mov	sp, r7
 80046aa:	bc80      	pop	{r7}
 80046ac:	4770      	bx	lr
 80046ae:	bf00      	nop
 80046b0:	10210000 	.word	0x10210000
 80046b4:	10110000 	.word	0x10110000
 80046b8:	10120000 	.word	0x10120000
 80046bc:	10310000 	.word	0x10310000
 80046c0:	10320000 	.word	0x10320000
 80046c4:	10220000 	.word	0x10220000
 80046c8:	40021000 	.word	0x40021000
 80046cc:	40010000 	.word	0x40010000
 80046d0:	40010800 	.word	0x40010800
 80046d4:	40010c00 	.word	0x40010c00
 80046d8:	40011000 	.word	0x40011000
 80046dc:	40011400 	.word	0x40011400
 80046e0:	40010400 	.word	0x40010400

080046e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80046e4:	b480      	push	{r7}
 80046e6:	b083      	sub	sp, #12
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
 80046ec:	460b      	mov	r3, r1
 80046ee:	807b      	strh	r3, [r7, #2]
 80046f0:	4613      	mov	r3, r2
 80046f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80046f4:	787b      	ldrb	r3, [r7, #1]
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d003      	beq.n	8004702 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80046fa:	887a      	ldrh	r2, [r7, #2]
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8004700:	e003      	b.n	800470a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004702:	887b      	ldrh	r3, [r7, #2]
 8004704:	041a      	lsls	r2, r3, #16
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	611a      	str	r2, [r3, #16]
}
 800470a:	bf00      	nop
 800470c:	370c      	adds	r7, #12
 800470e:	46bd      	mov	sp, r7
 8004710:	bc80      	pop	{r7}
 8004712:	4770      	bx	lr

08004714 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004714:	b480      	push	{r7}
 8004716:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8004718:	4b03      	ldr	r3, [pc, #12]	; (8004728 <HAL_PWR_EnableBkUpAccess+0x14>)
 800471a:	2201      	movs	r2, #1
 800471c:	601a      	str	r2, [r3, #0]
}
 800471e:	bf00      	nop
 8004720:	46bd      	mov	sp, r7
 8004722:	bc80      	pop	{r7}
 8004724:	4770      	bx	lr
 8004726:	bf00      	nop
 8004728:	420e0020 	.word	0x420e0020

0800472c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800472c:	b580      	push	{r7, lr}
 800472e:	b086      	sub	sp, #24
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2b00      	cmp	r3, #0
 8004738:	d101      	bne.n	800473e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800473a:	2301      	movs	r3, #1
 800473c:	e26c      	b.n	8004c18 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f003 0301 	and.w	r3, r3, #1
 8004746:	2b00      	cmp	r3, #0
 8004748:	f000 8087 	beq.w	800485a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800474c:	4b92      	ldr	r3, [pc, #584]	; (8004998 <HAL_RCC_OscConfig+0x26c>)
 800474e:	685b      	ldr	r3, [r3, #4]
 8004750:	f003 030c 	and.w	r3, r3, #12
 8004754:	2b04      	cmp	r3, #4
 8004756:	d00c      	beq.n	8004772 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004758:	4b8f      	ldr	r3, [pc, #572]	; (8004998 <HAL_RCC_OscConfig+0x26c>)
 800475a:	685b      	ldr	r3, [r3, #4]
 800475c:	f003 030c 	and.w	r3, r3, #12
 8004760:	2b08      	cmp	r3, #8
 8004762:	d112      	bne.n	800478a <HAL_RCC_OscConfig+0x5e>
 8004764:	4b8c      	ldr	r3, [pc, #560]	; (8004998 <HAL_RCC_OscConfig+0x26c>)
 8004766:	685b      	ldr	r3, [r3, #4]
 8004768:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800476c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004770:	d10b      	bne.n	800478a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004772:	4b89      	ldr	r3, [pc, #548]	; (8004998 <HAL_RCC_OscConfig+0x26c>)
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800477a:	2b00      	cmp	r3, #0
 800477c:	d06c      	beq.n	8004858 <HAL_RCC_OscConfig+0x12c>
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	685b      	ldr	r3, [r3, #4]
 8004782:	2b00      	cmp	r3, #0
 8004784:	d168      	bne.n	8004858 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004786:	2301      	movs	r3, #1
 8004788:	e246      	b.n	8004c18 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	685b      	ldr	r3, [r3, #4]
 800478e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004792:	d106      	bne.n	80047a2 <HAL_RCC_OscConfig+0x76>
 8004794:	4b80      	ldr	r3, [pc, #512]	; (8004998 <HAL_RCC_OscConfig+0x26c>)
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	4a7f      	ldr	r2, [pc, #508]	; (8004998 <HAL_RCC_OscConfig+0x26c>)
 800479a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800479e:	6013      	str	r3, [r2, #0]
 80047a0:	e02e      	b.n	8004800 <HAL_RCC_OscConfig+0xd4>
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	685b      	ldr	r3, [r3, #4]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d10c      	bne.n	80047c4 <HAL_RCC_OscConfig+0x98>
 80047aa:	4b7b      	ldr	r3, [pc, #492]	; (8004998 <HAL_RCC_OscConfig+0x26c>)
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	4a7a      	ldr	r2, [pc, #488]	; (8004998 <HAL_RCC_OscConfig+0x26c>)
 80047b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80047b4:	6013      	str	r3, [r2, #0]
 80047b6:	4b78      	ldr	r3, [pc, #480]	; (8004998 <HAL_RCC_OscConfig+0x26c>)
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	4a77      	ldr	r2, [pc, #476]	; (8004998 <HAL_RCC_OscConfig+0x26c>)
 80047bc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80047c0:	6013      	str	r3, [r2, #0]
 80047c2:	e01d      	b.n	8004800 <HAL_RCC_OscConfig+0xd4>
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	685b      	ldr	r3, [r3, #4]
 80047c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80047cc:	d10c      	bne.n	80047e8 <HAL_RCC_OscConfig+0xbc>
 80047ce:	4b72      	ldr	r3, [pc, #456]	; (8004998 <HAL_RCC_OscConfig+0x26c>)
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	4a71      	ldr	r2, [pc, #452]	; (8004998 <HAL_RCC_OscConfig+0x26c>)
 80047d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80047d8:	6013      	str	r3, [r2, #0]
 80047da:	4b6f      	ldr	r3, [pc, #444]	; (8004998 <HAL_RCC_OscConfig+0x26c>)
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	4a6e      	ldr	r2, [pc, #440]	; (8004998 <HAL_RCC_OscConfig+0x26c>)
 80047e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80047e4:	6013      	str	r3, [r2, #0]
 80047e6:	e00b      	b.n	8004800 <HAL_RCC_OscConfig+0xd4>
 80047e8:	4b6b      	ldr	r3, [pc, #428]	; (8004998 <HAL_RCC_OscConfig+0x26c>)
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	4a6a      	ldr	r2, [pc, #424]	; (8004998 <HAL_RCC_OscConfig+0x26c>)
 80047ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80047f2:	6013      	str	r3, [r2, #0]
 80047f4:	4b68      	ldr	r3, [pc, #416]	; (8004998 <HAL_RCC_OscConfig+0x26c>)
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	4a67      	ldr	r2, [pc, #412]	; (8004998 <HAL_RCC_OscConfig+0x26c>)
 80047fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80047fe:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	685b      	ldr	r3, [r3, #4]
 8004804:	2b00      	cmp	r3, #0
 8004806:	d013      	beq.n	8004830 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004808:	f7ff fd06 	bl	8004218 <HAL_GetTick>
 800480c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800480e:	e008      	b.n	8004822 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004810:	f7ff fd02 	bl	8004218 <HAL_GetTick>
 8004814:	4602      	mov	r2, r0
 8004816:	693b      	ldr	r3, [r7, #16]
 8004818:	1ad3      	subs	r3, r2, r3
 800481a:	2b64      	cmp	r3, #100	; 0x64
 800481c:	d901      	bls.n	8004822 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800481e:	2303      	movs	r3, #3
 8004820:	e1fa      	b.n	8004c18 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004822:	4b5d      	ldr	r3, [pc, #372]	; (8004998 <HAL_RCC_OscConfig+0x26c>)
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800482a:	2b00      	cmp	r3, #0
 800482c:	d0f0      	beq.n	8004810 <HAL_RCC_OscConfig+0xe4>
 800482e:	e014      	b.n	800485a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004830:	f7ff fcf2 	bl	8004218 <HAL_GetTick>
 8004834:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004836:	e008      	b.n	800484a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004838:	f7ff fcee 	bl	8004218 <HAL_GetTick>
 800483c:	4602      	mov	r2, r0
 800483e:	693b      	ldr	r3, [r7, #16]
 8004840:	1ad3      	subs	r3, r2, r3
 8004842:	2b64      	cmp	r3, #100	; 0x64
 8004844:	d901      	bls.n	800484a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004846:	2303      	movs	r3, #3
 8004848:	e1e6      	b.n	8004c18 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800484a:	4b53      	ldr	r3, [pc, #332]	; (8004998 <HAL_RCC_OscConfig+0x26c>)
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004852:	2b00      	cmp	r3, #0
 8004854:	d1f0      	bne.n	8004838 <HAL_RCC_OscConfig+0x10c>
 8004856:	e000      	b.n	800485a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004858:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f003 0302 	and.w	r3, r3, #2
 8004862:	2b00      	cmp	r3, #0
 8004864:	d063      	beq.n	800492e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004866:	4b4c      	ldr	r3, [pc, #304]	; (8004998 <HAL_RCC_OscConfig+0x26c>)
 8004868:	685b      	ldr	r3, [r3, #4]
 800486a:	f003 030c 	and.w	r3, r3, #12
 800486e:	2b00      	cmp	r3, #0
 8004870:	d00b      	beq.n	800488a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004872:	4b49      	ldr	r3, [pc, #292]	; (8004998 <HAL_RCC_OscConfig+0x26c>)
 8004874:	685b      	ldr	r3, [r3, #4]
 8004876:	f003 030c 	and.w	r3, r3, #12
 800487a:	2b08      	cmp	r3, #8
 800487c:	d11c      	bne.n	80048b8 <HAL_RCC_OscConfig+0x18c>
 800487e:	4b46      	ldr	r3, [pc, #280]	; (8004998 <HAL_RCC_OscConfig+0x26c>)
 8004880:	685b      	ldr	r3, [r3, #4]
 8004882:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004886:	2b00      	cmp	r3, #0
 8004888:	d116      	bne.n	80048b8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800488a:	4b43      	ldr	r3, [pc, #268]	; (8004998 <HAL_RCC_OscConfig+0x26c>)
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f003 0302 	and.w	r3, r3, #2
 8004892:	2b00      	cmp	r3, #0
 8004894:	d005      	beq.n	80048a2 <HAL_RCC_OscConfig+0x176>
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	691b      	ldr	r3, [r3, #16]
 800489a:	2b01      	cmp	r3, #1
 800489c:	d001      	beq.n	80048a2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800489e:	2301      	movs	r3, #1
 80048a0:	e1ba      	b.n	8004c18 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80048a2:	4b3d      	ldr	r3, [pc, #244]	; (8004998 <HAL_RCC_OscConfig+0x26c>)
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	695b      	ldr	r3, [r3, #20]
 80048ae:	00db      	lsls	r3, r3, #3
 80048b0:	4939      	ldr	r1, [pc, #228]	; (8004998 <HAL_RCC_OscConfig+0x26c>)
 80048b2:	4313      	orrs	r3, r2
 80048b4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80048b6:	e03a      	b.n	800492e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	691b      	ldr	r3, [r3, #16]
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d020      	beq.n	8004902 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80048c0:	4b36      	ldr	r3, [pc, #216]	; (800499c <HAL_RCC_OscConfig+0x270>)
 80048c2:	2201      	movs	r2, #1
 80048c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048c6:	f7ff fca7 	bl	8004218 <HAL_GetTick>
 80048ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80048cc:	e008      	b.n	80048e0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80048ce:	f7ff fca3 	bl	8004218 <HAL_GetTick>
 80048d2:	4602      	mov	r2, r0
 80048d4:	693b      	ldr	r3, [r7, #16]
 80048d6:	1ad3      	subs	r3, r2, r3
 80048d8:	2b02      	cmp	r3, #2
 80048da:	d901      	bls.n	80048e0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80048dc:	2303      	movs	r3, #3
 80048de:	e19b      	b.n	8004c18 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80048e0:	4b2d      	ldr	r3, [pc, #180]	; (8004998 <HAL_RCC_OscConfig+0x26c>)
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f003 0302 	and.w	r3, r3, #2
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d0f0      	beq.n	80048ce <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80048ec:	4b2a      	ldr	r3, [pc, #168]	; (8004998 <HAL_RCC_OscConfig+0x26c>)
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	695b      	ldr	r3, [r3, #20]
 80048f8:	00db      	lsls	r3, r3, #3
 80048fa:	4927      	ldr	r1, [pc, #156]	; (8004998 <HAL_RCC_OscConfig+0x26c>)
 80048fc:	4313      	orrs	r3, r2
 80048fe:	600b      	str	r3, [r1, #0]
 8004900:	e015      	b.n	800492e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004902:	4b26      	ldr	r3, [pc, #152]	; (800499c <HAL_RCC_OscConfig+0x270>)
 8004904:	2200      	movs	r2, #0
 8004906:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004908:	f7ff fc86 	bl	8004218 <HAL_GetTick>
 800490c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800490e:	e008      	b.n	8004922 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004910:	f7ff fc82 	bl	8004218 <HAL_GetTick>
 8004914:	4602      	mov	r2, r0
 8004916:	693b      	ldr	r3, [r7, #16]
 8004918:	1ad3      	subs	r3, r2, r3
 800491a:	2b02      	cmp	r3, #2
 800491c:	d901      	bls.n	8004922 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800491e:	2303      	movs	r3, #3
 8004920:	e17a      	b.n	8004c18 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004922:	4b1d      	ldr	r3, [pc, #116]	; (8004998 <HAL_RCC_OscConfig+0x26c>)
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f003 0302 	and.w	r3, r3, #2
 800492a:	2b00      	cmp	r3, #0
 800492c:	d1f0      	bne.n	8004910 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f003 0308 	and.w	r3, r3, #8
 8004936:	2b00      	cmp	r3, #0
 8004938:	d03a      	beq.n	80049b0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	699b      	ldr	r3, [r3, #24]
 800493e:	2b00      	cmp	r3, #0
 8004940:	d019      	beq.n	8004976 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004942:	4b17      	ldr	r3, [pc, #92]	; (80049a0 <HAL_RCC_OscConfig+0x274>)
 8004944:	2201      	movs	r2, #1
 8004946:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004948:	f7ff fc66 	bl	8004218 <HAL_GetTick>
 800494c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800494e:	e008      	b.n	8004962 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004950:	f7ff fc62 	bl	8004218 <HAL_GetTick>
 8004954:	4602      	mov	r2, r0
 8004956:	693b      	ldr	r3, [r7, #16]
 8004958:	1ad3      	subs	r3, r2, r3
 800495a:	2b02      	cmp	r3, #2
 800495c:	d901      	bls.n	8004962 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800495e:	2303      	movs	r3, #3
 8004960:	e15a      	b.n	8004c18 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004962:	4b0d      	ldr	r3, [pc, #52]	; (8004998 <HAL_RCC_OscConfig+0x26c>)
 8004964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004966:	f003 0302 	and.w	r3, r3, #2
 800496a:	2b00      	cmp	r3, #0
 800496c:	d0f0      	beq.n	8004950 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800496e:	2001      	movs	r0, #1
 8004970:	f000 fb0a 	bl	8004f88 <RCC_Delay>
 8004974:	e01c      	b.n	80049b0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004976:	4b0a      	ldr	r3, [pc, #40]	; (80049a0 <HAL_RCC_OscConfig+0x274>)
 8004978:	2200      	movs	r2, #0
 800497a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800497c:	f7ff fc4c 	bl	8004218 <HAL_GetTick>
 8004980:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004982:	e00f      	b.n	80049a4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004984:	f7ff fc48 	bl	8004218 <HAL_GetTick>
 8004988:	4602      	mov	r2, r0
 800498a:	693b      	ldr	r3, [r7, #16]
 800498c:	1ad3      	subs	r3, r2, r3
 800498e:	2b02      	cmp	r3, #2
 8004990:	d908      	bls.n	80049a4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004992:	2303      	movs	r3, #3
 8004994:	e140      	b.n	8004c18 <HAL_RCC_OscConfig+0x4ec>
 8004996:	bf00      	nop
 8004998:	40021000 	.word	0x40021000
 800499c:	42420000 	.word	0x42420000
 80049a0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80049a4:	4b9e      	ldr	r3, [pc, #632]	; (8004c20 <HAL_RCC_OscConfig+0x4f4>)
 80049a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049a8:	f003 0302 	and.w	r3, r3, #2
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d1e9      	bne.n	8004984 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f003 0304 	and.w	r3, r3, #4
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	f000 80a6 	beq.w	8004b0a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80049be:	2300      	movs	r3, #0
 80049c0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80049c2:	4b97      	ldr	r3, [pc, #604]	; (8004c20 <HAL_RCC_OscConfig+0x4f4>)
 80049c4:	69db      	ldr	r3, [r3, #28]
 80049c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d10d      	bne.n	80049ea <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80049ce:	4b94      	ldr	r3, [pc, #592]	; (8004c20 <HAL_RCC_OscConfig+0x4f4>)
 80049d0:	69db      	ldr	r3, [r3, #28]
 80049d2:	4a93      	ldr	r2, [pc, #588]	; (8004c20 <HAL_RCC_OscConfig+0x4f4>)
 80049d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80049d8:	61d3      	str	r3, [r2, #28]
 80049da:	4b91      	ldr	r3, [pc, #580]	; (8004c20 <HAL_RCC_OscConfig+0x4f4>)
 80049dc:	69db      	ldr	r3, [r3, #28]
 80049de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049e2:	60bb      	str	r3, [r7, #8]
 80049e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80049e6:	2301      	movs	r3, #1
 80049e8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049ea:	4b8e      	ldr	r3, [pc, #568]	; (8004c24 <HAL_RCC_OscConfig+0x4f8>)
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d118      	bne.n	8004a28 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80049f6:	4b8b      	ldr	r3, [pc, #556]	; (8004c24 <HAL_RCC_OscConfig+0x4f8>)
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	4a8a      	ldr	r2, [pc, #552]	; (8004c24 <HAL_RCC_OscConfig+0x4f8>)
 80049fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a00:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004a02:	f7ff fc09 	bl	8004218 <HAL_GetTick>
 8004a06:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a08:	e008      	b.n	8004a1c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a0a:	f7ff fc05 	bl	8004218 <HAL_GetTick>
 8004a0e:	4602      	mov	r2, r0
 8004a10:	693b      	ldr	r3, [r7, #16]
 8004a12:	1ad3      	subs	r3, r2, r3
 8004a14:	2b64      	cmp	r3, #100	; 0x64
 8004a16:	d901      	bls.n	8004a1c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004a18:	2303      	movs	r3, #3
 8004a1a:	e0fd      	b.n	8004c18 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a1c:	4b81      	ldr	r3, [pc, #516]	; (8004c24 <HAL_RCC_OscConfig+0x4f8>)
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d0f0      	beq.n	8004a0a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	68db      	ldr	r3, [r3, #12]
 8004a2c:	2b01      	cmp	r3, #1
 8004a2e:	d106      	bne.n	8004a3e <HAL_RCC_OscConfig+0x312>
 8004a30:	4b7b      	ldr	r3, [pc, #492]	; (8004c20 <HAL_RCC_OscConfig+0x4f4>)
 8004a32:	6a1b      	ldr	r3, [r3, #32]
 8004a34:	4a7a      	ldr	r2, [pc, #488]	; (8004c20 <HAL_RCC_OscConfig+0x4f4>)
 8004a36:	f043 0301 	orr.w	r3, r3, #1
 8004a3a:	6213      	str	r3, [r2, #32]
 8004a3c:	e02d      	b.n	8004a9a <HAL_RCC_OscConfig+0x36e>
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	68db      	ldr	r3, [r3, #12]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d10c      	bne.n	8004a60 <HAL_RCC_OscConfig+0x334>
 8004a46:	4b76      	ldr	r3, [pc, #472]	; (8004c20 <HAL_RCC_OscConfig+0x4f4>)
 8004a48:	6a1b      	ldr	r3, [r3, #32]
 8004a4a:	4a75      	ldr	r2, [pc, #468]	; (8004c20 <HAL_RCC_OscConfig+0x4f4>)
 8004a4c:	f023 0301 	bic.w	r3, r3, #1
 8004a50:	6213      	str	r3, [r2, #32]
 8004a52:	4b73      	ldr	r3, [pc, #460]	; (8004c20 <HAL_RCC_OscConfig+0x4f4>)
 8004a54:	6a1b      	ldr	r3, [r3, #32]
 8004a56:	4a72      	ldr	r2, [pc, #456]	; (8004c20 <HAL_RCC_OscConfig+0x4f4>)
 8004a58:	f023 0304 	bic.w	r3, r3, #4
 8004a5c:	6213      	str	r3, [r2, #32]
 8004a5e:	e01c      	b.n	8004a9a <HAL_RCC_OscConfig+0x36e>
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	68db      	ldr	r3, [r3, #12]
 8004a64:	2b05      	cmp	r3, #5
 8004a66:	d10c      	bne.n	8004a82 <HAL_RCC_OscConfig+0x356>
 8004a68:	4b6d      	ldr	r3, [pc, #436]	; (8004c20 <HAL_RCC_OscConfig+0x4f4>)
 8004a6a:	6a1b      	ldr	r3, [r3, #32]
 8004a6c:	4a6c      	ldr	r2, [pc, #432]	; (8004c20 <HAL_RCC_OscConfig+0x4f4>)
 8004a6e:	f043 0304 	orr.w	r3, r3, #4
 8004a72:	6213      	str	r3, [r2, #32]
 8004a74:	4b6a      	ldr	r3, [pc, #424]	; (8004c20 <HAL_RCC_OscConfig+0x4f4>)
 8004a76:	6a1b      	ldr	r3, [r3, #32]
 8004a78:	4a69      	ldr	r2, [pc, #420]	; (8004c20 <HAL_RCC_OscConfig+0x4f4>)
 8004a7a:	f043 0301 	orr.w	r3, r3, #1
 8004a7e:	6213      	str	r3, [r2, #32]
 8004a80:	e00b      	b.n	8004a9a <HAL_RCC_OscConfig+0x36e>
 8004a82:	4b67      	ldr	r3, [pc, #412]	; (8004c20 <HAL_RCC_OscConfig+0x4f4>)
 8004a84:	6a1b      	ldr	r3, [r3, #32]
 8004a86:	4a66      	ldr	r2, [pc, #408]	; (8004c20 <HAL_RCC_OscConfig+0x4f4>)
 8004a88:	f023 0301 	bic.w	r3, r3, #1
 8004a8c:	6213      	str	r3, [r2, #32]
 8004a8e:	4b64      	ldr	r3, [pc, #400]	; (8004c20 <HAL_RCC_OscConfig+0x4f4>)
 8004a90:	6a1b      	ldr	r3, [r3, #32]
 8004a92:	4a63      	ldr	r2, [pc, #396]	; (8004c20 <HAL_RCC_OscConfig+0x4f4>)
 8004a94:	f023 0304 	bic.w	r3, r3, #4
 8004a98:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	68db      	ldr	r3, [r3, #12]
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d015      	beq.n	8004ace <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004aa2:	f7ff fbb9 	bl	8004218 <HAL_GetTick>
 8004aa6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004aa8:	e00a      	b.n	8004ac0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004aaa:	f7ff fbb5 	bl	8004218 <HAL_GetTick>
 8004aae:	4602      	mov	r2, r0
 8004ab0:	693b      	ldr	r3, [r7, #16]
 8004ab2:	1ad3      	subs	r3, r2, r3
 8004ab4:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ab8:	4293      	cmp	r3, r2
 8004aba:	d901      	bls.n	8004ac0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004abc:	2303      	movs	r3, #3
 8004abe:	e0ab      	b.n	8004c18 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ac0:	4b57      	ldr	r3, [pc, #348]	; (8004c20 <HAL_RCC_OscConfig+0x4f4>)
 8004ac2:	6a1b      	ldr	r3, [r3, #32]
 8004ac4:	f003 0302 	and.w	r3, r3, #2
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d0ee      	beq.n	8004aaa <HAL_RCC_OscConfig+0x37e>
 8004acc:	e014      	b.n	8004af8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ace:	f7ff fba3 	bl	8004218 <HAL_GetTick>
 8004ad2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004ad4:	e00a      	b.n	8004aec <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ad6:	f7ff fb9f 	bl	8004218 <HAL_GetTick>
 8004ada:	4602      	mov	r2, r0
 8004adc:	693b      	ldr	r3, [r7, #16]
 8004ade:	1ad3      	subs	r3, r2, r3
 8004ae0:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ae4:	4293      	cmp	r3, r2
 8004ae6:	d901      	bls.n	8004aec <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004ae8:	2303      	movs	r3, #3
 8004aea:	e095      	b.n	8004c18 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004aec:	4b4c      	ldr	r3, [pc, #304]	; (8004c20 <HAL_RCC_OscConfig+0x4f4>)
 8004aee:	6a1b      	ldr	r3, [r3, #32]
 8004af0:	f003 0302 	and.w	r3, r3, #2
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d1ee      	bne.n	8004ad6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004af8:	7dfb      	ldrb	r3, [r7, #23]
 8004afa:	2b01      	cmp	r3, #1
 8004afc:	d105      	bne.n	8004b0a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004afe:	4b48      	ldr	r3, [pc, #288]	; (8004c20 <HAL_RCC_OscConfig+0x4f4>)
 8004b00:	69db      	ldr	r3, [r3, #28]
 8004b02:	4a47      	ldr	r2, [pc, #284]	; (8004c20 <HAL_RCC_OscConfig+0x4f4>)
 8004b04:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004b08:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	69db      	ldr	r3, [r3, #28]
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	f000 8081 	beq.w	8004c16 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004b14:	4b42      	ldr	r3, [pc, #264]	; (8004c20 <HAL_RCC_OscConfig+0x4f4>)
 8004b16:	685b      	ldr	r3, [r3, #4]
 8004b18:	f003 030c 	and.w	r3, r3, #12
 8004b1c:	2b08      	cmp	r3, #8
 8004b1e:	d061      	beq.n	8004be4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	69db      	ldr	r3, [r3, #28]
 8004b24:	2b02      	cmp	r3, #2
 8004b26:	d146      	bne.n	8004bb6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b28:	4b3f      	ldr	r3, [pc, #252]	; (8004c28 <HAL_RCC_OscConfig+0x4fc>)
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b2e:	f7ff fb73 	bl	8004218 <HAL_GetTick>
 8004b32:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004b34:	e008      	b.n	8004b48 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b36:	f7ff fb6f 	bl	8004218 <HAL_GetTick>
 8004b3a:	4602      	mov	r2, r0
 8004b3c:	693b      	ldr	r3, [r7, #16]
 8004b3e:	1ad3      	subs	r3, r2, r3
 8004b40:	2b02      	cmp	r3, #2
 8004b42:	d901      	bls.n	8004b48 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004b44:	2303      	movs	r3, #3
 8004b46:	e067      	b.n	8004c18 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004b48:	4b35      	ldr	r3, [pc, #212]	; (8004c20 <HAL_RCC_OscConfig+0x4f4>)
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d1f0      	bne.n	8004b36 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	6a1b      	ldr	r3, [r3, #32]
 8004b58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b5c:	d108      	bne.n	8004b70 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004b5e:	4b30      	ldr	r3, [pc, #192]	; (8004c20 <HAL_RCC_OscConfig+0x4f4>)
 8004b60:	685b      	ldr	r3, [r3, #4]
 8004b62:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	689b      	ldr	r3, [r3, #8]
 8004b6a:	492d      	ldr	r1, [pc, #180]	; (8004c20 <HAL_RCC_OscConfig+0x4f4>)
 8004b6c:	4313      	orrs	r3, r2
 8004b6e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004b70:	4b2b      	ldr	r3, [pc, #172]	; (8004c20 <HAL_RCC_OscConfig+0x4f4>)
 8004b72:	685b      	ldr	r3, [r3, #4]
 8004b74:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	6a19      	ldr	r1, [r3, #32]
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b80:	430b      	orrs	r3, r1
 8004b82:	4927      	ldr	r1, [pc, #156]	; (8004c20 <HAL_RCC_OscConfig+0x4f4>)
 8004b84:	4313      	orrs	r3, r2
 8004b86:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004b88:	4b27      	ldr	r3, [pc, #156]	; (8004c28 <HAL_RCC_OscConfig+0x4fc>)
 8004b8a:	2201      	movs	r2, #1
 8004b8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b8e:	f7ff fb43 	bl	8004218 <HAL_GetTick>
 8004b92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004b94:	e008      	b.n	8004ba8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b96:	f7ff fb3f 	bl	8004218 <HAL_GetTick>
 8004b9a:	4602      	mov	r2, r0
 8004b9c:	693b      	ldr	r3, [r7, #16]
 8004b9e:	1ad3      	subs	r3, r2, r3
 8004ba0:	2b02      	cmp	r3, #2
 8004ba2:	d901      	bls.n	8004ba8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004ba4:	2303      	movs	r3, #3
 8004ba6:	e037      	b.n	8004c18 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004ba8:	4b1d      	ldr	r3, [pc, #116]	; (8004c20 <HAL_RCC_OscConfig+0x4f4>)
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d0f0      	beq.n	8004b96 <HAL_RCC_OscConfig+0x46a>
 8004bb4:	e02f      	b.n	8004c16 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004bb6:	4b1c      	ldr	r3, [pc, #112]	; (8004c28 <HAL_RCC_OscConfig+0x4fc>)
 8004bb8:	2200      	movs	r2, #0
 8004bba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bbc:	f7ff fb2c 	bl	8004218 <HAL_GetTick>
 8004bc0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004bc2:	e008      	b.n	8004bd6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004bc4:	f7ff fb28 	bl	8004218 <HAL_GetTick>
 8004bc8:	4602      	mov	r2, r0
 8004bca:	693b      	ldr	r3, [r7, #16]
 8004bcc:	1ad3      	subs	r3, r2, r3
 8004bce:	2b02      	cmp	r3, #2
 8004bd0:	d901      	bls.n	8004bd6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004bd2:	2303      	movs	r3, #3
 8004bd4:	e020      	b.n	8004c18 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004bd6:	4b12      	ldr	r3, [pc, #72]	; (8004c20 <HAL_RCC_OscConfig+0x4f4>)
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d1f0      	bne.n	8004bc4 <HAL_RCC_OscConfig+0x498>
 8004be2:	e018      	b.n	8004c16 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	69db      	ldr	r3, [r3, #28]
 8004be8:	2b01      	cmp	r3, #1
 8004bea:	d101      	bne.n	8004bf0 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8004bec:	2301      	movs	r3, #1
 8004bee:	e013      	b.n	8004c18 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004bf0:	4b0b      	ldr	r3, [pc, #44]	; (8004c20 <HAL_RCC_OscConfig+0x4f4>)
 8004bf2:	685b      	ldr	r3, [r3, #4]
 8004bf4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	6a1b      	ldr	r3, [r3, #32]
 8004c00:	429a      	cmp	r2, r3
 8004c02:	d106      	bne.n	8004c12 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c0e:	429a      	cmp	r2, r3
 8004c10:	d001      	beq.n	8004c16 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8004c12:	2301      	movs	r3, #1
 8004c14:	e000      	b.n	8004c18 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8004c16:	2300      	movs	r3, #0
}
 8004c18:	4618      	mov	r0, r3
 8004c1a:	3718      	adds	r7, #24
 8004c1c:	46bd      	mov	sp, r7
 8004c1e:	bd80      	pop	{r7, pc}
 8004c20:	40021000 	.word	0x40021000
 8004c24:	40007000 	.word	0x40007000
 8004c28:	42420060 	.word	0x42420060

08004c2c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004c2c:	b580      	push	{r7, lr}
 8004c2e:	b084      	sub	sp, #16
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]
 8004c34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d101      	bne.n	8004c40 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004c3c:	2301      	movs	r3, #1
 8004c3e:	e0d0      	b.n	8004de2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004c40:	4b6a      	ldr	r3, [pc, #424]	; (8004dec <HAL_RCC_ClockConfig+0x1c0>)
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f003 0307 	and.w	r3, r3, #7
 8004c48:	683a      	ldr	r2, [r7, #0]
 8004c4a:	429a      	cmp	r2, r3
 8004c4c:	d910      	bls.n	8004c70 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c4e:	4b67      	ldr	r3, [pc, #412]	; (8004dec <HAL_RCC_ClockConfig+0x1c0>)
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f023 0207 	bic.w	r2, r3, #7
 8004c56:	4965      	ldr	r1, [pc, #404]	; (8004dec <HAL_RCC_ClockConfig+0x1c0>)
 8004c58:	683b      	ldr	r3, [r7, #0]
 8004c5a:	4313      	orrs	r3, r2
 8004c5c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c5e:	4b63      	ldr	r3, [pc, #396]	; (8004dec <HAL_RCC_ClockConfig+0x1c0>)
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f003 0307 	and.w	r3, r3, #7
 8004c66:	683a      	ldr	r2, [r7, #0]
 8004c68:	429a      	cmp	r2, r3
 8004c6a:	d001      	beq.n	8004c70 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004c6c:	2301      	movs	r3, #1
 8004c6e:	e0b8      	b.n	8004de2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f003 0302 	and.w	r3, r3, #2
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d020      	beq.n	8004cbe <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f003 0304 	and.w	r3, r3, #4
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d005      	beq.n	8004c94 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004c88:	4b59      	ldr	r3, [pc, #356]	; (8004df0 <HAL_RCC_ClockConfig+0x1c4>)
 8004c8a:	685b      	ldr	r3, [r3, #4]
 8004c8c:	4a58      	ldr	r2, [pc, #352]	; (8004df0 <HAL_RCC_ClockConfig+0x1c4>)
 8004c8e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004c92:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f003 0308 	and.w	r3, r3, #8
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d005      	beq.n	8004cac <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004ca0:	4b53      	ldr	r3, [pc, #332]	; (8004df0 <HAL_RCC_ClockConfig+0x1c4>)
 8004ca2:	685b      	ldr	r3, [r3, #4]
 8004ca4:	4a52      	ldr	r2, [pc, #328]	; (8004df0 <HAL_RCC_ClockConfig+0x1c4>)
 8004ca6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004caa:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004cac:	4b50      	ldr	r3, [pc, #320]	; (8004df0 <HAL_RCC_ClockConfig+0x1c4>)
 8004cae:	685b      	ldr	r3, [r3, #4]
 8004cb0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	689b      	ldr	r3, [r3, #8]
 8004cb8:	494d      	ldr	r1, [pc, #308]	; (8004df0 <HAL_RCC_ClockConfig+0x1c4>)
 8004cba:	4313      	orrs	r3, r2
 8004cbc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f003 0301 	and.w	r3, r3, #1
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d040      	beq.n	8004d4c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	685b      	ldr	r3, [r3, #4]
 8004cce:	2b01      	cmp	r3, #1
 8004cd0:	d107      	bne.n	8004ce2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004cd2:	4b47      	ldr	r3, [pc, #284]	; (8004df0 <HAL_RCC_ClockConfig+0x1c4>)
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d115      	bne.n	8004d0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004cde:	2301      	movs	r3, #1
 8004ce0:	e07f      	b.n	8004de2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	685b      	ldr	r3, [r3, #4]
 8004ce6:	2b02      	cmp	r3, #2
 8004ce8:	d107      	bne.n	8004cfa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004cea:	4b41      	ldr	r3, [pc, #260]	; (8004df0 <HAL_RCC_ClockConfig+0x1c4>)
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d109      	bne.n	8004d0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004cf6:	2301      	movs	r3, #1
 8004cf8:	e073      	b.n	8004de2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004cfa:	4b3d      	ldr	r3, [pc, #244]	; (8004df0 <HAL_RCC_ClockConfig+0x1c4>)
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f003 0302 	and.w	r3, r3, #2
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d101      	bne.n	8004d0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d06:	2301      	movs	r3, #1
 8004d08:	e06b      	b.n	8004de2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004d0a:	4b39      	ldr	r3, [pc, #228]	; (8004df0 <HAL_RCC_ClockConfig+0x1c4>)
 8004d0c:	685b      	ldr	r3, [r3, #4]
 8004d0e:	f023 0203 	bic.w	r2, r3, #3
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	685b      	ldr	r3, [r3, #4]
 8004d16:	4936      	ldr	r1, [pc, #216]	; (8004df0 <HAL_RCC_ClockConfig+0x1c4>)
 8004d18:	4313      	orrs	r3, r2
 8004d1a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004d1c:	f7ff fa7c 	bl	8004218 <HAL_GetTick>
 8004d20:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d22:	e00a      	b.n	8004d3a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d24:	f7ff fa78 	bl	8004218 <HAL_GetTick>
 8004d28:	4602      	mov	r2, r0
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	1ad3      	subs	r3, r2, r3
 8004d2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d32:	4293      	cmp	r3, r2
 8004d34:	d901      	bls.n	8004d3a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004d36:	2303      	movs	r3, #3
 8004d38:	e053      	b.n	8004de2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d3a:	4b2d      	ldr	r3, [pc, #180]	; (8004df0 <HAL_RCC_ClockConfig+0x1c4>)
 8004d3c:	685b      	ldr	r3, [r3, #4]
 8004d3e:	f003 020c 	and.w	r2, r3, #12
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	685b      	ldr	r3, [r3, #4]
 8004d46:	009b      	lsls	r3, r3, #2
 8004d48:	429a      	cmp	r2, r3
 8004d4a:	d1eb      	bne.n	8004d24 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004d4c:	4b27      	ldr	r3, [pc, #156]	; (8004dec <HAL_RCC_ClockConfig+0x1c0>)
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f003 0307 	and.w	r3, r3, #7
 8004d54:	683a      	ldr	r2, [r7, #0]
 8004d56:	429a      	cmp	r2, r3
 8004d58:	d210      	bcs.n	8004d7c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d5a:	4b24      	ldr	r3, [pc, #144]	; (8004dec <HAL_RCC_ClockConfig+0x1c0>)
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f023 0207 	bic.w	r2, r3, #7
 8004d62:	4922      	ldr	r1, [pc, #136]	; (8004dec <HAL_RCC_ClockConfig+0x1c0>)
 8004d64:	683b      	ldr	r3, [r7, #0]
 8004d66:	4313      	orrs	r3, r2
 8004d68:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d6a:	4b20      	ldr	r3, [pc, #128]	; (8004dec <HAL_RCC_ClockConfig+0x1c0>)
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f003 0307 	and.w	r3, r3, #7
 8004d72:	683a      	ldr	r2, [r7, #0]
 8004d74:	429a      	cmp	r2, r3
 8004d76:	d001      	beq.n	8004d7c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004d78:	2301      	movs	r3, #1
 8004d7a:	e032      	b.n	8004de2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f003 0304 	and.w	r3, r3, #4
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d008      	beq.n	8004d9a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004d88:	4b19      	ldr	r3, [pc, #100]	; (8004df0 <HAL_RCC_ClockConfig+0x1c4>)
 8004d8a:	685b      	ldr	r3, [r3, #4]
 8004d8c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	68db      	ldr	r3, [r3, #12]
 8004d94:	4916      	ldr	r1, [pc, #88]	; (8004df0 <HAL_RCC_ClockConfig+0x1c4>)
 8004d96:	4313      	orrs	r3, r2
 8004d98:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f003 0308 	and.w	r3, r3, #8
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d009      	beq.n	8004dba <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004da6:	4b12      	ldr	r3, [pc, #72]	; (8004df0 <HAL_RCC_ClockConfig+0x1c4>)
 8004da8:	685b      	ldr	r3, [r3, #4]
 8004daa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	691b      	ldr	r3, [r3, #16]
 8004db2:	00db      	lsls	r3, r3, #3
 8004db4:	490e      	ldr	r1, [pc, #56]	; (8004df0 <HAL_RCC_ClockConfig+0x1c4>)
 8004db6:	4313      	orrs	r3, r2
 8004db8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004dba:	f000 f821 	bl	8004e00 <HAL_RCC_GetSysClockFreq>
 8004dbe:	4601      	mov	r1, r0
 8004dc0:	4b0b      	ldr	r3, [pc, #44]	; (8004df0 <HAL_RCC_ClockConfig+0x1c4>)
 8004dc2:	685b      	ldr	r3, [r3, #4]
 8004dc4:	091b      	lsrs	r3, r3, #4
 8004dc6:	f003 030f 	and.w	r3, r3, #15
 8004dca:	4a0a      	ldr	r2, [pc, #40]	; (8004df4 <HAL_RCC_ClockConfig+0x1c8>)
 8004dcc:	5cd3      	ldrb	r3, [r2, r3]
 8004dce:	fa21 f303 	lsr.w	r3, r1, r3
 8004dd2:	4a09      	ldr	r2, [pc, #36]	; (8004df8 <HAL_RCC_ClockConfig+0x1cc>)
 8004dd4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004dd6:	4b09      	ldr	r3, [pc, #36]	; (8004dfc <HAL_RCC_ClockConfig+0x1d0>)
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	4618      	mov	r0, r3
 8004ddc:	f7ff f932 	bl	8004044 <HAL_InitTick>

  return HAL_OK;
 8004de0:	2300      	movs	r3, #0
}
 8004de2:	4618      	mov	r0, r3
 8004de4:	3710      	adds	r7, #16
 8004de6:	46bd      	mov	sp, r7
 8004de8:	bd80      	pop	{r7, pc}
 8004dea:	bf00      	nop
 8004dec:	40022000 	.word	0x40022000
 8004df0:	40021000 	.word	0x40021000
 8004df4:	0800e5d0 	.word	0x0800e5d0
 8004df8:	20000010 	.word	0x20000010
 8004dfc:	20000014 	.word	0x20000014

08004e00 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004e00:	b490      	push	{r4, r7}
 8004e02:	b08a      	sub	sp, #40	; 0x28
 8004e04:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004e06:	4b2a      	ldr	r3, [pc, #168]	; (8004eb0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8004e08:	1d3c      	adds	r4, r7, #4
 8004e0a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004e0c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004e10:	4b28      	ldr	r3, [pc, #160]	; (8004eb4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004e12:	881b      	ldrh	r3, [r3, #0]
 8004e14:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004e16:	2300      	movs	r3, #0
 8004e18:	61fb      	str	r3, [r7, #28]
 8004e1a:	2300      	movs	r3, #0
 8004e1c:	61bb      	str	r3, [r7, #24]
 8004e1e:	2300      	movs	r3, #0
 8004e20:	627b      	str	r3, [r7, #36]	; 0x24
 8004e22:	2300      	movs	r3, #0
 8004e24:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004e26:	2300      	movs	r3, #0
 8004e28:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004e2a:	4b23      	ldr	r3, [pc, #140]	; (8004eb8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004e2c:	685b      	ldr	r3, [r3, #4]
 8004e2e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004e30:	69fb      	ldr	r3, [r7, #28]
 8004e32:	f003 030c 	and.w	r3, r3, #12
 8004e36:	2b04      	cmp	r3, #4
 8004e38:	d002      	beq.n	8004e40 <HAL_RCC_GetSysClockFreq+0x40>
 8004e3a:	2b08      	cmp	r3, #8
 8004e3c:	d003      	beq.n	8004e46 <HAL_RCC_GetSysClockFreq+0x46>
 8004e3e:	e02d      	b.n	8004e9c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004e40:	4b1e      	ldr	r3, [pc, #120]	; (8004ebc <HAL_RCC_GetSysClockFreq+0xbc>)
 8004e42:	623b      	str	r3, [r7, #32]
      break;
 8004e44:	e02d      	b.n	8004ea2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004e46:	69fb      	ldr	r3, [r7, #28]
 8004e48:	0c9b      	lsrs	r3, r3, #18
 8004e4a:	f003 030f 	and.w	r3, r3, #15
 8004e4e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004e52:	4413      	add	r3, r2
 8004e54:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004e58:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004e5a:	69fb      	ldr	r3, [r7, #28]
 8004e5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d013      	beq.n	8004e8c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004e64:	4b14      	ldr	r3, [pc, #80]	; (8004eb8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004e66:	685b      	ldr	r3, [r3, #4]
 8004e68:	0c5b      	lsrs	r3, r3, #17
 8004e6a:	f003 0301 	and.w	r3, r3, #1
 8004e6e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004e72:	4413      	add	r3, r2
 8004e74:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004e78:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004e7a:	697b      	ldr	r3, [r7, #20]
 8004e7c:	4a0f      	ldr	r2, [pc, #60]	; (8004ebc <HAL_RCC_GetSysClockFreq+0xbc>)
 8004e7e:	fb02 f203 	mul.w	r2, r2, r3
 8004e82:	69bb      	ldr	r3, [r7, #24]
 8004e84:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e88:	627b      	str	r3, [r7, #36]	; 0x24
 8004e8a:	e004      	b.n	8004e96 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004e8c:	697b      	ldr	r3, [r7, #20]
 8004e8e:	4a0c      	ldr	r2, [pc, #48]	; (8004ec0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004e90:	fb02 f303 	mul.w	r3, r2, r3
 8004e94:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8004e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e98:	623b      	str	r3, [r7, #32]
      break;
 8004e9a:	e002      	b.n	8004ea2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004e9c:	4b07      	ldr	r3, [pc, #28]	; (8004ebc <HAL_RCC_GetSysClockFreq+0xbc>)
 8004e9e:	623b      	str	r3, [r7, #32]
      break;
 8004ea0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004ea2:	6a3b      	ldr	r3, [r7, #32]
}
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	3728      	adds	r7, #40	; 0x28
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	bc90      	pop	{r4, r7}
 8004eac:	4770      	bx	lr
 8004eae:	bf00      	nop
 8004eb0:	0800e54c 	.word	0x0800e54c
 8004eb4:	0800e55c 	.word	0x0800e55c
 8004eb8:	40021000 	.word	0x40021000
 8004ebc:	007a1200 	.word	0x007a1200
 8004ec0:	003d0900 	.word	0x003d0900

08004ec4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004ec4:	b480      	push	{r7}
 8004ec6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004ec8:	4b02      	ldr	r3, [pc, #8]	; (8004ed4 <HAL_RCC_GetHCLKFreq+0x10>)
 8004eca:	681b      	ldr	r3, [r3, #0]
}
 8004ecc:	4618      	mov	r0, r3
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	bc80      	pop	{r7}
 8004ed2:	4770      	bx	lr
 8004ed4:	20000010 	.word	0x20000010

08004ed8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004ed8:	b580      	push	{r7, lr}
 8004eda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004edc:	f7ff fff2 	bl	8004ec4 <HAL_RCC_GetHCLKFreq>
 8004ee0:	4601      	mov	r1, r0
 8004ee2:	4b05      	ldr	r3, [pc, #20]	; (8004ef8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004ee4:	685b      	ldr	r3, [r3, #4]
 8004ee6:	0a1b      	lsrs	r3, r3, #8
 8004ee8:	f003 0307 	and.w	r3, r3, #7
 8004eec:	4a03      	ldr	r2, [pc, #12]	; (8004efc <HAL_RCC_GetPCLK1Freq+0x24>)
 8004eee:	5cd3      	ldrb	r3, [r2, r3]
 8004ef0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004ef4:	4618      	mov	r0, r3
 8004ef6:	bd80      	pop	{r7, pc}
 8004ef8:	40021000 	.word	0x40021000
 8004efc:	0800e5e0 	.word	0x0800e5e0

08004f00 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004f00:	b580      	push	{r7, lr}
 8004f02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004f04:	f7ff ffde 	bl	8004ec4 <HAL_RCC_GetHCLKFreq>
 8004f08:	4601      	mov	r1, r0
 8004f0a:	4b05      	ldr	r3, [pc, #20]	; (8004f20 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004f0c:	685b      	ldr	r3, [r3, #4]
 8004f0e:	0adb      	lsrs	r3, r3, #11
 8004f10:	f003 0307 	and.w	r3, r3, #7
 8004f14:	4a03      	ldr	r2, [pc, #12]	; (8004f24 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004f16:	5cd3      	ldrb	r3, [r2, r3]
 8004f18:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004f1c:	4618      	mov	r0, r3
 8004f1e:	bd80      	pop	{r7, pc}
 8004f20:	40021000 	.word	0x40021000
 8004f24:	0800e5e0 	.word	0x0800e5e0

08004f28 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004f28:	b480      	push	{r7}
 8004f2a:	b083      	sub	sp, #12
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	6078      	str	r0, [r7, #4]
 8004f30:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	220f      	movs	r2, #15
 8004f36:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004f38:	4b11      	ldr	r3, [pc, #68]	; (8004f80 <HAL_RCC_GetClockConfig+0x58>)
 8004f3a:	685b      	ldr	r3, [r3, #4]
 8004f3c:	f003 0203 	and.w	r2, r3, #3
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004f44:	4b0e      	ldr	r3, [pc, #56]	; (8004f80 <HAL_RCC_GetClockConfig+0x58>)
 8004f46:	685b      	ldr	r3, [r3, #4]
 8004f48:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004f50:	4b0b      	ldr	r3, [pc, #44]	; (8004f80 <HAL_RCC_GetClockConfig+0x58>)
 8004f52:	685b      	ldr	r3, [r3, #4]
 8004f54:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8004f5c:	4b08      	ldr	r3, [pc, #32]	; (8004f80 <HAL_RCC_GetClockConfig+0x58>)
 8004f5e:	685b      	ldr	r3, [r3, #4]
 8004f60:	08db      	lsrs	r3, r3, #3
 8004f62:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004f6a:	4b06      	ldr	r3, [pc, #24]	; (8004f84 <HAL_RCC_GetClockConfig+0x5c>)
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f003 0207 	and.w	r2, r3, #7
 8004f72:	683b      	ldr	r3, [r7, #0]
 8004f74:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8004f76:	bf00      	nop
 8004f78:	370c      	adds	r7, #12
 8004f7a:	46bd      	mov	sp, r7
 8004f7c:	bc80      	pop	{r7}
 8004f7e:	4770      	bx	lr
 8004f80:	40021000 	.word	0x40021000
 8004f84:	40022000 	.word	0x40022000

08004f88 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004f88:	b480      	push	{r7}
 8004f8a:	b085      	sub	sp, #20
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004f90:	4b0a      	ldr	r3, [pc, #40]	; (8004fbc <RCC_Delay+0x34>)
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	4a0a      	ldr	r2, [pc, #40]	; (8004fc0 <RCC_Delay+0x38>)
 8004f96:	fba2 2303 	umull	r2, r3, r2, r3
 8004f9a:	0a5b      	lsrs	r3, r3, #9
 8004f9c:	687a      	ldr	r2, [r7, #4]
 8004f9e:	fb02 f303 	mul.w	r3, r2, r3
 8004fa2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004fa4:	bf00      	nop
  }
  while (Delay --);
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	1e5a      	subs	r2, r3, #1
 8004faa:	60fa      	str	r2, [r7, #12]
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d1f9      	bne.n	8004fa4 <RCC_Delay+0x1c>
}
 8004fb0:	bf00      	nop
 8004fb2:	3714      	adds	r7, #20
 8004fb4:	46bd      	mov	sp, r7
 8004fb6:	bc80      	pop	{r7}
 8004fb8:	4770      	bx	lr
 8004fba:	bf00      	nop
 8004fbc:	20000010 	.word	0x20000010
 8004fc0:	10624dd3 	.word	0x10624dd3

08004fc4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004fc4:	b580      	push	{r7, lr}
 8004fc6:	b086      	sub	sp, #24
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004fcc:	2300      	movs	r3, #0
 8004fce:	613b      	str	r3, [r7, #16]
 8004fd0:	2300      	movs	r3, #0
 8004fd2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f003 0301 	and.w	r3, r3, #1
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d07d      	beq.n	80050dc <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8004fe0:	2300      	movs	r3, #0
 8004fe2:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004fe4:	4b4f      	ldr	r3, [pc, #316]	; (8005124 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004fe6:	69db      	ldr	r3, [r3, #28]
 8004fe8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d10d      	bne.n	800500c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004ff0:	4b4c      	ldr	r3, [pc, #304]	; (8005124 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ff2:	69db      	ldr	r3, [r3, #28]
 8004ff4:	4a4b      	ldr	r2, [pc, #300]	; (8005124 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ff6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ffa:	61d3      	str	r3, [r2, #28]
 8004ffc:	4b49      	ldr	r3, [pc, #292]	; (8005124 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ffe:	69db      	ldr	r3, [r3, #28]
 8005000:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005004:	60bb      	str	r3, [r7, #8]
 8005006:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005008:	2301      	movs	r3, #1
 800500a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800500c:	4b46      	ldr	r3, [pc, #280]	; (8005128 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005014:	2b00      	cmp	r3, #0
 8005016:	d118      	bne.n	800504a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005018:	4b43      	ldr	r3, [pc, #268]	; (8005128 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	4a42      	ldr	r2, [pc, #264]	; (8005128 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800501e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005022:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005024:	f7ff f8f8 	bl	8004218 <HAL_GetTick>
 8005028:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800502a:	e008      	b.n	800503e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800502c:	f7ff f8f4 	bl	8004218 <HAL_GetTick>
 8005030:	4602      	mov	r2, r0
 8005032:	693b      	ldr	r3, [r7, #16]
 8005034:	1ad3      	subs	r3, r2, r3
 8005036:	2b64      	cmp	r3, #100	; 0x64
 8005038:	d901      	bls.n	800503e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800503a:	2303      	movs	r3, #3
 800503c:	e06d      	b.n	800511a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800503e:	4b3a      	ldr	r3, [pc, #232]	; (8005128 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005046:	2b00      	cmp	r3, #0
 8005048:	d0f0      	beq.n	800502c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800504a:	4b36      	ldr	r3, [pc, #216]	; (8005124 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800504c:	6a1b      	ldr	r3, [r3, #32]
 800504e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005052:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	2b00      	cmp	r3, #0
 8005058:	d02e      	beq.n	80050b8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	685b      	ldr	r3, [r3, #4]
 800505e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005062:	68fa      	ldr	r2, [r7, #12]
 8005064:	429a      	cmp	r2, r3
 8005066:	d027      	beq.n	80050b8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005068:	4b2e      	ldr	r3, [pc, #184]	; (8005124 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800506a:	6a1b      	ldr	r3, [r3, #32]
 800506c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005070:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005072:	4b2e      	ldr	r3, [pc, #184]	; (800512c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005074:	2201      	movs	r2, #1
 8005076:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005078:	4b2c      	ldr	r3, [pc, #176]	; (800512c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800507a:	2200      	movs	r2, #0
 800507c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800507e:	4a29      	ldr	r2, [pc, #164]	; (8005124 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	f003 0301 	and.w	r3, r3, #1
 800508a:	2b00      	cmp	r3, #0
 800508c:	d014      	beq.n	80050b8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800508e:	f7ff f8c3 	bl	8004218 <HAL_GetTick>
 8005092:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005094:	e00a      	b.n	80050ac <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005096:	f7ff f8bf 	bl	8004218 <HAL_GetTick>
 800509a:	4602      	mov	r2, r0
 800509c:	693b      	ldr	r3, [r7, #16]
 800509e:	1ad3      	subs	r3, r2, r3
 80050a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80050a4:	4293      	cmp	r3, r2
 80050a6:	d901      	bls.n	80050ac <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80050a8:	2303      	movs	r3, #3
 80050aa:	e036      	b.n	800511a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80050ac:	4b1d      	ldr	r3, [pc, #116]	; (8005124 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80050ae:	6a1b      	ldr	r3, [r3, #32]
 80050b0:	f003 0302 	and.w	r3, r3, #2
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d0ee      	beq.n	8005096 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80050b8:	4b1a      	ldr	r3, [pc, #104]	; (8005124 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80050ba:	6a1b      	ldr	r3, [r3, #32]
 80050bc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	685b      	ldr	r3, [r3, #4]
 80050c4:	4917      	ldr	r1, [pc, #92]	; (8005124 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80050c6:	4313      	orrs	r3, r2
 80050c8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80050ca:	7dfb      	ldrb	r3, [r7, #23]
 80050cc:	2b01      	cmp	r3, #1
 80050ce:	d105      	bne.n	80050dc <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80050d0:	4b14      	ldr	r3, [pc, #80]	; (8005124 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80050d2:	69db      	ldr	r3, [r3, #28]
 80050d4:	4a13      	ldr	r2, [pc, #76]	; (8005124 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80050d6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80050da:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f003 0302 	and.w	r3, r3, #2
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d008      	beq.n	80050fa <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80050e8:	4b0e      	ldr	r3, [pc, #56]	; (8005124 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80050ea:	685b      	ldr	r3, [r3, #4]
 80050ec:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	689b      	ldr	r3, [r3, #8]
 80050f4:	490b      	ldr	r1, [pc, #44]	; (8005124 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80050f6:	4313      	orrs	r3, r2
 80050f8:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f003 0310 	and.w	r3, r3, #16
 8005102:	2b00      	cmp	r3, #0
 8005104:	d008      	beq.n	8005118 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005106:	4b07      	ldr	r3, [pc, #28]	; (8005124 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005108:	685b      	ldr	r3, [r3, #4]
 800510a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	68db      	ldr	r3, [r3, #12]
 8005112:	4904      	ldr	r1, [pc, #16]	; (8005124 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005114:	4313      	orrs	r3, r2
 8005116:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8005118:	2300      	movs	r3, #0
}
 800511a:	4618      	mov	r0, r3
 800511c:	3718      	adds	r7, #24
 800511e:	46bd      	mov	sp, r7
 8005120:	bd80      	pop	{r7, pc}
 8005122:	bf00      	nop
 8005124:	40021000 	.word	0x40021000
 8005128:	40007000 	.word	0x40007000
 800512c:	42420440 	.word	0x42420440

08005130 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005130:	b590      	push	{r4, r7, lr}
 8005132:	b08d      	sub	sp, #52	; 0x34
 8005134:	af00      	add	r7, sp, #0
 8005136:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8005138:	4b55      	ldr	r3, [pc, #340]	; (8005290 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 800513a:	f107 040c 	add.w	r4, r7, #12
 800513e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005140:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8005144:	4b53      	ldr	r3, [pc, #332]	; (8005294 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8005146:	881b      	ldrh	r3, [r3, #0]
 8005148:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 800514a:	2300      	movs	r3, #0
 800514c:	627b      	str	r3, [r7, #36]	; 0x24
 800514e:	2300      	movs	r3, #0
 8005150:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005152:	2300      	movs	r3, #0
 8005154:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8005156:	2300      	movs	r3, #0
 8005158:	61fb      	str	r3, [r7, #28]
 800515a:	2300      	movs	r3, #0
 800515c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	2b02      	cmp	r3, #2
 8005162:	d07f      	beq.n	8005264 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 8005164:	2b10      	cmp	r3, #16
 8005166:	d002      	beq.n	800516e <HAL_RCCEx_GetPeriphCLKFreq+0x3e>
 8005168:	2b01      	cmp	r3, #1
 800516a:	d048      	beq.n	80051fe <HAL_RCCEx_GetPeriphCLKFreq+0xce>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 800516c:	e08b      	b.n	8005286 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      temp_reg = RCC->CFGR;
 800516e:	4b4a      	ldr	r3, [pc, #296]	; (8005298 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8005170:	685b      	ldr	r3, [r3, #4]
 8005172:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8005174:	4b48      	ldr	r3, [pc, #288]	; (8005298 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800517c:	2b00      	cmp	r3, #0
 800517e:	d07f      	beq.n	8005280 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005180:	69fb      	ldr	r3, [r7, #28]
 8005182:	0c9b      	lsrs	r3, r3, #18
 8005184:	f003 030f 	and.w	r3, r3, #15
 8005188:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800518c:	4413      	add	r3, r2
 800518e:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8005192:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005194:	69fb      	ldr	r3, [r7, #28]
 8005196:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800519a:	2b00      	cmp	r3, #0
 800519c:	d018      	beq.n	80051d0 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800519e:	4b3e      	ldr	r3, [pc, #248]	; (8005298 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80051a0:	685b      	ldr	r3, [r3, #4]
 80051a2:	0c5b      	lsrs	r3, r3, #17
 80051a4:	f003 0301 	and.w	r3, r3, #1
 80051a8:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80051ac:	4413      	add	r3, r2
 80051ae:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80051b2:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80051b4:	69fb      	ldr	r3, [r7, #28]
 80051b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d00d      	beq.n	80051da <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80051be:	4a37      	ldr	r2, [pc, #220]	; (800529c <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 80051c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051c2:	fbb2 f2f3 	udiv	r2, r2, r3
 80051c6:	6a3b      	ldr	r3, [r7, #32]
 80051c8:	fb02 f303 	mul.w	r3, r2, r3
 80051cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80051ce:	e004      	b.n	80051da <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80051d0:	6a3b      	ldr	r3, [r7, #32]
 80051d2:	4a33      	ldr	r2, [pc, #204]	; (80052a0 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80051d4:	fb02 f303 	mul.w	r3, r2, r3
 80051d8:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80051da:	4b2f      	ldr	r3, [pc, #188]	; (8005298 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80051dc:	685b      	ldr	r3, [r3, #4]
 80051de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80051e2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80051e6:	d102      	bne.n	80051ee <HAL_RCCEx_GetPeriphCLKFreq+0xbe>
          frequency = pllclk;
 80051e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051ea:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80051ec:	e048      	b.n	8005280 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
          frequency = (pllclk * 2) / 3;
 80051ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051f0:	005b      	lsls	r3, r3, #1
 80051f2:	4a2c      	ldr	r2, [pc, #176]	; (80052a4 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 80051f4:	fba2 2303 	umull	r2, r3, r2, r3
 80051f8:	085b      	lsrs	r3, r3, #1
 80051fa:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80051fc:	e040      	b.n	8005280 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
      temp_reg = RCC->BDCR;
 80051fe:	4b26      	ldr	r3, [pc, #152]	; (8005298 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8005200:	6a1b      	ldr	r3, [r3, #32]
 8005202:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8005204:	69fb      	ldr	r3, [r7, #28]
 8005206:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800520a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800520e:	d108      	bne.n	8005222 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
 8005210:	69fb      	ldr	r3, [r7, #28]
 8005212:	f003 0302 	and.w	r3, r3, #2
 8005216:	2b00      	cmp	r3, #0
 8005218:	d003      	beq.n	8005222 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
        frequency = LSE_VALUE;
 800521a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800521e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005220:	e01f      	b.n	8005262 <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8005222:	69fb      	ldr	r3, [r7, #28]
 8005224:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005228:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800522c:	d109      	bne.n	8005242 <HAL_RCCEx_GetPeriphCLKFreq+0x112>
 800522e:	4b1a      	ldr	r3, [pc, #104]	; (8005298 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8005230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005232:	f003 0302 	and.w	r3, r3, #2
 8005236:	2b00      	cmp	r3, #0
 8005238:	d003      	beq.n	8005242 <HAL_RCCEx_GetPeriphCLKFreq+0x112>
        frequency = LSI_VALUE;
 800523a:	f649 4340 	movw	r3, #40000	; 0x9c40
 800523e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005240:	e00f      	b.n	8005262 <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8005242:	69fb      	ldr	r3, [r7, #28]
 8005244:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005248:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800524c:	d11a      	bne.n	8005284 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 800524e:	4b12      	ldr	r3, [pc, #72]	; (8005298 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005256:	2b00      	cmp	r3, #0
 8005258:	d014      	beq.n	8005284 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
        frequency = HSE_VALUE / 128U;
 800525a:	f24f 4324 	movw	r3, #62500	; 0xf424
 800525e:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8005260:	e010      	b.n	8005284 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 8005262:	e00f      	b.n	8005284 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8005264:	f7ff fe4c 	bl	8004f00 <HAL_RCC_GetPCLK2Freq>
 8005268:	4602      	mov	r2, r0
 800526a:	4b0b      	ldr	r3, [pc, #44]	; (8005298 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 800526c:	685b      	ldr	r3, [r3, #4]
 800526e:	0b9b      	lsrs	r3, r3, #14
 8005270:	f003 0303 	and.w	r3, r3, #3
 8005274:	3301      	adds	r3, #1
 8005276:	005b      	lsls	r3, r3, #1
 8005278:	fbb2 f3f3 	udiv	r3, r2, r3
 800527c:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800527e:	e002      	b.n	8005286 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 8005280:	bf00      	nop
 8005282:	e000      	b.n	8005286 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 8005284:	bf00      	nop
    }
  }
  return (frequency);
 8005286:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8005288:	4618      	mov	r0, r3
 800528a:	3734      	adds	r7, #52	; 0x34
 800528c:	46bd      	mov	sp, r7
 800528e:	bd90      	pop	{r4, r7, pc}
 8005290:	0800e560 	.word	0x0800e560
 8005294:	0800e570 	.word	0x0800e570
 8005298:	40021000 	.word	0x40021000
 800529c:	007a1200 	.word	0x007a1200
 80052a0:	003d0900 	.word	0x003d0900
 80052a4:	aaaaaaab 	.word	0xaaaaaaab

080052a8 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80052a8:	b580      	push	{r7, lr}
 80052aa:	b084      	sub	sp, #16
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 80052b0:	2300      	movs	r3, #0
 80052b2:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d101      	bne.n	80052be <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80052ba:	2301      	movs	r3, #1
 80052bc:	e084      	b.n	80053c8 <HAL_RTC_Init+0x120>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	7c5b      	ldrb	r3, [r3, #17]
 80052c2:	b2db      	uxtb	r3, r3
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d105      	bne.n	80052d4 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2200      	movs	r2, #0
 80052cc:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80052ce:	6878      	ldr	r0, [r7, #4]
 80052d0:	f7fe fdc6 	bl	8003e60 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2202      	movs	r2, #2
 80052d8:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80052da:	6878      	ldr	r0, [r7, #4]
 80052dc:	f000 faf4 	bl	80058c8 <HAL_RTC_WaitForSynchro>
 80052e0:	4603      	mov	r3, r0
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d004      	beq.n	80052f0 <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	2204      	movs	r2, #4
 80052ea:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 80052ec:	2301      	movs	r3, #1
 80052ee:	e06b      	b.n	80053c8 <HAL_RTC_Init+0x120>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80052f0:	6878      	ldr	r0, [r7, #4]
 80052f2:	f000 fbad 	bl	8005a50 <RTC_EnterInitMode>
 80052f6:	4603      	mov	r3, r0
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d004      	beq.n	8005306 <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2204      	movs	r2, #4
 8005300:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8005302:	2301      	movs	r3, #1
 8005304:	e060      	b.n	80053c8 <HAL_RTC_Init+0x120>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	685a      	ldr	r2, [r3, #4]
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f022 0207 	bic.w	r2, r2, #7
 8005314:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	689b      	ldr	r3, [r3, #8]
 800531a:	2b00      	cmp	r3, #0
 800531c:	d005      	beq.n	800532a <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 800531e:	4b2c      	ldr	r3, [pc, #176]	; (80053d0 <HAL_RTC_Init+0x128>)
 8005320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005322:	4a2b      	ldr	r2, [pc, #172]	; (80053d0 <HAL_RTC_Init+0x128>)
 8005324:	f023 0301 	bic.w	r3, r3, #1
 8005328:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 800532a:	4b29      	ldr	r3, [pc, #164]	; (80053d0 <HAL_RTC_Init+0x128>)
 800532c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800532e:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	689b      	ldr	r3, [r3, #8]
 8005336:	4926      	ldr	r1, [pc, #152]	; (80053d0 <HAL_RTC_Init+0x128>)
 8005338:	4313      	orrs	r3, r2
 800533a:	62cb      	str	r3, [r1, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	685b      	ldr	r3, [r3, #4]
 8005340:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005344:	d003      	beq.n	800534e <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	685b      	ldr	r3, [r3, #4]
 800534a:	60fb      	str	r3, [r7, #12]
 800534c:	e00e      	b.n	800536c <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 800534e:	2001      	movs	r0, #1
 8005350:	f7ff feee 	bl	8005130 <HAL_RCCEx_GetPeriphCLKFreq>
 8005354:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	2b00      	cmp	r3, #0
 800535a:	d104      	bne.n	8005366 <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2204      	movs	r2, #4
 8005360:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 8005362:	2301      	movs	r3, #1
 8005364:	e030      	b.n	80053c8 <HAL_RTC_Init+0x120>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	3b01      	subs	r3, #1
 800536a:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    MODIFY_REG(hrtc->Instance->PRLH, RTC_PRLH_PRL, (prescaler >> 16U));
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	689b      	ldr	r3, [r3, #8]
 8005372:	f023 010f 	bic.w	r1, r3, #15
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	0c1a      	lsrs	r2, r3, #16
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	430a      	orrs	r2, r1
 8005380:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hrtc->Instance->PRLL, RTC_PRLL_PRL, (prescaler & RTC_PRLL_PRL));
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	68db      	ldr	r3, [r3, #12]
 8005388:	0c1b      	lsrs	r3, r3, #16
 800538a:	041b      	lsls	r3, r3, #16
 800538c:	68fa      	ldr	r2, [r7, #12]
 800538e:	b291      	uxth	r1, r2
 8005390:	687a      	ldr	r2, [r7, #4]
 8005392:	6812      	ldr	r2, [r2, #0]
 8005394:	430b      	orrs	r3, r1
 8005396:	60d3      	str	r3, [r2, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8005398:	6878      	ldr	r0, [r7, #4]
 800539a:	f000 fb81 	bl	8005aa0 <RTC_ExitInitMode>
 800539e:	4603      	mov	r3, r0
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d004      	beq.n	80053ae <HAL_RTC_Init+0x106>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2204      	movs	r2, #4
 80053a8:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 80053aa:	2301      	movs	r3, #1
 80053ac:	e00c      	b.n	80053c8 <HAL_RTC_Init+0x120>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	2200      	movs	r2, #0
 80053b2:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	2201      	movs	r2, #1
 80053b8:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	2201      	movs	r2, #1
 80053be:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2201      	movs	r2, #1
 80053c4:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 80053c6:	2300      	movs	r3, #0
  }
}
 80053c8:	4618      	mov	r0, r3
 80053ca:	3710      	adds	r7, #16
 80053cc:	46bd      	mov	sp, r7
 80053ce:	bd80      	pop	{r7, pc}
 80053d0:	40006c00 	.word	0x40006c00

080053d4 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80053d4:	b590      	push	{r4, r7, lr}
 80053d6:	b087      	sub	sp, #28
 80053d8:	af00      	add	r7, sp, #0
 80053da:	60f8      	str	r0, [r7, #12]
 80053dc:	60b9      	str	r1, [r7, #8]
 80053de:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U;
 80053e0:	2300      	movs	r3, #0
 80053e2:	617b      	str	r3, [r7, #20]
 80053e4:	2300      	movs	r3, #0
 80053e6:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d002      	beq.n	80053f4 <HAL_RTC_SetTime+0x20>
 80053ee:	68bb      	ldr	r3, [r7, #8]
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d101      	bne.n	80053f8 <HAL_RTC_SetTime+0x24>
  {
    return HAL_ERROR;
 80053f4:	2301      	movs	r3, #1
 80053f6:	e080      	b.n	80054fa <HAL_RTC_SetTime+0x126>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	7c1b      	ldrb	r3, [r3, #16]
 80053fc:	2b01      	cmp	r3, #1
 80053fe:	d101      	bne.n	8005404 <HAL_RTC_SetTime+0x30>
 8005400:	2302      	movs	r3, #2
 8005402:	e07a      	b.n	80054fa <HAL_RTC_SetTime+0x126>
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	2201      	movs	r2, #1
 8005408:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	2202      	movs	r2, #2
 800540e:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	2b00      	cmp	r3, #0
 8005414:	d113      	bne.n	800543e <HAL_RTC_SetTime+0x6a>
  {
    assert_param(IS_RTC_HOUR24(sTime->Hours));
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8005416:	68bb      	ldr	r3, [r7, #8]
 8005418:	781b      	ldrb	r3, [r3, #0]
 800541a:	461a      	mov	r2, r3
 800541c:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8005420:	fb03 f202 	mul.w	r2, r3, r2
                              ((uint32_t)sTime->Minutes * 60U) + \
 8005424:	68bb      	ldr	r3, [r7, #8]
 8005426:	785b      	ldrb	r3, [r3, #1]
 8005428:	4619      	mov	r1, r3
 800542a:	460b      	mov	r3, r1
 800542c:	011b      	lsls	r3, r3, #4
 800542e:	1a5b      	subs	r3, r3, r1
 8005430:	009b      	lsls	r3, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8005432:	4413      	add	r3, r2
                              ((uint32_t)sTime->Seconds));
 8005434:	68ba      	ldr	r2, [r7, #8]
 8005436:	7892      	ldrb	r2, [r2, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8005438:	4413      	add	r3, r2
 800543a:	617b      	str	r3, [r7, #20]
 800543c:	e01e      	b.n	800547c <HAL_RTC_SetTime+0xa8>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));

    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 800543e:	68bb      	ldr	r3, [r7, #8]
 8005440:	781b      	ldrb	r3, [r3, #0]
 8005442:	4618      	mov	r0, r3
 8005444:	f000 fb71 	bl	8005b2a <RTC_Bcd2ToByte>
 8005448:	4603      	mov	r3, r0
 800544a:	461a      	mov	r2, r3
 800544c:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8005450:	fb03 f402 	mul.w	r4, r3, r2
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 8005454:	68bb      	ldr	r3, [r7, #8]
 8005456:	785b      	ldrb	r3, [r3, #1]
 8005458:	4618      	mov	r0, r3
 800545a:	f000 fb66 	bl	8005b2a <RTC_Bcd2ToByte>
 800545e:	4603      	mov	r3, r0
 8005460:	461a      	mov	r2, r3
 8005462:	4613      	mov	r3, r2
 8005464:	011b      	lsls	r3, r3, #4
 8005466:	1a9b      	subs	r3, r3, r2
 8005468:	009b      	lsls	r3, r3, #2
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 800546a:	441c      	add	r4, r3
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 800546c:	68bb      	ldr	r3, [r7, #8]
 800546e:	789b      	ldrb	r3, [r3, #2]
 8005470:	4618      	mov	r0, r3
 8005472:	f000 fb5a 	bl	8005b2a <RTC_Bcd2ToByte>
 8005476:	4603      	mov	r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8005478:	4423      	add	r3, r4
 800547a:	617b      	str	r3, [r7, #20]
  }

  /* Write time counter in RTC registers */
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 800547c:	6979      	ldr	r1, [r7, #20]
 800547e:	68f8      	ldr	r0, [r7, #12]
 8005480:	f000 fa7f 	bl	8005982 <RTC_WriteTimeCounter>
 8005484:	4603      	mov	r3, r0
 8005486:	2b00      	cmp	r3, #0
 8005488:	d007      	beq.n	800549a <HAL_RTC_SetTime+0xc6>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	2204      	movs	r2, #4
 800548e:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	2200      	movs	r2, #0
 8005494:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 8005496:	2301      	movs	r3, #1
 8005498:	e02f      	b.n	80054fa <HAL_RTC_SetTime+0x126>
  }
  else
  {
    /* Clear Second and overflow flags */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	685a      	ldr	r2, [r3, #4]
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f022 0205 	bic.w	r2, r2, #5
 80054a8:	605a      	str	r2, [r3, #4]

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 80054aa:	68f8      	ldr	r0, [r7, #12]
 80054ac:	f000 fa90 	bl	80059d0 <RTC_ReadAlarmCounter>
 80054b0:	6138      	str	r0, [r7, #16]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 80054b2:	693b      	ldr	r3, [r7, #16]
 80054b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054b8:	d018      	beq.n	80054ec <HAL_RTC_SetTime+0x118>
    {
      if (counter_alarm < counter_time)
 80054ba:	693a      	ldr	r2, [r7, #16]
 80054bc:	697b      	ldr	r3, [r7, #20]
 80054be:	429a      	cmp	r2, r3
 80054c0:	d214      	bcs.n	80054ec <HAL_RTC_SetTime+0x118>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 80054c2:	693b      	ldr	r3, [r7, #16]
 80054c4:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 80054c8:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80054cc:	613b      	str	r3, [r7, #16]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 80054ce:	6939      	ldr	r1, [r7, #16]
 80054d0:	68f8      	ldr	r0, [r7, #12]
 80054d2:	f000 fa96 	bl	8005a02 <RTC_WriteAlarmCounter>
 80054d6:	4603      	mov	r3, r0
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d007      	beq.n	80054ec <HAL_RTC_SetTime+0x118>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	2204      	movs	r2, #4
 80054e0:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	2200      	movs	r2, #0
 80054e6:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 80054e8:	2301      	movs	r3, #1
 80054ea:	e006      	b.n	80054fa <HAL_RTC_SetTime+0x126>
        }
      }
    }

    hrtc->State = HAL_RTC_STATE_READY;
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	2201      	movs	r2, #1
 80054f0:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	2200      	movs	r2, #0
 80054f6:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 80054f8:	2300      	movs	r3, #0
  }
}
 80054fa:	4618      	mov	r0, r3
 80054fc:	371c      	adds	r7, #28
 80054fe:	46bd      	mov	sp, r7
 8005500:	bd90      	pop	{r4, r7, pc}
	...

08005504 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005504:	b580      	push	{r7, lr}
 8005506:	b088      	sub	sp, #32
 8005508:	af00      	add	r7, sp, #0
 800550a:	60f8      	str	r0, [r7, #12]
 800550c:	60b9      	str	r1, [r7, #8]
 800550e:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, days_elapsed = 0U, hours = 0U;
 8005510:	2300      	movs	r3, #0
 8005512:	61bb      	str	r3, [r7, #24]
 8005514:	2300      	movs	r3, #0
 8005516:	61fb      	str	r3, [r7, #28]
 8005518:	2300      	movs	r3, #0
 800551a:	617b      	str	r3, [r7, #20]
 800551c:	2300      	movs	r3, #0
 800551e:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	2b00      	cmp	r3, #0
 8005524:	d002      	beq.n	800552c <HAL_RTC_GetTime+0x28>
 8005526:	68bb      	ldr	r3, [r7, #8]
 8005528:	2b00      	cmp	r3, #0
 800552a:	d101      	bne.n	8005530 <HAL_RTC_GetTime+0x2c>
  {
    return HAL_ERROR;
 800552c:	2301      	movs	r3, #1
 800552e:	e0b5      	b.n	800569c <HAL_RTC_GetTime+0x198>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Check if counter overflow occurred */
  if (__HAL_RTC_OVERFLOW_GET_FLAG(hrtc, RTC_FLAG_OW))
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	685b      	ldr	r3, [r3, #4]
 8005536:	f003 0304 	and.w	r3, r3, #4
 800553a:	2b00      	cmp	r3, #0
 800553c:	d001      	beq.n	8005542 <HAL_RTC_GetTime+0x3e>
  {
    return HAL_ERROR;
 800553e:	2301      	movs	r3, #1
 8005540:	e0ac      	b.n	800569c <HAL_RTC_GetTime+0x198>
  }

  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 8005542:	68f8      	ldr	r0, [r7, #12]
 8005544:	f000 f9ed 	bl	8005922 <RTC_ReadTimeCounter>
 8005548:	61b8      	str	r0, [r7, #24]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 800554a:	69bb      	ldr	r3, [r7, #24]
 800554c:	4a55      	ldr	r2, [pc, #340]	; (80056a4 <HAL_RTC_GetTime+0x1a0>)
 800554e:	fba2 2303 	umull	r2, r3, r2, r3
 8005552:	0adb      	lsrs	r3, r3, #11
 8005554:	613b      	str	r3, [r7, #16]
  sTime->Minutes  = (uint8_t)((counter_time % 3600U) / 60U);
 8005556:	69ba      	ldr	r2, [r7, #24]
 8005558:	4b52      	ldr	r3, [pc, #328]	; (80056a4 <HAL_RTC_GetTime+0x1a0>)
 800555a:	fba3 1302 	umull	r1, r3, r3, r2
 800555e:	0adb      	lsrs	r3, r3, #11
 8005560:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8005564:	fb01 f303 	mul.w	r3, r1, r3
 8005568:	1ad3      	subs	r3, r2, r3
 800556a:	4a4f      	ldr	r2, [pc, #316]	; (80056a8 <HAL_RTC_GetTime+0x1a4>)
 800556c:	fba2 2303 	umull	r2, r3, r2, r3
 8005570:	095b      	lsrs	r3, r3, #5
 8005572:	b2da      	uxtb	r2, r3
 8005574:	68bb      	ldr	r3, [r7, #8]
 8005576:	705a      	strb	r2, [r3, #1]
  sTime->Seconds  = (uint8_t)((counter_time % 3600U) % 60U);
 8005578:	69bb      	ldr	r3, [r7, #24]
 800557a:	4a4a      	ldr	r2, [pc, #296]	; (80056a4 <HAL_RTC_GetTime+0x1a0>)
 800557c:	fba2 1203 	umull	r1, r2, r2, r3
 8005580:	0ad2      	lsrs	r2, r2, #11
 8005582:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8005586:	fb01 f202 	mul.w	r2, r1, r2
 800558a:	1a9a      	subs	r2, r3, r2
 800558c:	4b46      	ldr	r3, [pc, #280]	; (80056a8 <HAL_RTC_GetTime+0x1a4>)
 800558e:	fba3 1302 	umull	r1, r3, r3, r2
 8005592:	0959      	lsrs	r1, r3, #5
 8005594:	460b      	mov	r3, r1
 8005596:	011b      	lsls	r3, r3, #4
 8005598:	1a5b      	subs	r3, r3, r1
 800559a:	009b      	lsls	r3, r3, #2
 800559c:	1ad1      	subs	r1, r2, r3
 800559e:	b2ca      	uxtb	r2, r1
 80055a0:	68bb      	ldr	r3, [r7, #8]
 80055a2:	709a      	strb	r2, [r3, #2]

  if (hours >= 24U)
 80055a4:	693b      	ldr	r3, [r7, #16]
 80055a6:	2b17      	cmp	r3, #23
 80055a8:	d955      	bls.n	8005656 <HAL_RTC_GetTime+0x152>
  {
    /* Get number of days elapsed from last calculation */
    days_elapsed = (hours / 24U);
 80055aa:	693b      	ldr	r3, [r7, #16]
 80055ac:	4a3f      	ldr	r2, [pc, #252]	; (80056ac <HAL_RTC_GetTime+0x1a8>)
 80055ae:	fba2 2303 	umull	r2, r3, r2, r3
 80055b2:	091b      	lsrs	r3, r3, #4
 80055b4:	617b      	str	r3, [r7, #20]

    /* Set Hours in RTC_TimeTypeDef structure*/
    sTime->Hours = (hours % 24U);
 80055b6:	6939      	ldr	r1, [r7, #16]
 80055b8:	4b3c      	ldr	r3, [pc, #240]	; (80056ac <HAL_RTC_GetTime+0x1a8>)
 80055ba:	fba3 2301 	umull	r2, r3, r3, r1
 80055be:	091a      	lsrs	r2, r3, #4
 80055c0:	4613      	mov	r3, r2
 80055c2:	005b      	lsls	r3, r3, #1
 80055c4:	4413      	add	r3, r2
 80055c6:	00db      	lsls	r3, r3, #3
 80055c8:	1aca      	subs	r2, r1, r3
 80055ca:	b2d2      	uxtb	r2, r2
 80055cc:	68bb      	ldr	r3, [r7, #8]
 80055ce:	701a      	strb	r2, [r3, #0]

    /* Read Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 80055d0:	68f8      	ldr	r0, [r7, #12]
 80055d2:	f000 f9fd 	bl	80059d0 <RTC_ReadAlarmCounter>
 80055d6:	61f8      	str	r0, [r7, #28]

    /* Calculate remaining time to reach alarm (only if set and not yet expired)*/
    if ((counter_alarm != RTC_ALARM_RESETVALUE) && (counter_alarm > counter_time))
 80055d8:	69fb      	ldr	r3, [r7, #28]
 80055da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055de:	d008      	beq.n	80055f2 <HAL_RTC_GetTime+0xee>
 80055e0:	69fa      	ldr	r2, [r7, #28]
 80055e2:	69bb      	ldr	r3, [r7, #24]
 80055e4:	429a      	cmp	r2, r3
 80055e6:	d904      	bls.n	80055f2 <HAL_RTC_GetTime+0xee>
    {
      counter_alarm -= counter_time;
 80055e8:	69fa      	ldr	r2, [r7, #28]
 80055ea:	69bb      	ldr	r3, [r7, #24]
 80055ec:	1ad3      	subs	r3, r2, r3
 80055ee:	61fb      	str	r3, [r7, #28]
 80055f0:	e002      	b.n	80055f8 <HAL_RTC_GetTime+0xf4>
    }
    else
    {
      /* In case of counter_alarm < counter_time */
      /* Alarm expiration already occurred but alarm not deactivated */
      counter_alarm = RTC_ALARM_RESETVALUE;
 80055f2:	f04f 33ff 	mov.w	r3, #4294967295
 80055f6:	61fb      	str	r3, [r7, #28]
    }

    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= (days_elapsed * 24U * 3600U);
 80055f8:	697b      	ldr	r3, [r7, #20]
 80055fa:	4a2d      	ldr	r2, [pc, #180]	; (80056b0 <HAL_RTC_GetTime+0x1ac>)
 80055fc:	fb02 f303 	mul.w	r3, r2, r3
 8005600:	69ba      	ldr	r2, [r7, #24]
 8005602:	1ad3      	subs	r3, r2, r3
 8005604:	61bb      	str	r3, [r7, #24]

    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8005606:	69b9      	ldr	r1, [r7, #24]
 8005608:	68f8      	ldr	r0, [r7, #12]
 800560a:	f000 f9ba 	bl	8005982 <RTC_WriteTimeCounter>
 800560e:	4603      	mov	r3, r0
 8005610:	2b00      	cmp	r3, #0
 8005612:	d001      	beq.n	8005618 <HAL_RTC_GetTime+0x114>
    {
      return HAL_ERROR;
 8005614:	2301      	movs	r3, #1
 8005616:	e041      	b.n	800569c <HAL_RTC_GetTime+0x198>
    }

    /* Set updated alarm to be set */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8005618:	69fb      	ldr	r3, [r7, #28]
 800561a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800561e:	d00c      	beq.n	800563a <HAL_RTC_GetTime+0x136>
    {
      counter_alarm += counter_time;
 8005620:	69fa      	ldr	r2, [r7, #28]
 8005622:	69bb      	ldr	r3, [r7, #24]
 8005624:	4413      	add	r3, r2
 8005626:	61fb      	str	r3, [r7, #28]

      /* Write time counter in RTC registers */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8005628:	69f9      	ldr	r1, [r7, #28]
 800562a:	68f8      	ldr	r0, [r7, #12]
 800562c:	f000 f9e9 	bl	8005a02 <RTC_WriteAlarmCounter>
 8005630:	4603      	mov	r3, r0
 8005632:	2b00      	cmp	r3, #0
 8005634:	d00a      	beq.n	800564c <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 8005636:	2301      	movs	r3, #1
 8005638:	e030      	b.n	800569c <HAL_RTC_GetTime+0x198>
      }
    }
    else
    {
      /* Alarm already occurred. Set it to reset values to avoid unexpected expiration */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 800563a:	69f9      	ldr	r1, [r7, #28]
 800563c:	68f8      	ldr	r0, [r7, #12]
 800563e:	f000 f9e0 	bl	8005a02 <RTC_WriteAlarmCounter>
 8005642:	4603      	mov	r3, r0
 8005644:	2b00      	cmp	r3, #0
 8005646:	d001      	beq.n	800564c <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 8005648:	2301      	movs	r3, #1
 800564a:	e027      	b.n	800569c <HAL_RTC_GetTime+0x198>
      }
    }

    /* Update date */
    RTC_DateUpdate(hrtc, days_elapsed);
 800564c:	6979      	ldr	r1, [r7, #20]
 800564e:	68f8      	ldr	r0, [r7, #12]
 8005650:	f000 fa88 	bl	8005b64 <RTC_DateUpdate>
 8005654:	e003      	b.n	800565e <HAL_RTC_GetTime+0x15a>
  }
  else
  {
    sTime->Hours = hours;
 8005656:	693b      	ldr	r3, [r7, #16]
 8005658:	b2da      	uxtb	r2, r3
 800565a:	68bb      	ldr	r3, [r7, #8]
 800565c:	701a      	strb	r2, [r3, #0]
  }

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	2b00      	cmp	r3, #0
 8005662:	d01a      	beq.n	800569a <HAL_RTC_GetTime+0x196>
  {
    /* Convert the time structure parameters to BCD format */
    sTime->Hours    = (uint8_t)RTC_ByteToBcd2(sTime->Hours);
 8005664:	68bb      	ldr	r3, [r7, #8]
 8005666:	781b      	ldrb	r3, [r3, #0]
 8005668:	4618      	mov	r0, r3
 800566a:	f000 fa41 	bl	8005af0 <RTC_ByteToBcd2>
 800566e:	4603      	mov	r3, r0
 8005670:	461a      	mov	r2, r3
 8005672:	68bb      	ldr	r3, [r7, #8]
 8005674:	701a      	strb	r2, [r3, #0]
    sTime->Minutes  = (uint8_t)RTC_ByteToBcd2(sTime->Minutes);
 8005676:	68bb      	ldr	r3, [r7, #8]
 8005678:	785b      	ldrb	r3, [r3, #1]
 800567a:	4618      	mov	r0, r3
 800567c:	f000 fa38 	bl	8005af0 <RTC_ByteToBcd2>
 8005680:	4603      	mov	r3, r0
 8005682:	461a      	mov	r2, r3
 8005684:	68bb      	ldr	r3, [r7, #8]
 8005686:	705a      	strb	r2, [r3, #1]
    sTime->Seconds  = (uint8_t)RTC_ByteToBcd2(sTime->Seconds);
 8005688:	68bb      	ldr	r3, [r7, #8]
 800568a:	789b      	ldrb	r3, [r3, #2]
 800568c:	4618      	mov	r0, r3
 800568e:	f000 fa2f 	bl	8005af0 <RTC_ByteToBcd2>
 8005692:	4603      	mov	r3, r0
 8005694:	461a      	mov	r2, r3
 8005696:	68bb      	ldr	r3, [r7, #8]
 8005698:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800569a:	2300      	movs	r3, #0
}
 800569c:	4618      	mov	r0, r3
 800569e:	3720      	adds	r7, #32
 80056a0:	46bd      	mov	sp, r7
 80056a2:	bd80      	pop	{r7, pc}
 80056a4:	91a2b3c5 	.word	0x91a2b3c5
 80056a8:	88888889 	.word	0x88888889
 80056ac:	aaaaaaab 	.word	0xaaaaaaab
 80056b0:	00015180 	.word	0x00015180

080056b4 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80056b4:	b580      	push	{r7, lr}
 80056b6:	b088      	sub	sp, #32
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	60f8      	str	r0, [r7, #12]
 80056bc:	60b9      	str	r1, [r7, #8]
 80056be:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, hours = 0U;
 80056c0:	2300      	movs	r3, #0
 80056c2:	61fb      	str	r3, [r7, #28]
 80056c4:	2300      	movs	r3, #0
 80056c6:	61bb      	str	r3, [r7, #24]
 80056c8:	2300      	movs	r3, #0
 80056ca:	617b      	str	r3, [r7, #20]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d002      	beq.n	80056d8 <HAL_RTC_SetDate+0x24>
 80056d2:	68bb      	ldr	r3, [r7, #8]
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d101      	bne.n	80056dc <HAL_RTC_SetDate+0x28>
  {
    return HAL_ERROR;
 80056d8:	2301      	movs	r3, #1
 80056da:	e097      	b.n	800580c <HAL_RTC_SetDate+0x158>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	7c1b      	ldrb	r3, [r3, #16]
 80056e0:	2b01      	cmp	r3, #1
 80056e2:	d101      	bne.n	80056e8 <HAL_RTC_SetDate+0x34>
 80056e4:	2302      	movs	r3, #2
 80056e6:	e091      	b.n	800580c <HAL_RTC_SetDate+0x158>
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	2201      	movs	r2, #1
 80056ec:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	2202      	movs	r2, #2
 80056f2:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d10c      	bne.n	8005714 <HAL_RTC_SetDate+0x60>
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = sDate->Year;
 80056fa:	68bb      	ldr	r3, [r7, #8]
 80056fc:	78da      	ldrb	r2, [r3, #3]
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 8005702:	68bb      	ldr	r3, [r7, #8]
 8005704:	785a      	ldrb	r2, [r3, #1]
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 800570a:	68bb      	ldr	r3, [r7, #8]
 800570c:	789a      	ldrb	r2, [r3, #2]
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	739a      	strb	r2, [r3, #14]
 8005712:	e01a      	b.n	800574a <HAL_RTC_SetDate+0x96>
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 8005714:	68bb      	ldr	r3, [r7, #8]
 8005716:	78db      	ldrb	r3, [r3, #3]
 8005718:	4618      	mov	r0, r3
 800571a:	f000 fa06 	bl	8005b2a <RTC_Bcd2ToByte>
 800571e:	4603      	mov	r3, r0
 8005720:	461a      	mov	r2, r3
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 8005726:	68bb      	ldr	r3, [r7, #8]
 8005728:	785b      	ldrb	r3, [r3, #1]
 800572a:	4618      	mov	r0, r3
 800572c:	f000 f9fd 	bl	8005b2a <RTC_Bcd2ToByte>
 8005730:	4603      	mov	r3, r0
 8005732:	461a      	mov	r2, r3
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 8005738:	68bb      	ldr	r3, [r7, #8]
 800573a:	789b      	ldrb	r3, [r3, #2]
 800573c:	4618      	mov	r0, r3
 800573e:	f000 f9f4 	bl	8005b2a <RTC_Bcd2ToByte>
 8005742:	4603      	mov	r3, r0
 8005744:	461a      	mov	r2, r3
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	739a      	strb	r2, [r3, #14]
  }

  /* WeekDay set by user can be ignored because automatically calculated */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	7bdb      	ldrb	r3, [r3, #15]
 800574e:	4618      	mov	r0, r3
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	7b59      	ldrb	r1, [r3, #13]
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	7b9b      	ldrb	r3, [r3, #14]
 8005758:	461a      	mov	r2, r3
 800575a:	f000 faed 	bl	8005d38 <RTC_WeekDayNum>
 800575e:	4603      	mov	r3, r0
 8005760:	461a      	mov	r2, r3
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	731a      	strb	r2, [r3, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	7b1a      	ldrb	r2, [r3, #12]
 800576a:	68bb      	ldr	r3, [r7, #8]
 800576c:	701a      	strb	r2, [r3, #0]

  /* Reset time to be aligned on the same day */
  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 800576e:	68f8      	ldr	r0, [r7, #12]
 8005770:	f000 f8d7 	bl	8005922 <RTC_ReadTimeCounter>
 8005774:	61f8      	str	r0, [r7, #28]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 8005776:	69fb      	ldr	r3, [r7, #28]
 8005778:	4a26      	ldr	r2, [pc, #152]	; (8005814 <HAL_RTC_SetDate+0x160>)
 800577a:	fba2 2303 	umull	r2, r3, r2, r3
 800577e:	0adb      	lsrs	r3, r3, #11
 8005780:	617b      	str	r3, [r7, #20]
  if (hours > 24U)
 8005782:	697b      	ldr	r3, [r7, #20]
 8005784:	2b18      	cmp	r3, #24
 8005786:	d93a      	bls.n	80057fe <HAL_RTC_SetDate+0x14a>
  {
    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= ((hours / 24U) * 24U * 3600U);
 8005788:	697b      	ldr	r3, [r7, #20]
 800578a:	4a23      	ldr	r2, [pc, #140]	; (8005818 <HAL_RTC_SetDate+0x164>)
 800578c:	fba2 2303 	umull	r2, r3, r2, r3
 8005790:	091b      	lsrs	r3, r3, #4
 8005792:	4a22      	ldr	r2, [pc, #136]	; (800581c <HAL_RTC_SetDate+0x168>)
 8005794:	fb02 f303 	mul.w	r3, r2, r3
 8005798:	69fa      	ldr	r2, [r7, #28]
 800579a:	1ad3      	subs	r3, r2, r3
 800579c:	61fb      	str	r3, [r7, #28]
    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 800579e:	69f9      	ldr	r1, [r7, #28]
 80057a0:	68f8      	ldr	r0, [r7, #12]
 80057a2:	f000 f8ee 	bl	8005982 <RTC_WriteTimeCounter>
 80057a6:	4603      	mov	r3, r0
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d007      	beq.n	80057bc <HAL_RTC_SetDate+0x108>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	2204      	movs	r2, #4
 80057b0:	745a      	strb	r2, [r3, #17]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	2200      	movs	r2, #0
 80057b6:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
 80057b8:	2301      	movs	r3, #1
 80057ba:	e027      	b.n	800580c <HAL_RTC_SetDate+0x158>
    }

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 80057bc:	68f8      	ldr	r0, [r7, #12]
 80057be:	f000 f907 	bl	80059d0 <RTC_ReadAlarmCounter>
 80057c2:	61b8      	str	r0, [r7, #24]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 80057c4:	69bb      	ldr	r3, [r7, #24]
 80057c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057ca:	d018      	beq.n	80057fe <HAL_RTC_SetDate+0x14a>
    {
      if (counter_alarm < counter_time)
 80057cc:	69ba      	ldr	r2, [r7, #24]
 80057ce:	69fb      	ldr	r3, [r7, #28]
 80057d0:	429a      	cmp	r2, r3
 80057d2:	d214      	bcs.n	80057fe <HAL_RTC_SetDate+0x14a>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 80057d4:	69bb      	ldr	r3, [r7, #24]
 80057d6:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 80057da:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80057de:	61bb      	str	r3, [r7, #24]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 80057e0:	69b9      	ldr	r1, [r7, #24]
 80057e2:	68f8      	ldr	r0, [r7, #12]
 80057e4:	f000 f90d 	bl	8005a02 <RTC_WriteAlarmCounter>
 80057e8:	4603      	mov	r3, r0
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d007      	beq.n	80057fe <HAL_RTC_SetDate+0x14a>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	2204      	movs	r2, #4
 80057f2:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	2200      	movs	r2, #0
 80057f8:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 80057fa:	2301      	movs	r3, #1
 80057fc:	e006      	b.n	800580c <HAL_RTC_SetDate+0x158>
    }


  }

  hrtc->State = HAL_RTC_STATE_READY ;
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	2201      	movs	r2, #1
 8005802:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	2200      	movs	r2, #0
 8005808:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 800580a:	2300      	movs	r3, #0
}
 800580c:	4618      	mov	r0, r3
 800580e:	3720      	adds	r7, #32
 8005810:	46bd      	mov	sp, r7
 8005812:	bd80      	pop	{r7, pc}
 8005814:	91a2b3c5 	.word	0x91a2b3c5
 8005818:	aaaaaaab 	.word	0xaaaaaaab
 800581c:	00015180 	.word	0x00015180

08005820 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005820:	b580      	push	{r7, lr}
 8005822:	b086      	sub	sp, #24
 8005824:	af00      	add	r7, sp, #0
 8005826:	60f8      	str	r0, [r7, #12]
 8005828:	60b9      	str	r1, [r7, #8]
 800582a:	607a      	str	r2, [r7, #4]
  RTC_TimeTypeDef stime = {0U};
 800582c:	f107 0314 	add.w	r3, r7, #20
 8005830:	2100      	movs	r1, #0
 8005832:	460a      	mov	r2, r1
 8005834:	801a      	strh	r2, [r3, #0]
 8005836:	460a      	mov	r2, r1
 8005838:	709a      	strb	r2, [r3, #2]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	2b00      	cmp	r3, #0
 800583e:	d002      	beq.n	8005846 <HAL_RTC_GetDate+0x26>
 8005840:	68bb      	ldr	r3, [r7, #8]
 8005842:	2b00      	cmp	r3, #0
 8005844:	d101      	bne.n	800584a <HAL_RTC_GetDate+0x2a>
  {
    return HAL_ERROR;
 8005846:	2301      	movs	r3, #1
 8005848:	e03a      	b.n	80058c0 <HAL_RTC_GetDate+0xa0>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Call HAL_RTC_GetTime function to update date if counter higher than 24 hours */
  if (HAL_RTC_GetTime(hrtc, &stime, RTC_FORMAT_BIN) != HAL_OK)
 800584a:	f107 0314 	add.w	r3, r7, #20
 800584e:	2200      	movs	r2, #0
 8005850:	4619      	mov	r1, r3
 8005852:	68f8      	ldr	r0, [r7, #12]
 8005854:	f7ff fe56 	bl	8005504 <HAL_RTC_GetTime>
 8005858:	4603      	mov	r3, r0
 800585a:	2b00      	cmp	r3, #0
 800585c:	d001      	beq.n	8005862 <HAL_RTC_GetDate+0x42>
  {
    return HAL_ERROR;
 800585e:	2301      	movs	r3, #1
 8005860:	e02e      	b.n	80058c0 <HAL_RTC_GetDate+0xa0>
  }

  /* Fill the structure fields with the read parameters */
  sDate->WeekDay  = hrtc->DateToUpdate.WeekDay;
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	7b1a      	ldrb	r2, [r3, #12]
 8005866:	68bb      	ldr	r3, [r7, #8]
 8005868:	701a      	strb	r2, [r3, #0]
  sDate->Year     = hrtc->DateToUpdate.Year;
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	7bda      	ldrb	r2, [r3, #15]
 800586e:	68bb      	ldr	r3, [r7, #8]
 8005870:	70da      	strb	r2, [r3, #3]
  sDate->Month    = hrtc->DateToUpdate.Month;
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	7b5a      	ldrb	r2, [r3, #13]
 8005876:	68bb      	ldr	r3, [r7, #8]
 8005878:	705a      	strb	r2, [r3, #1]
  sDate->Date     = hrtc->DateToUpdate.Date;
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	7b9a      	ldrb	r2, [r3, #14]
 800587e:	68bb      	ldr	r3, [r7, #8]
 8005880:	709a      	strb	r2, [r3, #2]

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	2b00      	cmp	r3, #0
 8005886:	d01a      	beq.n	80058be <HAL_RTC_GetDate+0x9e>
  {
    /* Convert the date structure parameters to BCD format */
    sDate->Year   = (uint8_t)RTC_ByteToBcd2(sDate->Year);
 8005888:	68bb      	ldr	r3, [r7, #8]
 800588a:	78db      	ldrb	r3, [r3, #3]
 800588c:	4618      	mov	r0, r3
 800588e:	f000 f92f 	bl	8005af0 <RTC_ByteToBcd2>
 8005892:	4603      	mov	r3, r0
 8005894:	461a      	mov	r2, r3
 8005896:	68bb      	ldr	r3, [r7, #8]
 8005898:	70da      	strb	r2, [r3, #3]
    sDate->Month  = (uint8_t)RTC_ByteToBcd2(sDate->Month);
 800589a:	68bb      	ldr	r3, [r7, #8]
 800589c:	785b      	ldrb	r3, [r3, #1]
 800589e:	4618      	mov	r0, r3
 80058a0:	f000 f926 	bl	8005af0 <RTC_ByteToBcd2>
 80058a4:	4603      	mov	r3, r0
 80058a6:	461a      	mov	r2, r3
 80058a8:	68bb      	ldr	r3, [r7, #8]
 80058aa:	705a      	strb	r2, [r3, #1]
    sDate->Date   = (uint8_t)RTC_ByteToBcd2(sDate->Date);
 80058ac:	68bb      	ldr	r3, [r7, #8]
 80058ae:	789b      	ldrb	r3, [r3, #2]
 80058b0:	4618      	mov	r0, r3
 80058b2:	f000 f91d 	bl	8005af0 <RTC_ByteToBcd2>
 80058b6:	4603      	mov	r3, r0
 80058b8:	461a      	mov	r2, r3
 80058ba:	68bb      	ldr	r3, [r7, #8]
 80058bc:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80058be:	2300      	movs	r3, #0
}
 80058c0:	4618      	mov	r0, r3
 80058c2:	3718      	adds	r7, #24
 80058c4:	46bd      	mov	sp, r7
 80058c6:	bd80      	pop	{r7, pc}

080058c8 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80058c8:	b580      	push	{r7, lr}
 80058ca:	b084      	sub	sp, #16
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80058d0:	2300      	movs	r3, #0
 80058d2:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d101      	bne.n	80058de <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 80058da:	2301      	movs	r3, #1
 80058dc:	e01d      	b.n	800591a <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	685a      	ldr	r2, [r3, #4]
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	f022 0208 	bic.w	r2, r2, #8
 80058ec:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 80058ee:	f7fe fc93 	bl	8004218 <HAL_GetTick>
 80058f2:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 80058f4:	e009      	b.n	800590a <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80058f6:	f7fe fc8f 	bl	8004218 <HAL_GetTick>
 80058fa:	4602      	mov	r2, r0
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	1ad3      	subs	r3, r2, r3
 8005900:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005904:	d901      	bls.n	800590a <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 8005906:	2303      	movs	r3, #3
 8005908:	e007      	b.n	800591a <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	685b      	ldr	r3, [r3, #4]
 8005910:	f003 0308 	and.w	r3, r3, #8
 8005914:	2b00      	cmp	r3, #0
 8005916:	d0ee      	beq.n	80058f6 <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 8005918:	2300      	movs	r3, #0
}
 800591a:	4618      	mov	r0, r3
 800591c:	3710      	adds	r7, #16
 800591e:	46bd      	mov	sp, r7
 8005920:	bd80      	pop	{r7, pc}

08005922 <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 8005922:	b480      	push	{r7}
 8005924:	b087      	sub	sp, #28
 8005926:	af00      	add	r7, sp, #0
 8005928:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 800592a:	2300      	movs	r3, #0
 800592c:	827b      	strh	r3, [r7, #18]
 800592e:	2300      	movs	r3, #0
 8005930:	823b      	strh	r3, [r7, #16]
 8005932:	2300      	movs	r3, #0
 8005934:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 8005936:	2300      	movs	r3, #0
 8005938:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	699b      	ldr	r3, [r3, #24]
 8005940:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	69db      	ldr	r3, [r3, #28]
 8005948:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	699b      	ldr	r3, [r3, #24]
 8005950:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 8005952:	8a7a      	ldrh	r2, [r7, #18]
 8005954:	8a3b      	ldrh	r3, [r7, #16]
 8005956:	429a      	cmp	r2, r3
 8005958:	d008      	beq.n	800596c <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 800595a:	8a3b      	ldrh	r3, [r7, #16]
 800595c:	041a      	lsls	r2, r3, #16
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	69db      	ldr	r3, [r3, #28]
 8005964:	b29b      	uxth	r3, r3
 8005966:	4313      	orrs	r3, r2
 8005968:	617b      	str	r3, [r7, #20]
 800596a:	e004      	b.n	8005976 <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 800596c:	8a7b      	ldrh	r3, [r7, #18]
 800596e:	041a      	lsls	r2, r3, #16
 8005970:	89fb      	ldrh	r3, [r7, #14]
 8005972:	4313      	orrs	r3, r2
 8005974:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 8005976:	697b      	ldr	r3, [r7, #20]
}
 8005978:	4618      	mov	r0, r3
 800597a:	371c      	adds	r7, #28
 800597c:	46bd      	mov	sp, r7
 800597e:	bc80      	pop	{r7}
 8005980:	4770      	bx	lr

08005982 <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 8005982:	b580      	push	{r7, lr}
 8005984:	b084      	sub	sp, #16
 8005986:	af00      	add	r7, sp, #0
 8005988:	6078      	str	r0, [r7, #4]
 800598a:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800598c:	2300      	movs	r3, #0
 800598e:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8005990:	6878      	ldr	r0, [r7, #4]
 8005992:	f000 f85d 	bl	8005a50 <RTC_EnterInitMode>
 8005996:	4603      	mov	r3, r0
 8005998:	2b00      	cmp	r3, #0
 800599a:	d002      	beq.n	80059a2 <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 800599c:	2301      	movs	r3, #1
 800599e:	73fb      	strb	r3, [r7, #15]
 80059a0:	e011      	b.n	80059c6 <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	683a      	ldr	r2, [r7, #0]
 80059a8:	0c12      	lsrs	r2, r2, #16
 80059aa:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	683a      	ldr	r2, [r7, #0]
 80059b2:	b292      	uxth	r2, r2
 80059b4:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 80059b6:	6878      	ldr	r0, [r7, #4]
 80059b8:	f000 f872 	bl	8005aa0 <RTC_ExitInitMode>
 80059bc:	4603      	mov	r3, r0
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d001      	beq.n	80059c6 <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 80059c2:	2301      	movs	r3, #1
 80059c4:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80059c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80059c8:	4618      	mov	r0, r3
 80059ca:	3710      	adds	r7, #16
 80059cc:	46bd      	mov	sp, r7
 80059ce:	bd80      	pop	{r7, pc}

080059d0 <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 80059d0:	b480      	push	{r7}
 80059d2:	b085      	sub	sp, #20
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 80059d8:	2300      	movs	r3, #0
 80059da:	81fb      	strh	r3, [r7, #14]
 80059dc:	2300      	movs	r3, #0
 80059de:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	6a1b      	ldr	r3, [r3, #32]
 80059e6:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059ee:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 80059f0:	89fb      	ldrh	r3, [r7, #14]
 80059f2:	041a      	lsls	r2, r3, #16
 80059f4:	89bb      	ldrh	r3, [r7, #12]
 80059f6:	4313      	orrs	r3, r2
}
 80059f8:	4618      	mov	r0, r3
 80059fa:	3714      	adds	r7, #20
 80059fc:	46bd      	mov	sp, r7
 80059fe:	bc80      	pop	{r7}
 8005a00:	4770      	bx	lr

08005a02 <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 8005a02:	b580      	push	{r7, lr}
 8005a04:	b084      	sub	sp, #16
 8005a06:	af00      	add	r7, sp, #0
 8005a08:	6078      	str	r0, [r7, #4]
 8005a0a:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005a0c:	2300      	movs	r3, #0
 8005a0e:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8005a10:	6878      	ldr	r0, [r7, #4]
 8005a12:	f000 f81d 	bl	8005a50 <RTC_EnterInitMode>
 8005a16:	4603      	mov	r3, r0
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d002      	beq.n	8005a22 <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 8005a1c:	2301      	movs	r3, #1
 8005a1e:	73fb      	strb	r3, [r7, #15]
 8005a20:	e011      	b.n	8005a46 <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	683a      	ldr	r2, [r7, #0]
 8005a28:	0c12      	lsrs	r2, r2, #16
 8005a2a:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	683a      	ldr	r2, [r7, #0]
 8005a32:	b292      	uxth	r2, r2
 8005a34:	625a      	str	r2, [r3, #36]	; 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8005a36:	6878      	ldr	r0, [r7, #4]
 8005a38:	f000 f832 	bl	8005aa0 <RTC_ExitInitMode>
 8005a3c:	4603      	mov	r3, r0
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d001      	beq.n	8005a46 <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 8005a42:	2301      	movs	r3, #1
 8005a44:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8005a46:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a48:	4618      	mov	r0, r3
 8005a4a:	3710      	adds	r7, #16
 8005a4c:	46bd      	mov	sp, r7
 8005a4e:	bd80      	pop	{r7, pc}

08005a50 <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8005a50:	b580      	push	{r7, lr}
 8005a52:	b084      	sub	sp, #16
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005a58:	2300      	movs	r3, #0
 8005a5a:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 8005a5c:	f7fe fbdc 	bl	8004218 <HAL_GetTick>
 8005a60:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8005a62:	e009      	b.n	8005a78 <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8005a64:	f7fe fbd8 	bl	8004218 <HAL_GetTick>
 8005a68:	4602      	mov	r2, r0
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	1ad3      	subs	r3, r2, r3
 8005a6e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005a72:	d901      	bls.n	8005a78 <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 8005a74:	2303      	movs	r3, #3
 8005a76:	e00f      	b.n	8005a98 <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	685b      	ldr	r3, [r3, #4]
 8005a7e:	f003 0320 	and.w	r3, r3, #32
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d0ee      	beq.n	8005a64 <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	685a      	ldr	r2, [r3, #4]
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	f042 0210 	orr.w	r2, r2, #16
 8005a94:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 8005a96:	2300      	movs	r3, #0
}
 8005a98:	4618      	mov	r0, r3
 8005a9a:	3710      	adds	r7, #16
 8005a9c:	46bd      	mov	sp, r7
 8005a9e:	bd80      	pop	{r7, pc}

08005aa0 <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8005aa0:	b580      	push	{r7, lr}
 8005aa2:	b084      	sub	sp, #16
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005aa8:	2300      	movs	r3, #0
 8005aaa:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	685a      	ldr	r2, [r3, #4]
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	f022 0210 	bic.w	r2, r2, #16
 8005aba:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8005abc:	f7fe fbac 	bl	8004218 <HAL_GetTick>
 8005ac0:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8005ac2:	e009      	b.n	8005ad8 <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8005ac4:	f7fe fba8 	bl	8004218 <HAL_GetTick>
 8005ac8:	4602      	mov	r2, r0
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	1ad3      	subs	r3, r2, r3
 8005ace:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005ad2:	d901      	bls.n	8005ad8 <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 8005ad4:	2303      	movs	r3, #3
 8005ad6:	e007      	b.n	8005ae8 <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	685b      	ldr	r3, [r3, #4]
 8005ade:	f003 0320 	and.w	r3, r3, #32
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d0ee      	beq.n	8005ac4 <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 8005ae6:	2300      	movs	r3, #0
}
 8005ae8:	4618      	mov	r0, r3
 8005aea:	3710      	adds	r7, #16
 8005aec:	46bd      	mov	sp, r7
 8005aee:	bd80      	pop	{r7, pc}

08005af0 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value: Byte to be converted
  * @retval Converted byte
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8005af0:	b480      	push	{r7}
 8005af2:	b085      	sub	sp, #20
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	4603      	mov	r3, r0
 8005af8:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8005afa:	2300      	movs	r3, #0
 8005afc:	60fb      	str	r3, [r7, #12]

  while (Value >= 10U)
 8005afe:	e005      	b.n	8005b0c <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	3301      	adds	r3, #1
 8005b04:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8005b06:	79fb      	ldrb	r3, [r7, #7]
 8005b08:	3b0a      	subs	r3, #10
 8005b0a:	71fb      	strb	r3, [r7, #7]
  while (Value >= 10U)
 8005b0c:	79fb      	ldrb	r3, [r7, #7]
 8005b0e:	2b09      	cmp	r3, #9
 8005b10:	d8f6      	bhi.n	8005b00 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	b2db      	uxtb	r3, r3
 8005b16:	011b      	lsls	r3, r3, #4
 8005b18:	b2da      	uxtb	r2, r3
 8005b1a:	79fb      	ldrb	r3, [r7, #7]
 8005b1c:	4313      	orrs	r3, r2
 8005b1e:	b2db      	uxtb	r3, r3
}
 8005b20:	4618      	mov	r0, r3
 8005b22:	3714      	adds	r7, #20
 8005b24:	46bd      	mov	sp, r7
 8005b26:	bc80      	pop	{r7}
 8005b28:	4770      	bx	lr

08005b2a <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8005b2a:	b480      	push	{r7}
 8005b2c:	b085      	sub	sp, #20
 8005b2e:	af00      	add	r7, sp, #0
 8005b30:	4603      	mov	r3, r0
 8005b32:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8005b34:	2300      	movs	r3, #0
 8005b36:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 8005b38:	79fb      	ldrb	r3, [r7, #7]
 8005b3a:	091b      	lsrs	r3, r3, #4
 8005b3c:	b2db      	uxtb	r3, r3
 8005b3e:	461a      	mov	r2, r3
 8005b40:	4613      	mov	r3, r2
 8005b42:	009b      	lsls	r3, r3, #2
 8005b44:	4413      	add	r3, r2
 8005b46:	005b      	lsls	r3, r3, #1
 8005b48:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8005b4a:	79fb      	ldrb	r3, [r7, #7]
 8005b4c:	f003 030f 	and.w	r3, r3, #15
 8005b50:	b2da      	uxtb	r2, r3
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	b2db      	uxtb	r3, r3
 8005b56:	4413      	add	r3, r2
 8005b58:	b2db      	uxtb	r3, r3
}
 8005b5a:	4618      	mov	r0, r3
 8005b5c:	3714      	adds	r7, #20
 8005b5e:	46bd      	mov	sp, r7
 8005b60:	bc80      	pop	{r7}
 8005b62:	4770      	bx	lr

08005b64 <RTC_DateUpdate>:
  *                the configuration information for RTC.
  * @param  DayElapsed: Number of days elapsed from last date update
  * @retval None
  */
static void RTC_DateUpdate(RTC_HandleTypeDef *hrtc, uint32_t DayElapsed)
{
 8005b64:	b580      	push	{r7, lr}
 8005b66:	b086      	sub	sp, #24
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	6078      	str	r0, [r7, #4]
 8005b6c:	6039      	str	r1, [r7, #0]
  uint32_t year = 0U, month = 0U, day = 0U;
 8005b6e:	2300      	movs	r3, #0
 8005b70:	617b      	str	r3, [r7, #20]
 8005b72:	2300      	movs	r3, #0
 8005b74:	613b      	str	r3, [r7, #16]
 8005b76:	2300      	movs	r3, #0
 8005b78:	60fb      	str	r3, [r7, #12]
  uint32_t loop = 0U;
 8005b7a:	2300      	movs	r3, #0
 8005b7c:	60bb      	str	r3, [r7, #8]

  /* Get the current year*/
  year = hrtc->DateToUpdate.Year;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	7bdb      	ldrb	r3, [r3, #15]
 8005b82:	617b      	str	r3, [r7, #20]

  /* Get the current month and day */
  month = hrtc->DateToUpdate.Month;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	7b5b      	ldrb	r3, [r3, #13]
 8005b88:	613b      	str	r3, [r7, #16]
  day = hrtc->DateToUpdate.Date;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	7b9b      	ldrb	r3, [r3, #14]
 8005b8e:	60fb      	str	r3, [r7, #12]

  for (loop = 0U; loop < DayElapsed; loop++)
 8005b90:	2300      	movs	r3, #0
 8005b92:	60bb      	str	r3, [r7, #8]
 8005b94:	e06f      	b.n	8005c76 <RTC_DateUpdate+0x112>
  {
    if ((month == 1U) || (month == 3U) || (month == 5U) || (month == 7U) || \
 8005b96:	693b      	ldr	r3, [r7, #16]
 8005b98:	2b01      	cmp	r3, #1
 8005b9a:	d011      	beq.n	8005bc0 <RTC_DateUpdate+0x5c>
 8005b9c:	693b      	ldr	r3, [r7, #16]
 8005b9e:	2b03      	cmp	r3, #3
 8005ba0:	d00e      	beq.n	8005bc0 <RTC_DateUpdate+0x5c>
 8005ba2:	693b      	ldr	r3, [r7, #16]
 8005ba4:	2b05      	cmp	r3, #5
 8005ba6:	d00b      	beq.n	8005bc0 <RTC_DateUpdate+0x5c>
 8005ba8:	693b      	ldr	r3, [r7, #16]
 8005baa:	2b07      	cmp	r3, #7
 8005bac:	d008      	beq.n	8005bc0 <RTC_DateUpdate+0x5c>
 8005bae:	693b      	ldr	r3, [r7, #16]
 8005bb0:	2b08      	cmp	r3, #8
 8005bb2:	d005      	beq.n	8005bc0 <RTC_DateUpdate+0x5c>
        (month == 8U) || (month == 10U) || (month == 12U))
 8005bb4:	693b      	ldr	r3, [r7, #16]
 8005bb6:	2b0a      	cmp	r3, #10
 8005bb8:	d002      	beq.n	8005bc0 <RTC_DateUpdate+0x5c>
 8005bba:	693b      	ldr	r3, [r7, #16]
 8005bbc:	2b0c      	cmp	r3, #12
 8005bbe:	d117      	bne.n	8005bf0 <RTC_DateUpdate+0x8c>
    {
      if (day < 31U)
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	2b1e      	cmp	r3, #30
 8005bc4:	d803      	bhi.n	8005bce <RTC_DateUpdate+0x6a>
      {
        day++;
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	3301      	adds	r3, #1
 8005bca:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 8005bcc:	e050      	b.n	8005c70 <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 31 */
      else
      {
        if (month != 12U)
 8005bce:	693b      	ldr	r3, [r7, #16]
 8005bd0:	2b0c      	cmp	r3, #12
 8005bd2:	d005      	beq.n	8005be0 <RTC_DateUpdate+0x7c>
        {
          month++;
 8005bd4:	693b      	ldr	r3, [r7, #16]
 8005bd6:	3301      	adds	r3, #1
 8005bd8:	613b      	str	r3, [r7, #16]
          day = 1U;
 8005bda:	2301      	movs	r3, #1
 8005bdc:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 8005bde:	e047      	b.n	8005c70 <RTC_DateUpdate+0x10c>
        }
        /* Date structure member: day = 31 & month =12 */
        else
        {
          month = 1U;
 8005be0:	2301      	movs	r3, #1
 8005be2:	613b      	str	r3, [r7, #16]
          day = 1U;
 8005be4:	2301      	movs	r3, #1
 8005be6:	60fb      	str	r3, [r7, #12]
          year++;
 8005be8:	697b      	ldr	r3, [r7, #20]
 8005bea:	3301      	adds	r3, #1
 8005bec:	617b      	str	r3, [r7, #20]
      if (day < 31U)
 8005bee:	e03f      	b.n	8005c70 <RTC_DateUpdate+0x10c>
        }
      }
    }
    else if ((month == 4U) || (month == 6U) || (month == 9U) || (month == 11U))
 8005bf0:	693b      	ldr	r3, [r7, #16]
 8005bf2:	2b04      	cmp	r3, #4
 8005bf4:	d008      	beq.n	8005c08 <RTC_DateUpdate+0xa4>
 8005bf6:	693b      	ldr	r3, [r7, #16]
 8005bf8:	2b06      	cmp	r3, #6
 8005bfa:	d005      	beq.n	8005c08 <RTC_DateUpdate+0xa4>
 8005bfc:	693b      	ldr	r3, [r7, #16]
 8005bfe:	2b09      	cmp	r3, #9
 8005c00:	d002      	beq.n	8005c08 <RTC_DateUpdate+0xa4>
 8005c02:	693b      	ldr	r3, [r7, #16]
 8005c04:	2b0b      	cmp	r3, #11
 8005c06:	d10c      	bne.n	8005c22 <RTC_DateUpdate+0xbe>
    {
      if (day < 30U)
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	2b1d      	cmp	r3, #29
 8005c0c:	d803      	bhi.n	8005c16 <RTC_DateUpdate+0xb2>
      {
        day++;
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	3301      	adds	r3, #1
 8005c12:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 8005c14:	e02c      	b.n	8005c70 <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 30 */
      else
      {
        month++;
 8005c16:	693b      	ldr	r3, [r7, #16]
 8005c18:	3301      	adds	r3, #1
 8005c1a:	613b      	str	r3, [r7, #16]
        day = 1U;
 8005c1c:	2301      	movs	r3, #1
 8005c1e:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 8005c20:	e026      	b.n	8005c70 <RTC_DateUpdate+0x10c>
      }
    }
    else if (month == 2U)
 8005c22:	693b      	ldr	r3, [r7, #16]
 8005c24:	2b02      	cmp	r3, #2
 8005c26:	d123      	bne.n	8005c70 <RTC_DateUpdate+0x10c>
    {
      if (day < 28U)
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	2b1b      	cmp	r3, #27
 8005c2c:	d803      	bhi.n	8005c36 <RTC_DateUpdate+0xd2>
      {
        day++;
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	3301      	adds	r3, #1
 8005c32:	60fb      	str	r3, [r7, #12]
 8005c34:	e01c      	b.n	8005c70 <RTC_DateUpdate+0x10c>
      }
      else if (day == 28U)
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	2b1c      	cmp	r3, #28
 8005c3a:	d111      	bne.n	8005c60 <RTC_DateUpdate+0xfc>
      {
        /* Leap year */
        if (RTC_IsLeapYear(year))
 8005c3c:	697b      	ldr	r3, [r7, #20]
 8005c3e:	b29b      	uxth	r3, r3
 8005c40:	4618      	mov	r0, r3
 8005c42:	f000 f847 	bl	8005cd4 <RTC_IsLeapYear>
 8005c46:	4603      	mov	r3, r0
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d003      	beq.n	8005c54 <RTC_DateUpdate+0xf0>
        {
          day++;
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	3301      	adds	r3, #1
 8005c50:	60fb      	str	r3, [r7, #12]
 8005c52:	e00d      	b.n	8005c70 <RTC_DateUpdate+0x10c>
        }
        else
        {
          month++;
 8005c54:	693b      	ldr	r3, [r7, #16]
 8005c56:	3301      	adds	r3, #1
 8005c58:	613b      	str	r3, [r7, #16]
          day = 1U;
 8005c5a:	2301      	movs	r3, #1
 8005c5c:	60fb      	str	r3, [r7, #12]
 8005c5e:	e007      	b.n	8005c70 <RTC_DateUpdate+0x10c>
        }
      }
      else if (day == 29U)
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	2b1d      	cmp	r3, #29
 8005c64:	d104      	bne.n	8005c70 <RTC_DateUpdate+0x10c>
      {
        month++;
 8005c66:	693b      	ldr	r3, [r7, #16]
 8005c68:	3301      	adds	r3, #1
 8005c6a:	613b      	str	r3, [r7, #16]
        day = 1U;
 8005c6c:	2301      	movs	r3, #1
 8005c6e:	60fb      	str	r3, [r7, #12]
  for (loop = 0U; loop < DayElapsed; loop++)
 8005c70:	68bb      	ldr	r3, [r7, #8]
 8005c72:	3301      	adds	r3, #1
 8005c74:	60bb      	str	r3, [r7, #8]
 8005c76:	68ba      	ldr	r2, [r7, #8]
 8005c78:	683b      	ldr	r3, [r7, #0]
 8005c7a:	429a      	cmp	r2, r3
 8005c7c:	d38b      	bcc.n	8005b96 <RTC_DateUpdate+0x32>
      }
    }
  }
HAL_RTCEx_BKUPWrite(hrtc,RTC_BKP_DR6,(uint32_t )day);
 8005c7e:	68fa      	ldr	r2, [r7, #12]
 8005c80:	2106      	movs	r1, #6
 8005c82:	6878      	ldr	r0, [r7, #4]
 8005c84:	f000 f8d0 	bl	8005e28 <HAL_RTCEx_BKUPWrite>
HAL_RTCEx_BKUPWrite(hrtc,RTC_BKP_DR7,(uint32_t )month);
 8005c88:	693a      	ldr	r2, [r7, #16]
 8005c8a:	2107      	movs	r1, #7
 8005c8c:	6878      	ldr	r0, [r7, #4]
 8005c8e:	f000 f8cb 	bl	8005e28 <HAL_RTCEx_BKUPWrite>
HAL_RTCEx_BKUPWrite(hrtc,RTC_BKP_DR8,(uint32_t )year);
 8005c92:	697a      	ldr	r2, [r7, #20]
 8005c94:	2108      	movs	r1, #8
 8005c96:	6878      	ldr	r0, [r7, #4]
 8005c98:	f000 f8c6 	bl	8005e28 <HAL_RTCEx_BKUPWrite>
  /* Update year */
  hrtc->DateToUpdate.Year = year;
 8005c9c:	697b      	ldr	r3, [r7, #20]
 8005c9e:	b2da      	uxtb	r2, r3
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	73da      	strb	r2, [r3, #15]

  /* Update day and month */
  hrtc->DateToUpdate.Month = month;
 8005ca4:	693b      	ldr	r3, [r7, #16]
 8005ca6:	b2da      	uxtb	r2, r3
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	735a      	strb	r2, [r3, #13]
  hrtc->DateToUpdate.Date = day;
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	b2da      	uxtb	r2, r3
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	739a      	strb	r2, [r3, #14]

  /* Update day of the week */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(year, month, day);
 8005cb4:	693b      	ldr	r3, [r7, #16]
 8005cb6:	b2db      	uxtb	r3, r3
 8005cb8:	68fa      	ldr	r2, [r7, #12]
 8005cba:	b2d2      	uxtb	r2, r2
 8005cbc:	4619      	mov	r1, r3
 8005cbe:	6978      	ldr	r0, [r7, #20]
 8005cc0:	f000 f83a 	bl	8005d38 <RTC_WeekDayNum>
 8005cc4:	4603      	mov	r3, r0
 8005cc6:	461a      	mov	r2, r3
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	731a      	strb	r2, [r3, #12]



}
 8005ccc:	bf00      	nop
 8005cce:	3718      	adds	r7, #24
 8005cd0:	46bd      	mov	sp, r7
 8005cd2:	bd80      	pop	{r7, pc}

08005cd4 <RTC_IsLeapYear>:
  * @param  nYear  year to check
  * @retval 1: leap year
  *         0: not leap year
  */
static uint8_t RTC_IsLeapYear(uint16_t nYear)
{
 8005cd4:	b480      	push	{r7}
 8005cd6:	b083      	sub	sp, #12
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	4603      	mov	r3, r0
 8005cdc:	80fb      	strh	r3, [r7, #6]
  if ((nYear % 4U) != 0U)
 8005cde:	88fb      	ldrh	r3, [r7, #6]
 8005ce0:	f003 0303 	and.w	r3, r3, #3
 8005ce4:	b29b      	uxth	r3, r3
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d001      	beq.n	8005cee <RTC_IsLeapYear+0x1a>
  {
    return 0U;
 8005cea:	2300      	movs	r3, #0
 8005cec:	e01d      	b.n	8005d2a <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 100U) != 0U)
 8005cee:	88fb      	ldrh	r3, [r7, #6]
 8005cf0:	4a10      	ldr	r2, [pc, #64]	; (8005d34 <RTC_IsLeapYear+0x60>)
 8005cf2:	fba2 1203 	umull	r1, r2, r2, r3
 8005cf6:	0952      	lsrs	r2, r2, #5
 8005cf8:	2164      	movs	r1, #100	; 0x64
 8005cfa:	fb01 f202 	mul.w	r2, r1, r2
 8005cfe:	1a9b      	subs	r3, r3, r2
 8005d00:	b29b      	uxth	r3, r3
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d001      	beq.n	8005d0a <RTC_IsLeapYear+0x36>
  {
    return 1U;
 8005d06:	2301      	movs	r3, #1
 8005d08:	e00f      	b.n	8005d2a <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 400U) == 0U)
 8005d0a:	88fb      	ldrh	r3, [r7, #6]
 8005d0c:	4a09      	ldr	r2, [pc, #36]	; (8005d34 <RTC_IsLeapYear+0x60>)
 8005d0e:	fba2 1203 	umull	r1, r2, r2, r3
 8005d12:	09d2      	lsrs	r2, r2, #7
 8005d14:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8005d18:	fb01 f202 	mul.w	r2, r1, r2
 8005d1c:	1a9b      	subs	r3, r3, r2
 8005d1e:	b29b      	uxth	r3, r3
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d101      	bne.n	8005d28 <RTC_IsLeapYear+0x54>
  {
    return 1U;
 8005d24:	2301      	movs	r3, #1
 8005d26:	e000      	b.n	8005d2a <RTC_IsLeapYear+0x56>
  }
  else
  {
    return 0U;
 8005d28:	2300      	movs	r3, #0
  }
}
 8005d2a:	4618      	mov	r0, r3
 8005d2c:	370c      	adds	r7, #12
 8005d2e:	46bd      	mov	sp, r7
 8005d30:	bc80      	pop	{r7}
 8005d32:	4770      	bx	lr
 8005d34:	51eb851f 	.word	0x51eb851f

08005d38 <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 8005d38:	b480      	push	{r7}
 8005d3a:	b085      	sub	sp, #20
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	6078      	str	r0, [r7, #4]
 8005d40:	460b      	mov	r3, r1
 8005d42:	70fb      	strb	r3, [r7, #3]
 8005d44:	4613      	mov	r3, r2
 8005d46:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 8005d48:	2300      	movs	r3, #0
 8005d4a:	60bb      	str	r3, [r7, #8]
 8005d4c:	2300      	movs	r3, #0
 8005d4e:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8005d56:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 8005d58:	78fb      	ldrb	r3, [r7, #3]
 8005d5a:	2b02      	cmp	r3, #2
 8005d5c:	d82d      	bhi.n	8005dba <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 8005d5e:	78fa      	ldrb	r2, [r7, #3]
 8005d60:	4613      	mov	r3, r2
 8005d62:	005b      	lsls	r3, r3, #1
 8005d64:	4413      	add	r3, r2
 8005d66:	00db      	lsls	r3, r3, #3
 8005d68:	1a9b      	subs	r3, r3, r2
 8005d6a:	4a2c      	ldr	r2, [pc, #176]	; (8005e1c <RTC_WeekDayNum+0xe4>)
 8005d6c:	fba2 2303 	umull	r2, r3, r2, r3
 8005d70:	085a      	lsrs	r2, r3, #1
 8005d72:	78bb      	ldrb	r3, [r7, #2]
 8005d74:	441a      	add	r2, r3
 8005d76:	68bb      	ldr	r3, [r7, #8]
 8005d78:	441a      	add	r2, r3
 8005d7a:	68bb      	ldr	r3, [r7, #8]
 8005d7c:	3b01      	subs	r3, #1
 8005d7e:	089b      	lsrs	r3, r3, #2
 8005d80:	441a      	add	r2, r3
 8005d82:	68bb      	ldr	r3, [r7, #8]
 8005d84:	3b01      	subs	r3, #1
 8005d86:	4926      	ldr	r1, [pc, #152]	; (8005e20 <RTC_WeekDayNum+0xe8>)
 8005d88:	fba1 1303 	umull	r1, r3, r1, r3
 8005d8c:	095b      	lsrs	r3, r3, #5
 8005d8e:	1ad2      	subs	r2, r2, r3
 8005d90:	68bb      	ldr	r3, [r7, #8]
 8005d92:	3b01      	subs	r3, #1
 8005d94:	4922      	ldr	r1, [pc, #136]	; (8005e20 <RTC_WeekDayNum+0xe8>)
 8005d96:	fba1 1303 	umull	r1, r3, r1, r3
 8005d9a:	09db      	lsrs	r3, r3, #7
 8005d9c:	4413      	add	r3, r2
 8005d9e:	1d1a      	adds	r2, r3, #4
 8005da0:	4b20      	ldr	r3, [pc, #128]	; (8005e24 <RTC_WeekDayNum+0xec>)
 8005da2:	fba3 1302 	umull	r1, r3, r3, r2
 8005da6:	1ad1      	subs	r1, r2, r3
 8005da8:	0849      	lsrs	r1, r1, #1
 8005daa:	440b      	add	r3, r1
 8005dac:	0899      	lsrs	r1, r3, #2
 8005dae:	460b      	mov	r3, r1
 8005db0:	00db      	lsls	r3, r3, #3
 8005db2:	1a5b      	subs	r3, r3, r1
 8005db4:	1ad3      	subs	r3, r2, r3
 8005db6:	60fb      	str	r3, [r7, #12]
 8005db8:	e029      	b.n	8005e0e <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 8005dba:	78fa      	ldrb	r2, [r7, #3]
 8005dbc:	4613      	mov	r3, r2
 8005dbe:	005b      	lsls	r3, r3, #1
 8005dc0:	4413      	add	r3, r2
 8005dc2:	00db      	lsls	r3, r3, #3
 8005dc4:	1a9b      	subs	r3, r3, r2
 8005dc6:	4a15      	ldr	r2, [pc, #84]	; (8005e1c <RTC_WeekDayNum+0xe4>)
 8005dc8:	fba2 2303 	umull	r2, r3, r2, r3
 8005dcc:	085a      	lsrs	r2, r3, #1
 8005dce:	78bb      	ldrb	r3, [r7, #2]
 8005dd0:	441a      	add	r2, r3
 8005dd2:	68bb      	ldr	r3, [r7, #8]
 8005dd4:	441a      	add	r2, r3
 8005dd6:	68bb      	ldr	r3, [r7, #8]
 8005dd8:	089b      	lsrs	r3, r3, #2
 8005dda:	441a      	add	r2, r3
 8005ddc:	68bb      	ldr	r3, [r7, #8]
 8005dde:	4910      	ldr	r1, [pc, #64]	; (8005e20 <RTC_WeekDayNum+0xe8>)
 8005de0:	fba1 1303 	umull	r1, r3, r1, r3
 8005de4:	095b      	lsrs	r3, r3, #5
 8005de6:	1ad2      	subs	r2, r2, r3
 8005de8:	68bb      	ldr	r3, [r7, #8]
 8005dea:	490d      	ldr	r1, [pc, #52]	; (8005e20 <RTC_WeekDayNum+0xe8>)
 8005dec:	fba1 1303 	umull	r1, r3, r1, r3
 8005df0:	09db      	lsrs	r3, r3, #7
 8005df2:	4413      	add	r3, r2
 8005df4:	1c9a      	adds	r2, r3, #2
 8005df6:	4b0b      	ldr	r3, [pc, #44]	; (8005e24 <RTC_WeekDayNum+0xec>)
 8005df8:	fba3 1302 	umull	r1, r3, r3, r2
 8005dfc:	1ad1      	subs	r1, r2, r3
 8005dfe:	0849      	lsrs	r1, r1, #1
 8005e00:	440b      	add	r3, r1
 8005e02:	0899      	lsrs	r1, r3, #2
 8005e04:	460b      	mov	r3, r1
 8005e06:	00db      	lsls	r3, r3, #3
 8005e08:	1a5b      	subs	r3, r3, r1
 8005e0a:	1ad3      	subs	r3, r2, r3
 8005e0c:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	b2db      	uxtb	r3, r3
}
 8005e12:	4618      	mov	r0, r3
 8005e14:	3714      	adds	r7, #20
 8005e16:	46bd      	mov	sp, r7
 8005e18:	bc80      	pop	{r7}
 8005e1a:	4770      	bx	lr
 8005e1c:	38e38e39 	.word	0x38e38e39
 8005e20:	51eb851f 	.word	0x51eb851f
 8005e24:	24924925 	.word	0x24924925

08005e28 <HAL_RTCEx_BKUPWrite>:
  *                                 specify the register (depending devices).
  * @param  Data: Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8005e28:	b480      	push	{r7}
 8005e2a:	b087      	sub	sp, #28
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	60f8      	str	r0, [r7, #12]
 8005e30:	60b9      	str	r1, [r7, #8]
 8005e32:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 8005e34:	2300      	movs	r3, #0
 8005e36:	617b      	str	r3, [r7, #20]
  UNUSED(hrtc);

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)BKP_BASE;
 8005e38:	4b07      	ldr	r3, [pc, #28]	; (8005e58 <HAL_RTCEx_BKUPWrite+0x30>)
 8005e3a:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 8005e3c:	68bb      	ldr	r3, [r7, #8]
 8005e3e:	009b      	lsls	r3, r3, #2
 8005e40:	697a      	ldr	r2, [r7, #20]
 8005e42:	4413      	add	r3, r2
 8005e44:	617b      	str	r3, [r7, #20]

  *(__IO uint32_t *) tmp = (Data & BKP_DR1_D);
 8005e46:	697b      	ldr	r3, [r7, #20]
 8005e48:	687a      	ldr	r2, [r7, #4]
 8005e4a:	b292      	uxth	r2, r2
 8005e4c:	601a      	str	r2, [r3, #0]
}
 8005e4e:	bf00      	nop
 8005e50:	371c      	adds	r7, #28
 8005e52:	46bd      	mov	sp, r7
 8005e54:	bc80      	pop	{r7}
 8005e56:	4770      	bx	lr
 8005e58:	40006c00 	.word	0x40006c00

08005e5c <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx where x can be from 1 to 10 (or 42) to
  *                                 specify the register (depending devices).
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 8005e5c:	b480      	push	{r7}
 8005e5e:	b085      	sub	sp, #20
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	6078      	str	r0, [r7, #4]
 8005e64:	6039      	str	r1, [r7, #0]
  uint32_t backupregister = 0U;
 8005e66:	2300      	movs	r3, #0
 8005e68:	60fb      	str	r3, [r7, #12]
  uint32_t pvalue = 0U;
 8005e6a:	2300      	movs	r3, #0
 8005e6c:	60bb      	str	r3, [r7, #8]
  UNUSED(hrtc);

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  backupregister = (uint32_t)BKP_BASE;
 8005e6e:	4b08      	ldr	r3, [pc, #32]	; (8005e90 <HAL_RTCEx_BKUPRead+0x34>)
 8005e70:	60fb      	str	r3, [r7, #12]
  backupregister += (BackupRegister * 4U);
 8005e72:	683b      	ldr	r3, [r7, #0]
 8005e74:	009b      	lsls	r3, r3, #2
 8005e76:	68fa      	ldr	r2, [r7, #12]
 8005e78:	4413      	add	r3, r2
 8005e7a:	60fb      	str	r3, [r7, #12]

  pvalue = (*(__IO uint32_t *)(backupregister)) & BKP_DR1_D;
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	b29b      	uxth	r3, r3
 8005e82:	60bb      	str	r3, [r7, #8]

  /* Read the specified register */
  return pvalue;
 8005e84:	68bb      	ldr	r3, [r7, #8]
}
 8005e86:	4618      	mov	r0, r3
 8005e88:	3714      	adds	r7, #20
 8005e8a:	46bd      	mov	sp, r7
 8005e8c:	bc80      	pop	{r7}
 8005e8e:	4770      	bx	lr
 8005e90:	40006c00 	.word	0x40006c00

08005e94 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005e94:	b580      	push	{r7, lr}
 8005e96:	b082      	sub	sp, #8
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d101      	bne.n	8005ea6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005ea2:	2301      	movs	r3, #1
 8005ea4:	e076      	b.n	8005f94 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d108      	bne.n	8005ec0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	685b      	ldr	r3, [r3, #4]
 8005eb2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005eb6:	d009      	beq.n	8005ecc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	2200      	movs	r2, #0
 8005ebc:	61da      	str	r2, [r3, #28]
 8005ebe:	e005      	b.n	8005ecc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	2200      	movs	r2, #0
 8005ec4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	2200      	movs	r2, #0
 8005eca:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	2200      	movs	r2, #0
 8005ed0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005ed8:	b2db      	uxtb	r3, r3
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d106      	bne.n	8005eec <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	2200      	movs	r2, #0
 8005ee2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005ee6:	6878      	ldr	r0, [r7, #4]
 8005ee8:	f7fd ffde 	bl	8003ea8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	2202      	movs	r2, #2
 8005ef0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	681a      	ldr	r2, [r3, #0]
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005f02:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	685b      	ldr	r3, [r3, #4]
 8005f08:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	689b      	ldr	r3, [r3, #8]
 8005f10:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005f14:	431a      	orrs	r2, r3
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	68db      	ldr	r3, [r3, #12]
 8005f1a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005f1e:	431a      	orrs	r2, r3
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	691b      	ldr	r3, [r3, #16]
 8005f24:	f003 0302 	and.w	r3, r3, #2
 8005f28:	431a      	orrs	r2, r3
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	695b      	ldr	r3, [r3, #20]
 8005f2e:	f003 0301 	and.w	r3, r3, #1
 8005f32:	431a      	orrs	r2, r3
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	699b      	ldr	r3, [r3, #24]
 8005f38:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005f3c:	431a      	orrs	r2, r3
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	69db      	ldr	r3, [r3, #28]
 8005f42:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005f46:	431a      	orrs	r2, r3
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	6a1b      	ldr	r3, [r3, #32]
 8005f4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f50:	ea42 0103 	orr.w	r1, r2, r3
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f58:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	430a      	orrs	r2, r1
 8005f62:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	699b      	ldr	r3, [r3, #24]
 8005f68:	0c1a      	lsrs	r2, r3, #16
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	f002 0204 	and.w	r2, r2, #4
 8005f72:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	69da      	ldr	r2, [r3, #28]
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005f82:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	2200      	movs	r2, #0
 8005f88:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	2201      	movs	r2, #1
 8005f8e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005f92:	2300      	movs	r3, #0
}
 8005f94:	4618      	mov	r0, r3
 8005f96:	3708      	adds	r7, #8
 8005f98:	46bd      	mov	sp, r7
 8005f9a:	bd80      	pop	{r7, pc}

08005f9c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005f9c:	b580      	push	{r7, lr}
 8005f9e:	b088      	sub	sp, #32
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	60f8      	str	r0, [r7, #12]
 8005fa4:	60b9      	str	r1, [r7, #8]
 8005fa6:	603b      	str	r3, [r7, #0]
 8005fa8:	4613      	mov	r3, r2
 8005faa:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005fac:	2300      	movs	r3, #0
 8005fae:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005fb6:	2b01      	cmp	r3, #1
 8005fb8:	d101      	bne.n	8005fbe <HAL_SPI_Transmit+0x22>
 8005fba:	2302      	movs	r3, #2
 8005fbc:	e126      	b.n	800620c <HAL_SPI_Transmit+0x270>
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	2201      	movs	r2, #1
 8005fc2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005fc6:	f7fe f927 	bl	8004218 <HAL_GetTick>
 8005fca:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005fcc:	88fb      	ldrh	r3, [r7, #6]
 8005fce:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005fd6:	b2db      	uxtb	r3, r3
 8005fd8:	2b01      	cmp	r3, #1
 8005fda:	d002      	beq.n	8005fe2 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005fdc:	2302      	movs	r3, #2
 8005fde:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005fe0:	e10b      	b.n	80061fa <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8005fe2:	68bb      	ldr	r3, [r7, #8]
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d002      	beq.n	8005fee <HAL_SPI_Transmit+0x52>
 8005fe8:	88fb      	ldrh	r3, [r7, #6]
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d102      	bne.n	8005ff4 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005fee:	2301      	movs	r3, #1
 8005ff0:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005ff2:	e102      	b.n	80061fa <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	2203      	movs	r2, #3
 8005ff8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	2200      	movs	r2, #0
 8006000:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	68ba      	ldr	r2, [r7, #8]
 8006006:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	88fa      	ldrh	r2, [r7, #6]
 800600c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	88fa      	ldrh	r2, [r7, #6]
 8006012:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	2200      	movs	r2, #0
 8006018:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	2200      	movs	r2, #0
 800601e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	2200      	movs	r2, #0
 8006024:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	2200      	movs	r2, #0
 800602a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	2200      	movs	r2, #0
 8006030:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	689b      	ldr	r3, [r3, #8]
 8006036:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800603a:	d10f      	bne.n	800605c <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	681a      	ldr	r2, [r3, #0]
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800604a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	681a      	ldr	r2, [r3, #0]
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800605a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006066:	2b40      	cmp	r3, #64	; 0x40
 8006068:	d007      	beq.n	800607a <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	681a      	ldr	r2, [r3, #0]
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006078:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	68db      	ldr	r3, [r3, #12]
 800607e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006082:	d14b      	bne.n	800611c <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	685b      	ldr	r3, [r3, #4]
 8006088:	2b00      	cmp	r3, #0
 800608a:	d002      	beq.n	8006092 <HAL_SPI_Transmit+0xf6>
 800608c:	8afb      	ldrh	r3, [r7, #22]
 800608e:	2b01      	cmp	r3, #1
 8006090:	d13e      	bne.n	8006110 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006096:	881a      	ldrh	r2, [r3, #0]
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060a2:	1c9a      	adds	r2, r3, #2
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80060ac:	b29b      	uxth	r3, r3
 80060ae:	3b01      	subs	r3, #1
 80060b0:	b29a      	uxth	r2, r3
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80060b6:	e02b      	b.n	8006110 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	689b      	ldr	r3, [r3, #8]
 80060be:	f003 0302 	and.w	r3, r3, #2
 80060c2:	2b02      	cmp	r3, #2
 80060c4:	d112      	bne.n	80060ec <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060ca:	881a      	ldrh	r2, [r3, #0]
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060d6:	1c9a      	adds	r2, r3, #2
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80060e0:	b29b      	uxth	r3, r3
 80060e2:	3b01      	subs	r3, #1
 80060e4:	b29a      	uxth	r2, r3
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	86da      	strh	r2, [r3, #54]	; 0x36
 80060ea:	e011      	b.n	8006110 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80060ec:	f7fe f894 	bl	8004218 <HAL_GetTick>
 80060f0:	4602      	mov	r2, r0
 80060f2:	69bb      	ldr	r3, [r7, #24]
 80060f4:	1ad3      	subs	r3, r2, r3
 80060f6:	683a      	ldr	r2, [r7, #0]
 80060f8:	429a      	cmp	r2, r3
 80060fa:	d803      	bhi.n	8006104 <HAL_SPI_Transmit+0x168>
 80060fc:	683b      	ldr	r3, [r7, #0]
 80060fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006102:	d102      	bne.n	800610a <HAL_SPI_Transmit+0x16e>
 8006104:	683b      	ldr	r3, [r7, #0]
 8006106:	2b00      	cmp	r3, #0
 8006108:	d102      	bne.n	8006110 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800610a:	2303      	movs	r3, #3
 800610c:	77fb      	strb	r3, [r7, #31]
          goto error;
 800610e:	e074      	b.n	80061fa <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006114:	b29b      	uxth	r3, r3
 8006116:	2b00      	cmp	r3, #0
 8006118:	d1ce      	bne.n	80060b8 <HAL_SPI_Transmit+0x11c>
 800611a:	e04c      	b.n	80061b6 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	685b      	ldr	r3, [r3, #4]
 8006120:	2b00      	cmp	r3, #0
 8006122:	d002      	beq.n	800612a <HAL_SPI_Transmit+0x18e>
 8006124:	8afb      	ldrh	r3, [r7, #22]
 8006126:	2b01      	cmp	r3, #1
 8006128:	d140      	bne.n	80061ac <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	330c      	adds	r3, #12
 8006134:	7812      	ldrb	r2, [r2, #0]
 8006136:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800613c:	1c5a      	adds	r2, r3, #1
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006146:	b29b      	uxth	r3, r3
 8006148:	3b01      	subs	r3, #1
 800614a:	b29a      	uxth	r2, r3
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006150:	e02c      	b.n	80061ac <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	689b      	ldr	r3, [r3, #8]
 8006158:	f003 0302 	and.w	r3, r3, #2
 800615c:	2b02      	cmp	r3, #2
 800615e:	d113      	bne.n	8006188 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	330c      	adds	r3, #12
 800616a:	7812      	ldrb	r2, [r2, #0]
 800616c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006172:	1c5a      	adds	r2, r3, #1
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800617c:	b29b      	uxth	r3, r3
 800617e:	3b01      	subs	r3, #1
 8006180:	b29a      	uxth	r2, r3
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	86da      	strh	r2, [r3, #54]	; 0x36
 8006186:	e011      	b.n	80061ac <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006188:	f7fe f846 	bl	8004218 <HAL_GetTick>
 800618c:	4602      	mov	r2, r0
 800618e:	69bb      	ldr	r3, [r7, #24]
 8006190:	1ad3      	subs	r3, r2, r3
 8006192:	683a      	ldr	r2, [r7, #0]
 8006194:	429a      	cmp	r2, r3
 8006196:	d803      	bhi.n	80061a0 <HAL_SPI_Transmit+0x204>
 8006198:	683b      	ldr	r3, [r7, #0]
 800619a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800619e:	d102      	bne.n	80061a6 <HAL_SPI_Transmit+0x20a>
 80061a0:	683b      	ldr	r3, [r7, #0]
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d102      	bne.n	80061ac <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80061a6:	2303      	movs	r3, #3
 80061a8:	77fb      	strb	r3, [r7, #31]
          goto error;
 80061aa:	e026      	b.n	80061fa <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80061b0:	b29b      	uxth	r3, r3
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d1cd      	bne.n	8006152 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80061b6:	69ba      	ldr	r2, [r7, #24]
 80061b8:	6839      	ldr	r1, [r7, #0]
 80061ba:	68f8      	ldr	r0, [r7, #12]
 80061bc:	f000 fa62 	bl	8006684 <SPI_EndRxTxTransaction>
 80061c0:	4603      	mov	r3, r0
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d002      	beq.n	80061cc <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	2220      	movs	r2, #32
 80061ca:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	689b      	ldr	r3, [r3, #8]
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d10a      	bne.n	80061ea <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80061d4:	2300      	movs	r3, #0
 80061d6:	613b      	str	r3, [r7, #16]
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	68db      	ldr	r3, [r3, #12]
 80061de:	613b      	str	r3, [r7, #16]
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	689b      	ldr	r3, [r3, #8]
 80061e6:	613b      	str	r3, [r7, #16]
 80061e8:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d002      	beq.n	80061f8 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80061f2:	2301      	movs	r3, #1
 80061f4:	77fb      	strb	r3, [r7, #31]
 80061f6:	e000      	b.n	80061fa <HAL_SPI_Transmit+0x25e>
  }

error:
 80061f8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	2201      	movs	r2, #1
 80061fe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	2200      	movs	r2, #0
 8006206:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800620a:	7ffb      	ldrb	r3, [r7, #31]
}
 800620c:	4618      	mov	r0, r3
 800620e:	3720      	adds	r7, #32
 8006210:	46bd      	mov	sp, r7
 8006212:	bd80      	pop	{r7, pc}

08006214 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006214:	b580      	push	{r7, lr}
 8006216:	b08c      	sub	sp, #48	; 0x30
 8006218:	af00      	add	r7, sp, #0
 800621a:	60f8      	str	r0, [r7, #12]
 800621c:	60b9      	str	r1, [r7, #8]
 800621e:	607a      	str	r2, [r7, #4]
 8006220:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006222:	2301      	movs	r3, #1
 8006224:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006226:	2300      	movs	r3, #0
 8006228:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006232:	2b01      	cmp	r3, #1
 8006234:	d101      	bne.n	800623a <HAL_SPI_TransmitReceive+0x26>
 8006236:	2302      	movs	r3, #2
 8006238:	e18a      	b.n	8006550 <HAL_SPI_TransmitReceive+0x33c>
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	2201      	movs	r2, #1
 800623e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006242:	f7fd ffe9 	bl	8004218 <HAL_GetTick>
 8006246:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800624e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	685b      	ldr	r3, [r3, #4]
 8006256:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8006258:	887b      	ldrh	r3, [r7, #2]
 800625a:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800625c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006260:	2b01      	cmp	r3, #1
 8006262:	d00f      	beq.n	8006284 <HAL_SPI_TransmitReceive+0x70>
 8006264:	69fb      	ldr	r3, [r7, #28]
 8006266:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800626a:	d107      	bne.n	800627c <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	689b      	ldr	r3, [r3, #8]
 8006270:	2b00      	cmp	r3, #0
 8006272:	d103      	bne.n	800627c <HAL_SPI_TransmitReceive+0x68>
 8006274:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006278:	2b04      	cmp	r3, #4
 800627a:	d003      	beq.n	8006284 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800627c:	2302      	movs	r3, #2
 800627e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006282:	e15b      	b.n	800653c <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006284:	68bb      	ldr	r3, [r7, #8]
 8006286:	2b00      	cmp	r3, #0
 8006288:	d005      	beq.n	8006296 <HAL_SPI_TransmitReceive+0x82>
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	2b00      	cmp	r3, #0
 800628e:	d002      	beq.n	8006296 <HAL_SPI_TransmitReceive+0x82>
 8006290:	887b      	ldrh	r3, [r7, #2]
 8006292:	2b00      	cmp	r3, #0
 8006294:	d103      	bne.n	800629e <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8006296:	2301      	movs	r3, #1
 8006298:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800629c:	e14e      	b.n	800653c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80062a4:	b2db      	uxtb	r3, r3
 80062a6:	2b04      	cmp	r3, #4
 80062a8:	d003      	beq.n	80062b2 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	2205      	movs	r2, #5
 80062ae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	2200      	movs	r2, #0
 80062b6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	687a      	ldr	r2, [r7, #4]
 80062bc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	887a      	ldrh	r2, [r7, #2]
 80062c2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	887a      	ldrh	r2, [r7, #2]
 80062c8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	68ba      	ldr	r2, [r7, #8]
 80062ce:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	887a      	ldrh	r2, [r7, #2]
 80062d4:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	887a      	ldrh	r2, [r7, #2]
 80062da:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	2200      	movs	r2, #0
 80062e0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	2200      	movs	r2, #0
 80062e6:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062f2:	2b40      	cmp	r3, #64	; 0x40
 80062f4:	d007      	beq.n	8006306 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	681a      	ldr	r2, [r3, #0]
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006304:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	68db      	ldr	r3, [r3, #12]
 800630a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800630e:	d178      	bne.n	8006402 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	685b      	ldr	r3, [r3, #4]
 8006314:	2b00      	cmp	r3, #0
 8006316:	d002      	beq.n	800631e <HAL_SPI_TransmitReceive+0x10a>
 8006318:	8b7b      	ldrh	r3, [r7, #26]
 800631a:	2b01      	cmp	r3, #1
 800631c:	d166      	bne.n	80063ec <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006322:	881a      	ldrh	r2, [r3, #0]
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800632e:	1c9a      	adds	r2, r3, #2
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006338:	b29b      	uxth	r3, r3
 800633a:	3b01      	subs	r3, #1
 800633c:	b29a      	uxth	r2, r3
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006342:	e053      	b.n	80063ec <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	689b      	ldr	r3, [r3, #8]
 800634a:	f003 0302 	and.w	r3, r3, #2
 800634e:	2b02      	cmp	r3, #2
 8006350:	d11b      	bne.n	800638a <HAL_SPI_TransmitReceive+0x176>
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006356:	b29b      	uxth	r3, r3
 8006358:	2b00      	cmp	r3, #0
 800635a:	d016      	beq.n	800638a <HAL_SPI_TransmitReceive+0x176>
 800635c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800635e:	2b01      	cmp	r3, #1
 8006360:	d113      	bne.n	800638a <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006366:	881a      	ldrh	r2, [r3, #0]
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006372:	1c9a      	adds	r2, r3, #2
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800637c:	b29b      	uxth	r3, r3
 800637e:	3b01      	subs	r3, #1
 8006380:	b29a      	uxth	r2, r3
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006386:	2300      	movs	r3, #0
 8006388:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	689b      	ldr	r3, [r3, #8]
 8006390:	f003 0301 	and.w	r3, r3, #1
 8006394:	2b01      	cmp	r3, #1
 8006396:	d119      	bne.n	80063cc <HAL_SPI_TransmitReceive+0x1b8>
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800639c:	b29b      	uxth	r3, r3
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d014      	beq.n	80063cc <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	68da      	ldr	r2, [r3, #12]
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063ac:	b292      	uxth	r2, r2
 80063ae:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063b4:	1c9a      	adds	r2, r3, #2
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80063be:	b29b      	uxth	r3, r3
 80063c0:	3b01      	subs	r3, #1
 80063c2:	b29a      	uxth	r2, r3
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80063c8:	2301      	movs	r3, #1
 80063ca:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80063cc:	f7fd ff24 	bl	8004218 <HAL_GetTick>
 80063d0:	4602      	mov	r2, r0
 80063d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063d4:	1ad3      	subs	r3, r2, r3
 80063d6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80063d8:	429a      	cmp	r2, r3
 80063da:	d807      	bhi.n	80063ec <HAL_SPI_TransmitReceive+0x1d8>
 80063dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063e2:	d003      	beq.n	80063ec <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80063e4:	2303      	movs	r3, #3
 80063e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80063ea:	e0a7      	b.n	800653c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80063f0:	b29b      	uxth	r3, r3
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d1a6      	bne.n	8006344 <HAL_SPI_TransmitReceive+0x130>
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80063fa:	b29b      	uxth	r3, r3
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d1a1      	bne.n	8006344 <HAL_SPI_TransmitReceive+0x130>
 8006400:	e07c      	b.n	80064fc <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	685b      	ldr	r3, [r3, #4]
 8006406:	2b00      	cmp	r3, #0
 8006408:	d002      	beq.n	8006410 <HAL_SPI_TransmitReceive+0x1fc>
 800640a:	8b7b      	ldrh	r3, [r7, #26]
 800640c:	2b01      	cmp	r3, #1
 800640e:	d16b      	bne.n	80064e8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	330c      	adds	r3, #12
 800641a:	7812      	ldrb	r2, [r2, #0]
 800641c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006422:	1c5a      	adds	r2, r3, #1
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800642c:	b29b      	uxth	r3, r3
 800642e:	3b01      	subs	r3, #1
 8006430:	b29a      	uxth	r2, r3
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006436:	e057      	b.n	80064e8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	689b      	ldr	r3, [r3, #8]
 800643e:	f003 0302 	and.w	r3, r3, #2
 8006442:	2b02      	cmp	r3, #2
 8006444:	d11c      	bne.n	8006480 <HAL_SPI_TransmitReceive+0x26c>
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800644a:	b29b      	uxth	r3, r3
 800644c:	2b00      	cmp	r3, #0
 800644e:	d017      	beq.n	8006480 <HAL_SPI_TransmitReceive+0x26c>
 8006450:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006452:	2b01      	cmp	r3, #1
 8006454:	d114      	bne.n	8006480 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	330c      	adds	r3, #12
 8006460:	7812      	ldrb	r2, [r2, #0]
 8006462:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006468:	1c5a      	adds	r2, r3, #1
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006472:	b29b      	uxth	r3, r3
 8006474:	3b01      	subs	r3, #1
 8006476:	b29a      	uxth	r2, r3
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800647c:	2300      	movs	r3, #0
 800647e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	689b      	ldr	r3, [r3, #8]
 8006486:	f003 0301 	and.w	r3, r3, #1
 800648a:	2b01      	cmp	r3, #1
 800648c:	d119      	bne.n	80064c2 <HAL_SPI_TransmitReceive+0x2ae>
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006492:	b29b      	uxth	r3, r3
 8006494:	2b00      	cmp	r3, #0
 8006496:	d014      	beq.n	80064c2 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	68da      	ldr	r2, [r3, #12]
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064a2:	b2d2      	uxtb	r2, r2
 80064a4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064aa:	1c5a      	adds	r2, r3, #1
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80064b4:	b29b      	uxth	r3, r3
 80064b6:	3b01      	subs	r3, #1
 80064b8:	b29a      	uxth	r2, r3
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80064be:	2301      	movs	r3, #1
 80064c0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80064c2:	f7fd fea9 	bl	8004218 <HAL_GetTick>
 80064c6:	4602      	mov	r2, r0
 80064c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064ca:	1ad3      	subs	r3, r2, r3
 80064cc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80064ce:	429a      	cmp	r2, r3
 80064d0:	d803      	bhi.n	80064da <HAL_SPI_TransmitReceive+0x2c6>
 80064d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064d8:	d102      	bne.n	80064e0 <HAL_SPI_TransmitReceive+0x2cc>
 80064da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d103      	bne.n	80064e8 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80064e0:	2303      	movs	r3, #3
 80064e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80064e6:	e029      	b.n	800653c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80064ec:	b29b      	uxth	r3, r3
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d1a2      	bne.n	8006438 <HAL_SPI_TransmitReceive+0x224>
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80064f6:	b29b      	uxth	r3, r3
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d19d      	bne.n	8006438 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80064fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064fe:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006500:	68f8      	ldr	r0, [r7, #12]
 8006502:	f000 f8bf 	bl	8006684 <SPI_EndRxTxTransaction>
 8006506:	4603      	mov	r3, r0
 8006508:	2b00      	cmp	r3, #0
 800650a:	d006      	beq.n	800651a <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800650c:	2301      	movs	r3, #1
 800650e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	2220      	movs	r2, #32
 8006516:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8006518:	e010      	b.n	800653c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	689b      	ldr	r3, [r3, #8]
 800651e:	2b00      	cmp	r3, #0
 8006520:	d10b      	bne.n	800653a <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006522:	2300      	movs	r3, #0
 8006524:	617b      	str	r3, [r7, #20]
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	68db      	ldr	r3, [r3, #12]
 800652c:	617b      	str	r3, [r7, #20]
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	689b      	ldr	r3, [r3, #8]
 8006534:	617b      	str	r3, [r7, #20]
 8006536:	697b      	ldr	r3, [r7, #20]
 8006538:	e000      	b.n	800653c <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800653a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	2201      	movs	r2, #1
 8006540:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	2200      	movs	r2, #0
 8006548:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800654c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8006550:	4618      	mov	r0, r3
 8006552:	3730      	adds	r7, #48	; 0x30
 8006554:	46bd      	mov	sp, r7
 8006556:	bd80      	pop	{r7, pc}

08006558 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8006558:	b480      	push	{r7}
 800655a:	b083      	sub	sp, #12
 800655c:	af00      	add	r7, sp, #0
 800655e:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006566:	b2db      	uxtb	r3, r3
}
 8006568:	4618      	mov	r0, r3
 800656a:	370c      	adds	r7, #12
 800656c:	46bd      	mov	sp, r7
 800656e:	bc80      	pop	{r7}
 8006570:	4770      	bx	lr
	...

08006574 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006574:	b580      	push	{r7, lr}
 8006576:	b088      	sub	sp, #32
 8006578:	af00      	add	r7, sp, #0
 800657a:	60f8      	str	r0, [r7, #12]
 800657c:	60b9      	str	r1, [r7, #8]
 800657e:	603b      	str	r3, [r7, #0]
 8006580:	4613      	mov	r3, r2
 8006582:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006584:	f7fd fe48 	bl	8004218 <HAL_GetTick>
 8006588:	4602      	mov	r2, r0
 800658a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800658c:	1a9b      	subs	r3, r3, r2
 800658e:	683a      	ldr	r2, [r7, #0]
 8006590:	4413      	add	r3, r2
 8006592:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006594:	f7fd fe40 	bl	8004218 <HAL_GetTick>
 8006598:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800659a:	4b39      	ldr	r3, [pc, #228]	; (8006680 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	015b      	lsls	r3, r3, #5
 80065a0:	0d1b      	lsrs	r3, r3, #20
 80065a2:	69fa      	ldr	r2, [r7, #28]
 80065a4:	fb02 f303 	mul.w	r3, r2, r3
 80065a8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80065aa:	e054      	b.n	8006656 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80065ac:	683b      	ldr	r3, [r7, #0]
 80065ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065b2:	d050      	beq.n	8006656 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80065b4:	f7fd fe30 	bl	8004218 <HAL_GetTick>
 80065b8:	4602      	mov	r2, r0
 80065ba:	69bb      	ldr	r3, [r7, #24]
 80065bc:	1ad3      	subs	r3, r2, r3
 80065be:	69fa      	ldr	r2, [r7, #28]
 80065c0:	429a      	cmp	r2, r3
 80065c2:	d902      	bls.n	80065ca <SPI_WaitFlagStateUntilTimeout+0x56>
 80065c4:	69fb      	ldr	r3, [r7, #28]
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d13d      	bne.n	8006646 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	685a      	ldr	r2, [r3, #4]
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80065d8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	685b      	ldr	r3, [r3, #4]
 80065de:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80065e2:	d111      	bne.n	8006608 <SPI_WaitFlagStateUntilTimeout+0x94>
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	689b      	ldr	r3, [r3, #8]
 80065e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80065ec:	d004      	beq.n	80065f8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	689b      	ldr	r3, [r3, #8]
 80065f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80065f6:	d107      	bne.n	8006608 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	681a      	ldr	r2, [r3, #0]
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006606:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800660c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006610:	d10f      	bne.n	8006632 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	681a      	ldr	r2, [r3, #0]
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006620:	601a      	str	r2, [r3, #0]
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	681a      	ldr	r2, [r3, #0]
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006630:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	2201      	movs	r2, #1
 8006636:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	2200      	movs	r2, #0
 800663e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8006642:	2303      	movs	r3, #3
 8006644:	e017      	b.n	8006676 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8006646:	697b      	ldr	r3, [r7, #20]
 8006648:	2b00      	cmp	r3, #0
 800664a:	d101      	bne.n	8006650 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800664c:	2300      	movs	r3, #0
 800664e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006650:	697b      	ldr	r3, [r7, #20]
 8006652:	3b01      	subs	r3, #1
 8006654:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	689a      	ldr	r2, [r3, #8]
 800665c:	68bb      	ldr	r3, [r7, #8]
 800665e:	4013      	ands	r3, r2
 8006660:	68ba      	ldr	r2, [r7, #8]
 8006662:	429a      	cmp	r2, r3
 8006664:	bf0c      	ite	eq
 8006666:	2301      	moveq	r3, #1
 8006668:	2300      	movne	r3, #0
 800666a:	b2db      	uxtb	r3, r3
 800666c:	461a      	mov	r2, r3
 800666e:	79fb      	ldrb	r3, [r7, #7]
 8006670:	429a      	cmp	r2, r3
 8006672:	d19b      	bne.n	80065ac <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006674:	2300      	movs	r3, #0
}
 8006676:	4618      	mov	r0, r3
 8006678:	3720      	adds	r7, #32
 800667a:	46bd      	mov	sp, r7
 800667c:	bd80      	pop	{r7, pc}
 800667e:	bf00      	nop
 8006680:	20000010 	.word	0x20000010

08006684 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006684:	b580      	push	{r7, lr}
 8006686:	b086      	sub	sp, #24
 8006688:	af02      	add	r7, sp, #8
 800668a:	60f8      	str	r0, [r7, #12]
 800668c:	60b9      	str	r1, [r7, #8]
 800668e:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	9300      	str	r3, [sp, #0]
 8006694:	68bb      	ldr	r3, [r7, #8]
 8006696:	2200      	movs	r2, #0
 8006698:	2180      	movs	r1, #128	; 0x80
 800669a:	68f8      	ldr	r0, [r7, #12]
 800669c:	f7ff ff6a 	bl	8006574 <SPI_WaitFlagStateUntilTimeout>
 80066a0:	4603      	mov	r3, r0
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d007      	beq.n	80066b6 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066aa:	f043 0220 	orr.w	r2, r3, #32
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80066b2:	2303      	movs	r3, #3
 80066b4:	e000      	b.n	80066b8 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 80066b6:	2300      	movs	r3, #0
}
 80066b8:	4618      	mov	r0, r3
 80066ba:	3710      	adds	r7, #16
 80066bc:	46bd      	mov	sp, r7
 80066be:	bd80      	pop	{r7, pc}

080066c0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80066c0:	b580      	push	{r7, lr}
 80066c2:	b082      	sub	sp, #8
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d101      	bne.n	80066d2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80066ce:	2301      	movs	r3, #1
 80066d0:	e041      	b.n	8006756 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80066d8:	b2db      	uxtb	r3, r3
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d106      	bne.n	80066ec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	2200      	movs	r2, #0
 80066e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80066e6:	6878      	ldr	r0, [r7, #4]
 80066e8:	f000 f839 	bl	800675e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	2202      	movs	r2, #2
 80066f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681a      	ldr	r2, [r3, #0]
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	3304      	adds	r3, #4
 80066fc:	4619      	mov	r1, r3
 80066fe:	4610      	mov	r0, r2
 8006700:	f000 f9b4 	bl	8006a6c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	2201      	movs	r2, #1
 8006708:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	2201      	movs	r2, #1
 8006710:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	2201      	movs	r2, #1
 8006718:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	2201      	movs	r2, #1
 8006720:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	2201      	movs	r2, #1
 8006728:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	2201      	movs	r2, #1
 8006730:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	2201      	movs	r2, #1
 8006738:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	2201      	movs	r2, #1
 8006740:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	2201      	movs	r2, #1
 8006748:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	2201      	movs	r2, #1
 8006750:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006754:	2300      	movs	r3, #0
}
 8006756:	4618      	mov	r0, r3
 8006758:	3708      	adds	r7, #8
 800675a:	46bd      	mov	sp, r7
 800675c:	bd80      	pop	{r7, pc}

0800675e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800675e:	b480      	push	{r7}
 8006760:	b083      	sub	sp, #12
 8006762:	af00      	add	r7, sp, #0
 8006764:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8006766:	bf00      	nop
 8006768:	370c      	adds	r7, #12
 800676a:	46bd      	mov	sp, r7
 800676c:	bc80      	pop	{r7}
 800676e:	4770      	bx	lr

08006770 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006770:	b480      	push	{r7}
 8006772:	b085      	sub	sp, #20
 8006774:	af00      	add	r7, sp, #0
 8006776:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800677e:	b2db      	uxtb	r3, r3
 8006780:	2b01      	cmp	r3, #1
 8006782:	d001      	beq.n	8006788 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006784:	2301      	movs	r3, #1
 8006786:	e03a      	b.n	80067fe <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	2202      	movs	r2, #2
 800678c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	68da      	ldr	r2, [r3, #12]
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	f042 0201 	orr.w	r2, r2, #1
 800679e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	4a18      	ldr	r2, [pc, #96]	; (8006808 <HAL_TIM_Base_Start_IT+0x98>)
 80067a6:	4293      	cmp	r3, r2
 80067a8:	d00e      	beq.n	80067c8 <HAL_TIM_Base_Start_IT+0x58>
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80067b2:	d009      	beq.n	80067c8 <HAL_TIM_Base_Start_IT+0x58>
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	4a14      	ldr	r2, [pc, #80]	; (800680c <HAL_TIM_Base_Start_IT+0x9c>)
 80067ba:	4293      	cmp	r3, r2
 80067bc:	d004      	beq.n	80067c8 <HAL_TIM_Base_Start_IT+0x58>
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	4a13      	ldr	r2, [pc, #76]	; (8006810 <HAL_TIM_Base_Start_IT+0xa0>)
 80067c4:	4293      	cmp	r3, r2
 80067c6:	d111      	bne.n	80067ec <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	689b      	ldr	r3, [r3, #8]
 80067ce:	f003 0307 	and.w	r3, r3, #7
 80067d2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	2b06      	cmp	r3, #6
 80067d8:	d010      	beq.n	80067fc <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	681a      	ldr	r2, [r3, #0]
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	f042 0201 	orr.w	r2, r2, #1
 80067e8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80067ea:	e007      	b.n	80067fc <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	681a      	ldr	r2, [r3, #0]
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	f042 0201 	orr.w	r2, r2, #1
 80067fa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80067fc:	2300      	movs	r3, #0
}
 80067fe:	4618      	mov	r0, r3
 8006800:	3714      	adds	r7, #20
 8006802:	46bd      	mov	sp, r7
 8006804:	bc80      	pop	{r7}
 8006806:	4770      	bx	lr
 8006808:	40012c00 	.word	0x40012c00
 800680c:	40000400 	.word	0x40000400
 8006810:	40000800 	.word	0x40000800

08006814 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006814:	b580      	push	{r7, lr}
 8006816:	b082      	sub	sp, #8
 8006818:	af00      	add	r7, sp, #0
 800681a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	691b      	ldr	r3, [r3, #16]
 8006822:	f003 0302 	and.w	r3, r3, #2
 8006826:	2b02      	cmp	r3, #2
 8006828:	d122      	bne.n	8006870 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	68db      	ldr	r3, [r3, #12]
 8006830:	f003 0302 	and.w	r3, r3, #2
 8006834:	2b02      	cmp	r3, #2
 8006836:	d11b      	bne.n	8006870 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	f06f 0202 	mvn.w	r2, #2
 8006840:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	2201      	movs	r2, #1
 8006846:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	699b      	ldr	r3, [r3, #24]
 800684e:	f003 0303 	and.w	r3, r3, #3
 8006852:	2b00      	cmp	r3, #0
 8006854:	d003      	beq.n	800685e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006856:	6878      	ldr	r0, [r7, #4]
 8006858:	f000 f8ed 	bl	8006a36 <HAL_TIM_IC_CaptureCallback>
 800685c:	e005      	b.n	800686a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800685e:	6878      	ldr	r0, [r7, #4]
 8006860:	f000 f8e0 	bl	8006a24 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006864:	6878      	ldr	r0, [r7, #4]
 8006866:	f000 f8ef 	bl	8006a48 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	2200      	movs	r2, #0
 800686e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	691b      	ldr	r3, [r3, #16]
 8006876:	f003 0304 	and.w	r3, r3, #4
 800687a:	2b04      	cmp	r3, #4
 800687c:	d122      	bne.n	80068c4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	68db      	ldr	r3, [r3, #12]
 8006884:	f003 0304 	and.w	r3, r3, #4
 8006888:	2b04      	cmp	r3, #4
 800688a:	d11b      	bne.n	80068c4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	f06f 0204 	mvn.w	r2, #4
 8006894:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	2202      	movs	r2, #2
 800689a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	699b      	ldr	r3, [r3, #24]
 80068a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d003      	beq.n	80068b2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80068aa:	6878      	ldr	r0, [r7, #4]
 80068ac:	f000 f8c3 	bl	8006a36 <HAL_TIM_IC_CaptureCallback>
 80068b0:	e005      	b.n	80068be <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80068b2:	6878      	ldr	r0, [r7, #4]
 80068b4:	f000 f8b6 	bl	8006a24 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80068b8:	6878      	ldr	r0, [r7, #4]
 80068ba:	f000 f8c5 	bl	8006a48 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	2200      	movs	r2, #0
 80068c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	691b      	ldr	r3, [r3, #16]
 80068ca:	f003 0308 	and.w	r3, r3, #8
 80068ce:	2b08      	cmp	r3, #8
 80068d0:	d122      	bne.n	8006918 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	68db      	ldr	r3, [r3, #12]
 80068d8:	f003 0308 	and.w	r3, r3, #8
 80068dc:	2b08      	cmp	r3, #8
 80068de:	d11b      	bne.n	8006918 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	f06f 0208 	mvn.w	r2, #8
 80068e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	2204      	movs	r2, #4
 80068ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	69db      	ldr	r3, [r3, #28]
 80068f6:	f003 0303 	and.w	r3, r3, #3
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d003      	beq.n	8006906 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80068fe:	6878      	ldr	r0, [r7, #4]
 8006900:	f000 f899 	bl	8006a36 <HAL_TIM_IC_CaptureCallback>
 8006904:	e005      	b.n	8006912 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006906:	6878      	ldr	r0, [r7, #4]
 8006908:	f000 f88c 	bl	8006a24 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800690c:	6878      	ldr	r0, [r7, #4]
 800690e:	f000 f89b 	bl	8006a48 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	2200      	movs	r2, #0
 8006916:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	691b      	ldr	r3, [r3, #16]
 800691e:	f003 0310 	and.w	r3, r3, #16
 8006922:	2b10      	cmp	r3, #16
 8006924:	d122      	bne.n	800696c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	68db      	ldr	r3, [r3, #12]
 800692c:	f003 0310 	and.w	r3, r3, #16
 8006930:	2b10      	cmp	r3, #16
 8006932:	d11b      	bne.n	800696c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	f06f 0210 	mvn.w	r2, #16
 800693c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	2208      	movs	r2, #8
 8006942:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	69db      	ldr	r3, [r3, #28]
 800694a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800694e:	2b00      	cmp	r3, #0
 8006950:	d003      	beq.n	800695a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006952:	6878      	ldr	r0, [r7, #4]
 8006954:	f000 f86f 	bl	8006a36 <HAL_TIM_IC_CaptureCallback>
 8006958:	e005      	b.n	8006966 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800695a:	6878      	ldr	r0, [r7, #4]
 800695c:	f000 f862 	bl	8006a24 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006960:	6878      	ldr	r0, [r7, #4]
 8006962:	f000 f871 	bl	8006a48 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	2200      	movs	r2, #0
 800696a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	691b      	ldr	r3, [r3, #16]
 8006972:	f003 0301 	and.w	r3, r3, #1
 8006976:	2b01      	cmp	r3, #1
 8006978:	d10e      	bne.n	8006998 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	68db      	ldr	r3, [r3, #12]
 8006980:	f003 0301 	and.w	r3, r3, #1
 8006984:	2b01      	cmp	r3, #1
 8006986:	d107      	bne.n	8006998 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	f06f 0201 	mvn.w	r2, #1
 8006990:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006992:	6878      	ldr	r0, [r7, #4]
 8006994:	f7fd fa16 	bl	8003dc4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	691b      	ldr	r3, [r3, #16]
 800699e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069a2:	2b80      	cmp	r3, #128	; 0x80
 80069a4:	d10e      	bne.n	80069c4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	68db      	ldr	r3, [r3, #12]
 80069ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069b0:	2b80      	cmp	r3, #128	; 0x80
 80069b2:	d107      	bne.n	80069c4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80069bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80069be:	6878      	ldr	r0, [r7, #4]
 80069c0:	f000 f8bf 	bl	8006b42 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	691b      	ldr	r3, [r3, #16]
 80069ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069ce:	2b40      	cmp	r3, #64	; 0x40
 80069d0:	d10e      	bne.n	80069f0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	68db      	ldr	r3, [r3, #12]
 80069d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069dc:	2b40      	cmp	r3, #64	; 0x40
 80069de:	d107      	bne.n	80069f0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80069e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80069ea:	6878      	ldr	r0, [r7, #4]
 80069ec:	f000 f835 	bl	8006a5a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	691b      	ldr	r3, [r3, #16]
 80069f6:	f003 0320 	and.w	r3, r3, #32
 80069fa:	2b20      	cmp	r3, #32
 80069fc:	d10e      	bne.n	8006a1c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	68db      	ldr	r3, [r3, #12]
 8006a04:	f003 0320 	and.w	r3, r3, #32
 8006a08:	2b20      	cmp	r3, #32
 8006a0a:	d107      	bne.n	8006a1c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	f06f 0220 	mvn.w	r2, #32
 8006a14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006a16:	6878      	ldr	r0, [r7, #4]
 8006a18:	f000 f88a 	bl	8006b30 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006a1c:	bf00      	nop
 8006a1e:	3708      	adds	r7, #8
 8006a20:	46bd      	mov	sp, r7
 8006a22:	bd80      	pop	{r7, pc}

08006a24 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006a24:	b480      	push	{r7}
 8006a26:	b083      	sub	sp, #12
 8006a28:	af00      	add	r7, sp, #0
 8006a2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006a2c:	bf00      	nop
 8006a2e:	370c      	adds	r7, #12
 8006a30:	46bd      	mov	sp, r7
 8006a32:	bc80      	pop	{r7}
 8006a34:	4770      	bx	lr

08006a36 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006a36:	b480      	push	{r7}
 8006a38:	b083      	sub	sp, #12
 8006a3a:	af00      	add	r7, sp, #0
 8006a3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006a3e:	bf00      	nop
 8006a40:	370c      	adds	r7, #12
 8006a42:	46bd      	mov	sp, r7
 8006a44:	bc80      	pop	{r7}
 8006a46:	4770      	bx	lr

08006a48 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006a48:	b480      	push	{r7}
 8006a4a:	b083      	sub	sp, #12
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006a50:	bf00      	nop
 8006a52:	370c      	adds	r7, #12
 8006a54:	46bd      	mov	sp, r7
 8006a56:	bc80      	pop	{r7}
 8006a58:	4770      	bx	lr

08006a5a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006a5a:	b480      	push	{r7}
 8006a5c:	b083      	sub	sp, #12
 8006a5e:	af00      	add	r7, sp, #0
 8006a60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006a62:	bf00      	nop
 8006a64:	370c      	adds	r7, #12
 8006a66:	46bd      	mov	sp, r7
 8006a68:	bc80      	pop	{r7}
 8006a6a:	4770      	bx	lr

08006a6c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006a6c:	b480      	push	{r7}
 8006a6e:	b085      	sub	sp, #20
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	6078      	str	r0, [r7, #4]
 8006a74:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	4a29      	ldr	r2, [pc, #164]	; (8006b24 <TIM_Base_SetConfig+0xb8>)
 8006a80:	4293      	cmp	r3, r2
 8006a82:	d00b      	beq.n	8006a9c <TIM_Base_SetConfig+0x30>
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a8a:	d007      	beq.n	8006a9c <TIM_Base_SetConfig+0x30>
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	4a26      	ldr	r2, [pc, #152]	; (8006b28 <TIM_Base_SetConfig+0xbc>)
 8006a90:	4293      	cmp	r3, r2
 8006a92:	d003      	beq.n	8006a9c <TIM_Base_SetConfig+0x30>
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	4a25      	ldr	r2, [pc, #148]	; (8006b2c <TIM_Base_SetConfig+0xc0>)
 8006a98:	4293      	cmp	r3, r2
 8006a9a:	d108      	bne.n	8006aae <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006aa2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006aa4:	683b      	ldr	r3, [r7, #0]
 8006aa6:	685b      	ldr	r3, [r3, #4]
 8006aa8:	68fa      	ldr	r2, [r7, #12]
 8006aaa:	4313      	orrs	r3, r2
 8006aac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	4a1c      	ldr	r2, [pc, #112]	; (8006b24 <TIM_Base_SetConfig+0xb8>)
 8006ab2:	4293      	cmp	r3, r2
 8006ab4:	d00b      	beq.n	8006ace <TIM_Base_SetConfig+0x62>
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006abc:	d007      	beq.n	8006ace <TIM_Base_SetConfig+0x62>
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	4a19      	ldr	r2, [pc, #100]	; (8006b28 <TIM_Base_SetConfig+0xbc>)
 8006ac2:	4293      	cmp	r3, r2
 8006ac4:	d003      	beq.n	8006ace <TIM_Base_SetConfig+0x62>
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	4a18      	ldr	r2, [pc, #96]	; (8006b2c <TIM_Base_SetConfig+0xc0>)
 8006aca:	4293      	cmp	r3, r2
 8006acc:	d108      	bne.n	8006ae0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006ad4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006ad6:	683b      	ldr	r3, [r7, #0]
 8006ad8:	68db      	ldr	r3, [r3, #12]
 8006ada:	68fa      	ldr	r2, [r7, #12]
 8006adc:	4313      	orrs	r3, r2
 8006ade:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006ae6:	683b      	ldr	r3, [r7, #0]
 8006ae8:	695b      	ldr	r3, [r3, #20]
 8006aea:	4313      	orrs	r3, r2
 8006aec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	68fa      	ldr	r2, [r7, #12]
 8006af2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006af4:	683b      	ldr	r3, [r7, #0]
 8006af6:	689a      	ldr	r2, [r3, #8]
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006afc:	683b      	ldr	r3, [r7, #0]
 8006afe:	681a      	ldr	r2, [r3, #0]
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	4a07      	ldr	r2, [pc, #28]	; (8006b24 <TIM_Base_SetConfig+0xb8>)
 8006b08:	4293      	cmp	r3, r2
 8006b0a:	d103      	bne.n	8006b14 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006b0c:	683b      	ldr	r3, [r7, #0]
 8006b0e:	691a      	ldr	r2, [r3, #16]
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	2201      	movs	r2, #1
 8006b18:	615a      	str	r2, [r3, #20]
}
 8006b1a:	bf00      	nop
 8006b1c:	3714      	adds	r7, #20
 8006b1e:	46bd      	mov	sp, r7
 8006b20:	bc80      	pop	{r7}
 8006b22:	4770      	bx	lr
 8006b24:	40012c00 	.word	0x40012c00
 8006b28:	40000400 	.word	0x40000400
 8006b2c:	40000800 	.word	0x40000800

08006b30 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006b30:	b480      	push	{r7}
 8006b32:	b083      	sub	sp, #12
 8006b34:	af00      	add	r7, sp, #0
 8006b36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006b38:	bf00      	nop
 8006b3a:	370c      	adds	r7, #12
 8006b3c:	46bd      	mov	sp, r7
 8006b3e:	bc80      	pop	{r7}
 8006b40:	4770      	bx	lr

08006b42 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006b42:	b480      	push	{r7}
 8006b44:	b083      	sub	sp, #12
 8006b46:	af00      	add	r7, sp, #0
 8006b48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006b4a:	bf00      	nop
 8006b4c:	370c      	adds	r7, #12
 8006b4e:	46bd      	mov	sp, r7
 8006b50:	bc80      	pop	{r7}
 8006b52:	4770      	bx	lr

08006b54 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006b54:	b580      	push	{r7, lr}
 8006b56:	b082      	sub	sp, #8
 8006b58:	af00      	add	r7, sp, #0
 8006b5a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d101      	bne.n	8006b66 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006b62:	2301      	movs	r3, #1
 8006b64:	e03f      	b.n	8006be6 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006b6c:	b2db      	uxtb	r3, r3
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d106      	bne.n	8006b80 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	2200      	movs	r2, #0
 8006b76:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006b7a:	6878      	ldr	r0, [r7, #4]
 8006b7c:	f7fd f9de 	bl	8003f3c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	2224      	movs	r2, #36	; 0x24
 8006b84:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	68da      	ldr	r2, [r3, #12]
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006b96:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006b98:	6878      	ldr	r0, [r7, #4]
 8006b9a:	f000 f9a3 	bl	8006ee4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	691a      	ldr	r2, [r3, #16]
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006bac:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	695a      	ldr	r2, [r3, #20]
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006bbc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	68da      	ldr	r2, [r3, #12]
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006bcc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	2200      	movs	r2, #0
 8006bd2:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	2220      	movs	r2, #32
 8006bd8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	2220      	movs	r2, #32
 8006be0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8006be4:	2300      	movs	r3, #0
}
 8006be6:	4618      	mov	r0, r3
 8006be8:	3708      	adds	r7, #8
 8006bea:	46bd      	mov	sp, r7
 8006bec:	bd80      	pop	{r7, pc}

08006bee <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006bee:	b580      	push	{r7, lr}
 8006bf0:	b08a      	sub	sp, #40	; 0x28
 8006bf2:	af02      	add	r7, sp, #8
 8006bf4:	60f8      	str	r0, [r7, #12]
 8006bf6:	60b9      	str	r1, [r7, #8]
 8006bf8:	603b      	str	r3, [r7, #0]
 8006bfa:	4613      	mov	r3, r2
 8006bfc:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006bfe:	2300      	movs	r3, #0
 8006c00:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006c08:	b2db      	uxtb	r3, r3
 8006c0a:	2b20      	cmp	r3, #32
 8006c0c:	d17c      	bne.n	8006d08 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006c0e:	68bb      	ldr	r3, [r7, #8]
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d002      	beq.n	8006c1a <HAL_UART_Transmit+0x2c>
 8006c14:	88fb      	ldrh	r3, [r7, #6]
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d101      	bne.n	8006c1e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006c1a:	2301      	movs	r3, #1
 8006c1c:	e075      	b.n	8006d0a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006c24:	2b01      	cmp	r3, #1
 8006c26:	d101      	bne.n	8006c2c <HAL_UART_Transmit+0x3e>
 8006c28:	2302      	movs	r3, #2
 8006c2a:	e06e      	b.n	8006d0a <HAL_UART_Transmit+0x11c>
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	2201      	movs	r2, #1
 8006c30:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	2200      	movs	r2, #0
 8006c38:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	2221      	movs	r2, #33	; 0x21
 8006c3e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8006c42:	f7fd fae9 	bl	8004218 <HAL_GetTick>
 8006c46:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	88fa      	ldrh	r2, [r7, #6]
 8006c4c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	88fa      	ldrh	r2, [r7, #6]
 8006c52:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	689b      	ldr	r3, [r3, #8]
 8006c58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c5c:	d108      	bne.n	8006c70 <HAL_UART_Transmit+0x82>
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	691b      	ldr	r3, [r3, #16]
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d104      	bne.n	8006c70 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8006c66:	2300      	movs	r3, #0
 8006c68:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006c6a:	68bb      	ldr	r3, [r7, #8]
 8006c6c:	61bb      	str	r3, [r7, #24]
 8006c6e:	e003      	b.n	8006c78 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8006c70:	68bb      	ldr	r3, [r7, #8]
 8006c72:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006c74:	2300      	movs	r3, #0
 8006c76:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	2200      	movs	r2, #0
 8006c7c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8006c80:	e02a      	b.n	8006cd8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006c82:	683b      	ldr	r3, [r7, #0]
 8006c84:	9300      	str	r3, [sp, #0]
 8006c86:	697b      	ldr	r3, [r7, #20]
 8006c88:	2200      	movs	r2, #0
 8006c8a:	2180      	movs	r1, #128	; 0x80
 8006c8c:	68f8      	ldr	r0, [r7, #12]
 8006c8e:	f000 f8df 	bl	8006e50 <UART_WaitOnFlagUntilTimeout>
 8006c92:	4603      	mov	r3, r0
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d001      	beq.n	8006c9c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8006c98:	2303      	movs	r3, #3
 8006c9a:	e036      	b.n	8006d0a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8006c9c:	69fb      	ldr	r3, [r7, #28]
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d10b      	bne.n	8006cba <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006ca2:	69bb      	ldr	r3, [r7, #24]
 8006ca4:	881b      	ldrh	r3, [r3, #0]
 8006ca6:	461a      	mov	r2, r3
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006cb0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006cb2:	69bb      	ldr	r3, [r7, #24]
 8006cb4:	3302      	adds	r3, #2
 8006cb6:	61bb      	str	r3, [r7, #24]
 8006cb8:	e007      	b.n	8006cca <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006cba:	69fb      	ldr	r3, [r7, #28]
 8006cbc:	781a      	ldrb	r2, [r3, #0]
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006cc4:	69fb      	ldr	r3, [r7, #28]
 8006cc6:	3301      	adds	r3, #1
 8006cc8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006cce:	b29b      	uxth	r3, r3
 8006cd0:	3b01      	subs	r3, #1
 8006cd2:	b29a      	uxth	r2, r3
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006cdc:	b29b      	uxth	r3, r3
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d1cf      	bne.n	8006c82 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006ce2:	683b      	ldr	r3, [r7, #0]
 8006ce4:	9300      	str	r3, [sp, #0]
 8006ce6:	697b      	ldr	r3, [r7, #20]
 8006ce8:	2200      	movs	r2, #0
 8006cea:	2140      	movs	r1, #64	; 0x40
 8006cec:	68f8      	ldr	r0, [r7, #12]
 8006cee:	f000 f8af 	bl	8006e50 <UART_WaitOnFlagUntilTimeout>
 8006cf2:	4603      	mov	r3, r0
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d001      	beq.n	8006cfc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006cf8:	2303      	movs	r3, #3
 8006cfa:	e006      	b.n	8006d0a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	2220      	movs	r2, #32
 8006d00:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8006d04:	2300      	movs	r3, #0
 8006d06:	e000      	b.n	8006d0a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8006d08:	2302      	movs	r3, #2
  }
}
 8006d0a:	4618      	mov	r0, r3
 8006d0c:	3720      	adds	r7, #32
 8006d0e:	46bd      	mov	sp, r7
 8006d10:	bd80      	pop	{r7, pc}

08006d12 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006d12:	b580      	push	{r7, lr}
 8006d14:	b08a      	sub	sp, #40	; 0x28
 8006d16:	af02      	add	r7, sp, #8
 8006d18:	60f8      	str	r0, [r7, #12]
 8006d1a:	60b9      	str	r1, [r7, #8]
 8006d1c:	603b      	str	r3, [r7, #0]
 8006d1e:	4613      	mov	r3, r2
 8006d20:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006d22:	2300      	movs	r3, #0
 8006d24:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8006d2c:	b2db      	uxtb	r3, r3
 8006d2e:	2b20      	cmp	r3, #32
 8006d30:	f040 8089 	bne.w	8006e46 <HAL_UART_Receive+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 8006d34:	68bb      	ldr	r3, [r7, #8]
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d002      	beq.n	8006d40 <HAL_UART_Receive+0x2e>
 8006d3a:	88fb      	ldrh	r3, [r7, #6]
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d101      	bne.n	8006d44 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8006d40:	2301      	movs	r3, #1
 8006d42:	e081      	b.n	8006e48 <HAL_UART_Receive+0x136>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006d4a:	2b01      	cmp	r3, #1
 8006d4c:	d101      	bne.n	8006d52 <HAL_UART_Receive+0x40>
 8006d4e:	2302      	movs	r3, #2
 8006d50:	e07a      	b.n	8006e48 <HAL_UART_Receive+0x136>
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	2201      	movs	r2, #1
 8006d56:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	2200      	movs	r2, #0
 8006d5e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	2222      	movs	r2, #34	; 0x22
 8006d64:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8006d68:	f7fd fa56 	bl	8004218 <HAL_GetTick>
 8006d6c:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	88fa      	ldrh	r2, [r7, #6]
 8006d72:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	88fa      	ldrh	r2, [r7, #6]
 8006d78:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	689b      	ldr	r3, [r3, #8]
 8006d7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d82:	d108      	bne.n	8006d96 <HAL_UART_Receive+0x84>
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	691b      	ldr	r3, [r3, #16]
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d104      	bne.n	8006d96 <HAL_UART_Receive+0x84>
    {
      pdata8bits  = NULL;
 8006d8c:	2300      	movs	r3, #0
 8006d8e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006d90:	68bb      	ldr	r3, [r7, #8]
 8006d92:	61bb      	str	r3, [r7, #24]
 8006d94:	e003      	b.n	8006d9e <HAL_UART_Receive+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8006d96:	68bb      	ldr	r3, [r7, #8]
 8006d98:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006d9a:	2300      	movs	r3, #0
 8006d9c:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	2200      	movs	r2, #0
 8006da2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8006da6:	e043      	b.n	8006e30 <HAL_UART_Receive+0x11e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8006da8:	683b      	ldr	r3, [r7, #0]
 8006daa:	9300      	str	r3, [sp, #0]
 8006dac:	697b      	ldr	r3, [r7, #20]
 8006dae:	2200      	movs	r2, #0
 8006db0:	2120      	movs	r1, #32
 8006db2:	68f8      	ldr	r0, [r7, #12]
 8006db4:	f000 f84c 	bl	8006e50 <UART_WaitOnFlagUntilTimeout>
 8006db8:	4603      	mov	r3, r0
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d001      	beq.n	8006dc2 <HAL_UART_Receive+0xb0>
      {
        return HAL_TIMEOUT;
 8006dbe:	2303      	movs	r3, #3
 8006dc0:	e042      	b.n	8006e48 <HAL_UART_Receive+0x136>
      }
      if (pdata8bits == NULL)
 8006dc2:	69fb      	ldr	r3, [r7, #28]
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d10c      	bne.n	8006de2 <HAL_UART_Receive+0xd0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	685b      	ldr	r3, [r3, #4]
 8006dce:	b29b      	uxth	r3, r3
 8006dd0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006dd4:	b29a      	uxth	r2, r3
 8006dd6:	69bb      	ldr	r3, [r7, #24]
 8006dd8:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8006dda:	69bb      	ldr	r3, [r7, #24]
 8006ddc:	3302      	adds	r3, #2
 8006dde:	61bb      	str	r3, [r7, #24]
 8006de0:	e01f      	b.n	8006e22 <HAL_UART_Receive+0x110>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	689b      	ldr	r3, [r3, #8]
 8006de6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006dea:	d007      	beq.n	8006dfc <HAL_UART_Receive+0xea>
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	689b      	ldr	r3, [r3, #8]
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d10a      	bne.n	8006e0a <HAL_UART_Receive+0xf8>
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	691b      	ldr	r3, [r3, #16]
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d106      	bne.n	8006e0a <HAL_UART_Receive+0xf8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	685b      	ldr	r3, [r3, #4]
 8006e02:	b2da      	uxtb	r2, r3
 8006e04:	69fb      	ldr	r3, [r7, #28]
 8006e06:	701a      	strb	r2, [r3, #0]
 8006e08:	e008      	b.n	8006e1c <HAL_UART_Receive+0x10a>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	685b      	ldr	r3, [r3, #4]
 8006e10:	b2db      	uxtb	r3, r3
 8006e12:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006e16:	b2da      	uxtb	r2, r3
 8006e18:	69fb      	ldr	r3, [r7, #28]
 8006e1a:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8006e1c:	69fb      	ldr	r3, [r7, #28]
 8006e1e:	3301      	adds	r3, #1
 8006e20:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006e26:	b29b      	uxth	r3, r3
 8006e28:	3b01      	subs	r3, #1
 8006e2a:	b29a      	uxth	r2, r3
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006e34:	b29b      	uxth	r3, r3
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d1b6      	bne.n	8006da8 <HAL_UART_Receive+0x96>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	2220      	movs	r2, #32
 8006e3e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 8006e42:	2300      	movs	r3, #0
 8006e44:	e000      	b.n	8006e48 <HAL_UART_Receive+0x136>
  }
  else
  {
    return HAL_BUSY;
 8006e46:	2302      	movs	r3, #2
  }
}
 8006e48:	4618      	mov	r0, r3
 8006e4a:	3720      	adds	r7, #32
 8006e4c:	46bd      	mov	sp, r7
 8006e4e:	bd80      	pop	{r7, pc}

08006e50 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8006e50:	b580      	push	{r7, lr}
 8006e52:	b084      	sub	sp, #16
 8006e54:	af00      	add	r7, sp, #0
 8006e56:	60f8      	str	r0, [r7, #12]
 8006e58:	60b9      	str	r1, [r7, #8]
 8006e5a:	603b      	str	r3, [r7, #0]
 8006e5c:	4613      	mov	r3, r2
 8006e5e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006e60:	e02c      	b.n	8006ebc <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006e62:	69bb      	ldr	r3, [r7, #24]
 8006e64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e68:	d028      	beq.n	8006ebc <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006e6a:	69bb      	ldr	r3, [r7, #24]
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d007      	beq.n	8006e80 <UART_WaitOnFlagUntilTimeout+0x30>
 8006e70:	f7fd f9d2 	bl	8004218 <HAL_GetTick>
 8006e74:	4602      	mov	r2, r0
 8006e76:	683b      	ldr	r3, [r7, #0]
 8006e78:	1ad3      	subs	r3, r2, r3
 8006e7a:	69ba      	ldr	r2, [r7, #24]
 8006e7c:	429a      	cmp	r2, r3
 8006e7e:	d21d      	bcs.n	8006ebc <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	68da      	ldr	r2, [r3, #12]
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006e8e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	695a      	ldr	r2, [r3, #20]
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	f022 0201 	bic.w	r2, r2, #1
 8006e9e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	2220      	movs	r2, #32
 8006ea4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	2220      	movs	r2, #32
 8006eac:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	2200      	movs	r2, #0
 8006eb4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8006eb8:	2303      	movs	r3, #3
 8006eba:	e00f      	b.n	8006edc <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	681a      	ldr	r2, [r3, #0]
 8006ec2:	68bb      	ldr	r3, [r7, #8]
 8006ec4:	4013      	ands	r3, r2
 8006ec6:	68ba      	ldr	r2, [r7, #8]
 8006ec8:	429a      	cmp	r2, r3
 8006eca:	bf0c      	ite	eq
 8006ecc:	2301      	moveq	r3, #1
 8006ece:	2300      	movne	r3, #0
 8006ed0:	b2db      	uxtb	r3, r3
 8006ed2:	461a      	mov	r2, r3
 8006ed4:	79fb      	ldrb	r3, [r7, #7]
 8006ed6:	429a      	cmp	r2, r3
 8006ed8:	d0c3      	beq.n	8006e62 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006eda:	2300      	movs	r3, #0
}
 8006edc:	4618      	mov	r0, r3
 8006ede:	3710      	adds	r7, #16
 8006ee0:	46bd      	mov	sp, r7
 8006ee2:	bd80      	pop	{r7, pc}

08006ee4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006ee4:	b580      	push	{r7, lr}
 8006ee6:	b084      	sub	sp, #16
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	691b      	ldr	r3, [r3, #16]
 8006ef2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	68da      	ldr	r2, [r3, #12]
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	430a      	orrs	r2, r1
 8006f00:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	689a      	ldr	r2, [r3, #8]
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	691b      	ldr	r3, [r3, #16]
 8006f0a:	431a      	orrs	r2, r3
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	695b      	ldr	r3, [r3, #20]
 8006f10:	4313      	orrs	r3, r2
 8006f12:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	68db      	ldr	r3, [r3, #12]
 8006f1a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8006f1e:	f023 030c 	bic.w	r3, r3, #12
 8006f22:	687a      	ldr	r2, [r7, #4]
 8006f24:	6812      	ldr	r2, [r2, #0]
 8006f26:	68b9      	ldr	r1, [r7, #8]
 8006f28:	430b      	orrs	r3, r1
 8006f2a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	695b      	ldr	r3, [r3, #20]
 8006f32:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	699a      	ldr	r2, [r3, #24]
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	430a      	orrs	r2, r1
 8006f40:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	4a2c      	ldr	r2, [pc, #176]	; (8006ff8 <UART_SetConfig+0x114>)
 8006f48:	4293      	cmp	r3, r2
 8006f4a:	d103      	bne.n	8006f54 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8006f4c:	f7fd ffd8 	bl	8004f00 <HAL_RCC_GetPCLK2Freq>
 8006f50:	60f8      	str	r0, [r7, #12]
 8006f52:	e002      	b.n	8006f5a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8006f54:	f7fd ffc0 	bl	8004ed8 <HAL_RCC_GetPCLK1Freq>
 8006f58:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006f5a:	68fa      	ldr	r2, [r7, #12]
 8006f5c:	4613      	mov	r3, r2
 8006f5e:	009b      	lsls	r3, r3, #2
 8006f60:	4413      	add	r3, r2
 8006f62:	009a      	lsls	r2, r3, #2
 8006f64:	441a      	add	r2, r3
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	685b      	ldr	r3, [r3, #4]
 8006f6a:	009b      	lsls	r3, r3, #2
 8006f6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f70:	4a22      	ldr	r2, [pc, #136]	; (8006ffc <UART_SetConfig+0x118>)
 8006f72:	fba2 2303 	umull	r2, r3, r2, r3
 8006f76:	095b      	lsrs	r3, r3, #5
 8006f78:	0119      	lsls	r1, r3, #4
 8006f7a:	68fa      	ldr	r2, [r7, #12]
 8006f7c:	4613      	mov	r3, r2
 8006f7e:	009b      	lsls	r3, r3, #2
 8006f80:	4413      	add	r3, r2
 8006f82:	009a      	lsls	r2, r3, #2
 8006f84:	441a      	add	r2, r3
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	685b      	ldr	r3, [r3, #4]
 8006f8a:	009b      	lsls	r3, r3, #2
 8006f8c:	fbb2 f2f3 	udiv	r2, r2, r3
 8006f90:	4b1a      	ldr	r3, [pc, #104]	; (8006ffc <UART_SetConfig+0x118>)
 8006f92:	fba3 0302 	umull	r0, r3, r3, r2
 8006f96:	095b      	lsrs	r3, r3, #5
 8006f98:	2064      	movs	r0, #100	; 0x64
 8006f9a:	fb00 f303 	mul.w	r3, r0, r3
 8006f9e:	1ad3      	subs	r3, r2, r3
 8006fa0:	011b      	lsls	r3, r3, #4
 8006fa2:	3332      	adds	r3, #50	; 0x32
 8006fa4:	4a15      	ldr	r2, [pc, #84]	; (8006ffc <UART_SetConfig+0x118>)
 8006fa6:	fba2 2303 	umull	r2, r3, r2, r3
 8006faa:	095b      	lsrs	r3, r3, #5
 8006fac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006fb0:	4419      	add	r1, r3
 8006fb2:	68fa      	ldr	r2, [r7, #12]
 8006fb4:	4613      	mov	r3, r2
 8006fb6:	009b      	lsls	r3, r3, #2
 8006fb8:	4413      	add	r3, r2
 8006fba:	009a      	lsls	r2, r3, #2
 8006fbc:	441a      	add	r2, r3
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	685b      	ldr	r3, [r3, #4]
 8006fc2:	009b      	lsls	r3, r3, #2
 8006fc4:	fbb2 f2f3 	udiv	r2, r2, r3
 8006fc8:	4b0c      	ldr	r3, [pc, #48]	; (8006ffc <UART_SetConfig+0x118>)
 8006fca:	fba3 0302 	umull	r0, r3, r3, r2
 8006fce:	095b      	lsrs	r3, r3, #5
 8006fd0:	2064      	movs	r0, #100	; 0x64
 8006fd2:	fb00 f303 	mul.w	r3, r0, r3
 8006fd6:	1ad3      	subs	r3, r2, r3
 8006fd8:	011b      	lsls	r3, r3, #4
 8006fda:	3332      	adds	r3, #50	; 0x32
 8006fdc:	4a07      	ldr	r2, [pc, #28]	; (8006ffc <UART_SetConfig+0x118>)
 8006fde:	fba2 2303 	umull	r2, r3, r2, r3
 8006fe2:	095b      	lsrs	r3, r3, #5
 8006fe4:	f003 020f 	and.w	r2, r3, #15
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	440a      	add	r2, r1
 8006fee:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8006ff0:	bf00      	nop
 8006ff2:	3710      	adds	r7, #16
 8006ff4:	46bd      	mov	sp, r7
 8006ff6:	bd80      	pop	{r7, pc}
 8006ff8:	40013800 	.word	0x40013800
 8006ffc:	51eb851f 	.word	0x51eb851f

08007000 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8007000:	b580      	push	{r7, lr}
 8007002:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8007004:	4904      	ldr	r1, [pc, #16]	; (8007018 <MX_FATFS_Init+0x18>)
 8007006:	4805      	ldr	r0, [pc, #20]	; (800701c <MX_FATFS_Init+0x1c>)
 8007008:	f003 fb92 	bl	800a730 <FATFS_LinkDriver>
 800700c:	4603      	mov	r3, r0
 800700e:	461a      	mov	r2, r3
 8007010:	4b03      	ldr	r3, [pc, #12]	; (8007020 <MX_FATFS_Init+0x20>)
 8007012:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8007014:	bf00      	nop
 8007016:	bd80      	pop	{r7, pc}
 8007018:	20002ba0 	.word	0x20002ba0
 800701c:	2000001c 	.word	0x2000001c
 8007020:	20002ba4 	.word	0x20002ba4

08007024 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8007024:	b480      	push	{r7}
 8007026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8007028:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800702a:	4618      	mov	r0, r3
 800702c:	46bd      	mov	sp, r7
 800702e:	bc80      	pop	{r7}
 8007030:	4770      	bx	lr

08007032 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8007032:	b580      	push	{r7, lr}
 8007034:	b082      	sub	sp, #8
 8007036:	af00      	add	r7, sp, #0
 8007038:	4603      	mov	r3, r0
 800703a:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    return SD_disk_initialize(pdrv);
 800703c:	79fb      	ldrb	r3, [r7, #7]
 800703e:	4618      	mov	r0, r3
 8007040:	f7fa fe4c 	bl	8001cdc <SD_disk_initialize>
 8007044:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8007046:	4618      	mov	r0, r3
 8007048:	3708      	adds	r7, #8
 800704a:	46bd      	mov	sp, r7
 800704c:	bd80      	pop	{r7, pc}

0800704e <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800704e:	b580      	push	{r7, lr}
 8007050:	b082      	sub	sp, #8
 8007052:	af00      	add	r7, sp, #0
 8007054:	4603      	mov	r3, r0
 8007056:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    return SD_disk_status(pdrv);
 8007058:	79fb      	ldrb	r3, [r7, #7]
 800705a:	4618      	mov	r0, r3
 800705c:	f7fa ff28 	bl	8001eb0 <SD_disk_status>
 8007060:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8007062:	4618      	mov	r0, r3
 8007064:	3708      	adds	r7, #8
 8007066:	46bd      	mov	sp, r7
 8007068:	bd80      	pop	{r7, pc}

0800706a <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800706a:	b580      	push	{r7, lr}
 800706c:	b084      	sub	sp, #16
 800706e:	af00      	add	r7, sp, #0
 8007070:	60b9      	str	r1, [r7, #8]
 8007072:	607a      	str	r2, [r7, #4]
 8007074:	603b      	str	r3, [r7, #0]
 8007076:	4603      	mov	r3, r0
 8007078:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return SD_disk_read(pdrv, buff, sector, count);
 800707a:	7bf8      	ldrb	r0, [r7, #15]
 800707c:	683b      	ldr	r3, [r7, #0]
 800707e:	687a      	ldr	r2, [r7, #4]
 8007080:	68b9      	ldr	r1, [r7, #8]
 8007082:	f7fa ff29 	bl	8001ed8 <SD_disk_read>
 8007086:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8007088:	4618      	mov	r0, r3
 800708a:	3710      	adds	r7, #16
 800708c:	46bd      	mov	sp, r7
 800708e:	bd80      	pop	{r7, pc}

08007090 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8007090:	b580      	push	{r7, lr}
 8007092:	b084      	sub	sp, #16
 8007094:	af00      	add	r7, sp, #0
 8007096:	60b9      	str	r1, [r7, #8]
 8007098:	607a      	str	r2, [r7, #4]
 800709a:	603b      	str	r3, [r7, #0]
 800709c:	4603      	mov	r3, r0
 800709e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return SD_disk_write(pdrv, buff, sector, count);
 80070a0:	7bf8      	ldrb	r0, [r7, #15]
 80070a2:	683b      	ldr	r3, [r7, #0]
 80070a4:	687a      	ldr	r2, [r7, #4]
 80070a6:	68b9      	ldr	r1, [r7, #8]
 80070a8:	f7fa ff80 	bl	8001fac <SD_disk_write>
 80070ac:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 80070ae:	4618      	mov	r0, r3
 80070b0:	3710      	adds	r7, #16
 80070b2:	46bd      	mov	sp, r7
 80070b4:	bd80      	pop	{r7, pc}

080070b6 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 80070b6:	b580      	push	{r7, lr}
 80070b8:	b082      	sub	sp, #8
 80070ba:	af00      	add	r7, sp, #0
 80070bc:	4603      	mov	r3, r0
 80070be:	603a      	str	r2, [r7, #0]
 80070c0:	71fb      	strb	r3, [r7, #7]
 80070c2:	460b      	mov	r3, r1
 80070c4:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    return SD_disk_ioctl(pdrv, cmd, buff);
 80070c6:	79b9      	ldrb	r1, [r7, #6]
 80070c8:	79fb      	ldrb	r3, [r7, #7]
 80070ca:	683a      	ldr	r2, [r7, #0]
 80070cc:	4618      	mov	r0, r3
 80070ce:	f7fa fff1 	bl	80020b4 <SD_disk_ioctl>
 80070d2:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 80070d4:	4618      	mov	r0, r3
 80070d6:	3708      	adds	r7, #8
 80070d8:	46bd      	mov	sp, r7
 80070da:	bd80      	pop	{r7, pc}

080070dc <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
 80070dc:	b580      	push	{r7, lr}
 80070de:	b084      	sub	sp, #16
 80070e0:	af00      	add	r7, sp, #0
 80070e2:	4603      	mov	r3, r0
 80070e4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;
  
  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80070e6:	79fb      	ldrb	r3, [r7, #7]
 80070e8:	4a08      	ldr	r2, [pc, #32]	; (800710c <disk_status+0x30>)
 80070ea:	009b      	lsls	r3, r3, #2
 80070ec:	4413      	add	r3, r2
 80070ee:	685b      	ldr	r3, [r3, #4]
 80070f0:	685b      	ldr	r3, [r3, #4]
 80070f2:	79fa      	ldrb	r2, [r7, #7]
 80070f4:	4905      	ldr	r1, [pc, #20]	; (800710c <disk_status+0x30>)
 80070f6:	440a      	add	r2, r1
 80070f8:	7a12      	ldrb	r2, [r2, #8]
 80070fa:	4610      	mov	r0, r2
 80070fc:	4798      	blx	r3
 80070fe:	4603      	mov	r3, r0
 8007100:	73fb      	strb	r3, [r7, #15]
  return stat;
 8007102:	7bfb      	ldrb	r3, [r7, #15]
}
 8007104:	4618      	mov	r0, r3
 8007106:	3710      	adds	r7, #16
 8007108:	46bd      	mov	sp, r7
 800710a:	bd80      	pop	{r7, pc}
 800710c:	20000534 	.word	0x20000534

08007110 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8007110:	b580      	push	{r7, lr}
 8007112:	b084      	sub	sp, #16
 8007114:	af00      	add	r7, sp, #0
 8007116:	4603      	mov	r3, r0
 8007118:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800711a:	2300      	movs	r3, #0
 800711c:	73fb      	strb	r3, [r7, #15]
  
  if(disk.is_initialized[pdrv] == 0)
 800711e:	79fb      	ldrb	r3, [r7, #7]
 8007120:	4a0d      	ldr	r2, [pc, #52]	; (8007158 <disk_initialize+0x48>)
 8007122:	5cd3      	ldrb	r3, [r2, r3]
 8007124:	2b00      	cmp	r3, #0
 8007126:	d111      	bne.n	800714c <disk_initialize+0x3c>
  { 
    disk.is_initialized[pdrv] = 1;
 8007128:	79fb      	ldrb	r3, [r7, #7]
 800712a:	4a0b      	ldr	r2, [pc, #44]	; (8007158 <disk_initialize+0x48>)
 800712c:	2101      	movs	r1, #1
 800712e:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8007130:	79fb      	ldrb	r3, [r7, #7]
 8007132:	4a09      	ldr	r2, [pc, #36]	; (8007158 <disk_initialize+0x48>)
 8007134:	009b      	lsls	r3, r3, #2
 8007136:	4413      	add	r3, r2
 8007138:	685b      	ldr	r3, [r3, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	79fa      	ldrb	r2, [r7, #7]
 800713e:	4906      	ldr	r1, [pc, #24]	; (8007158 <disk_initialize+0x48>)
 8007140:	440a      	add	r2, r1
 8007142:	7a12      	ldrb	r2, [r2, #8]
 8007144:	4610      	mov	r0, r2
 8007146:	4798      	blx	r3
 8007148:	4603      	mov	r3, r0
 800714a:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800714c:	7bfb      	ldrb	r3, [r7, #15]
}
 800714e:	4618      	mov	r0, r3
 8007150:	3710      	adds	r7, #16
 8007152:	46bd      	mov	sp, r7
 8007154:	bd80      	pop	{r7, pc}
 8007156:	bf00      	nop
 8007158:	20000534 	.word	0x20000534

0800715c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800715c:	b590      	push	{r4, r7, lr}
 800715e:	b087      	sub	sp, #28
 8007160:	af00      	add	r7, sp, #0
 8007162:	60b9      	str	r1, [r7, #8]
 8007164:	607a      	str	r2, [r7, #4]
 8007166:	603b      	str	r3, [r7, #0]
 8007168:	4603      	mov	r3, r0
 800716a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
 
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800716c:	7bfb      	ldrb	r3, [r7, #15]
 800716e:	4a0a      	ldr	r2, [pc, #40]	; (8007198 <disk_read+0x3c>)
 8007170:	009b      	lsls	r3, r3, #2
 8007172:	4413      	add	r3, r2
 8007174:	685b      	ldr	r3, [r3, #4]
 8007176:	689c      	ldr	r4, [r3, #8]
 8007178:	7bfb      	ldrb	r3, [r7, #15]
 800717a:	4a07      	ldr	r2, [pc, #28]	; (8007198 <disk_read+0x3c>)
 800717c:	4413      	add	r3, r2
 800717e:	7a18      	ldrb	r0, [r3, #8]
 8007180:	683b      	ldr	r3, [r7, #0]
 8007182:	687a      	ldr	r2, [r7, #4]
 8007184:	68b9      	ldr	r1, [r7, #8]
 8007186:	47a0      	blx	r4
 8007188:	4603      	mov	r3, r0
 800718a:	75fb      	strb	r3, [r7, #23]
  return res;
 800718c:	7dfb      	ldrb	r3, [r7, #23]
}
 800718e:	4618      	mov	r0, r3
 8007190:	371c      	adds	r7, #28
 8007192:	46bd      	mov	sp, r7
 8007194:	bd90      	pop	{r4, r7, pc}
 8007196:	bf00      	nop
 8007198:	20000534 	.word	0x20000534

0800719c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800719c:	b590      	push	{r4, r7, lr}
 800719e:	b087      	sub	sp, #28
 80071a0:	af00      	add	r7, sp, #0
 80071a2:	60b9      	str	r1, [r7, #8]
 80071a4:	607a      	str	r2, [r7, #4]
 80071a6:	603b      	str	r3, [r7, #0]
 80071a8:	4603      	mov	r3, r0
 80071aa:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
  
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80071ac:	7bfb      	ldrb	r3, [r7, #15]
 80071ae:	4a0a      	ldr	r2, [pc, #40]	; (80071d8 <disk_write+0x3c>)
 80071b0:	009b      	lsls	r3, r3, #2
 80071b2:	4413      	add	r3, r2
 80071b4:	685b      	ldr	r3, [r3, #4]
 80071b6:	68dc      	ldr	r4, [r3, #12]
 80071b8:	7bfb      	ldrb	r3, [r7, #15]
 80071ba:	4a07      	ldr	r2, [pc, #28]	; (80071d8 <disk_write+0x3c>)
 80071bc:	4413      	add	r3, r2
 80071be:	7a18      	ldrb	r0, [r3, #8]
 80071c0:	683b      	ldr	r3, [r7, #0]
 80071c2:	687a      	ldr	r2, [r7, #4]
 80071c4:	68b9      	ldr	r1, [r7, #8]
 80071c6:	47a0      	blx	r4
 80071c8:	4603      	mov	r3, r0
 80071ca:	75fb      	strb	r3, [r7, #23]
  return res;
 80071cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80071ce:	4618      	mov	r0, r3
 80071d0:	371c      	adds	r7, #28
 80071d2:	46bd      	mov	sp, r7
 80071d4:	bd90      	pop	{r4, r7, pc}
 80071d6:	bf00      	nop
 80071d8:	20000534 	.word	0x20000534

080071dc <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80071dc:	b580      	push	{r7, lr}
 80071de:	b084      	sub	sp, #16
 80071e0:	af00      	add	r7, sp, #0
 80071e2:	4603      	mov	r3, r0
 80071e4:	603a      	str	r2, [r7, #0]
 80071e6:	71fb      	strb	r3, [r7, #7]
 80071e8:	460b      	mov	r3, r1
 80071ea:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80071ec:	79fb      	ldrb	r3, [r7, #7]
 80071ee:	4a09      	ldr	r2, [pc, #36]	; (8007214 <disk_ioctl+0x38>)
 80071f0:	009b      	lsls	r3, r3, #2
 80071f2:	4413      	add	r3, r2
 80071f4:	685b      	ldr	r3, [r3, #4]
 80071f6:	691b      	ldr	r3, [r3, #16]
 80071f8:	79fa      	ldrb	r2, [r7, #7]
 80071fa:	4906      	ldr	r1, [pc, #24]	; (8007214 <disk_ioctl+0x38>)
 80071fc:	440a      	add	r2, r1
 80071fe:	7a10      	ldrb	r0, [r2, #8]
 8007200:	79b9      	ldrb	r1, [r7, #6]
 8007202:	683a      	ldr	r2, [r7, #0]
 8007204:	4798      	blx	r3
 8007206:	4603      	mov	r3, r0
 8007208:	73fb      	strb	r3, [r7, #15]
  return res;
 800720a:	7bfb      	ldrb	r3, [r7, #15]
}
 800720c:	4618      	mov	r0, r3
 800720e:	3710      	adds	r7, #16
 8007210:	46bd      	mov	sp, r7
 8007212:	bd80      	pop	{r7, pc}
 8007214:	20000534 	.word	0x20000534

08007218 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8007218:	b480      	push	{r7}
 800721a:	b087      	sub	sp, #28
 800721c:	af00      	add	r7, sp, #0
 800721e:	60f8      	str	r0, [r7, #12]
 8007220:	60b9      	str	r1, [r7, #8]
 8007222:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8007228:	68bb      	ldr	r3, [r7, #8]
 800722a:	613b      	str	r3, [r7, #16]
		*(int*)d = *(int*)s;
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
	}
#endif
	while (cnt--)
 800722c:	e007      	b.n	800723e <mem_cpy+0x26>
		*d++ = *s++;
 800722e:	693a      	ldr	r2, [r7, #16]
 8007230:	1c53      	adds	r3, r2, #1
 8007232:	613b      	str	r3, [r7, #16]
 8007234:	697b      	ldr	r3, [r7, #20]
 8007236:	1c59      	adds	r1, r3, #1
 8007238:	6179      	str	r1, [r7, #20]
 800723a:	7812      	ldrb	r2, [r2, #0]
 800723c:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	1e5a      	subs	r2, r3, #1
 8007242:	607a      	str	r2, [r7, #4]
 8007244:	2b00      	cmp	r3, #0
 8007246:	d1f2      	bne.n	800722e <mem_cpy+0x16>
}
 8007248:	bf00      	nop
 800724a:	371c      	adds	r7, #28
 800724c:	46bd      	mov	sp, r7
 800724e:	bc80      	pop	{r7}
 8007250:	4770      	bx	lr

08007252 <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
 8007252:	b480      	push	{r7}
 8007254:	b087      	sub	sp, #28
 8007256:	af00      	add	r7, sp, #0
 8007258:	60f8      	str	r0, [r7, #12]
 800725a:	60b9      	str	r1, [r7, #8]
 800725c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	617b      	str	r3, [r7, #20]

	while (cnt--)
 8007262:	e005      	b.n	8007270 <mem_set+0x1e>
		*d++ = (BYTE)val;
 8007264:	697b      	ldr	r3, [r7, #20]
 8007266:	1c5a      	adds	r2, r3, #1
 8007268:	617a      	str	r2, [r7, #20]
 800726a:	68ba      	ldr	r2, [r7, #8]
 800726c:	b2d2      	uxtb	r2, r2
 800726e:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	1e5a      	subs	r2, r3, #1
 8007274:	607a      	str	r2, [r7, #4]
 8007276:	2b00      	cmp	r3, #0
 8007278:	d1f4      	bne.n	8007264 <mem_set+0x12>
}
 800727a:	bf00      	nop
 800727c:	371c      	adds	r7, #28
 800727e:	46bd      	mov	sp, r7
 8007280:	bc80      	pop	{r7}
 8007282:	4770      	bx	lr

08007284 <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
 8007284:	b480      	push	{r7}
 8007286:	b089      	sub	sp, #36	; 0x24
 8007288:	af00      	add	r7, sp, #0
 800728a:	60f8      	str	r0, [r7, #12]
 800728c:	60b9      	str	r1, [r7, #8]
 800728e:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	61fb      	str	r3, [r7, #28]
 8007294:	68bb      	ldr	r3, [r7, #8]
 8007296:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8007298:	2300      	movs	r3, #0
 800729a:	617b      	str	r3, [r7, #20]

	while (cnt-- && (r = *d++ - *s++) == 0) ;
 800729c:	bf00      	nop
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	1e5a      	subs	r2, r3, #1
 80072a2:	607a      	str	r2, [r7, #4]
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d00d      	beq.n	80072c4 <mem_cmp+0x40>
 80072a8:	69fb      	ldr	r3, [r7, #28]
 80072aa:	1c5a      	adds	r2, r3, #1
 80072ac:	61fa      	str	r2, [r7, #28]
 80072ae:	781b      	ldrb	r3, [r3, #0]
 80072b0:	4619      	mov	r1, r3
 80072b2:	69bb      	ldr	r3, [r7, #24]
 80072b4:	1c5a      	adds	r2, r3, #1
 80072b6:	61ba      	str	r2, [r7, #24]
 80072b8:	781b      	ldrb	r3, [r3, #0]
 80072ba:	1acb      	subs	r3, r1, r3
 80072bc:	617b      	str	r3, [r7, #20]
 80072be:	697b      	ldr	r3, [r7, #20]
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d0ec      	beq.n	800729e <mem_cmp+0x1a>
	return r;
 80072c4:	697b      	ldr	r3, [r7, #20]
}
 80072c6:	4618      	mov	r0, r3
 80072c8:	3724      	adds	r7, #36	; 0x24
 80072ca:	46bd      	mov	sp, r7
 80072cc:	bc80      	pop	{r7}
 80072ce:	4770      	bx	lr

080072d0 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
 80072d0:	b480      	push	{r7}
 80072d2:	b083      	sub	sp, #12
 80072d4:	af00      	add	r7, sp, #0
 80072d6:	6078      	str	r0, [r7, #4]
 80072d8:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80072da:	e002      	b.n	80072e2 <chk_chr+0x12>
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	3301      	adds	r3, #1
 80072e0:	607b      	str	r3, [r7, #4]
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	781b      	ldrb	r3, [r3, #0]
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d005      	beq.n	80072f6 <chk_chr+0x26>
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	781b      	ldrb	r3, [r3, #0]
 80072ee:	461a      	mov	r2, r3
 80072f0:	683b      	ldr	r3, [r7, #0]
 80072f2:	4293      	cmp	r3, r2
 80072f4:	d1f2      	bne.n	80072dc <chk_chr+0xc>
	return *str;
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	781b      	ldrb	r3, [r3, #0]
}
 80072fa:	4618      	mov	r0, r3
 80072fc:	370c      	adds	r7, #12
 80072fe:	46bd      	mov	sp, r7
 8007300:	bc80      	pop	{r7}
 8007302:	4770      	bx	lr

08007304 <lock_fs>:
#if _FS_REENTRANT
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 8007304:	b580      	push	{r7, lr}
 8007306:	b082      	sub	sp, #8
 8007308:	af00      	add	r7, sp, #0
 800730a:	6078      	str	r0, [r7, #4]
	return ff_req_grant(fs->sobj);
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8007312:	4618      	mov	r0, r3
 8007314:	f003 fa47 	bl	800a7a6 <ff_req_grant>
 8007318:	4603      	mov	r3, r0
}
 800731a:	4618      	mov	r0, r3
 800731c:	3708      	adds	r7, #8
 800731e:	46bd      	mov	sp, r7
 8007320:	bd80      	pop	{r7, pc}

08007322 <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 8007322:	b580      	push	{r7, lr}
 8007324:	b082      	sub	sp, #8
 8007326:	af00      	add	r7, sp, #0
 8007328:	6078      	str	r0, [r7, #4]
 800732a:	460b      	mov	r3, r1
 800732c:	70fb      	strb	r3, [r7, #3]
	if (fs &&
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	2b00      	cmp	r3, #0
 8007332:	d011      	beq.n	8007358 <unlock_fs+0x36>
 8007334:	78fb      	ldrb	r3, [r7, #3]
 8007336:	2b0c      	cmp	r3, #12
 8007338:	d00e      	beq.n	8007358 <unlock_fs+0x36>
		res != FR_NOT_ENABLED &&
 800733a:	78fb      	ldrb	r3, [r7, #3]
 800733c:	2b0b      	cmp	r3, #11
 800733e:	d00b      	beq.n	8007358 <unlock_fs+0x36>
		res != FR_INVALID_DRIVE &&
 8007340:	78fb      	ldrb	r3, [r7, #3]
 8007342:	2b09      	cmp	r3, #9
 8007344:	d008      	beq.n	8007358 <unlock_fs+0x36>
		res != FR_INVALID_OBJECT &&
 8007346:	78fb      	ldrb	r3, [r7, #3]
 8007348:	2b0f      	cmp	r3, #15
 800734a:	d005      	beq.n	8007358 <unlock_fs+0x36>
		res != FR_TIMEOUT) {
		ff_rel_grant(fs->sobj);
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8007352:	4618      	mov	r0, r3
 8007354:	f003 fa3c 	bl	800a7d0 <ff_rel_grant>
	}
}
 8007358:	bf00      	nop
 800735a:	3708      	adds	r7, #8
 800735c:	46bd      	mov	sp, r7
 800735e:	bd80      	pop	{r7, pc}

08007360 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8007360:	b480      	push	{r7}
 8007362:	b085      	sub	sp, #20
 8007364:	af00      	add	r7, sp, #0
 8007366:	6078      	str	r0, [r7, #4]
 8007368:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800736a:	2300      	movs	r3, #0
 800736c:	60bb      	str	r3, [r7, #8]
 800736e:	68bb      	ldr	r3, [r7, #8]
 8007370:	60fb      	str	r3, [r7, #12]
 8007372:	e038      	b.n	80073e6 <chk_lock+0x86>
		if (Files[i].fs) {	/* Existing entry */
 8007374:	492f      	ldr	r1, [pc, #188]	; (8007434 <chk_lock+0xd4>)
 8007376:	68fa      	ldr	r2, [r7, #12]
 8007378:	4613      	mov	r3, r2
 800737a:	005b      	lsls	r3, r3, #1
 800737c:	4413      	add	r3, r2
 800737e:	009b      	lsls	r3, r3, #2
 8007380:	440b      	add	r3, r1
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	2b00      	cmp	r3, #0
 8007386:	d029      	beq.n	80073dc <chk_lock+0x7c>
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 8007388:	492a      	ldr	r1, [pc, #168]	; (8007434 <chk_lock+0xd4>)
 800738a:	68fa      	ldr	r2, [r7, #12]
 800738c:	4613      	mov	r3, r2
 800738e:	005b      	lsls	r3, r3, #1
 8007390:	4413      	add	r3, r2
 8007392:	009b      	lsls	r3, r3, #2
 8007394:	440b      	add	r3, r1
 8007396:	681a      	ldr	r2, [r3, #0]
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800739e:	429a      	cmp	r2, r3
 80073a0:	d11e      	bne.n	80073e0 <chk_lock+0x80>
				Files[i].clu == dp->sclust &&
 80073a2:	4924      	ldr	r1, [pc, #144]	; (8007434 <chk_lock+0xd4>)
 80073a4:	68fa      	ldr	r2, [r7, #12]
 80073a6:	4613      	mov	r3, r2
 80073a8:	005b      	lsls	r3, r3, #1
 80073aa:	4413      	add	r3, r2
 80073ac:	009b      	lsls	r3, r3, #2
 80073ae:	440b      	add	r3, r1
 80073b0:	3304      	adds	r3, #4
 80073b2:	681a      	ldr	r2, [r3, #0]
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 80073ba:	429a      	cmp	r2, r3
 80073bc:	d110      	bne.n	80073e0 <chk_lock+0x80>
				Files[i].idx == dp->index) break;
 80073be:	491d      	ldr	r1, [pc, #116]	; (8007434 <chk_lock+0xd4>)
 80073c0:	68fa      	ldr	r2, [r7, #12]
 80073c2:	4613      	mov	r3, r2
 80073c4:	005b      	lsls	r3, r3, #1
 80073c6:	4413      	add	r3, r2
 80073c8:	009b      	lsls	r3, r3, #2
 80073ca:	440b      	add	r3, r1
 80073cc:	3308      	adds	r3, #8
 80073ce:	881a      	ldrh	r2, [r3, #0]
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206
				Files[i].clu == dp->sclust &&
 80073d6:	429a      	cmp	r2, r3
 80073d8:	d102      	bne.n	80073e0 <chk_lock+0x80>
				Files[i].idx == dp->index) break;
 80073da:	e007      	b.n	80073ec <chk_lock+0x8c>
		} else {			/* Blank entry */
			be = 1;
 80073dc:	2301      	movs	r3, #1
 80073de:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	3301      	adds	r3, #1
 80073e4:	60fb      	str	r3, [r7, #12]
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	2b01      	cmp	r3, #1
 80073ea:	d9c3      	bls.n	8007374 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK)	/* The object is not opened */
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	2b02      	cmp	r3, #2
 80073f0:	d109      	bne.n	8007406 <chk_lock+0xa6>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80073f2:	68bb      	ldr	r3, [r7, #8]
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d102      	bne.n	80073fe <chk_lock+0x9e>
 80073f8:	683b      	ldr	r3, [r7, #0]
 80073fa:	2b02      	cmp	r3, #2
 80073fc:	d101      	bne.n	8007402 <chk_lock+0xa2>
 80073fe:	2300      	movs	r3, #0
 8007400:	e013      	b.n	800742a <chk_lock+0xca>
 8007402:	2312      	movs	r3, #18
 8007404:	e011      	b.n	800742a <chk_lock+0xca>

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8007406:	683b      	ldr	r3, [r7, #0]
 8007408:	2b00      	cmp	r3, #0
 800740a:	d10b      	bne.n	8007424 <chk_lock+0xc4>
 800740c:	4909      	ldr	r1, [pc, #36]	; (8007434 <chk_lock+0xd4>)
 800740e:	68fa      	ldr	r2, [r7, #12]
 8007410:	4613      	mov	r3, r2
 8007412:	005b      	lsls	r3, r3, #1
 8007414:	4413      	add	r3, r2
 8007416:	009b      	lsls	r3, r3, #2
 8007418:	440b      	add	r3, r1
 800741a:	330a      	adds	r3, #10
 800741c:	881b      	ldrh	r3, [r3, #0]
 800741e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007422:	d101      	bne.n	8007428 <chk_lock+0xc8>
 8007424:	2310      	movs	r3, #16
 8007426:	e000      	b.n	800742a <chk_lock+0xca>
 8007428:	2300      	movs	r3, #0
}
 800742a:	4618      	mov	r0, r3
 800742c:	3714      	adds	r7, #20
 800742e:	46bd      	mov	sp, r7
 8007430:	bc80      	pop	{r7}
 8007432:	4770      	bx	lr
 8007434:	2000051c 	.word	0x2000051c

08007438 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8007438:	b480      	push	{r7}
 800743a:	b083      	sub	sp, #12
 800743c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800743e:	2300      	movs	r3, #0
 8007440:	607b      	str	r3, [r7, #4]
 8007442:	e002      	b.n	800744a <enq_lock+0x12>
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	3301      	adds	r3, #1
 8007448:	607b      	str	r3, [r7, #4]
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	2b01      	cmp	r3, #1
 800744e:	d809      	bhi.n	8007464 <enq_lock+0x2c>
 8007450:	490a      	ldr	r1, [pc, #40]	; (800747c <enq_lock+0x44>)
 8007452:	687a      	ldr	r2, [r7, #4]
 8007454:	4613      	mov	r3, r2
 8007456:	005b      	lsls	r3, r3, #1
 8007458:	4413      	add	r3, r2
 800745a:	009b      	lsls	r3, r3, #2
 800745c:	440b      	add	r3, r1
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	2b00      	cmp	r3, #0
 8007462:	d1ef      	bne.n	8007444 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	2b02      	cmp	r3, #2
 8007468:	bf14      	ite	ne
 800746a:	2301      	movne	r3, #1
 800746c:	2300      	moveq	r3, #0
 800746e:	b2db      	uxtb	r3, r3
}
 8007470:	4618      	mov	r0, r3
 8007472:	370c      	adds	r7, #12
 8007474:	46bd      	mov	sp, r7
 8007476:	bc80      	pop	{r7}
 8007478:	4770      	bx	lr
 800747a:	bf00      	nop
 800747c:	2000051c 	.word	0x2000051c

08007480 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8007480:	b480      	push	{r7}
 8007482:	b085      	sub	sp, #20
 8007484:	af00      	add	r7, sp, #0
 8007486:	6078      	str	r0, [r7, #4]
 8007488:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800748a:	2300      	movs	r3, #0
 800748c:	60fb      	str	r3, [r7, #12]
 800748e:	e02b      	b.n	80074e8 <inc_lock+0x68>
		if (Files[i].fs == dp->fs &&
 8007490:	4955      	ldr	r1, [pc, #340]	; (80075e8 <inc_lock+0x168>)
 8007492:	68fa      	ldr	r2, [r7, #12]
 8007494:	4613      	mov	r3, r2
 8007496:	005b      	lsls	r3, r3, #1
 8007498:	4413      	add	r3, r2
 800749a:	009b      	lsls	r3, r3, #2
 800749c:	440b      	add	r3, r1
 800749e:	681a      	ldr	r2, [r3, #0]
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80074a6:	429a      	cmp	r2, r3
 80074a8:	d11b      	bne.n	80074e2 <inc_lock+0x62>
			Files[i].clu == dp->sclust &&
 80074aa:	494f      	ldr	r1, [pc, #316]	; (80075e8 <inc_lock+0x168>)
 80074ac:	68fa      	ldr	r2, [r7, #12]
 80074ae:	4613      	mov	r3, r2
 80074b0:	005b      	lsls	r3, r3, #1
 80074b2:	4413      	add	r3, r2
 80074b4:	009b      	lsls	r3, r3, #2
 80074b6:	440b      	add	r3, r1
 80074b8:	3304      	adds	r3, #4
 80074ba:	681a      	ldr	r2, [r3, #0]
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
		if (Files[i].fs == dp->fs &&
 80074c2:	429a      	cmp	r2, r3
 80074c4:	d10d      	bne.n	80074e2 <inc_lock+0x62>
			Files[i].idx == dp->index) break;
 80074c6:	4948      	ldr	r1, [pc, #288]	; (80075e8 <inc_lock+0x168>)
 80074c8:	68fa      	ldr	r2, [r7, #12]
 80074ca:	4613      	mov	r3, r2
 80074cc:	005b      	lsls	r3, r3, #1
 80074ce:	4413      	add	r3, r2
 80074d0:	009b      	lsls	r3, r3, #2
 80074d2:	440b      	add	r3, r1
 80074d4:	3308      	adds	r3, #8
 80074d6:	881a      	ldrh	r2, [r3, #0]
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206
			Files[i].clu == dp->sclust &&
 80074de:	429a      	cmp	r2, r3
 80074e0:	d006      	beq.n	80074f0 <inc_lock+0x70>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	3301      	adds	r3, #1
 80074e6:	60fb      	str	r3, [r7, #12]
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	2b01      	cmp	r3, #1
 80074ec:	d9d0      	bls.n	8007490 <inc_lock+0x10>
 80074ee:	e000      	b.n	80074f2 <inc_lock+0x72>
			Files[i].idx == dp->index) break;
 80074f0:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	2b02      	cmp	r3, #2
 80074f6:	d145      	bne.n	8007584 <inc_lock+0x104>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80074f8:	2300      	movs	r3, #0
 80074fa:	60fb      	str	r3, [r7, #12]
 80074fc:	e002      	b.n	8007504 <inc_lock+0x84>
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	3301      	adds	r3, #1
 8007502:	60fb      	str	r3, [r7, #12]
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	2b01      	cmp	r3, #1
 8007508:	d809      	bhi.n	800751e <inc_lock+0x9e>
 800750a:	4937      	ldr	r1, [pc, #220]	; (80075e8 <inc_lock+0x168>)
 800750c:	68fa      	ldr	r2, [r7, #12]
 800750e:	4613      	mov	r3, r2
 8007510:	005b      	lsls	r3, r3, #1
 8007512:	4413      	add	r3, r2
 8007514:	009b      	lsls	r3, r3, #2
 8007516:	440b      	add	r3, r1
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	2b00      	cmp	r3, #0
 800751c:	d1ef      	bne.n	80074fe <inc_lock+0x7e>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	2b02      	cmp	r3, #2
 8007522:	d101      	bne.n	8007528 <inc_lock+0xa8>
 8007524:	2300      	movs	r3, #0
 8007526:	e05a      	b.n	80075de <inc_lock+0x15e>
		Files[i].fs = dp->fs;
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	f8d3 1200 	ldr.w	r1, [r3, #512]	; 0x200
 800752e:	482e      	ldr	r0, [pc, #184]	; (80075e8 <inc_lock+0x168>)
 8007530:	68fa      	ldr	r2, [r7, #12]
 8007532:	4613      	mov	r3, r2
 8007534:	005b      	lsls	r3, r3, #1
 8007536:	4413      	add	r3, r2
 8007538:	009b      	lsls	r3, r3, #2
 800753a:	4403      	add	r3, r0
 800753c:	6019      	str	r1, [r3, #0]
		Files[i].clu = dp->sclust;
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	f8d3 1208 	ldr.w	r1, [r3, #520]	; 0x208
 8007544:	4828      	ldr	r0, [pc, #160]	; (80075e8 <inc_lock+0x168>)
 8007546:	68fa      	ldr	r2, [r7, #12]
 8007548:	4613      	mov	r3, r2
 800754a:	005b      	lsls	r3, r3, #1
 800754c:	4413      	add	r3, r2
 800754e:	009b      	lsls	r3, r3, #2
 8007550:	4403      	add	r3, r0
 8007552:	3304      	adds	r3, #4
 8007554:	6019      	str	r1, [r3, #0]
		Files[i].idx = dp->index;
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	f8b3 0206 	ldrh.w	r0, [r3, #518]	; 0x206
 800755c:	4922      	ldr	r1, [pc, #136]	; (80075e8 <inc_lock+0x168>)
 800755e:	68fa      	ldr	r2, [r7, #12]
 8007560:	4613      	mov	r3, r2
 8007562:	005b      	lsls	r3, r3, #1
 8007564:	4413      	add	r3, r2
 8007566:	009b      	lsls	r3, r3, #2
 8007568:	440b      	add	r3, r1
 800756a:	3308      	adds	r3, #8
 800756c:	4602      	mov	r2, r0
 800756e:	801a      	strh	r2, [r3, #0]
		Files[i].ctr = 0;
 8007570:	491d      	ldr	r1, [pc, #116]	; (80075e8 <inc_lock+0x168>)
 8007572:	68fa      	ldr	r2, [r7, #12]
 8007574:	4613      	mov	r3, r2
 8007576:	005b      	lsls	r3, r3, #1
 8007578:	4413      	add	r3, r2
 800757a:	009b      	lsls	r3, r3, #2
 800757c:	440b      	add	r3, r1
 800757e:	330a      	adds	r3, #10
 8007580:	2200      	movs	r2, #0
 8007582:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8007584:	683b      	ldr	r3, [r7, #0]
 8007586:	2b00      	cmp	r3, #0
 8007588:	d00c      	beq.n	80075a4 <inc_lock+0x124>
 800758a:	4917      	ldr	r1, [pc, #92]	; (80075e8 <inc_lock+0x168>)
 800758c:	68fa      	ldr	r2, [r7, #12]
 800758e:	4613      	mov	r3, r2
 8007590:	005b      	lsls	r3, r3, #1
 8007592:	4413      	add	r3, r2
 8007594:	009b      	lsls	r3, r3, #2
 8007596:	440b      	add	r3, r1
 8007598:	330a      	adds	r3, #10
 800759a:	881b      	ldrh	r3, [r3, #0]
 800759c:	2b00      	cmp	r3, #0
 800759e:	d001      	beq.n	80075a4 <inc_lock+0x124>
 80075a0:	2300      	movs	r3, #0
 80075a2:	e01c      	b.n	80075de <inc_lock+0x15e>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80075a4:	683b      	ldr	r3, [r7, #0]
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d10b      	bne.n	80075c2 <inc_lock+0x142>
 80075aa:	490f      	ldr	r1, [pc, #60]	; (80075e8 <inc_lock+0x168>)
 80075ac:	68fa      	ldr	r2, [r7, #12]
 80075ae:	4613      	mov	r3, r2
 80075b0:	005b      	lsls	r3, r3, #1
 80075b2:	4413      	add	r3, r2
 80075b4:	009b      	lsls	r3, r3, #2
 80075b6:	440b      	add	r3, r1
 80075b8:	330a      	adds	r3, #10
 80075ba:	881b      	ldrh	r3, [r3, #0]
 80075bc:	3301      	adds	r3, #1
 80075be:	b299      	uxth	r1, r3
 80075c0:	e001      	b.n	80075c6 <inc_lock+0x146>
 80075c2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80075c6:	4808      	ldr	r0, [pc, #32]	; (80075e8 <inc_lock+0x168>)
 80075c8:	68fa      	ldr	r2, [r7, #12]
 80075ca:	4613      	mov	r3, r2
 80075cc:	005b      	lsls	r3, r3, #1
 80075ce:	4413      	add	r3, r2
 80075d0:	009b      	lsls	r3, r3, #2
 80075d2:	4403      	add	r3, r0
 80075d4:	330a      	adds	r3, #10
 80075d6:	460a      	mov	r2, r1
 80075d8:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	3301      	adds	r3, #1
}
 80075de:	4618      	mov	r0, r3
 80075e0:	3714      	adds	r7, #20
 80075e2:	46bd      	mov	sp, r7
 80075e4:	bc80      	pop	{r7}
 80075e6:	4770      	bx	lr
 80075e8:	2000051c 	.word	0x2000051c

080075ec <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80075ec:	b480      	push	{r7}
 80075ee:	b085      	sub	sp, #20
 80075f0:	af00      	add	r7, sp, #0
 80075f2:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	3b01      	subs	r3, #1
 80075f8:	607b      	str	r3, [r7, #4]
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	2b01      	cmp	r3, #1
 80075fe:	d82e      	bhi.n	800765e <dec_lock+0x72>
		n = Files[i].ctr;
 8007600:	491b      	ldr	r1, [pc, #108]	; (8007670 <dec_lock+0x84>)
 8007602:	687a      	ldr	r2, [r7, #4]
 8007604:	4613      	mov	r3, r2
 8007606:	005b      	lsls	r3, r3, #1
 8007608:	4413      	add	r3, r2
 800760a:	009b      	lsls	r3, r3, #2
 800760c:	440b      	add	r3, r1
 800760e:	330a      	adds	r3, #10
 8007610:	881b      	ldrh	r3, [r3, #0]
 8007612:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8007614:	89fb      	ldrh	r3, [r7, #14]
 8007616:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800761a:	d101      	bne.n	8007620 <dec_lock+0x34>
 800761c:	2300      	movs	r3, #0
 800761e:	81fb      	strh	r3, [r7, #14]
		if (n) n--;					/* Decrement read mode open count */
 8007620:	89fb      	ldrh	r3, [r7, #14]
 8007622:	2b00      	cmp	r3, #0
 8007624:	d002      	beq.n	800762c <dec_lock+0x40>
 8007626:	89fb      	ldrh	r3, [r7, #14]
 8007628:	3b01      	subs	r3, #1
 800762a:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800762c:	4910      	ldr	r1, [pc, #64]	; (8007670 <dec_lock+0x84>)
 800762e:	687a      	ldr	r2, [r7, #4]
 8007630:	4613      	mov	r3, r2
 8007632:	005b      	lsls	r3, r3, #1
 8007634:	4413      	add	r3, r2
 8007636:	009b      	lsls	r3, r3, #2
 8007638:	440b      	add	r3, r1
 800763a:	330a      	adds	r3, #10
 800763c:	89fa      	ldrh	r2, [r7, #14]
 800763e:	801a      	strh	r2, [r3, #0]
		if (!n) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8007640:	89fb      	ldrh	r3, [r7, #14]
 8007642:	2b00      	cmp	r3, #0
 8007644:	d108      	bne.n	8007658 <dec_lock+0x6c>
 8007646:	490a      	ldr	r1, [pc, #40]	; (8007670 <dec_lock+0x84>)
 8007648:	687a      	ldr	r2, [r7, #4]
 800764a:	4613      	mov	r3, r2
 800764c:	005b      	lsls	r3, r3, #1
 800764e:	4413      	add	r3, r2
 8007650:	009b      	lsls	r3, r3, #2
 8007652:	440b      	add	r3, r1
 8007654:	2200      	movs	r2, #0
 8007656:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8007658:	2300      	movs	r3, #0
 800765a:	737b      	strb	r3, [r7, #13]
 800765c:	e001      	b.n	8007662 <dec_lock+0x76>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800765e:	2302      	movs	r3, #2
 8007660:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8007662:	7b7b      	ldrb	r3, [r7, #13]
}
 8007664:	4618      	mov	r0, r3
 8007666:	3714      	adds	r7, #20
 8007668:	46bd      	mov	sp, r7
 800766a:	bc80      	pop	{r7}
 800766c:	4770      	bx	lr
 800766e:	bf00      	nop
 8007670:	2000051c 	.word	0x2000051c

08007674 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8007674:	b480      	push	{r7}
 8007676:	b085      	sub	sp, #20
 8007678:	af00      	add	r7, sp, #0
 800767a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800767c:	2300      	movs	r3, #0
 800767e:	60fb      	str	r3, [r7, #12]
 8007680:	e016      	b.n	80076b0 <clear_lock+0x3c>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8007682:	490f      	ldr	r1, [pc, #60]	; (80076c0 <clear_lock+0x4c>)
 8007684:	68fa      	ldr	r2, [r7, #12]
 8007686:	4613      	mov	r3, r2
 8007688:	005b      	lsls	r3, r3, #1
 800768a:	4413      	add	r3, r2
 800768c:	009b      	lsls	r3, r3, #2
 800768e:	440b      	add	r3, r1
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	687a      	ldr	r2, [r7, #4]
 8007694:	429a      	cmp	r2, r3
 8007696:	d108      	bne.n	80076aa <clear_lock+0x36>
 8007698:	4909      	ldr	r1, [pc, #36]	; (80076c0 <clear_lock+0x4c>)
 800769a:	68fa      	ldr	r2, [r7, #12]
 800769c:	4613      	mov	r3, r2
 800769e:	005b      	lsls	r3, r3, #1
 80076a0:	4413      	add	r3, r2
 80076a2:	009b      	lsls	r3, r3, #2
 80076a4:	440b      	add	r3, r1
 80076a6:	2200      	movs	r2, #0
 80076a8:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	3301      	adds	r3, #1
 80076ae:	60fb      	str	r3, [r7, #12]
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	2b01      	cmp	r3, #1
 80076b4:	d9e5      	bls.n	8007682 <clear_lock+0xe>
	}
}
 80076b6:	bf00      	nop
 80076b8:	3714      	adds	r7, #20
 80076ba:	46bd      	mov	sp, r7
 80076bc:	bc80      	pop	{r7}
 80076be:	4770      	bx	lr
 80076c0:	2000051c 	.word	0x2000051c

080076c4 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (
	FATFS* fs		/* File system object */
)
{
 80076c4:	b580      	push	{r7, lr}
 80076c6:	b086      	sub	sp, #24
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80076cc:	2300      	movs	r3, #0
 80076ce:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	f893 3204 	ldrb.w	r3, [r3, #516]	; 0x204
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d038      	beq.n	800774c <sync_window+0x88>
		wsect = fs->winsect;	/* Current sector number */
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	f8d3 3230 	ldr.w	r3, [r3, #560]	; 0x230
 80076e0:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 80076e8:	6879      	ldr	r1, [r7, #4]
 80076ea:	2301      	movs	r3, #1
 80076ec:	697a      	ldr	r2, [r7, #20]
 80076ee:	f7ff fd55 	bl	800719c <disk_write>
 80076f2:	4603      	mov	r3, r0
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d002      	beq.n	80076fe <sync_window+0x3a>
			res = FR_DISK_ERR;
 80076f8:	2301      	movs	r3, #1
 80076fa:	73fb      	strb	r3, [r7, #15]
 80076fc:	e026      	b.n	800774c <sync_window+0x88>
		} else {
			fs->wflag = 0;
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	2200      	movs	r2, #0
 8007702:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 800770c:	697a      	ldr	r2, [r7, #20]
 800770e:	1ad2      	subs	r2, r2, r3
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8007716:	429a      	cmp	r2, r3
 8007718:	d218      	bcs.n	800774c <sync_window+0x88>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 8007720:	613b      	str	r3, [r7, #16]
 8007722:	e010      	b.n	8007746 <sync_window+0x82>
					wsect += fs->fsize;
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 800772a:	697a      	ldr	r2, [r7, #20]
 800772c:	4413      	add	r3, r2
 800772e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8007736:	6879      	ldr	r1, [r7, #4]
 8007738:	2301      	movs	r3, #1
 800773a:	697a      	ldr	r2, [r7, #20]
 800773c:	f7ff fd2e 	bl	800719c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8007740:	693b      	ldr	r3, [r7, #16]
 8007742:	3b01      	subs	r3, #1
 8007744:	613b      	str	r3, [r7, #16]
 8007746:	693b      	ldr	r3, [r7, #16]
 8007748:	2b01      	cmp	r3, #1
 800774a:	d8eb      	bhi.n	8007724 <sync_window+0x60>
				}
			}
		}
	}
	return res;
 800774c:	7bfb      	ldrb	r3, [r7, #15]
}
 800774e:	4618      	mov	r0, r3
 8007750:	3718      	adds	r7, #24
 8007752:	46bd      	mov	sp, r7
 8007754:	bd80      	pop	{r7, pc}

08007756 <move_window>:
static
FRESULT move_window (
	FATFS* fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[].d8 */
)
{
 8007756:	b580      	push	{r7, lr}
 8007758:	b084      	sub	sp, #16
 800775a:	af00      	add	r7, sp, #0
 800775c:	6078      	str	r0, [r7, #4]
 800775e:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8007760:	2300      	movs	r3, #0
 8007762:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	f8d3 3230 	ldr.w	r3, [r3, #560]	; 0x230
 800776a:	683a      	ldr	r2, [r7, #0]
 800776c:	429a      	cmp	r2, r3
 800776e:	d01b      	beq.n	80077a8 <move_window+0x52>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8007770:	6878      	ldr	r0, [r7, #4]
 8007772:	f7ff ffa7 	bl	80076c4 <sync_window>
 8007776:	4603      	mov	r3, r0
 8007778:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800777a:	7bfb      	ldrb	r3, [r7, #15]
 800777c:	2b00      	cmp	r3, #0
 800777e:	d113      	bne.n	80077a8 <move_window+0x52>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8007786:	6879      	ldr	r1, [r7, #4]
 8007788:	2301      	movs	r3, #1
 800778a:	683a      	ldr	r2, [r7, #0]
 800778c:	f7ff fce6 	bl	800715c <disk_read>
 8007790:	4603      	mov	r3, r0
 8007792:	2b00      	cmp	r3, #0
 8007794:	d004      	beq.n	80077a0 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8007796:	f04f 33ff 	mov.w	r3, #4294967295
 800779a:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800779c:	2301      	movs	r3, #1
 800779e:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	683a      	ldr	r2, [r7, #0]
 80077a4:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
		}
	}
	return res;
 80077a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80077aa:	4618      	mov	r0, r3
 80077ac:	3710      	adds	r7, #16
 80077ae:	46bd      	mov	sp, r7
 80077b0:	bd80      	pop	{r7, pc}

080077b2 <sync_fs>:
#if !_FS_READONLY
static
FRESULT sync_fs (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS* fs		/* File system object */
)
{
 80077b2:	b580      	push	{r7, lr}
 80077b4:	b084      	sub	sp, #16
 80077b6:	af00      	add	r7, sp, #0
 80077b8:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80077ba:	6878      	ldr	r0, [r7, #4]
 80077bc:	f7ff ff82 	bl	80076c4 <sync_window>
 80077c0:	4603      	mov	r3, r0
 80077c2:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80077c4:	7bfb      	ldrb	r3, [r7, #15]
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	f040 809b 	bne.w	8007902 <sync_fs+0x150>
		/* Update FSINFO sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80077d2:	2b03      	cmp	r3, #3
 80077d4:	f040 8088 	bne.w	80078e8 <sync_fs+0x136>
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	f893 3205 	ldrb.w	r3, [r3, #517]	; 0x205
 80077de:	2b01      	cmp	r3, #1
 80077e0:	f040 8082 	bne.w	80078e8 <sync_fs+0x136>
			/* Create FSINFO structure */
			mem_set(fs->win.d8, 0, SS(fs));
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80077ea:	2100      	movs	r1, #0
 80077ec:	4618      	mov	r0, r3
 80077ee:	f7ff fd30 	bl	8007252 <mem_set>
			ST_WORD(fs->win.d8 + BS_55AA, 0xAA55);
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	2255      	movs	r2, #85	; 0x55
 80077f6:	f883 21fe 	strb.w	r2, [r3, #510]	; 0x1fe
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	22aa      	movs	r2, #170	; 0xaa
 80077fe:	f883 21ff 	strb.w	r2, [r3, #511]	; 0x1ff
			ST_DWORD(fs->win.d8 + FSI_LeadSig, 0x41615252);
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	2252      	movs	r2, #82	; 0x52
 8007806:	701a      	strb	r2, [r3, #0]
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	2252      	movs	r2, #82	; 0x52
 800780c:	705a      	strb	r2, [r3, #1]
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	2261      	movs	r2, #97	; 0x61
 8007812:	709a      	strb	r2, [r3, #2]
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	2241      	movs	r2, #65	; 0x41
 8007818:	70da      	strb	r2, [r3, #3]
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	2272      	movs	r2, #114	; 0x72
 800781e:	f883 21e4 	strb.w	r2, [r3, #484]	; 0x1e4
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	2272      	movs	r2, #114	; 0x72
 8007826:	f883 21e5 	strb.w	r2, [r3, #485]	; 0x1e5
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	2241      	movs	r2, #65	; 0x41
 800782e:	f883 21e6 	strb.w	r2, [r3, #486]	; 0x1e6
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	2261      	movs	r2, #97	; 0x61
 8007836:	f883 21e7 	strb.w	r2, [r3, #487]	; 0x1e7
			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007840:	b2da      	uxtb	r2, r3
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	f883 21e8 	strb.w	r2, [r3, #488]	; 0x1e8
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800784e:	b29b      	uxth	r3, r3
 8007850:	0a1b      	lsrs	r3, r3, #8
 8007852:	b29b      	uxth	r3, r3
 8007854:	b2da      	uxtb	r2, r3
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	f883 21e9 	strb.w	r2, [r3, #489]	; 0x1e9
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007862:	0c1b      	lsrs	r3, r3, #16
 8007864:	b2da      	uxtb	r2, r3
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	f883 21ea 	strb.w	r2, [r3, #490]	; 0x1ea
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007872:	0e1b      	lsrs	r3, r3, #24
 8007874:	b2da      	uxtb	r2, r3
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	f883 21eb 	strb.w	r2, [r3, #491]	; 0x1eb
			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8007882:	b2da      	uxtb	r2, r3
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	f883 21ec 	strb.w	r2, [r3, #492]	; 0x1ec
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8007890:	b29b      	uxth	r3, r3
 8007892:	0a1b      	lsrs	r3, r3, #8
 8007894:	b29b      	uxth	r3, r3
 8007896:	b2da      	uxtb	r2, r3
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	f883 21ed 	strb.w	r2, [r3, #493]	; 0x1ed
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80078a4:	0c1b      	lsrs	r3, r3, #16
 80078a6:	b2da      	uxtb	r2, r3
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	f883 21ee 	strb.w	r2, [r3, #494]	; 0x1ee
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80078b4:	0e1b      	lsrs	r3, r3, #24
 80078b6:	b2da      	uxtb	r2, r3
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	f883 21ef 	strb.w	r2, [r3, #495]	; 0x1ef
			/* Write it into the FSINFO sector */
			fs->winsect = fs->volbase + 1;
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 80078c4:	1c5a      	adds	r2, r3, #1
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
			disk_write(fs->drv, fs->win.d8, fs->winsect, 1);
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 80078d2:	6879      	ldr	r1, [r7, #4]
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	f8d3 2230 	ldr.w	r2, [r3, #560]	; 0x230
 80078da:	2301      	movs	r3, #1
 80078dc:	f7ff fc5e 	bl	800719c <disk_write>
			fs->fsi_flag = 0;
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	2200      	movs	r2, #0
 80078e4:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 80078ee:	2200      	movs	r2, #0
 80078f0:	2100      	movs	r1, #0
 80078f2:	4618      	mov	r0, r3
 80078f4:	f7ff fc72 	bl	80071dc <disk_ioctl>
 80078f8:	4603      	mov	r3, r0
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d001      	beq.n	8007902 <sync_fs+0x150>
			res = FR_DISK_ERR;
 80078fe:	2301      	movs	r3, #1
 8007900:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8007902:	7bfb      	ldrb	r3, [r7, #15]
}
 8007904:	4618      	mov	r0, r3
 8007906:	3710      	adds	r7, #16
 8007908:	46bd      	mov	sp, r7
 800790a:	bd80      	pop	{r7, pc}

0800790c <clust2sect>:

DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800790c:	b480      	push	{r7}
 800790e:	b083      	sub	sp, #12
 8007910:	af00      	add	r7, sp, #0
 8007912:	6078      	str	r0, [r7, #4]
 8007914:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8007916:	683b      	ldr	r3, [r7, #0]
 8007918:	3b02      	subs	r3, #2
 800791a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8007922:	3b02      	subs	r3, #2
 8007924:	683a      	ldr	r2, [r7, #0]
 8007926:	429a      	cmp	r2, r3
 8007928:	d301      	bcc.n	800792e <clust2sect+0x22>
 800792a:	2300      	movs	r3, #0
 800792c:	e00a      	b.n	8007944 <clust2sect+0x38>
	return clst * fs->csize + fs->database;
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8007934:	461a      	mov	r2, r3
 8007936:	683b      	ldr	r3, [r7, #0]
 8007938:	fb03 f202 	mul.w	r2, r3, r2
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 8007942:	4413      	add	r3, r2
}
 8007944:	4618      	mov	r0, r3
 8007946:	370c      	adds	r7, #12
 8007948:	46bd      	mov	sp, r7
 800794a:	bc80      	pop	{r7}
 800794c:	4770      	bx	lr

0800794e <get_fat>:

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x0FFFFFFF:Cluster status */
	FATFS* fs,	/* File system object */
	DWORD clst	/* FAT index number (cluster number) to get the value */
)
{
 800794e:	b580      	push	{r7, lr}
 8007950:	b086      	sub	sp, #24
 8007952:	af00      	add	r7, sp, #0
 8007954:	6078      	str	r0, [r7, #4]
 8007956:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;
	DWORD val;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8007958:	683b      	ldr	r3, [r7, #0]
 800795a:	2b01      	cmp	r3, #1
 800795c:	d905      	bls.n	800796a <get_fat+0x1c>
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8007964:	683a      	ldr	r2, [r7, #0]
 8007966:	429a      	cmp	r2, r3
 8007968:	d302      	bcc.n	8007970 <get_fat+0x22>
		val = 1;	/* Internal error */
 800796a:	2301      	movs	r3, #1
 800796c:	617b      	str	r3, [r7, #20]
 800796e:	e0a0      	b.n	8007ab2 <get_fat+0x164>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8007970:	f04f 33ff 	mov.w	r3, #4294967295
 8007974:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800797c:	2b02      	cmp	r3, #2
 800797e:	d044      	beq.n	8007a0a <get_fat+0xbc>
 8007980:	2b03      	cmp	r3, #3
 8007982:	d063      	beq.n	8007a4c <get_fat+0xfe>
 8007984:	2b01      	cmp	r3, #1
 8007986:	f040 808a 	bne.w	8007a9e <get_fat+0x150>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800798a:	683b      	ldr	r3, [r7, #0]
 800798c:	60fb      	str	r3, [r7, #12]
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	085b      	lsrs	r3, r3, #1
 8007992:	68fa      	ldr	r2, [r7, #12]
 8007994:	4413      	add	r3, r2
 8007996:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	f8d3 2224 	ldr.w	r2, [r3, #548]	; 0x224
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	0a5b      	lsrs	r3, r3, #9
 80079a2:	4413      	add	r3, r2
 80079a4:	4619      	mov	r1, r3
 80079a6:	6878      	ldr	r0, [r7, #4]
 80079a8:	f7ff fed5 	bl	8007756 <move_window>
 80079ac:	4603      	mov	r3, r0
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d178      	bne.n	8007aa4 <get_fat+0x156>
			wc = fs->win.d8[bc++ % SS(fs)];
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	1c5a      	adds	r2, r3, #1
 80079b6:	60fa      	str	r2, [r7, #12]
 80079b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80079bc:	687a      	ldr	r2, [r7, #4]
 80079be:	5cd3      	ldrb	r3, [r2, r3]
 80079c0:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	f8d3 2224 	ldr.w	r2, [r3, #548]	; 0x224
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	0a5b      	lsrs	r3, r3, #9
 80079cc:	4413      	add	r3, r2
 80079ce:	4619      	mov	r1, r3
 80079d0:	6878      	ldr	r0, [r7, #4]
 80079d2:	f7ff fec0 	bl	8007756 <move_window>
 80079d6:	4603      	mov	r3, r0
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d165      	bne.n	8007aa8 <get_fat+0x15a>
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80079e2:	687a      	ldr	r2, [r7, #4]
 80079e4:	5cd3      	ldrb	r3, [r2, r3]
 80079e6:	021b      	lsls	r3, r3, #8
 80079e8:	461a      	mov	r2, r3
 80079ea:	68bb      	ldr	r3, [r7, #8]
 80079ec:	4313      	orrs	r3, r2
 80079ee:	60bb      	str	r3, [r7, #8]
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 80079f0:	683b      	ldr	r3, [r7, #0]
 80079f2:	f003 0301 	and.w	r3, r3, #1
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d002      	beq.n	8007a00 <get_fat+0xb2>
 80079fa:	68bb      	ldr	r3, [r7, #8]
 80079fc:	091b      	lsrs	r3, r3, #4
 80079fe:	e002      	b.n	8007a06 <get_fat+0xb8>
 8007a00:	68bb      	ldr	r3, [r7, #8]
 8007a02:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007a06:	617b      	str	r3, [r7, #20]
			break;
 8007a08:	e053      	b.n	8007ab2 <get_fat+0x164>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	f8d3 2224 	ldr.w	r2, [r3, #548]	; 0x224
 8007a10:	683b      	ldr	r3, [r7, #0]
 8007a12:	0a1b      	lsrs	r3, r3, #8
 8007a14:	4413      	add	r3, r2
 8007a16:	4619      	mov	r1, r3
 8007a18:	6878      	ldr	r0, [r7, #4]
 8007a1a:	f7ff fe9c 	bl	8007756 <move_window>
 8007a1e:	4603      	mov	r3, r0
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d143      	bne.n	8007aac <get_fat+0x15e>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 8007a24:	683b      	ldr	r3, [r7, #0]
 8007a26:	005b      	lsls	r3, r3, #1
 8007a28:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8007a2c:	687a      	ldr	r2, [r7, #4]
 8007a2e:	4413      	add	r3, r2
 8007a30:	613b      	str	r3, [r7, #16]
			val = LD_WORD(p);
 8007a32:	693b      	ldr	r3, [r7, #16]
 8007a34:	3301      	adds	r3, #1
 8007a36:	781b      	ldrb	r3, [r3, #0]
 8007a38:	021b      	lsls	r3, r3, #8
 8007a3a:	b21a      	sxth	r2, r3
 8007a3c:	693b      	ldr	r3, [r7, #16]
 8007a3e:	781b      	ldrb	r3, [r3, #0]
 8007a40:	b21b      	sxth	r3, r3
 8007a42:	4313      	orrs	r3, r2
 8007a44:	b21b      	sxth	r3, r3
 8007a46:	b29b      	uxth	r3, r3
 8007a48:	617b      	str	r3, [r7, #20]
			break;
 8007a4a:	e032      	b.n	8007ab2 <get_fat+0x164>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	f8d3 2224 	ldr.w	r2, [r3, #548]	; 0x224
 8007a52:	683b      	ldr	r3, [r7, #0]
 8007a54:	09db      	lsrs	r3, r3, #7
 8007a56:	4413      	add	r3, r2
 8007a58:	4619      	mov	r1, r3
 8007a5a:	6878      	ldr	r0, [r7, #4]
 8007a5c:	f7ff fe7b 	bl	8007756 <move_window>
 8007a60:	4603      	mov	r3, r0
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d124      	bne.n	8007ab0 <get_fat+0x162>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 8007a66:	683b      	ldr	r3, [r7, #0]
 8007a68:	009b      	lsls	r3, r3, #2
 8007a6a:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8007a6e:	687a      	ldr	r2, [r7, #4]
 8007a70:	4413      	add	r3, r2
 8007a72:	613b      	str	r3, [r7, #16]
			val = LD_DWORD(p) & 0x0FFFFFFF;
 8007a74:	693b      	ldr	r3, [r7, #16]
 8007a76:	3303      	adds	r3, #3
 8007a78:	781b      	ldrb	r3, [r3, #0]
 8007a7a:	061a      	lsls	r2, r3, #24
 8007a7c:	693b      	ldr	r3, [r7, #16]
 8007a7e:	3302      	adds	r3, #2
 8007a80:	781b      	ldrb	r3, [r3, #0]
 8007a82:	041b      	lsls	r3, r3, #16
 8007a84:	4313      	orrs	r3, r2
 8007a86:	693a      	ldr	r2, [r7, #16]
 8007a88:	3201      	adds	r2, #1
 8007a8a:	7812      	ldrb	r2, [r2, #0]
 8007a8c:	0212      	lsls	r2, r2, #8
 8007a8e:	4313      	orrs	r3, r2
 8007a90:	693a      	ldr	r2, [r7, #16]
 8007a92:	7812      	ldrb	r2, [r2, #0]
 8007a94:	4313      	orrs	r3, r2
 8007a96:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8007a9a:	617b      	str	r3, [r7, #20]
			break;
 8007a9c:	e009      	b.n	8007ab2 <get_fat+0x164>

		default:
			val = 1;	/* Internal error */
 8007a9e:	2301      	movs	r3, #1
 8007aa0:	617b      	str	r3, [r7, #20]
 8007aa2:	e006      	b.n	8007ab2 <get_fat+0x164>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007aa4:	bf00      	nop
 8007aa6:	e004      	b.n	8007ab2 <get_fat+0x164>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007aa8:	bf00      	nop
 8007aaa:	e002      	b.n	8007ab2 <get_fat+0x164>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8007aac:	bf00      	nop
 8007aae:	e000      	b.n	8007ab2 <get_fat+0x164>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8007ab0:	bf00      	nop
		}
	}

	return val;
 8007ab2:	697b      	ldr	r3, [r7, #20]
}
 8007ab4:	4618      	mov	r0, r3
 8007ab6:	3718      	adds	r7, #24
 8007ab8:	46bd      	mov	sp, r7
 8007aba:	bd80      	pop	{r7, pc}

08007abc <put_fat>:
FRESULT put_fat (
	FATFS* fs,	/* File system object */
	DWORD clst,	/* FAT index number (cluster number) to be changed */
	DWORD val	/* New value to be set to the entry */
)
{
 8007abc:	b580      	push	{r7, lr}
 8007abe:	b088      	sub	sp, #32
 8007ac0:	af00      	add	r7, sp, #0
 8007ac2:	60f8      	str	r0, [r7, #12]
 8007ac4:	60b9      	str	r1, [r7, #8]
 8007ac6:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8007ac8:	68bb      	ldr	r3, [r7, #8]
 8007aca:	2b01      	cmp	r3, #1
 8007acc:	d905      	bls.n	8007ada <put_fat+0x1e>
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8007ad4:	68ba      	ldr	r2, [r7, #8]
 8007ad6:	429a      	cmp	r2, r3
 8007ad8:	d302      	bcc.n	8007ae0 <put_fat+0x24>
		res = FR_INT_ERR;
 8007ada:	2302      	movs	r3, #2
 8007adc:	77fb      	strb	r3, [r7, #31]
 8007ade:	e0f3      	b.n	8007cc8 <put_fat+0x20c>

	} else {
		switch (fs->fs_type) {
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8007ae6:	2b02      	cmp	r3, #2
 8007ae8:	d074      	beq.n	8007bd4 <put_fat+0x118>
 8007aea:	2b03      	cmp	r3, #3
 8007aec:	f000 8099 	beq.w	8007c22 <put_fat+0x166>
 8007af0:	2b01      	cmp	r3, #1
 8007af2:	f040 80df 	bne.w	8007cb4 <put_fat+0x1f8>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8007af6:	68bb      	ldr	r3, [r7, #8]
 8007af8:	617b      	str	r3, [r7, #20]
 8007afa:	697b      	ldr	r3, [r7, #20]
 8007afc:	085b      	lsrs	r3, r3, #1
 8007afe:	697a      	ldr	r2, [r7, #20]
 8007b00:	4413      	add	r3, r2
 8007b02:	617b      	str	r3, [r7, #20]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	f8d3 2224 	ldr.w	r2, [r3, #548]	; 0x224
 8007b0a:	697b      	ldr	r3, [r7, #20]
 8007b0c:	0a5b      	lsrs	r3, r3, #9
 8007b0e:	4413      	add	r3, r2
 8007b10:	4619      	mov	r1, r3
 8007b12:	68f8      	ldr	r0, [r7, #12]
 8007b14:	f7ff fe1f 	bl	8007756 <move_window>
 8007b18:	4603      	mov	r3, r0
 8007b1a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007b1c:	7ffb      	ldrb	r3, [r7, #31]
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	f040 80cb 	bne.w	8007cba <put_fat+0x1fe>
			p = &fs->win.d8[bc++ % SS(fs)];
 8007b24:	697b      	ldr	r3, [r7, #20]
 8007b26:	1c5a      	adds	r2, r3, #1
 8007b28:	617a      	str	r2, [r7, #20]
 8007b2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b2e:	68fa      	ldr	r2, [r7, #12]
 8007b30:	4413      	add	r3, r2
 8007b32:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8007b34:	68bb      	ldr	r3, [r7, #8]
 8007b36:	f003 0301 	and.w	r3, r3, #1
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d00d      	beq.n	8007b5a <put_fat+0x9e>
 8007b3e:	69bb      	ldr	r3, [r7, #24]
 8007b40:	781b      	ldrb	r3, [r3, #0]
 8007b42:	b25b      	sxtb	r3, r3
 8007b44:	f003 030f 	and.w	r3, r3, #15
 8007b48:	b25a      	sxtb	r2, r3
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	b2db      	uxtb	r3, r3
 8007b4e:	011b      	lsls	r3, r3, #4
 8007b50:	b25b      	sxtb	r3, r3
 8007b52:	4313      	orrs	r3, r2
 8007b54:	b25b      	sxtb	r3, r3
 8007b56:	b2db      	uxtb	r3, r3
 8007b58:	e001      	b.n	8007b5e <put_fat+0xa2>
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	b2db      	uxtb	r3, r3
 8007b5e:	69ba      	ldr	r2, [r7, #24]
 8007b60:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	2201      	movs	r2, #1
 8007b66:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	f8d3 2224 	ldr.w	r2, [r3, #548]	; 0x224
 8007b70:	697b      	ldr	r3, [r7, #20]
 8007b72:	0a5b      	lsrs	r3, r3, #9
 8007b74:	4413      	add	r3, r2
 8007b76:	4619      	mov	r1, r3
 8007b78:	68f8      	ldr	r0, [r7, #12]
 8007b7a:	f7ff fdec 	bl	8007756 <move_window>
 8007b7e:	4603      	mov	r3, r0
 8007b80:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007b82:	7ffb      	ldrb	r3, [r7, #31]
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	f040 809a 	bne.w	8007cbe <put_fat+0x202>
			p = &fs->win.d8[bc % SS(fs)];
 8007b8a:	697b      	ldr	r3, [r7, #20]
 8007b8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b90:	68fa      	ldr	r2, [r7, #12]
 8007b92:	4413      	add	r3, r2
 8007b94:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8007b96:	68bb      	ldr	r3, [r7, #8]
 8007b98:	f003 0301 	and.w	r3, r3, #1
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d003      	beq.n	8007ba8 <put_fat+0xec>
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	091b      	lsrs	r3, r3, #4
 8007ba4:	b2db      	uxtb	r3, r3
 8007ba6:	e00e      	b.n	8007bc6 <put_fat+0x10a>
 8007ba8:	69bb      	ldr	r3, [r7, #24]
 8007baa:	781b      	ldrb	r3, [r3, #0]
 8007bac:	b25b      	sxtb	r3, r3
 8007bae:	f023 030f 	bic.w	r3, r3, #15
 8007bb2:	b25a      	sxtb	r2, r3
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	0a1b      	lsrs	r3, r3, #8
 8007bb8:	b25b      	sxtb	r3, r3
 8007bba:	f003 030f 	and.w	r3, r3, #15
 8007bbe:	b25b      	sxtb	r3, r3
 8007bc0:	4313      	orrs	r3, r2
 8007bc2:	b25b      	sxtb	r3, r3
 8007bc4:	b2db      	uxtb	r3, r3
 8007bc6:	69ba      	ldr	r2, [r7, #24]
 8007bc8:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	2201      	movs	r2, #1
 8007bce:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			break;
 8007bd2:	e079      	b.n	8007cc8 <put_fat+0x20c>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	f8d3 2224 	ldr.w	r2, [r3, #548]	; 0x224
 8007bda:	68bb      	ldr	r3, [r7, #8]
 8007bdc:	0a1b      	lsrs	r3, r3, #8
 8007bde:	4413      	add	r3, r2
 8007be0:	4619      	mov	r1, r3
 8007be2:	68f8      	ldr	r0, [r7, #12]
 8007be4:	f7ff fdb7 	bl	8007756 <move_window>
 8007be8:	4603      	mov	r3, r0
 8007bea:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007bec:	7ffb      	ldrb	r3, [r7, #31]
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d167      	bne.n	8007cc2 <put_fat+0x206>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 8007bf2:	68bb      	ldr	r3, [r7, #8]
 8007bf4:	005b      	lsls	r3, r3, #1
 8007bf6:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8007bfa:	68fa      	ldr	r2, [r7, #12]
 8007bfc:	4413      	add	r3, r2
 8007bfe:	61bb      	str	r3, [r7, #24]
			ST_WORD(p, (WORD)val);
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	b2da      	uxtb	r2, r3
 8007c04:	69bb      	ldr	r3, [r7, #24]
 8007c06:	701a      	strb	r2, [r3, #0]
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	b29b      	uxth	r3, r3
 8007c0c:	0a1b      	lsrs	r3, r3, #8
 8007c0e:	b29a      	uxth	r2, r3
 8007c10:	69bb      	ldr	r3, [r7, #24]
 8007c12:	3301      	adds	r3, #1
 8007c14:	b2d2      	uxtb	r2, r2
 8007c16:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	2201      	movs	r2, #1
 8007c1c:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			break;
 8007c20:	e052      	b.n	8007cc8 <put_fat+0x20c>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	f8d3 2224 	ldr.w	r2, [r3, #548]	; 0x224
 8007c28:	68bb      	ldr	r3, [r7, #8]
 8007c2a:	09db      	lsrs	r3, r3, #7
 8007c2c:	4413      	add	r3, r2
 8007c2e:	4619      	mov	r1, r3
 8007c30:	68f8      	ldr	r0, [r7, #12]
 8007c32:	f7ff fd90 	bl	8007756 <move_window>
 8007c36:	4603      	mov	r3, r0
 8007c38:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007c3a:	7ffb      	ldrb	r3, [r7, #31]
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d142      	bne.n	8007cc6 <put_fat+0x20a>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 8007c40:	68bb      	ldr	r3, [r7, #8]
 8007c42:	009b      	lsls	r3, r3, #2
 8007c44:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8007c48:	68fa      	ldr	r2, [r7, #12]
 8007c4a:	4413      	add	r3, r2
 8007c4c:	61bb      	str	r3, [r7, #24]
			val |= LD_DWORD(p) & 0xF0000000;
 8007c4e:	69bb      	ldr	r3, [r7, #24]
 8007c50:	3303      	adds	r3, #3
 8007c52:	781b      	ldrb	r3, [r3, #0]
 8007c54:	061a      	lsls	r2, r3, #24
 8007c56:	69bb      	ldr	r3, [r7, #24]
 8007c58:	3302      	adds	r3, #2
 8007c5a:	781b      	ldrb	r3, [r3, #0]
 8007c5c:	041b      	lsls	r3, r3, #16
 8007c5e:	4313      	orrs	r3, r2
 8007c60:	69ba      	ldr	r2, [r7, #24]
 8007c62:	3201      	adds	r2, #1
 8007c64:	7812      	ldrb	r2, [r2, #0]
 8007c66:	0212      	lsls	r2, r2, #8
 8007c68:	4313      	orrs	r3, r2
 8007c6a:	69ba      	ldr	r2, [r7, #24]
 8007c6c:	7812      	ldrb	r2, [r2, #0]
 8007c6e:	4313      	orrs	r3, r2
 8007c70:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8007c74:	687a      	ldr	r2, [r7, #4]
 8007c76:	4313      	orrs	r3, r2
 8007c78:	607b      	str	r3, [r7, #4]
			ST_DWORD(p, val);
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	b2da      	uxtb	r2, r3
 8007c7e:	69bb      	ldr	r3, [r7, #24]
 8007c80:	701a      	strb	r2, [r3, #0]
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	b29b      	uxth	r3, r3
 8007c86:	0a1b      	lsrs	r3, r3, #8
 8007c88:	b29a      	uxth	r2, r3
 8007c8a:	69bb      	ldr	r3, [r7, #24]
 8007c8c:	3301      	adds	r3, #1
 8007c8e:	b2d2      	uxtb	r2, r2
 8007c90:	701a      	strb	r2, [r3, #0]
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	0c1a      	lsrs	r2, r3, #16
 8007c96:	69bb      	ldr	r3, [r7, #24]
 8007c98:	3302      	adds	r3, #2
 8007c9a:	b2d2      	uxtb	r2, r2
 8007c9c:	701a      	strb	r2, [r3, #0]
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	0e1a      	lsrs	r2, r3, #24
 8007ca2:	69bb      	ldr	r3, [r7, #24]
 8007ca4:	3303      	adds	r3, #3
 8007ca6:	b2d2      	uxtb	r2, r2
 8007ca8:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	2201      	movs	r2, #1
 8007cae:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			break;
 8007cb2:	e009      	b.n	8007cc8 <put_fat+0x20c>

		default :
			res = FR_INT_ERR;
 8007cb4:	2302      	movs	r3, #2
 8007cb6:	77fb      	strb	r3, [r7, #31]
 8007cb8:	e006      	b.n	8007cc8 <put_fat+0x20c>
			if (res != FR_OK) break;
 8007cba:	bf00      	nop
 8007cbc:	e004      	b.n	8007cc8 <put_fat+0x20c>
			if (res != FR_OK) break;
 8007cbe:	bf00      	nop
 8007cc0:	e002      	b.n	8007cc8 <put_fat+0x20c>
			if (res != FR_OK) break;
 8007cc2:	bf00      	nop
 8007cc4:	e000      	b.n	8007cc8 <put_fat+0x20c>
			if (res != FR_OK) break;
 8007cc6:	bf00      	nop
		}
	}

	return res;
 8007cc8:	7ffb      	ldrb	r3, [r7, #31]
}
 8007cca:	4618      	mov	r0, r3
 8007ccc:	3720      	adds	r7, #32
 8007cce:	46bd      	mov	sp, r7
 8007cd0:	bd80      	pop	{r7, pc}

08007cd2 <remove_chain>:
static
FRESULT remove_chain (
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
 8007cd2:	b580      	push	{r7, lr}
 8007cd4:	b084      	sub	sp, #16
 8007cd6:	af00      	add	r7, sp, #0
 8007cd8:	6078      	str	r0, [r7, #4]
 8007cda:	6039      	str	r1, [r7, #0]
	DWORD nxt;
#if _USE_TRIM
	DWORD scl = clst, ecl = clst, rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8007cdc:	683b      	ldr	r3, [r7, #0]
 8007cde:	2b01      	cmp	r3, #1
 8007ce0:	d905      	bls.n	8007cee <remove_chain+0x1c>
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8007ce8:	683a      	ldr	r2, [r7, #0]
 8007cea:	429a      	cmp	r2, r3
 8007cec:	d302      	bcc.n	8007cf4 <remove_chain+0x22>
		res = FR_INT_ERR;
 8007cee:	2302      	movs	r3, #2
 8007cf0:	73fb      	strb	r3, [r7, #15]
 8007cf2:	e043      	b.n	8007d7c <remove_chain+0xaa>

	} else {
		res = FR_OK;
 8007cf4:	2300      	movs	r3, #0
 8007cf6:	73fb      	strb	r3, [r7, #15]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 8007cf8:	e036      	b.n	8007d68 <remove_chain+0x96>
			nxt = get_fat(fs, clst);			/* Get cluster status */
 8007cfa:	6839      	ldr	r1, [r7, #0]
 8007cfc:	6878      	ldr	r0, [r7, #4]
 8007cfe:	f7ff fe26 	bl	800794e <get_fat>
 8007d02:	60b8      	str	r0, [r7, #8]
			if (nxt == 0) break;				/* Empty cluster? */
 8007d04:	68bb      	ldr	r3, [r7, #8]
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d035      	beq.n	8007d76 <remove_chain+0xa4>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 8007d0a:	68bb      	ldr	r3, [r7, #8]
 8007d0c:	2b01      	cmp	r3, #1
 8007d0e:	d102      	bne.n	8007d16 <remove_chain+0x44>
 8007d10:	2302      	movs	r3, #2
 8007d12:	73fb      	strb	r3, [r7, #15]
 8007d14:	e032      	b.n	8007d7c <remove_chain+0xaa>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 8007d16:	68bb      	ldr	r3, [r7, #8]
 8007d18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d1c:	d102      	bne.n	8007d24 <remove_chain+0x52>
 8007d1e:	2301      	movs	r3, #1
 8007d20:	73fb      	strb	r3, [r7, #15]
 8007d22:	e02b      	b.n	8007d7c <remove_chain+0xaa>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 8007d24:	2200      	movs	r2, #0
 8007d26:	6839      	ldr	r1, [r7, #0]
 8007d28:	6878      	ldr	r0, [r7, #4]
 8007d2a:	f7ff fec7 	bl	8007abc <put_fat>
 8007d2e:	4603      	mov	r3, r0
 8007d30:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8007d32:	7bfb      	ldrb	r3, [r7, #15]
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d120      	bne.n	8007d7a <remove_chain+0xa8>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007d3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d42:	d00f      	beq.n	8007d64 <remove_chain+0x92>
				fs->free_clust++;
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007d4a:	1c5a      	adds	r2, r3, #1
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
				fs->fsi_flag |= 1;
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	f893 3205 	ldrb.w	r3, [r3, #517]	; 0x205
 8007d58:	f043 0301 	orr.w	r3, r3, #1
 8007d5c:	b2da      	uxtb	r2, r3
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
				rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
				disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Erase the block */
				scl = ecl = nxt;
			}
#endif
			clst = nxt;	/* Next cluster */
 8007d64:	68bb      	ldr	r3, [r7, #8]
 8007d66:	603b      	str	r3, [r7, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8007d6e:	683a      	ldr	r2, [r7, #0]
 8007d70:	429a      	cmp	r2, r3
 8007d72:	d3c2      	bcc.n	8007cfa <remove_chain+0x28>
 8007d74:	e002      	b.n	8007d7c <remove_chain+0xaa>
			if (nxt == 0) break;				/* Empty cluster? */
 8007d76:	bf00      	nop
 8007d78:	e000      	b.n	8007d7c <remove_chain+0xaa>
			if (res != FR_OK) break;
 8007d7a:	bf00      	nop
		}
	}

	return res;
 8007d7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d7e:	4618      	mov	r0, r3
 8007d80:	3710      	adds	r7, #16
 8007d82:	46bd      	mov	sp, r7
 8007d84:	bd80      	pop	{r7, pc}

08007d86 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
 8007d86:	b580      	push	{r7, lr}
 8007d88:	b086      	sub	sp, #24
 8007d8a:	af00      	add	r7, sp, #0
 8007d8c:	6078      	str	r0, [r7, #4]
 8007d8e:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
 8007d90:	683b      	ldr	r3, [r7, #0]
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d10f      	bne.n	8007db6 <create_chain+0x30>
		scl = fs->last_clust;			/* Get suggested start point */
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8007d9c:	613b      	str	r3, [r7, #16]
		if (!scl || scl >= fs->n_fatent) scl = 1;
 8007d9e:	693b      	ldr	r3, [r7, #16]
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d005      	beq.n	8007db0 <create_chain+0x2a>
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8007daa:	693a      	ldr	r2, [r7, #16]
 8007dac:	429a      	cmp	r2, r3
 8007dae:	d31c      	bcc.n	8007dea <create_chain+0x64>
 8007db0:	2301      	movs	r3, #1
 8007db2:	613b      	str	r3, [r7, #16]
 8007db4:	e019      	b.n	8007dea <create_chain+0x64>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
 8007db6:	6839      	ldr	r1, [r7, #0]
 8007db8:	6878      	ldr	r0, [r7, #4]
 8007dba:	f7ff fdc8 	bl	800794e <get_fat>
 8007dbe:	60b8      	str	r0, [r7, #8]
		if (cs < 2) return 1;			/* Invalid value */
 8007dc0:	68bb      	ldr	r3, [r7, #8]
 8007dc2:	2b01      	cmp	r3, #1
 8007dc4:	d801      	bhi.n	8007dca <create_chain+0x44>
 8007dc6:	2301      	movs	r3, #1
 8007dc8:	e076      	b.n	8007eb8 <create_chain+0x132>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8007dca:	68bb      	ldr	r3, [r7, #8]
 8007dcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007dd0:	d101      	bne.n	8007dd6 <create_chain+0x50>
 8007dd2:	68bb      	ldr	r3, [r7, #8]
 8007dd4:	e070      	b.n	8007eb8 <create_chain+0x132>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8007ddc:	68ba      	ldr	r2, [r7, #8]
 8007dde:	429a      	cmp	r2, r3
 8007de0:	d201      	bcs.n	8007de6 <create_chain+0x60>
 8007de2:	68bb      	ldr	r3, [r7, #8]
 8007de4:	e068      	b.n	8007eb8 <create_chain+0x132>
		scl = clst;
 8007de6:	683b      	ldr	r3, [r7, #0]
 8007de8:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
 8007dea:	693b      	ldr	r3, [r7, #16]
 8007dec:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl++;							/* Next cluster */
 8007dee:	697b      	ldr	r3, [r7, #20]
 8007df0:	3301      	adds	r3, #1
 8007df2:	617b      	str	r3, [r7, #20]
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8007dfa:	697a      	ldr	r2, [r7, #20]
 8007dfc:	429a      	cmp	r2, r3
 8007dfe:	d307      	bcc.n	8007e10 <create_chain+0x8a>
			ncl = 2;
 8007e00:	2302      	movs	r3, #2
 8007e02:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free cluster */
 8007e04:	697a      	ldr	r2, [r7, #20]
 8007e06:	693b      	ldr	r3, [r7, #16]
 8007e08:	429a      	cmp	r2, r3
 8007e0a:	d901      	bls.n	8007e10 <create_chain+0x8a>
 8007e0c:	2300      	movs	r3, #0
 8007e0e:	e053      	b.n	8007eb8 <create_chain+0x132>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
 8007e10:	6979      	ldr	r1, [r7, #20]
 8007e12:	6878      	ldr	r0, [r7, #4]
 8007e14:	f7ff fd9b 	bl	800794e <get_fat>
 8007e18:	60b8      	str	r0, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
 8007e1a:	68bb      	ldr	r3, [r7, #8]
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d00e      	beq.n	8007e3e <create_chain+0xb8>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 8007e20:	68bb      	ldr	r3, [r7, #8]
 8007e22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e26:	d002      	beq.n	8007e2e <create_chain+0xa8>
 8007e28:	68bb      	ldr	r3, [r7, #8]
 8007e2a:	2b01      	cmp	r3, #1
 8007e2c:	d101      	bne.n	8007e32 <create_chain+0xac>
			return cs;
 8007e2e:	68bb      	ldr	r3, [r7, #8]
 8007e30:	e042      	b.n	8007eb8 <create_chain+0x132>
		if (ncl == scl) return 0;		/* No free cluster */
 8007e32:	697a      	ldr	r2, [r7, #20]
 8007e34:	693b      	ldr	r3, [r7, #16]
 8007e36:	429a      	cmp	r2, r3
 8007e38:	d1d9      	bne.n	8007dee <create_chain+0x68>
 8007e3a:	2300      	movs	r3, #0
 8007e3c:	e03c      	b.n	8007eb8 <create_chain+0x132>
		if (cs == 0) break;				/* Found a free cluster */
 8007e3e:	bf00      	nop
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
 8007e40:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 8007e44:	6979      	ldr	r1, [r7, #20]
 8007e46:	6878      	ldr	r0, [r7, #4]
 8007e48:	f7ff fe38 	bl	8007abc <put_fat>
 8007e4c:	4603      	mov	r3, r0
 8007e4e:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK && clst != 0) {
 8007e50:	7bfb      	ldrb	r3, [r7, #15]
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d109      	bne.n	8007e6a <create_chain+0xe4>
 8007e56:	683b      	ldr	r3, [r7, #0]
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d006      	beq.n	8007e6a <create_chain+0xe4>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
 8007e5c:	697a      	ldr	r2, [r7, #20]
 8007e5e:	6839      	ldr	r1, [r7, #0]
 8007e60:	6878      	ldr	r0, [r7, #4]
 8007e62:	f7ff fe2b 	bl	8007abc <put_fat>
 8007e66:	4603      	mov	r3, r0
 8007e68:	73fb      	strb	r3, [r7, #15]
	}
	if (res == FR_OK) {
 8007e6a:	7bfb      	ldrb	r3, [r7, #15]
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d11a      	bne.n	8007ea6 <create_chain+0x120>
		fs->last_clust = ncl;			/* Update FSINFO */
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	697a      	ldr	r2, [r7, #20]
 8007e74:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
		if (fs->free_clust != 0xFFFFFFFF) {
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007e7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e82:	d018      	beq.n	8007eb6 <create_chain+0x130>
			fs->free_clust--;
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007e8a:	1e5a      	subs	r2, r3, #1
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
			fs->fsi_flag |= 1;
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	f893 3205 	ldrb.w	r3, [r3, #517]	; 0x205
 8007e98:	f043 0301 	orr.w	r3, r3, #1
 8007e9c:	b2da      	uxtb	r2, r3
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
 8007ea4:	e007      	b.n	8007eb6 <create_chain+0x130>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 8007ea6:	7bfb      	ldrb	r3, [r7, #15]
 8007ea8:	2b01      	cmp	r3, #1
 8007eaa:	d102      	bne.n	8007eb2 <create_chain+0x12c>
 8007eac:	f04f 33ff 	mov.w	r3, #4294967295
 8007eb0:	e000      	b.n	8007eb4 <create_chain+0x12e>
 8007eb2:	2301      	movs	r3, #1
 8007eb4:	617b      	str	r3, [r7, #20]
	}

	return ncl;		/* Return new cluster number or error code */
 8007eb6:	697b      	ldr	r3, [r7, #20]
}
 8007eb8:	4618      	mov	r0, r3
 8007eba:	3718      	adds	r7, #24
 8007ebc:	46bd      	mov	sp, r7
 8007ebe:	bd80      	pop	{r7, pc}

08007ec0 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File offset to be converted to cluster# */
)
{
 8007ec0:	b480      	push	{r7}
 8007ec2:	b087      	sub	sp, #28
 8007ec4:	af00      	add	r7, sp, #0
 8007ec6:	6078      	str	r0, [r7, #4]
 8007ec8:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 8007ed0:	3304      	adds	r3, #4
 8007ed2:	613b      	str	r3, [r7, #16]
	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
 8007ed4:	683b      	ldr	r3, [r7, #0]
 8007ed6:	0a5b      	lsrs	r3, r3, #9
 8007ed8:	687a      	ldr	r2, [r7, #4]
 8007eda:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 8007ede:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 8007ee2:	fbb3 f3f2 	udiv	r3, r3, r2
 8007ee6:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8007ee8:	693b      	ldr	r3, [r7, #16]
 8007eea:	1d1a      	adds	r2, r3, #4
 8007eec:	613a      	str	r2, [r7, #16]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	60fb      	str	r3, [r7, #12]
		if (!ncl) return 0;		/* End of table? (error) */
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d101      	bne.n	8007efc <clmt_clust+0x3c>
 8007ef8:	2300      	movs	r3, #0
 8007efa:	e010      	b.n	8007f1e <clmt_clust+0x5e>
		if (cl < ncl) break;	/* In this fragment? */
 8007efc:	697a      	ldr	r2, [r7, #20]
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	429a      	cmp	r2, r3
 8007f02:	d307      	bcc.n	8007f14 <clmt_clust+0x54>
		cl -= ncl; tbl++;		/* Next fragment */
 8007f04:	697a      	ldr	r2, [r7, #20]
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	1ad3      	subs	r3, r2, r3
 8007f0a:	617b      	str	r3, [r7, #20]
 8007f0c:	693b      	ldr	r3, [r7, #16]
 8007f0e:	3304      	adds	r3, #4
 8007f10:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8007f12:	e7e9      	b.n	8007ee8 <clmt_clust+0x28>
		if (cl < ncl) break;	/* In this fragment? */
 8007f14:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8007f16:	693b      	ldr	r3, [r7, #16]
 8007f18:	681a      	ldr	r2, [r3, #0]
 8007f1a:	697b      	ldr	r3, [r7, #20]
 8007f1c:	4413      	add	r3, r2
}
 8007f1e:	4618      	mov	r0, r3
 8007f20:	371c      	adds	r7, #28
 8007f22:	46bd      	mov	sp, r7
 8007f24:	bc80      	pop	{r7}
 8007f26:	4770      	bx	lr

08007f28 <dir_sdi>:
static
FRESULT dir_sdi (
	DIR* dp,		/* Pointer to directory object */
	UINT idx		/* Index of directory table */
)
{
 8007f28:	b580      	push	{r7, lr}
 8007f2a:	b086      	sub	sp, #24
 8007f2c:	af00      	add	r7, sp, #0
 8007f2e:	6078      	str	r0, [r7, #4]
 8007f30:	6039      	str	r1, [r7, #0]
	DWORD clst, sect;
	UINT ic;


	dp->index = (WORD)idx;	/* Current index */
 8007f32:	683b      	ldr	r3, [r7, #0]
 8007f34:	b29a      	uxth	r2, r3
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
	clst = dp->sclust;		/* Table start cluster (0:root) */
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8007f42:	617b      	str	r3, [r7, #20]
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 8007f44:	697b      	ldr	r3, [r7, #20]
 8007f46:	2b01      	cmp	r3, #1
 8007f48:	d007      	beq.n	8007f5a <dir_sdi+0x32>
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007f50:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8007f54:	697a      	ldr	r2, [r7, #20]
 8007f56:	429a      	cmp	r2, r3
 8007f58:	d301      	bcc.n	8007f5e <dir_sdi+0x36>
		return FR_INT_ERR;
 8007f5a:	2302      	movs	r3, #2
 8007f5c:	e074      	b.n	8008048 <dir_sdi+0x120>
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 8007f5e:	697b      	ldr	r3, [r7, #20]
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d10c      	bne.n	8007f7e <dir_sdi+0x56>
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007f6a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8007f6e:	2b03      	cmp	r3, #3
 8007f70:	d105      	bne.n	8007f7e <dir_sdi+0x56>
		clst = dp->fs->dirbase;
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007f78:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 8007f7c:	617b      	str	r3, [r7, #20]

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8007f7e:	697b      	ldr	r3, [r7, #20]
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d111      	bne.n	8007fa8 <dir_sdi+0x80>
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007f8a:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 8007f8e:	461a      	mov	r2, r3
 8007f90:	683b      	ldr	r3, [r7, #0]
 8007f92:	4293      	cmp	r3, r2
 8007f94:	d301      	bcc.n	8007f9a <dir_sdi+0x72>
			return FR_INT_ERR;
 8007f96:	2302      	movs	r3, #2
 8007f98:	e056      	b.n	8008048 <dir_sdi+0x120>
		sect = dp->fs->dirbase;
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007fa0:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 8007fa4:	613b      	str	r3, [r7, #16]
 8007fa6:	e032      	b.n	800800e <dir_sdi+0xe6>
	}
	else {				/* Dynamic table (root-directory in FAT32 or sub-directory) */
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007fae:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8007fb2:	011b      	lsls	r3, r3, #4
 8007fb4:	60fb      	str	r3, [r7, #12]
		while (idx >= ic) {	/* Follow cluster chain */
 8007fb6:	e01e      	b.n	8007ff6 <dir_sdi+0xce>
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007fbe:	6979      	ldr	r1, [r7, #20]
 8007fc0:	4618      	mov	r0, r3
 8007fc2:	f7ff fcc4 	bl	800794e <get_fat>
 8007fc6:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8007fc8:	697b      	ldr	r3, [r7, #20]
 8007fca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007fce:	d101      	bne.n	8007fd4 <dir_sdi+0xac>
 8007fd0:	2301      	movs	r3, #1
 8007fd2:	e039      	b.n	8008048 <dir_sdi+0x120>
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
 8007fd4:	697b      	ldr	r3, [r7, #20]
 8007fd6:	2b01      	cmp	r3, #1
 8007fd8:	d907      	bls.n	8007fea <dir_sdi+0xc2>
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007fe0:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8007fe4:	697a      	ldr	r2, [r7, #20]
 8007fe6:	429a      	cmp	r2, r3
 8007fe8:	d301      	bcc.n	8007fee <dir_sdi+0xc6>
				return FR_INT_ERR;
 8007fea:	2302      	movs	r3, #2
 8007fec:	e02c      	b.n	8008048 <dir_sdi+0x120>
			idx -= ic;
 8007fee:	683a      	ldr	r2, [r7, #0]
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	1ad3      	subs	r3, r2, r3
 8007ff4:	603b      	str	r3, [r7, #0]
		while (idx >= ic) {	/* Follow cluster chain */
 8007ff6:	683a      	ldr	r2, [r7, #0]
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	429a      	cmp	r2, r3
 8007ffc:	d2dc      	bcs.n	8007fb8 <dir_sdi+0x90>
		}
		sect = clust2sect(dp->fs, clst);
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8008004:	6979      	ldr	r1, [r7, #20]
 8008006:	4618      	mov	r0, r3
 8008008:	f7ff fc80 	bl	800790c <clust2sect>
 800800c:	6138      	str	r0, [r7, #16]
	}
	dp->clust = clst;	/* Current cluster# */
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	697a      	ldr	r2, [r7, #20]
 8008012:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
	if (!sect) return FR_INT_ERR;
 8008016:	693b      	ldr	r3, [r7, #16]
 8008018:	2b00      	cmp	r3, #0
 800801a:	d101      	bne.n	8008020 <dir_sdi+0xf8>
 800801c:	2302      	movs	r3, #2
 800801e:	e013      	b.n	8008048 <dir_sdi+0x120>
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 8008020:	683b      	ldr	r3, [r7, #0]
 8008022:	091a      	lsrs	r2, r3, #4
 8008024:	693b      	ldr	r3, [r7, #16]
 8008026:	441a      	add	r2, r3
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8008034:	461a      	mov	r2, r3
 8008036:	683b      	ldr	r3, [r7, #0]
 8008038:	f003 030f 	and.w	r3, r3, #15
 800803c:	015b      	lsls	r3, r3, #5
 800803e:	441a      	add	r2, r3
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

	return FR_OK;
 8008046:	2300      	movs	r3, #0
}
 8008048:	4618      	mov	r0, r3
 800804a:	3718      	adds	r7, #24
 800804c:	46bd      	mov	sp, r7
 800804e:	bd80      	pop	{r7, pc}

08008050 <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8008050:	b590      	push	{r4, r7, lr}
 8008052:	b087      	sub	sp, #28
 8008054:	af00      	add	r7, sp, #0
 8008056:	6078      	str	r0, [r7, #4]
 8008058:	6039      	str	r1, [r7, #0]
#if !_FS_READONLY
	UINT c;
#endif


	i = dp->index + 1;
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206
 8008060:	3301      	adds	r3, #1
 8008062:	60fb      	str	r3, [r7, #12]
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	b29b      	uxth	r3, r3
 8008068:	2b00      	cmp	r3, #0
 800806a:	d004      	beq.n	8008076 <dir_next+0x26>
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8008072:	2b00      	cmp	r3, #0
 8008074:	d101      	bne.n	800807a <dir_next+0x2a>
		return FR_NO_FILE;
 8008076:	2304      	movs	r3, #4
 8008078:	e0dd      	b.n	8008236 <dir_next+0x1e6>

	if (!(i % (SS(dp->fs) / SZ_DIRE))) {	/* Sector changed? */
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	f003 030f 	and.w	r3, r3, #15
 8008080:	2b00      	cmp	r3, #0
 8008082:	f040 80c6 	bne.w	8008212 <dir_next+0x1c2>
		dp->sect++;					/* Next sector */
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800808c:	1c5a      	adds	r2, r3, #1
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

		if (!dp->clust) {		/* Static table */
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800809a:	2b00      	cmp	r3, #0
 800809c:	d10b      	bne.n	80080b6 <dir_next+0x66>
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80080a4:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 80080a8:	461a      	mov	r2, r3
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	4293      	cmp	r3, r2
 80080ae:	f0c0 80b0 	bcc.w	8008212 <dir_next+0x1c2>
				return FR_NO_FILE;
 80080b2:	2304      	movs	r3, #4
 80080b4:	e0bf      	b.n	8008236 <dir_next+0x1e6>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dp->fs) / SZ_DIRE)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	091b      	lsrs	r3, r3, #4
 80080ba:	687a      	ldr	r2, [r7, #4]
 80080bc:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 80080c0:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 80080c4:	3a01      	subs	r2, #1
 80080c6:	4013      	ands	r3, r2
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	f040 80a2 	bne.w	8008212 <dir_next+0x1c2>
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 80080da:	4619      	mov	r1, r3
 80080dc:	4610      	mov	r0, r2
 80080de:	f7ff fc36 	bl	800794e <get_fat>
 80080e2:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;
 80080e4:	697b      	ldr	r3, [r7, #20]
 80080e6:	2b01      	cmp	r3, #1
 80080e8:	d801      	bhi.n	80080ee <dir_next+0x9e>
 80080ea:	2302      	movs	r3, #2
 80080ec:	e0a3      	b.n	8008236 <dir_next+0x1e6>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 80080ee:	697b      	ldr	r3, [r7, #20]
 80080f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080f4:	d101      	bne.n	80080fa <dir_next+0xaa>
 80080f6:	2301      	movs	r3, #1
 80080f8:	e09d      	b.n	8008236 <dir_next+0x1e6>
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8008100:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8008104:	697a      	ldr	r2, [r7, #20]
 8008106:	429a      	cmp	r2, r3
 8008108:	d374      	bcc.n	80081f4 <dir_next+0x1a4>
#if !_FS_READONLY
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
 800810a:	683b      	ldr	r3, [r7, #0]
 800810c:	2b00      	cmp	r3, #0
 800810e:	d101      	bne.n	8008114 <dir_next+0xc4>
 8008110:	2304      	movs	r3, #4
 8008112:	e090      	b.n	8008236 <dir_next+0x1e6>
					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8008120:	4619      	mov	r1, r3
 8008122:	4610      	mov	r0, r2
 8008124:	f7ff fe2f 	bl	8007d86 <create_chain>
 8008128:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800812a:	697b      	ldr	r3, [r7, #20]
 800812c:	2b00      	cmp	r3, #0
 800812e:	d101      	bne.n	8008134 <dir_next+0xe4>
 8008130:	2307      	movs	r3, #7
 8008132:	e080      	b.n	8008236 <dir_next+0x1e6>
					if (clst == 1) return FR_INT_ERR;
 8008134:	697b      	ldr	r3, [r7, #20]
 8008136:	2b01      	cmp	r3, #1
 8008138:	d101      	bne.n	800813e <dir_next+0xee>
 800813a:	2302      	movs	r3, #2
 800813c:	e07b      	b.n	8008236 <dir_next+0x1e6>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 800813e:	697b      	ldr	r3, [r7, #20]
 8008140:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008144:	d101      	bne.n	800814a <dir_next+0xfa>
 8008146:	2301      	movs	r3, #1
 8008148:	e075      	b.n	8008236 <dir_next+0x1e6>
					/* Clean-up stretched table */
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8008150:	4618      	mov	r0, r3
 8008152:	f7ff fab7 	bl	80076c4 <sync_window>
 8008156:	4603      	mov	r3, r0
 8008158:	2b00      	cmp	r3, #0
 800815a:	d001      	beq.n	8008160 <dir_next+0x110>
 800815c:	2301      	movs	r3, #1
 800815e:	e06a      	b.n	8008236 <dir_next+0x1e6>
					mem_set(dp->fs->win.d8, 0, SS(dp->fs));		/* Clear window buffer */
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8008166:	f44f 7200 	mov.w	r2, #512	; 0x200
 800816a:	2100      	movs	r1, #0
 800816c:	4618      	mov	r0, r3
 800816e:	f7ff f870 	bl	8007252 <mem_set>
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
 800817e:	6979      	ldr	r1, [r7, #20]
 8008180:	4610      	mov	r0, r2
 8008182:	f7ff fbc3 	bl	800790c <clust2sect>
 8008186:	4603      	mov	r3, r0
 8008188:	f8c4 3230 	str.w	r3, [r4, #560]	; 0x230
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 800818c:	2300      	movs	r3, #0
 800818e:	613b      	str	r3, [r7, #16]
 8008190:	e01b      	b.n	80081ca <dir_next+0x17a>
						dp->fs->wflag = 1;
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8008198:	2201      	movs	r2, #1
 800819a:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
						if (sync_window(dp->fs)) return FR_DISK_ERR;
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80081a4:	4618      	mov	r0, r3
 80081a6:	f7ff fa8d 	bl	80076c4 <sync_window>
 80081aa:	4603      	mov	r3, r0
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d001      	beq.n	80081b4 <dir_next+0x164>
 80081b0:	2301      	movs	r3, #1
 80081b2:	e040      	b.n	8008236 <dir_next+0x1e6>
						dp->fs->winsect++;
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80081ba:	f8d3 2230 	ldr.w	r2, [r3, #560]	; 0x230
 80081be:	3201      	adds	r2, #1
 80081c0:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 80081c4:	693b      	ldr	r3, [r7, #16]
 80081c6:	3301      	adds	r3, #1
 80081c8:	613b      	str	r3, [r7, #16]
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80081d0:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 80081d4:	461a      	mov	r2, r3
 80081d6:	693b      	ldr	r3, [r7, #16]
 80081d8:	4293      	cmp	r3, r2
 80081da:	d3da      	bcc.n	8008192 <dir_next+0x142>
					}
					dp->fs->winsect -= c;						/* Rewind window offset */
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80081e2:	f8d3 1230 	ldr.w	r1, [r3, #560]	; 0x230
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80081ec:	693a      	ldr	r2, [r7, #16]
 80081ee:	1a8a      	subs	r2, r1, r2
 80081f0:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
#else
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT (this is to suppress warning) */
					return FR_NO_FILE;							/* Report EOT */
#endif
				}
				dp->clust = clst;				/* Initialize data for new cluster */
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	697a      	ldr	r2, [r7, #20]
 80081f8:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
				dp->sect = clust2sect(dp->fs, clst);
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8008202:	6979      	ldr	r1, [r7, #20]
 8008204:	4618      	mov	r0, r3
 8008206:	f7ff fb81 	bl	800790c <clust2sect>
 800820a:	4602      	mov	r2, r0
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
			}
		}
	}

	dp->index = (WORD)i;	/* Current index */
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	b29a      	uxth	r2, r3
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8008222:	461a      	mov	r2, r3
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	f003 030f 	and.w	r3, r3, #15
 800822a:	015b      	lsls	r3, r3, #5
 800822c:	441a      	add	r2, r3
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

	return FR_OK;
 8008234:	2300      	movs	r3, #0
}
 8008236:	4618      	mov	r0, r3
 8008238:	371c      	adds	r7, #28
 800823a:	46bd      	mov	sp, r7
 800823c:	bd90      	pop	{r4, r7, pc}

0800823e <dir_alloc>:
static
FRESULT dir_alloc (
	DIR* dp,	/* Pointer to the directory object */
	UINT nent	/* Number of contiguous entries to allocate (1-21) */
)
{
 800823e:	b580      	push	{r7, lr}
 8008240:	b084      	sub	sp, #16
 8008242:	af00      	add	r7, sp, #0
 8008244:	6078      	str	r0, [r7, #4]
 8008246:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;


	res = dir_sdi(dp, 0);
 8008248:	2100      	movs	r1, #0
 800824a:	6878      	ldr	r0, [r7, #4]
 800824c:	f7ff fe6c 	bl	8007f28 <dir_sdi>
 8008250:	4603      	mov	r3, r0
 8008252:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8008254:	7bfb      	ldrb	r3, [r7, #15]
 8008256:	2b00      	cmp	r3, #0
 8008258:	d131      	bne.n	80082be <dir_alloc+0x80>
		n = 0;
 800825a:	2300      	movs	r3, #0
 800825c:	60bb      	str	r3, [r7, #8]
		do {
			res = move_window(dp->fs, dp->sect);
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800826a:	4619      	mov	r1, r3
 800826c:	4610      	mov	r0, r2
 800826e:	f7ff fa72 	bl	8007756 <move_window>
 8008272:	4603      	mov	r3, r0
 8008274:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8008276:	7bfb      	ldrb	r3, [r7, #15]
 8008278:	2b00      	cmp	r3, #0
 800827a:	d11f      	bne.n	80082bc <dir_alloc+0x7e>
			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008282:	781b      	ldrb	r3, [r3, #0]
 8008284:	2be5      	cmp	r3, #229	; 0xe5
 8008286:	d005      	beq.n	8008294 <dir_alloc+0x56>
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800828e:	781b      	ldrb	r3, [r3, #0]
 8008290:	2b00      	cmp	r3, #0
 8008292:	d107      	bne.n	80082a4 <dir_alloc+0x66>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8008294:	68bb      	ldr	r3, [r7, #8]
 8008296:	3301      	adds	r3, #1
 8008298:	60bb      	str	r3, [r7, #8]
 800829a:	68ba      	ldr	r2, [r7, #8]
 800829c:	683b      	ldr	r3, [r7, #0]
 800829e:	429a      	cmp	r2, r3
 80082a0:	d102      	bne.n	80082a8 <dir_alloc+0x6a>
 80082a2:	e00c      	b.n	80082be <dir_alloc+0x80>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80082a4:	2300      	movs	r3, #0
 80082a6:	60bb      	str	r3, [r7, #8]
			}
			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
 80082a8:	2101      	movs	r1, #1
 80082aa:	6878      	ldr	r0, [r7, #4]
 80082ac:	f7ff fed0 	bl	8008050 <dir_next>
 80082b0:	4603      	mov	r3, r0
 80082b2:	73fb      	strb	r3, [r7, #15]
		} while (res == FR_OK);
 80082b4:	7bfb      	ldrb	r3, [r7, #15]
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d0d1      	beq.n	800825e <dir_alloc+0x20>
 80082ba:	e000      	b.n	80082be <dir_alloc+0x80>
			if (res != FR_OK) break;
 80082bc:	bf00      	nop
	}
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80082be:	7bfb      	ldrb	r3, [r7, #15]
 80082c0:	2b04      	cmp	r3, #4
 80082c2:	d101      	bne.n	80082c8 <dir_alloc+0x8a>
 80082c4:	2307      	movs	r3, #7
 80082c6:	73fb      	strb	r3, [r7, #15]
	return res;
 80082c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80082ca:	4618      	mov	r0, r3
 80082cc:	3710      	adds	r7, #16
 80082ce:	46bd      	mov	sp, r7
 80082d0:	bd80      	pop	{r7, pc}

080082d2 <ld_clust>:
static
DWORD ld_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir	/* Pointer to the directory entry */
)
{
 80082d2:	b480      	push	{r7}
 80082d4:	b085      	sub	sp, #20
 80082d6:	af00      	add	r7, sp, #0
 80082d8:	6078      	str	r0, [r7, #4]
 80082da:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = LD_WORD(dir + DIR_FstClusLO);
 80082dc:	683b      	ldr	r3, [r7, #0]
 80082de:	331b      	adds	r3, #27
 80082e0:	781b      	ldrb	r3, [r3, #0]
 80082e2:	021b      	lsls	r3, r3, #8
 80082e4:	b21a      	sxth	r2, r3
 80082e6:	683b      	ldr	r3, [r7, #0]
 80082e8:	331a      	adds	r3, #26
 80082ea:	781b      	ldrb	r3, [r3, #0]
 80082ec:	b21b      	sxth	r3, r3
 80082ee:	4313      	orrs	r3, r2
 80082f0:	b21b      	sxth	r3, r3
 80082f2:	b29b      	uxth	r3, r3
 80082f4:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32)
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80082fc:	2b03      	cmp	r3, #3
 80082fe:	d10f      	bne.n	8008320 <ld_clust+0x4e>
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
 8008300:	683b      	ldr	r3, [r7, #0]
 8008302:	3315      	adds	r3, #21
 8008304:	781b      	ldrb	r3, [r3, #0]
 8008306:	021b      	lsls	r3, r3, #8
 8008308:	b21a      	sxth	r2, r3
 800830a:	683b      	ldr	r3, [r7, #0]
 800830c:	3314      	adds	r3, #20
 800830e:	781b      	ldrb	r3, [r3, #0]
 8008310:	b21b      	sxth	r3, r3
 8008312:	4313      	orrs	r3, r2
 8008314:	b21b      	sxth	r3, r3
 8008316:	b29b      	uxth	r3, r3
 8008318:	041b      	lsls	r3, r3, #16
 800831a:	68fa      	ldr	r2, [r7, #12]
 800831c:	4313      	orrs	r3, r2
 800831e:	60fb      	str	r3, [r7, #12]

	return cl;
 8008320:	68fb      	ldr	r3, [r7, #12]
}
 8008322:	4618      	mov	r0, r3
 8008324:	3714      	adds	r7, #20
 8008326:	46bd      	mov	sp, r7
 8008328:	bc80      	pop	{r7}
 800832a:	4770      	bx	lr

0800832c <st_clust>:
static
void st_clust (
	BYTE* dir,	/* Pointer to the directory entry */
	DWORD cl	/* Value to be set */
)
{
 800832c:	b480      	push	{r7}
 800832e:	b083      	sub	sp, #12
 8008330:	af00      	add	r7, sp, #0
 8008332:	6078      	str	r0, [r7, #4]
 8008334:	6039      	str	r1, [r7, #0]
	ST_WORD(dir + DIR_FstClusLO, cl);
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	331a      	adds	r3, #26
 800833a:	683a      	ldr	r2, [r7, #0]
 800833c:	b2d2      	uxtb	r2, r2
 800833e:	701a      	strb	r2, [r3, #0]
 8008340:	683b      	ldr	r3, [r7, #0]
 8008342:	b29b      	uxth	r3, r3
 8008344:	0a1b      	lsrs	r3, r3, #8
 8008346:	b29a      	uxth	r2, r3
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	331b      	adds	r3, #27
 800834c:	b2d2      	uxtb	r2, r2
 800834e:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 8008350:	683b      	ldr	r3, [r7, #0]
 8008352:	0c1a      	lsrs	r2, r3, #16
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	3314      	adds	r3, #20
 8008358:	b2d2      	uxtb	r2, r2
 800835a:	701a      	strb	r2, [r3, #0]
 800835c:	683b      	ldr	r3, [r7, #0]
 800835e:	0c1b      	lsrs	r3, r3, #16
 8008360:	b29b      	uxth	r3, r3
 8008362:	0a1b      	lsrs	r3, r3, #8
 8008364:	b29a      	uxth	r2, r3
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	3315      	adds	r3, #21
 800836a:	b2d2      	uxtb	r2, r2
 800836c:	701a      	strb	r2, [r3, #0]
}
 800836e:	bf00      	nop
 8008370:	370c      	adds	r7, #12
 8008372:	46bd      	mov	sp, r7
 8008374:	bc80      	pop	{r7}
 8008376:	4770      	bx	lr

08008378 <dir_find>:

static
FRESULT dir_find (
	DIR* dp			/* Pointer to the directory object linked to the file name */
)
{
 8008378:	b580      	push	{r7, lr}
 800837a:	b086      	sub	sp, #24
 800837c:	af00      	add	r7, sp, #0
 800837e:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8008380:	2100      	movs	r1, #0
 8008382:	6878      	ldr	r0, [r7, #4]
 8008384:	f7ff fdd0 	bl	8007f28 <dir_sdi>
 8008388:	4603      	mov	r3, r0
 800838a:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800838c:	7dfb      	ldrb	r3, [r7, #23]
 800838e:	2b00      	cmp	r3, #0
 8008390:	d001      	beq.n	8008396 <dir_find+0x1e>
 8008392:	7dfb      	ldrb	r3, [r7, #23]
 8008394:	e03b      	b.n	800840e <dir_find+0x96>

#if _USE_LFN
	ord = sum = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(dp->fs, dp->sect);
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80083a2:	4619      	mov	r1, r3
 80083a4:	4610      	mov	r0, r2
 80083a6:	f7ff f9d6 	bl	8007756 <move_window>
 80083aa:	4603      	mov	r3, r0
 80083ac:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80083ae:	7dfb      	ldrb	r3, [r7, #23]
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d128      	bne.n	8008406 <dir_find+0x8e>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80083ba:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
 80083bc:	693b      	ldr	r3, [r7, #16]
 80083be:	781b      	ldrb	r3, [r3, #0]
 80083c0:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80083c2:	7bfb      	ldrb	r3, [r7, #15]
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d102      	bne.n	80083ce <dir_find+0x56>
 80083c8:	2304      	movs	r3, #4
 80083ca:	75fb      	strb	r3, [r7, #23]
 80083cc:	e01e      	b.n	800840c <dir_find+0x94>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dp->fn, 11)) /* Is it a valid entry? */
 80083ce:	693b      	ldr	r3, [r7, #16]
 80083d0:	330b      	adds	r3, #11
 80083d2:	781b      	ldrb	r3, [r3, #0]
 80083d4:	f003 0308 	and.w	r3, r3, #8
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d10a      	bne.n	80083f2 <dir_find+0x7a>
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80083e2:	220b      	movs	r2, #11
 80083e4:	4619      	mov	r1, r3
 80083e6:	6938      	ldr	r0, [r7, #16]
 80083e8:	f7fe ff4c 	bl	8007284 <mem_cmp>
 80083ec:	4603      	mov	r3, r0
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d00b      	beq.n	800840a <dir_find+0x92>
			break;
#endif
		res = dir_next(dp, 0);		/* Next entry */
 80083f2:	2100      	movs	r1, #0
 80083f4:	6878      	ldr	r0, [r7, #4]
 80083f6:	f7ff fe2b 	bl	8008050 <dir_next>
 80083fa:	4603      	mov	r3, r0
 80083fc:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80083fe:	7dfb      	ldrb	r3, [r7, #23]
 8008400:	2b00      	cmp	r3, #0
 8008402:	d0c8      	beq.n	8008396 <dir_find+0x1e>
 8008404:	e002      	b.n	800840c <dir_find+0x94>
		if (res != FR_OK) break;
 8008406:	bf00      	nop
 8008408:	e000      	b.n	800840c <dir_find+0x94>
			break;
 800840a:	bf00      	nop

	return res;
 800840c:	7dfb      	ldrb	r3, [r7, #23]
}
 800840e:	4618      	mov	r0, r3
 8008410:	3718      	adds	r7, #24
 8008412:	46bd      	mov	sp, r7
 8008414:	bd80      	pop	{r7, pc}

08008416 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 8008416:	b580      	push	{r7, lr}
 8008418:	b086      	sub	sp, #24
 800841a:	af00      	add	r7, sp, #0
 800841c:	6078      	str	r0, [r7, #4]
 800841e:	6039      	str	r1, [r7, #0]
	BYTE a, c, *dir;
#if _USE_LFN
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	res = FR_NO_FILE;
 8008420:	2304      	movs	r3, #4
 8008422:	75fb      	strb	r3, [r7, #23]
	while (dp->sect) {
 8008424:	e03f      	b.n	80084a6 <dir_read+0x90>
		res = move_window(dp->fs, dp->sect);
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8008432:	4619      	mov	r1, r3
 8008434:	4610      	mov	r0, r2
 8008436:	f7ff f98e 	bl	8007756 <move_window>
 800843a:	4603      	mov	r3, r0
 800843c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800843e:	7dfb      	ldrb	r3, [r7, #23]
 8008440:	2b00      	cmp	r3, #0
 8008442:	d136      	bne.n	80084b2 <dir_read+0x9c>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800844a:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
 800844c:	693b      	ldr	r3, [r7, #16]
 800844e:	781b      	ldrb	r3, [r3, #0]
 8008450:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8008452:	7bfb      	ldrb	r3, [r7, #15]
 8008454:	2b00      	cmp	r3, #0
 8008456:	d102      	bne.n	800845e <dir_read+0x48>
 8008458:	2304      	movs	r3, #4
 800845a:	75fb      	strb	r3, [r7, #23]
 800845c:	e02e      	b.n	80084bc <dir_read+0xa6>
		a = dir[DIR_Attr] & AM_MASK;
 800845e:	693b      	ldr	r3, [r7, #16]
 8008460:	330b      	adds	r3, #11
 8008462:	781b      	ldrb	r3, [r3, #0]
 8008464:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008468:	73bb      	strb	r3, [r7, #14]
					dp->lfn_idx = 0xFFFF;		/* It has no LFN. */
				break;
			}
		}
#else		/* Non LFN configuration */
		if (c != DDEM && (_FS_RPATH || c != '.') && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol)	/* Is it a valid entry? */
 800846a:	7bfb      	ldrb	r3, [r7, #15]
 800846c:	2be5      	cmp	r3, #229	; 0xe5
 800846e:	d011      	beq.n	8008494 <dir_read+0x7e>
 8008470:	7bfb      	ldrb	r3, [r7, #15]
 8008472:	2b2e      	cmp	r3, #46	; 0x2e
 8008474:	d00e      	beq.n	8008494 <dir_read+0x7e>
 8008476:	7bbb      	ldrb	r3, [r7, #14]
 8008478:	2b0f      	cmp	r3, #15
 800847a:	d00b      	beq.n	8008494 <dir_read+0x7e>
 800847c:	7bbb      	ldrb	r3, [r7, #14]
 800847e:	f023 0320 	bic.w	r3, r3, #32
 8008482:	2b08      	cmp	r3, #8
 8008484:	bf0c      	ite	eq
 8008486:	2301      	moveq	r3, #1
 8008488:	2300      	movne	r3, #0
 800848a:	b2db      	uxtb	r3, r3
 800848c:	461a      	mov	r2, r3
 800848e:	683b      	ldr	r3, [r7, #0]
 8008490:	4293      	cmp	r3, r2
 8008492:	d010      	beq.n	80084b6 <dir_read+0xa0>
			break;
#endif
		res = dir_next(dp, 0);				/* Next entry */
 8008494:	2100      	movs	r1, #0
 8008496:	6878      	ldr	r0, [r7, #4]
 8008498:	f7ff fdda 	bl	8008050 <dir_next>
 800849c:	4603      	mov	r3, r0
 800849e:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80084a0:	7dfb      	ldrb	r3, [r7, #23]
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d109      	bne.n	80084ba <dir_read+0xa4>
	while (dp->sect) {
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d1ba      	bne.n	8008426 <dir_read+0x10>
 80084b0:	e004      	b.n	80084bc <dir_read+0xa6>
		if (res != FR_OK) break;
 80084b2:	bf00      	nop
 80084b4:	e002      	b.n	80084bc <dir_read+0xa6>
			break;
 80084b6:	bf00      	nop
 80084b8:	e000      	b.n	80084bc <dir_read+0xa6>
		if (res != FR_OK) break;
 80084ba:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;
 80084bc:	7dfb      	ldrb	r3, [r7, #23]
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d003      	beq.n	80084ca <dir_read+0xb4>
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	2200      	movs	r2, #0
 80084c6:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

	return res;
 80084ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80084cc:	4618      	mov	r0, r3
 80084ce:	3718      	adds	r7, #24
 80084d0:	46bd      	mov	sp, r7
 80084d2:	bd80      	pop	{r7, pc}

080084d4 <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80084d4:	b580      	push	{r7, lr}
 80084d6:	b084      	sub	sp, #16
 80084d8:	af00      	add	r7, sp, #0
 80084da:	6078      	str	r0, [r7, #4]
				res = dir_next(dp, 0);	/* Next entry */
			} while (res == FR_OK && --nent);
		}
	}
#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 80084dc:	2101      	movs	r1, #1
 80084de:	6878      	ldr	r0, [r7, #4]
 80084e0:	f7ff fead 	bl	800823e <dir_alloc>
 80084e4:	4603      	mov	r3, r0
 80084e6:	73fb      	strb	r3, [r7, #15]
#endif

	if (res == FR_OK) {				/* Set SFN entry */
 80084e8:	7bfb      	ldrb	r3, [r7, #15]
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d126      	bne.n	800853c <dir_register+0x68>
		res = move_window(dp->fs, dp->sect);
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80084fa:	4619      	mov	r1, r3
 80084fc:	4610      	mov	r0, r2
 80084fe:	f7ff f92a 	bl	8007756 <move_window>
 8008502:	4603      	mov	r3, r0
 8008504:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8008506:	7bfb      	ldrb	r3, [r7, #15]
 8008508:	2b00      	cmp	r3, #0
 800850a:	d117      	bne.n	800853c <dir_register+0x68>
			mem_set(dp->dir, 0, SZ_DIRE);	/* Clean the entry */
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008512:	2220      	movs	r2, #32
 8008514:	2100      	movs	r1, #0
 8008516:	4618      	mov	r0, r3
 8008518:	f7fe fe9b 	bl	8007252 <mem_set>
			mem_cpy(dp->dir, dp->fn, 11);	/* Put SFN */
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	f8d3 0214 	ldr.w	r0, [r3, #532]	; 0x214
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8008528:	220b      	movs	r2, #11
 800852a:	4619      	mov	r1, r3
 800852c:	f7fe fe74 	bl	8007218 <mem_cpy>
#if _USE_LFN
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			dp->fs->wflag = 1;
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8008536:	2201      	movs	r2, #1
 8008538:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
		}
	}

	return res;
 800853c:	7bfb      	ldrb	r3, [r7, #15]
}
 800853e:	4618      	mov	r0, r3
 8008540:	3710      	adds	r7, #16
 8008542:	46bd      	mov	sp, r7
 8008544:	bd80      	pop	{r7, pc}

08008546 <dir_remove>:
#if !_FS_READONLY && !_FS_MINIMIZE
static
FRESULT dir_remove (	/* FR_OK: Successful, FR_DISK_ERR: A disk error */
	DIR* dp				/* Directory object pointing the entry to be removed */
)
{
 8008546:	b580      	push	{r7, lr}
 8008548:	b084      	sub	sp, #16
 800854a:	af00      	add	r7, sp, #0
 800854c:	6078      	str	r0, [r7, #4]
		} while (res == FR_OK);
		if (res == FR_NO_FILE) res = FR_INT_ERR;
	}

#else			/* Non LFN configuration */
	res = dir_sdi(dp, dp->index);
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206
 8008554:	4619      	mov	r1, r3
 8008556:	6878      	ldr	r0, [r7, #4]
 8008558:	f7ff fce6 	bl	8007f28 <dir_sdi>
 800855c:	4603      	mov	r3, r0
 800855e:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8008560:	7bfb      	ldrb	r3, [r7, #15]
 8008562:	2b00      	cmp	r3, #0
 8008564:	d121      	bne.n	80085aa <dir_remove+0x64>
		res = move_window(dp->fs, dp->sect);
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8008572:	4619      	mov	r1, r3
 8008574:	4610      	mov	r0, r2
 8008576:	f7ff f8ee 	bl	8007756 <move_window>
 800857a:	4603      	mov	r3, r0
 800857c:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800857e:	7bfb      	ldrb	r3, [r7, #15]
 8008580:	2b00      	cmp	r3, #0
 8008582:	d112      	bne.n	80085aa <dir_remove+0x64>
			mem_set(dp->dir, 0, SZ_DIRE);	/* Clear and mark the entry "deleted" */
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800858a:	2220      	movs	r2, #32
 800858c:	2100      	movs	r1, #0
 800858e:	4618      	mov	r0, r3
 8008590:	f7fe fe5f 	bl	8007252 <mem_set>
			*dp->dir = DDEM;
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800859a:	22e5      	movs	r2, #229	; 0xe5
 800859c:	701a      	strb	r2, [r3, #0]
			dp->fs->wflag = 1;
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80085a4:	2201      	movs	r2, #1
 80085a6:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
		}
	}
#endif

	return res;
 80085aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80085ac:	4618      	mov	r0, r3
 80085ae:	3710      	adds	r7, #16
 80085b0:	46bd      	mov	sp, r7
 80085b2:	bd80      	pop	{r7, pc}

080085b4 <create_name>:
static
FRESULT create_name (
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80085b4:	b580      	push	{r7, lr}
 80085b6:	b088      	sub	sp, #32
 80085b8:	af00      	add	r7, sp, #0
 80085ba:	6078      	str	r0, [r7, #4]
 80085bc:	6039      	str	r1, [r7, #0]
	BYTE b, c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
 80085be:	683b      	ldr	r3, [r7, #0]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	60fb      	str	r3, [r7, #12]
 80085c4:	e002      	b.n	80085cc <create_name+0x18>
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	3301      	adds	r3, #1
 80085ca:	60fb      	str	r3, [r7, #12]
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	781b      	ldrb	r3, [r3, #0]
 80085d0:	2b2f      	cmp	r3, #47	; 0x2f
 80085d2:	d0f8      	beq.n	80085c6 <create_name+0x12>
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	781b      	ldrb	r3, [r3, #0]
 80085d8:	2b5c      	cmp	r3, #92	; 0x5c
 80085da:	d0f4      	beq.n	80085c6 <create_name+0x12>
	sfn = dp->fn;
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80085e2:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 80085e4:	220b      	movs	r2, #11
 80085e6:	2120      	movs	r1, #32
 80085e8:	68b8      	ldr	r0, [r7, #8]
 80085ea:	f7fe fe32 	bl	8007252 <mem_set>
	si = i = b = 0; ni = 8;
 80085ee:	2300      	movs	r3, #0
 80085f0:	77fb      	strb	r3, [r7, #31]
 80085f2:	2300      	movs	r3, #0
 80085f4:	613b      	str	r3, [r7, #16]
 80085f6:	693b      	ldr	r3, [r7, #16]
 80085f8:	617b      	str	r3, [r7, #20]
 80085fa:	2308      	movs	r3, #8
 80085fc:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 80085fe:	697b      	ldr	r3, [r7, #20]
 8008600:	1c5a      	adds	r2, r3, #1
 8008602:	617a      	str	r2, [r7, #20]
 8008604:	68fa      	ldr	r2, [r7, #12]
 8008606:	4413      	add	r3, r2
 8008608:	781b      	ldrb	r3, [r3, #0]
 800860a:	77bb      	strb	r3, [r7, #30]
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
 800860c:	7fbb      	ldrb	r3, [r7, #30]
 800860e:	2b20      	cmp	r3, #32
 8008610:	d953      	bls.n	80086ba <create_name+0x106>
 8008612:	7fbb      	ldrb	r3, [r7, #30]
 8008614:	2b2f      	cmp	r3, #47	; 0x2f
 8008616:	d050      	beq.n	80086ba <create_name+0x106>
 8008618:	7fbb      	ldrb	r3, [r7, #30]
 800861a:	2b5c      	cmp	r3, #92	; 0x5c
 800861c:	d04d      	beq.n	80086ba <create_name+0x106>
		if (c == '.' || i >= ni) {
 800861e:	7fbb      	ldrb	r3, [r7, #30]
 8008620:	2b2e      	cmp	r3, #46	; 0x2e
 8008622:	d003      	beq.n	800862c <create_name+0x78>
 8008624:	693a      	ldr	r2, [r7, #16]
 8008626:	69bb      	ldr	r3, [r7, #24]
 8008628:	429a      	cmp	r2, r3
 800862a:	d30f      	bcc.n	800864c <create_name+0x98>
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
 800862c:	69bb      	ldr	r3, [r7, #24]
 800862e:	2b08      	cmp	r3, #8
 8008630:	d102      	bne.n	8008638 <create_name+0x84>
 8008632:	7fbb      	ldrb	r3, [r7, #30]
 8008634:	2b2e      	cmp	r3, #46	; 0x2e
 8008636:	d001      	beq.n	800863c <create_name+0x88>
 8008638:	2306      	movs	r3, #6
 800863a:	e073      	b.n	8008724 <create_name+0x170>
			i = 8; ni = 11;
 800863c:	2308      	movs	r3, #8
 800863e:	613b      	str	r3, [r7, #16]
 8008640:	230b      	movs	r3, #11
 8008642:	61bb      	str	r3, [r7, #24]
			b <<= 2; continue;
 8008644:	7ffb      	ldrb	r3, [r7, #31]
 8008646:	009b      	lsls	r3, r3, #2
 8008648:	77fb      	strb	r3, [r7, #31]
 800864a:	e035      	b.n	80086b8 <create_name+0x104>
		}
		if (c >= 0x80) {				/* Extended character? */
 800864c:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8008650:	2b00      	cmp	r3, #0
 8008652:	da08      	bge.n	8008666 <create_name+0xb2>
			b |= 3;						/* Eliminate NT flag */
 8008654:	7ffb      	ldrb	r3, [r7, #31]
 8008656:	f043 0303 	orr.w	r3, r3, #3
 800865a:	77fb      	strb	r3, [r7, #31]
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800865c:	7fbb      	ldrb	r3, [r7, #30]
 800865e:	3b80      	subs	r3, #128	; 0x80
 8008660:	4a32      	ldr	r2, [pc, #200]	; (800872c <create_name+0x178>)
 8008662:	5cd3      	ldrb	r3, [r2, r3]
 8008664:	77bb      	strb	r3, [r7, #30]
			if (!IsDBCS2(d) || i >= ni - 1)	/* Reject invalid DBC */
				return FR_INVALID_NAME;
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c))	/* Reject illegal chrs for SFN */
 8008666:	7fbb      	ldrb	r3, [r7, #30]
 8008668:	4619      	mov	r1, r3
 800866a:	4831      	ldr	r0, [pc, #196]	; (8008730 <create_name+0x17c>)
 800866c:	f7fe fe30 	bl	80072d0 <chk_chr>
 8008670:	4603      	mov	r3, r0
 8008672:	2b00      	cmp	r3, #0
 8008674:	d001      	beq.n	800867a <create_name+0xc6>
				return FR_INVALID_NAME;
 8008676:	2306      	movs	r3, #6
 8008678:	e054      	b.n	8008724 <create_name+0x170>
			if (IsUpper(c)) {			/* ASCII large capital? */
 800867a:	7fbb      	ldrb	r3, [r7, #30]
 800867c:	2b40      	cmp	r3, #64	; 0x40
 800867e:	d907      	bls.n	8008690 <create_name+0xdc>
 8008680:	7fbb      	ldrb	r3, [r7, #30]
 8008682:	2b5a      	cmp	r3, #90	; 0x5a
 8008684:	d804      	bhi.n	8008690 <create_name+0xdc>
				b |= 2;
 8008686:	7ffb      	ldrb	r3, [r7, #31]
 8008688:	f043 0302 	orr.w	r3, r3, #2
 800868c:	77fb      	strb	r3, [r7, #31]
 800868e:	e00c      	b.n	80086aa <create_name+0xf6>
			} else {
				if (IsLower(c)) {		/* ASCII small capital? */
 8008690:	7fbb      	ldrb	r3, [r7, #30]
 8008692:	2b60      	cmp	r3, #96	; 0x60
 8008694:	d909      	bls.n	80086aa <create_name+0xf6>
 8008696:	7fbb      	ldrb	r3, [r7, #30]
 8008698:	2b7a      	cmp	r3, #122	; 0x7a
 800869a:	d806      	bhi.n	80086aa <create_name+0xf6>
					b |= 1; c -= 0x20;
 800869c:	7ffb      	ldrb	r3, [r7, #31]
 800869e:	f043 0301 	orr.w	r3, r3, #1
 80086a2:	77fb      	strb	r3, [r7, #31]
 80086a4:	7fbb      	ldrb	r3, [r7, #30]
 80086a6:	3b20      	subs	r3, #32
 80086a8:	77bb      	strb	r3, [r7, #30]
				}
			}
			sfn[i++] = c;
 80086aa:	693b      	ldr	r3, [r7, #16]
 80086ac:	1c5a      	adds	r2, r3, #1
 80086ae:	613a      	str	r2, [r7, #16]
 80086b0:	68ba      	ldr	r2, [r7, #8]
 80086b2:	4413      	add	r3, r2
 80086b4:	7fba      	ldrb	r2, [r7, #30]
 80086b6:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 80086b8:	e7a1      	b.n	80085fe <create_name+0x4a>
		}
	}
	*path = &p[si];						/* Return pointer to the next segment */
 80086ba:	68fa      	ldr	r2, [r7, #12]
 80086bc:	697b      	ldr	r3, [r7, #20]
 80086be:	441a      	add	r2, r3
 80086c0:	683b      	ldr	r3, [r7, #0]
 80086c2:	601a      	str	r2, [r3, #0]
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 80086c4:	7fbb      	ldrb	r3, [r7, #30]
 80086c6:	2b20      	cmp	r3, #32
 80086c8:	d801      	bhi.n	80086ce <create_name+0x11a>
 80086ca:	2304      	movs	r3, #4
 80086cc:	e000      	b.n	80086d0 <create_name+0x11c>
 80086ce:	2300      	movs	r3, #0
 80086d0:	77bb      	strb	r3, [r7, #30]

	if (!i) return FR_INVALID_NAME;		/* Reject nul string */
 80086d2:	693b      	ldr	r3, [r7, #16]
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d101      	bne.n	80086dc <create_name+0x128>
 80086d8:	2306      	movs	r3, #6
 80086da:	e023      	b.n	8008724 <create_name+0x170>
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* When first character collides with DDEM, replace it with RDDEM */
 80086dc:	68bb      	ldr	r3, [r7, #8]
 80086de:	781b      	ldrb	r3, [r3, #0]
 80086e0:	2be5      	cmp	r3, #229	; 0xe5
 80086e2:	d102      	bne.n	80086ea <create_name+0x136>
 80086e4:	68bb      	ldr	r3, [r7, #8]
 80086e6:	2205      	movs	r2, #5
 80086e8:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
 80086ea:	69bb      	ldr	r3, [r7, #24]
 80086ec:	2b08      	cmp	r3, #8
 80086ee:	d102      	bne.n	80086f6 <create_name+0x142>
 80086f0:	7ffb      	ldrb	r3, [r7, #31]
 80086f2:	009b      	lsls	r3, r3, #2
 80086f4:	77fb      	strb	r3, [r7, #31]
	if ((b & 0x03) == 0x01) c |= NS_EXT;	/* NT flag (Name extension has only small capital) */
 80086f6:	7ffb      	ldrb	r3, [r7, #31]
 80086f8:	f003 0303 	and.w	r3, r3, #3
 80086fc:	2b01      	cmp	r3, #1
 80086fe:	d103      	bne.n	8008708 <create_name+0x154>
 8008700:	7fbb      	ldrb	r3, [r7, #30]
 8008702:	f043 0310 	orr.w	r3, r3, #16
 8008706:	77bb      	strb	r3, [r7, #30]
	if ((b & 0x0C) == 0x04) c |= NS_BODY;	/* NT flag (Name body has only small capital) */
 8008708:	7ffb      	ldrb	r3, [r7, #31]
 800870a:	f003 030c 	and.w	r3, r3, #12
 800870e:	2b04      	cmp	r3, #4
 8008710:	d103      	bne.n	800871a <create_name+0x166>
 8008712:	7fbb      	ldrb	r3, [r7, #30]
 8008714:	f043 0308 	orr.w	r3, r3, #8
 8008718:	77bb      	strb	r3, [r7, #30]

	sfn[NSFLAG] = c;		/* Store NT flag, File name is created */
 800871a:	68bb      	ldr	r3, [r7, #8]
 800871c:	330b      	adds	r3, #11
 800871e:	7fba      	ldrb	r2, [r7, #30]
 8008720:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8008722:	2300      	movs	r3, #0
#endif
}
 8008724:	4618      	mov	r0, r3
 8008726:	3720      	adds	r7, #32
 8008728:	46bd      	mov	sp, r7
 800872a:	bd80      	pop	{r7, pc}
 800872c:	0800e5e8 	.word	0x0800e5e8
 8008730:	0800e574 	.word	0x0800e574

08008734 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8008734:	b580      	push	{r7, lr}
 8008736:	b084      	sub	sp, #16
 8008738:	af00      	add	r7, sp, #0
 800873a:	6078      	str	r0, [r7, #4]
 800873c:	6039      	str	r1, [r7, #0]
		path++;	dp->sclust = 0;				/* Strip it and start from the root directory */
	} else {								/* No heading separator */
		dp->sclust = dp->fs->cdir;			/* Start from the current directory */
	}
#else
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 800873e:	683b      	ldr	r3, [r7, #0]
 8008740:	781b      	ldrb	r3, [r3, #0]
 8008742:	2b2f      	cmp	r3, #47	; 0x2f
 8008744:	d003      	beq.n	800874e <follow_path+0x1a>
 8008746:	683b      	ldr	r3, [r7, #0]
 8008748:	781b      	ldrb	r3, [r3, #0]
 800874a:	2b5c      	cmp	r3, #92	; 0x5c
 800874c:	d102      	bne.n	8008754 <follow_path+0x20>
		path++;
 800874e:	683b      	ldr	r3, [r7, #0]
 8008750:	3301      	adds	r3, #1
 8008752:	603b      	str	r3, [r7, #0]
	dp->sclust = 0;							/* Always start from the root directory */
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	2200      	movs	r2, #0
 8008758:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800875c:	683b      	ldr	r3, [r7, #0]
 800875e:	781b      	ldrb	r3, [r3, #0]
 8008760:	2b1f      	cmp	r3, #31
 8008762:	d80a      	bhi.n	800877a <follow_path+0x46>
		res = dir_sdi(dp, 0);
 8008764:	2100      	movs	r1, #0
 8008766:	6878      	ldr	r0, [r7, #4]
 8008768:	f7ff fbde 	bl	8007f28 <dir_sdi>
 800876c:	4603      	mov	r3, r0
 800876e:	73fb      	strb	r3, [r7, #15]
		dp->dir = 0;
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	2200      	movs	r2, #0
 8008774:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8008778:	e045      	b.n	8008806 <follow_path+0xd2>
	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800877a:	463b      	mov	r3, r7
 800877c:	4619      	mov	r1, r3
 800877e:	6878      	ldr	r0, [r7, #4]
 8008780:	f7ff ff18 	bl	80085b4 <create_name>
 8008784:	4603      	mov	r3, r0
 8008786:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8008788:	7bfb      	ldrb	r3, [r7, #15]
 800878a:	2b00      	cmp	r3, #0
 800878c:	d136      	bne.n	80087fc <follow_path+0xc8>
			res = dir_find(dp);				/* Find an object with the sagment name */
 800878e:	6878      	ldr	r0, [r7, #4]
 8008790:	f7ff fdf2 	bl	8008378 <dir_find>
 8008794:	4603      	mov	r3, r0
 8008796:	73fb      	strb	r3, [r7, #15]
			ns = dp->fn[NSFLAG];
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800879e:	7adb      	ldrb	r3, [r3, #11]
 80087a0:	73bb      	strb	r3, [r7, #14]
			if (res != FR_OK) {				/* Failed to find the object */
 80087a2:	7bfb      	ldrb	r3, [r7, #15]
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d00a      	beq.n	80087be <follow_path+0x8a>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80087a8:	7bfb      	ldrb	r3, [r7, #15]
 80087aa:	2b04      	cmp	r3, #4
 80087ac:	d128      	bne.n	8008800 <follow_path+0xcc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, */
						dp->sclust = 0; dp->dir = 0;	/* it is the root directory and stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						res = FR_OK;					/* Ended at the root directroy. Function completed. */
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80087ae:	7bbb      	ldrb	r3, [r7, #14]
 80087b0:	f003 0304 	and.w	r3, r3, #4
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d123      	bne.n	8008800 <follow_path+0xcc>
 80087b8:	2305      	movs	r3, #5
 80087ba:	73fb      	strb	r3, [r7, #15]
					}
				}
				break;
 80087bc:	e020      	b.n	8008800 <follow_path+0xcc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80087be:	7bbb      	ldrb	r3, [r7, #14]
 80087c0:	f003 0304 	and.w	r3, r3, #4
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d11d      	bne.n	8008804 <follow_path+0xd0>
			dir = dp->dir;						/* Follow the sub-directory */
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80087ce:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 80087d0:	68bb      	ldr	r3, [r7, #8]
 80087d2:	330b      	adds	r3, #11
 80087d4:	781b      	ldrb	r3, [r3, #0]
 80087d6:	f003 0310 	and.w	r3, r3, #16
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d102      	bne.n	80087e4 <follow_path+0xb0>
				res = FR_NO_PATH; break;
 80087de:	2305      	movs	r3, #5
 80087e0:	73fb      	strb	r3, [r7, #15]
 80087e2:	e010      	b.n	8008806 <follow_path+0xd2>
			}
			dp->sclust = ld_clust(dp->fs, dir);
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80087ea:	68b9      	ldr	r1, [r7, #8]
 80087ec:	4618      	mov	r0, r3
 80087ee:	f7ff fd70 	bl	80082d2 <ld_clust>
 80087f2:	4602      	mov	r2, r0
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80087fa:	e7be      	b.n	800877a <follow_path+0x46>
			if (res != FR_OK) break;
 80087fc:	bf00      	nop
 80087fe:	e002      	b.n	8008806 <follow_path+0xd2>
				break;
 8008800:	bf00      	nop
 8008802:	e000      	b.n	8008806 <follow_path+0xd2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8008804:	bf00      	nop
		}
	}

	return res;
 8008806:	7bfb      	ldrb	r3, [r7, #15]
}
 8008808:	4618      	mov	r0, r3
 800880a:	3710      	adds	r7, #16
 800880c:	46bd      	mov	sp, r7
 800880e:	bd80      	pop	{r7, pc}

08008810 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8008810:	b480      	push	{r7}
 8008812:	b087      	sub	sp, #28
 8008814:	af00      	add	r7, sp, #0
 8008816:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8008818:	f04f 33ff 	mov.w	r3, #4294967295
 800881c:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	2b00      	cmp	r3, #0
 8008824:	d031      	beq.n	800888a <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	617b      	str	r3, [r7, #20]
 800882c:	e002      	b.n	8008834 <get_ldnumber+0x24>
 800882e:	697b      	ldr	r3, [r7, #20]
 8008830:	3301      	adds	r3, #1
 8008832:	617b      	str	r3, [r7, #20]
 8008834:	697b      	ldr	r3, [r7, #20]
 8008836:	781b      	ldrb	r3, [r3, #0]
 8008838:	2b20      	cmp	r3, #32
 800883a:	d903      	bls.n	8008844 <get_ldnumber+0x34>
 800883c:	697b      	ldr	r3, [r7, #20]
 800883e:	781b      	ldrb	r3, [r3, #0]
 8008840:	2b3a      	cmp	r3, #58	; 0x3a
 8008842:	d1f4      	bne.n	800882e <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8008844:	697b      	ldr	r3, [r7, #20]
 8008846:	781b      	ldrb	r3, [r3, #0]
 8008848:	2b3a      	cmp	r3, #58	; 0x3a
 800884a:	d11c      	bne.n	8008886 <get_ldnumber+0x76>
			tp = *path;
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0'; 
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	1c5a      	adds	r2, r3, #1
 8008856:	60fa      	str	r2, [r7, #12]
 8008858:	781b      	ldrb	r3, [r3, #0]
 800885a:	3b30      	subs	r3, #48	; 0x30
 800885c:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800885e:	68bb      	ldr	r3, [r7, #8]
 8008860:	2b09      	cmp	r3, #9
 8008862:	d80e      	bhi.n	8008882 <get_ldnumber+0x72>
 8008864:	68fa      	ldr	r2, [r7, #12]
 8008866:	697b      	ldr	r3, [r7, #20]
 8008868:	429a      	cmp	r2, r3
 800886a:	d10a      	bne.n	8008882 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800886c:	68bb      	ldr	r3, [r7, #8]
 800886e:	2b00      	cmp	r3, #0
 8008870:	d107      	bne.n	8008882 <get_ldnumber+0x72>
					vol = (int)i;
 8008872:	68bb      	ldr	r3, [r7, #8]
 8008874:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8008876:	697b      	ldr	r3, [r7, #20]
 8008878:	3301      	adds	r3, #1
 800887a:	617b      	str	r3, [r7, #20]
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	697a      	ldr	r2, [r7, #20]
 8008880:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8008882:	693b      	ldr	r3, [r7, #16]
 8008884:	e002      	b.n	800888c <get_ldnumber+0x7c>
		}
#if _FS_RPATH && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8008886:	2300      	movs	r3, #0
 8008888:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800888a:	693b      	ldr	r3, [r7, #16]
}
 800888c:	4618      	mov	r0, r3
 800888e:	371c      	adds	r7, #28
 8008890:	46bd      	mov	sp, r7
 8008892:	bc80      	pop	{r7}
 8008894:	4770      	bx	lr
	...

08008898 <check_fs>:
static
BYTE check_fs (	/* 0:FAT boor sector, 1:Valid boor sector but not FAT, 2:Not a boot sector, 3:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
 8008898:	b580      	push	{r7, lr}
 800889a:	b082      	sub	sp, #8
 800889c:	af00      	add	r7, sp, #0
 800889e:	6078      	str	r0, [r7, #4]
 80088a0:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	2200      	movs	r2, #0
 80088a6:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	f04f 32ff 	mov.w	r2, #4294967295
 80088b0:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 80088b4:	6839      	ldr	r1, [r7, #0]
 80088b6:	6878      	ldr	r0, [r7, #4]
 80088b8:	f7fe ff4d 	bl	8007756 <move_window>
 80088bc:	4603      	mov	r3, r0
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d001      	beq.n	80088c6 <check_fs+0x2e>
		return 3;
 80088c2:	2303      	movs	r3, #3
 80088c4:	e04a      	b.n	800895c <check_fs+0xc4>

	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80088cc:	3301      	adds	r3, #1
 80088ce:	781b      	ldrb	r3, [r3, #0]
 80088d0:	021b      	lsls	r3, r3, #8
 80088d2:	b21a      	sxth	r2, r3
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 80088da:	b21b      	sxth	r3, r3
 80088dc:	4313      	orrs	r3, r2
 80088de:	b21b      	sxth	r3, r3
 80088e0:	4a20      	ldr	r2, [pc, #128]	; (8008964 <check_fs+0xcc>)
 80088e2:	4293      	cmp	r3, r2
 80088e4:	d001      	beq.n	80088ea <check_fs+0x52>
		return 2;
 80088e6:	2302      	movs	r3, #2
 80088e8:	e038      	b.n	800895c <check_fs+0xc4>

	if ((LD_DWORD(&fs->win.d8[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	3336      	adds	r3, #54	; 0x36
 80088ee:	3303      	adds	r3, #3
 80088f0:	781b      	ldrb	r3, [r3, #0]
 80088f2:	061a      	lsls	r2, r3, #24
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	3336      	adds	r3, #54	; 0x36
 80088f8:	3302      	adds	r3, #2
 80088fa:	781b      	ldrb	r3, [r3, #0]
 80088fc:	041b      	lsls	r3, r3, #16
 80088fe:	4313      	orrs	r3, r2
 8008900:	687a      	ldr	r2, [r7, #4]
 8008902:	3236      	adds	r2, #54	; 0x36
 8008904:	3201      	adds	r2, #1
 8008906:	7812      	ldrb	r2, [r2, #0]
 8008908:	0212      	lsls	r2, r2, #8
 800890a:	4313      	orrs	r3, r2
 800890c:	687a      	ldr	r2, [r7, #4]
 800890e:	f892 2036 	ldrb.w	r2, [r2, #54]	; 0x36
 8008912:	4313      	orrs	r3, r2
 8008914:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8008918:	4a13      	ldr	r2, [pc, #76]	; (8008968 <check_fs+0xd0>)
 800891a:	4293      	cmp	r3, r2
 800891c:	d101      	bne.n	8008922 <check_fs+0x8a>
		return 0;
 800891e:	2300      	movs	r3, #0
 8008920:	e01c      	b.n	800895c <check_fs+0xc4>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	3352      	adds	r3, #82	; 0x52
 8008926:	3303      	adds	r3, #3
 8008928:	781b      	ldrb	r3, [r3, #0]
 800892a:	061a      	lsls	r2, r3, #24
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	3352      	adds	r3, #82	; 0x52
 8008930:	3302      	adds	r3, #2
 8008932:	781b      	ldrb	r3, [r3, #0]
 8008934:	041b      	lsls	r3, r3, #16
 8008936:	4313      	orrs	r3, r2
 8008938:	687a      	ldr	r2, [r7, #4]
 800893a:	3252      	adds	r2, #82	; 0x52
 800893c:	3201      	adds	r2, #1
 800893e:	7812      	ldrb	r2, [r2, #0]
 8008940:	0212      	lsls	r2, r2, #8
 8008942:	4313      	orrs	r3, r2
 8008944:	687a      	ldr	r2, [r7, #4]
 8008946:	f892 2052 	ldrb.w	r2, [r2, #82]	; 0x52
 800894a:	4313      	orrs	r3, r2
 800894c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8008950:	4a05      	ldr	r2, [pc, #20]	; (8008968 <check_fs+0xd0>)
 8008952:	4293      	cmp	r3, r2
 8008954:	d101      	bne.n	800895a <check_fs+0xc2>
		return 0;
 8008956:	2300      	movs	r3, #0
 8008958:	e000      	b.n	800895c <check_fs+0xc4>

	return 1;
 800895a:	2301      	movs	r3, #1
}
 800895c:	4618      	mov	r0, r3
 800895e:	3708      	adds	r7, #8
 8008960:	46bd      	mov	sp, r7
 8008962:	bd80      	pop	{r7, pc}
 8008964:	ffffaa55 	.word	0xffffaa55
 8008968:	00544146 	.word	0x00544146

0800896c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	BYTE wmode			/* !=0: Check write protection for write access */
)
{
 800896c:	b580      	push	{r7, lr}
 800896e:	b096      	sub	sp, #88	; 0x58
 8008970:	af00      	add	r7, sp, #0
 8008972:	60f8      	str	r0, [r7, #12]
 8008974:	60b9      	str	r1, [r7, #8]
 8008976:	4613      	mov	r3, r2
 8008978:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number from the path name */
	*rfs = 0;
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	2200      	movs	r2, #0
 800897e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8008980:	68b8      	ldr	r0, [r7, #8]
 8008982:	f7ff ff45 	bl	8008810 <get_ldnumber>
 8008986:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8008988:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800898a:	2b00      	cmp	r3, #0
 800898c:	da01      	bge.n	8008992 <find_volume+0x26>
 800898e:	230b      	movs	r3, #11
 8008990:	e2b2      	b.n	8008ef8 <find_volume+0x58c>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8008992:	4aa2      	ldr	r2, [pc, #648]	; (8008c1c <find_volume+0x2b0>)
 8008994:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008996:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800899a:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800899c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d101      	bne.n	80089a6 <find_volume+0x3a>
 80089a2:	230c      	movs	r3, #12
 80089a4:	e2a8      	b.n	8008ef8 <find_volume+0x58c>

	ENTER_FF(fs);						/* Lock the volume */
 80089a6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80089a8:	f7fe fcac 	bl	8007304 <lock_fs>
 80089ac:	4603      	mov	r3, r0
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d101      	bne.n	80089b6 <find_volume+0x4a>
 80089b2:	230f      	movs	r3, #15
 80089b4:	e2a0      	b.n	8008ef8 <find_volume+0x58c>
	*rfs = fs;							/* Return pointer to the file system object */
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80089ba:	601a      	str	r2, [r3, #0]

	if (fs->fs_type) {					/* If the volume has been mounted */
 80089bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089be:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d01b      	beq.n	80089fe <find_volume+0x92>
		stat = disk_status(fs->drv);
 80089c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089c8:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 80089cc:	4618      	mov	r0, r3
 80089ce:	f7fe fb85 	bl	80070dc <disk_status>
 80089d2:	4603      	mov	r3, r0
 80089d4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80089d8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80089dc:	f003 0301 	and.w	r3, r3, #1
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d10c      	bne.n	80089fe <find_volume+0x92>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 80089e4:	79fb      	ldrb	r3, [r7, #7]
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d007      	beq.n	80089fa <find_volume+0x8e>
 80089ea:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80089ee:	f003 0304 	and.w	r3, r3, #4
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d001      	beq.n	80089fa <find_volume+0x8e>
				return FR_WRITE_PROTECTED;
 80089f6:	230a      	movs	r3, #10
 80089f8:	e27e      	b.n	8008ef8 <find_volume+0x58c>
			return FR_OK;				/* The file system object is valid */
 80089fa:	2300      	movs	r3, #0
 80089fc:	e27c      	b.n	8008ef8 <find_volume+0x58c>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80089fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a00:	2200      	movs	r2, #0
 8008a02:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8008a06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a08:	b2da      	uxtb	r2, r3
 8008a0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a0c:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8008a10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a12:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8008a16:	4618      	mov	r0, r3
 8008a18:	f7fe fb7a 	bl	8007110 <disk_initialize>
 8008a1c:	4603      	mov	r3, r0
 8008a1e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 8008a22:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008a26:	f003 0301 	and.w	r3, r3, #1
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d001      	beq.n	8008a32 <find_volume+0xc6>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8008a2e:	2303      	movs	r3, #3
 8008a30:	e262      	b.n	8008ef8 <find_volume+0x58c>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 8008a32:	79fb      	ldrb	r3, [r7, #7]
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d007      	beq.n	8008a48 <find_volume+0xdc>
 8008a38:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008a3c:	f003 0304 	and.w	r3, r3, #4
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d001      	beq.n	8008a48 <find_volume+0xdc>
		return FR_WRITE_PROTECTED;
 8008a44:	230a      	movs	r3, #10
 8008a46:	e257      	b.n	8008ef8 <find_volume+0x58c>
#if _MAX_SS != _MIN_SS						/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
		|| SS(fs) < _MIN_SS || SS(fs) > _MAX_SS) return FR_DISK_ERR;
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
 8008a48:	2300      	movs	r3, #0
 8008a4a:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 8008a4c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008a4e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008a50:	f7ff ff22 	bl	8008898 <check_fs>
 8008a54:	4603      	mov	r3, r0
 8008a56:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 8008a5a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008a5e:	2b01      	cmp	r3, #1
 8008a60:	d155      	bne.n	8008b0e <find_volume+0x1a2>
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 8008a62:	2300      	movs	r3, #0
 8008a64:	643b      	str	r3, [r7, #64]	; 0x40
 8008a66:	e029      	b.n	8008abc <find_volume+0x150>
			pt = fs->win.d8 + MBR_Table + i * SZ_PTE;
 8008a68:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008a6a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008a6c:	011b      	lsls	r3, r3, #4
 8008a6e:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8008a72:	4413      	add	r3, r2
 8008a74:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 8008a76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a78:	3304      	adds	r3, #4
 8008a7a:	781b      	ldrb	r3, [r3, #0]
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d012      	beq.n	8008aa6 <find_volume+0x13a>
 8008a80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a82:	330b      	adds	r3, #11
 8008a84:	781b      	ldrb	r3, [r3, #0]
 8008a86:	061a      	lsls	r2, r3, #24
 8008a88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a8a:	330a      	adds	r3, #10
 8008a8c:	781b      	ldrb	r3, [r3, #0]
 8008a8e:	041b      	lsls	r3, r3, #16
 8008a90:	4313      	orrs	r3, r2
 8008a92:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008a94:	3209      	adds	r2, #9
 8008a96:	7812      	ldrb	r2, [r2, #0]
 8008a98:	0212      	lsls	r2, r2, #8
 8008a9a:	4313      	orrs	r3, r2
 8008a9c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008a9e:	3208      	adds	r2, #8
 8008aa0:	7812      	ldrb	r2, [r2, #0]
 8008aa2:	431a      	orrs	r2, r3
 8008aa4:	e000      	b.n	8008aa8 <find_volume+0x13c>
 8008aa6:	2200      	movs	r2, #0
 8008aa8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008aaa:	009b      	lsls	r3, r3, #2
 8008aac:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8008ab0:	440b      	add	r3, r1
 8008ab2:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 8008ab6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008ab8:	3301      	adds	r3, #1
 8008aba:	643b      	str	r3, [r7, #64]	; 0x40
 8008abc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008abe:	2b03      	cmp	r3, #3
 8008ac0:	d9d2      	bls.n	8008a68 <find_volume+0xfc>
		}
		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
 8008ac2:	2300      	movs	r3, #0
 8008ac4:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8008ac6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d002      	beq.n	8008ad2 <find_volume+0x166>
 8008acc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008ace:	3b01      	subs	r3, #1
 8008ad0:	643b      	str	r3, [r7, #64]	; 0x40
		do {								/* Find an FAT volume */
			bsect = br[i];
 8008ad2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008ad4:	009b      	lsls	r3, r3, #2
 8008ad6:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8008ada:	4413      	add	r3, r2
 8008adc:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8008ae0:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 8008ae2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d005      	beq.n	8008af4 <find_volume+0x188>
 8008ae8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008aea:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008aec:	f7ff fed4 	bl	8008898 <check_fs>
 8008af0:	4603      	mov	r3, r0
 8008af2:	e000      	b.n	8008af6 <find_volume+0x18a>
 8008af4:	2302      	movs	r3, #2
 8008af6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (!LD2PT(vol) && fmt && ++i < 4);
 8008afa:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d005      	beq.n	8008b0e <find_volume+0x1a2>
 8008b02:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008b04:	3301      	adds	r3, #1
 8008b06:	643b      	str	r3, [r7, #64]	; 0x40
 8008b08:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008b0a:	2b03      	cmp	r3, #3
 8008b0c:	d9e1      	bls.n	8008ad2 <find_volume+0x166>
	}
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8008b0e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008b12:	2b03      	cmp	r3, #3
 8008b14:	d101      	bne.n	8008b1a <find_volume+0x1ae>
 8008b16:	2301      	movs	r3, #1
 8008b18:	e1ee      	b.n	8008ef8 <find_volume+0x58c>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 8008b1a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d001      	beq.n	8008b26 <find_volume+0x1ba>
 8008b22:	230d      	movs	r3, #13
 8008b24:	e1e8      	b.n	8008ef8 <find_volume+0x58c>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win.d8 + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8008b26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b28:	7b1b      	ldrb	r3, [r3, #12]
 8008b2a:	021b      	lsls	r3, r3, #8
 8008b2c:	b21a      	sxth	r2, r3
 8008b2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b30:	7adb      	ldrb	r3, [r3, #11]
 8008b32:	b21b      	sxth	r3, r3
 8008b34:	4313      	orrs	r3, r2
 8008b36:	b21b      	sxth	r3, r3
 8008b38:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008b3c:	d001      	beq.n	8008b42 <find_volume+0x1d6>
		return FR_NO_FILESYSTEM;
 8008b3e:	230d      	movs	r3, #13
 8008b40:	e1da      	b.n	8008ef8 <find_volume+0x58c>

	fasize = LD_WORD(fs->win.d8 + BPB_FATSz16);			/* Number of sectors per FAT */
 8008b42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b44:	7ddb      	ldrb	r3, [r3, #23]
 8008b46:	021b      	lsls	r3, r3, #8
 8008b48:	b21a      	sxth	r2, r3
 8008b4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b4c:	7d9b      	ldrb	r3, [r3, #22]
 8008b4e:	b21b      	sxth	r3, r3
 8008b50:	4313      	orrs	r3, r2
 8008b52:	b21b      	sxth	r3, r3
 8008b54:	b29b      	uxth	r3, r3
 8008b56:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 8008b58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d112      	bne.n	8008b84 <find_volume+0x218>
 8008b5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b60:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8008b64:	061a      	lsls	r2, r3, #24
 8008b66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b68:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8008b6c:	041b      	lsls	r3, r3, #16
 8008b6e:	4313      	orrs	r3, r2
 8008b70:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008b72:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
 8008b76:	0212      	lsls	r2, r2, #8
 8008b78:	4313      	orrs	r3, r2
 8008b7a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008b7c:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 8008b80:	4313      	orrs	r3, r2
 8008b82:	64fb      	str	r3, [r7, #76]	; 0x4c
	fs->fsize = fasize;
 8008b84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b86:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008b88:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 8008b8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b8e:	7c1a      	ldrb	r2, [r3, #16]
 8008b90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b92:	f883 2203 	strb.w	r2, [r3, #515]	; 0x203
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 8008b96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b98:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 8008b9c:	2b01      	cmp	r3, #1
 8008b9e:	d006      	beq.n	8008bae <find_volume+0x242>
 8008ba0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ba2:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 8008ba6:	2b02      	cmp	r3, #2
 8008ba8:	d001      	beq.n	8008bae <find_volume+0x242>
		return FR_NO_FILESYSTEM;
 8008baa:	230d      	movs	r3, #13
 8008bac:	e1a4      	b.n	8008ef8 <find_volume+0x58c>
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 8008bae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bb0:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 8008bb4:	461a      	mov	r2, r3
 8008bb6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008bb8:	fb02 f303 	mul.w	r3, r2, r3
 8008bbc:	64fb      	str	r3, [r7, #76]	; 0x4c

	fs->csize = fs->win.d8[BPB_SecPerClus];				/* Number of sectors per cluster */
 8008bbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bc0:	7b5a      	ldrb	r2, [r3, #13]
 8008bc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bc4:	f883 2202 	strb.w	r2, [r3, #514]	; 0x202
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 8008bc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bca:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d00a      	beq.n	8008be8 <find_volume+0x27c>
 8008bd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bd4:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8008bd8:	461a      	mov	r2, r3
 8008bda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bdc:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8008be0:	3b01      	subs	r3, #1
 8008be2:	4013      	ands	r3, r2
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d001      	beq.n	8008bec <find_volume+0x280>
		return FR_NO_FILESYSTEM;
 8008be8:	230d      	movs	r3, #13
 8008bea:	e185      	b.n	8008ef8 <find_volume+0x58c>

	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 8008bec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bee:	7c9b      	ldrb	r3, [r3, #18]
 8008bf0:	021b      	lsls	r3, r3, #8
 8008bf2:	b21a      	sxth	r2, r3
 8008bf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bf6:	7c5b      	ldrb	r3, [r3, #17]
 8008bf8:	b21b      	sxth	r3, r3
 8008bfa:	4313      	orrs	r3, r2
 8008bfc:	b21b      	sxth	r3, r3
 8008bfe:	b29a      	uxth	r2, r3
 8008c00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c02:	f8a3 2208 	strh.w	r2, [r3, #520]	; 0x208
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 8008c06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c08:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 8008c0c:	f003 030f 	and.w	r3, r3, #15
 8008c10:	b29b      	uxth	r3, r3
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d004      	beq.n	8008c20 <find_volume+0x2b4>
		return FR_NO_FILESYSTEM;
 8008c16:	230d      	movs	r3, #13
 8008c18:	e16e      	b.n	8008ef8 <find_volume+0x58c>
 8008c1a:	bf00      	nop
 8008c1c:	20000514 	.word	0x20000514

	tsect = LD_WORD(fs->win.d8 + BPB_TotSec16);			/* Number of sectors on the volume */
 8008c20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c22:	7d1b      	ldrb	r3, [r3, #20]
 8008c24:	021b      	lsls	r3, r3, #8
 8008c26:	b21a      	sxth	r2, r3
 8008c28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c2a:	7cdb      	ldrb	r3, [r3, #19]
 8008c2c:	b21b      	sxth	r3, r3
 8008c2e:	4313      	orrs	r3, r2
 8008c30:	b21b      	sxth	r3, r3
 8008c32:	b29b      	uxth	r3, r3
 8008c34:	64bb      	str	r3, [r7, #72]	; 0x48
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 8008c36:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d112      	bne.n	8008c62 <find_volume+0x2f6>
 8008c3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c3e:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8008c42:	061a      	lsls	r2, r3, #24
 8008c44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c46:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8008c4a:	041b      	lsls	r3, r3, #16
 8008c4c:	4313      	orrs	r3, r2
 8008c4e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008c50:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 8008c54:	0212      	lsls	r2, r2, #8
 8008c56:	4313      	orrs	r3, r2
 8008c58:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008c5a:	f892 2020 	ldrb.w	r2, [r2, #32]
 8008c5e:	4313      	orrs	r3, r2
 8008c60:	64bb      	str	r3, [r7, #72]	; 0x48

	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 8008c62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c64:	7bdb      	ldrb	r3, [r3, #15]
 8008c66:	021b      	lsls	r3, r3, #8
 8008c68:	b21a      	sxth	r2, r3
 8008c6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c6c:	7b9b      	ldrb	r3, [r3, #14]
 8008c6e:	b21b      	sxth	r3, r3
 8008c70:	4313      	orrs	r3, r2
 8008c72:	b21b      	sxth	r3, r3
 8008c74:	85fb      	strh	r3, [r7, #46]	; 0x2e
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 8008c76:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d101      	bne.n	8008c80 <find_volume+0x314>
 8008c7c:	230d      	movs	r3, #13
 8008c7e:	e13b      	b.n	8008ef8 <find_volume+0x58c>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
 8008c80:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8008c82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008c84:	4413      	add	r3, r2
 8008c86:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008c88:	f8b2 2208 	ldrh.w	r2, [r2, #520]	; 0x208
 8008c8c:	0912      	lsrs	r2, r2, #4
 8008c8e:	b292      	uxth	r2, r2
 8008c90:	4413      	add	r3, r2
 8008c92:	62bb      	str	r3, [r7, #40]	; 0x28
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8008c94:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008c96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c98:	429a      	cmp	r2, r3
 8008c9a:	d201      	bcs.n	8008ca0 <find_volume+0x334>
 8008c9c:	230d      	movs	r3, #13
 8008c9e:	e12b      	b.n	8008ef8 <find_volume+0x58c>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 8008ca0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008ca2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ca4:	1ad3      	subs	r3, r2, r3
 8008ca6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008ca8:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 8008cac:	fbb3 f3f2 	udiv	r3, r3, r2
 8008cb0:	627b      	str	r3, [r7, #36]	; 0x24
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 8008cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d101      	bne.n	8008cbc <find_volume+0x350>
 8008cb8:	230d      	movs	r3, #13
 8008cba:	e11d      	b.n	8008ef8 <find_volume+0x58c>
	fmt = FS_FAT12;
 8008cbc:	2301      	movs	r3, #1
 8008cbe:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 8008cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cc4:	f640 72f5 	movw	r2, #4085	; 0xff5
 8008cc8:	4293      	cmp	r3, r2
 8008cca:	d902      	bls.n	8008cd2 <find_volume+0x366>
 8008ccc:	2302      	movs	r3, #2
 8008cce:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 8008cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cd4:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8008cd8:	4293      	cmp	r3, r2
 8008cda:	d902      	bls.n	8008ce2 <find_volume+0x376>
 8008cdc:	2303      	movs	r3, #3
 8008cde:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 8008ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ce4:	1c9a      	adds	r2, r3, #2
 8008ce6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ce8:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
	fs->volbase = bsect;								/* Volume start sector */
 8008cec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cee:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008cf0:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 8008cf4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8008cf6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008cf8:	441a      	add	r2, r3
 8008cfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cfc:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
	fs->database = bsect + sysect;						/* Data start sector */
 8008d00:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008d02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d04:	441a      	add	r2, r3
 8008d06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d08:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
	if (fmt == FS_FAT32) {
 8008d0c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008d10:	2b03      	cmp	r3, #3
 8008d12:	d121      	bne.n	8008d58 <find_volume+0x3ec>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 8008d14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d16:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d001      	beq.n	8008d22 <find_volume+0x3b6>
 8008d1e:	230d      	movs	r3, #13
 8008d20:	e0ea      	b.n	8008ef8 <find_volume+0x58c>
		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 8008d22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d24:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8008d28:	061a      	lsls	r2, r3, #24
 8008d2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d2c:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8008d30:	041b      	lsls	r3, r3, #16
 8008d32:	4313      	orrs	r3, r2
 8008d34:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008d36:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 8008d3a:	0212      	lsls	r2, r2, #8
 8008d3c:	4313      	orrs	r3, r2
 8008d3e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008d40:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 8008d44:	431a      	orrs	r2, r3
 8008d46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d48:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 8008d4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d4e:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8008d52:	009b      	lsls	r3, r3, #2
 8008d54:	647b      	str	r3, [r7, #68]	; 0x44
 8008d56:	e025      	b.n	8008da4 <find_volume+0x438>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 8008d58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d5a:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d101      	bne.n	8008d66 <find_volume+0x3fa>
 8008d62:	230d      	movs	r3, #13
 8008d64:	e0c8      	b.n	8008ef8 <find_volume+0x58c>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 8008d66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d68:	f8d3 2224 	ldr.w	r2, [r3, #548]	; 0x224
 8008d6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008d6e:	441a      	add	r2, r3
 8008d70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d72:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8008d76:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008d7a:	2b02      	cmp	r3, #2
 8008d7c:	d104      	bne.n	8008d88 <find_volume+0x41c>
 8008d7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d80:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8008d84:	005b      	lsls	r3, r3, #1
 8008d86:	e00c      	b.n	8008da2 <find_volume+0x436>
 8008d88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d8a:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8008d8e:	4613      	mov	r3, r2
 8008d90:	005b      	lsls	r3, r3, #1
 8008d92:	4413      	add	r3, r2
 8008d94:	085a      	lsrs	r2, r3, #1
 8008d96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d98:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8008d9c:	f003 0301 	and.w	r3, r3, #1
 8008da0:	4413      	add	r3, r2
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
 8008da2:	647b      	str	r3, [r7, #68]	; 0x44
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 8008da4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008da6:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8008daa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008dac:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8008db0:	0a5b      	lsrs	r3, r3, #9
 8008db2:	429a      	cmp	r2, r3
 8008db4:	d201      	bcs.n	8008dba <find_volume+0x44e>
		return FR_NO_FILESYSTEM;
 8008db6:	230d      	movs	r3, #13
 8008db8:	e09e      	b.n	8008ef8 <find_volume+0x58c>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 8008dba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008dbc:	f04f 32ff 	mov.w	r2, #4294967295
 8008dc0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8008dc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008dc6:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8008dca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008dcc:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

	/* Get fsinfo if available */
	fs->fsi_flag = 0x80;
 8008dd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008dd2:	2280      	movs	r2, #128	; 0x80
 8008dd4:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
#if (_FS_NOFSINFO & 3) != 3
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 8008dd8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008ddc:	2b03      	cmp	r3, #3
 8008dde:	d177      	bne.n	8008ed0 <find_volume+0x564>
		&& LD_WORD(fs->win.d8 + BPB_FSInfo) == 1
 8008de0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008de2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8008de6:	021b      	lsls	r3, r3, #8
 8008de8:	b21a      	sxth	r2, r3
 8008dea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008dec:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008df0:	b21b      	sxth	r3, r3
 8008df2:	4313      	orrs	r3, r2
 8008df4:	b21b      	sxth	r3, r3
 8008df6:	2b01      	cmp	r3, #1
 8008df8:	d16a      	bne.n	8008ed0 <find_volume+0x564>
		&& move_window(fs, bsect + 1) == FR_OK)
 8008dfa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008dfc:	3301      	adds	r3, #1
 8008dfe:	4619      	mov	r1, r3
 8008e00:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008e02:	f7fe fca8 	bl	8007756 <move_window>
 8008e06:	4603      	mov	r3, r0
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d161      	bne.n	8008ed0 <find_volume+0x564>
	{
		fs->fsi_flag = 0;
 8008e0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e0e:	2200      	movs	r2, #0
 8008e10:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8008e14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e16:	f893 31ff 	ldrb.w	r3, [r3, #511]	; 0x1ff
 8008e1a:	021b      	lsls	r3, r3, #8
 8008e1c:	b21a      	sxth	r2, r3
 8008e1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e20:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 8008e24:	b21b      	sxth	r3, r3
 8008e26:	4313      	orrs	r3, r2
 8008e28:	b21b      	sxth	r3, r3
 8008e2a:	4a35      	ldr	r2, [pc, #212]	; (8008f00 <find_volume+0x594>)
 8008e2c:	4293      	cmp	r3, r2
 8008e2e:	d14f      	bne.n	8008ed0 <find_volume+0x564>
			&& LD_DWORD(fs->win.d8 + FSI_LeadSig) == 0x41615252
 8008e30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e32:	78db      	ldrb	r3, [r3, #3]
 8008e34:	061a      	lsls	r2, r3, #24
 8008e36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e38:	789b      	ldrb	r3, [r3, #2]
 8008e3a:	041b      	lsls	r3, r3, #16
 8008e3c:	4313      	orrs	r3, r2
 8008e3e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008e40:	7852      	ldrb	r2, [r2, #1]
 8008e42:	0212      	lsls	r2, r2, #8
 8008e44:	4313      	orrs	r3, r2
 8008e46:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008e48:	7812      	ldrb	r2, [r2, #0]
 8008e4a:	4313      	orrs	r3, r2
 8008e4c:	4a2d      	ldr	r2, [pc, #180]	; (8008f04 <find_volume+0x598>)
 8008e4e:	4293      	cmp	r3, r2
 8008e50:	d13e      	bne.n	8008ed0 <find_volume+0x564>
			&& LD_DWORD(fs->win.d8 + FSI_StrucSig) == 0x61417272)
 8008e52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e54:	f893 31e7 	ldrb.w	r3, [r3, #487]	; 0x1e7
 8008e58:	061a      	lsls	r2, r3, #24
 8008e5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e5c:	f893 31e6 	ldrb.w	r3, [r3, #486]	; 0x1e6
 8008e60:	041b      	lsls	r3, r3, #16
 8008e62:	4313      	orrs	r3, r2
 8008e64:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008e66:	f892 21e5 	ldrb.w	r2, [r2, #485]	; 0x1e5
 8008e6a:	0212      	lsls	r2, r2, #8
 8008e6c:	4313      	orrs	r3, r2
 8008e6e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008e70:	f892 21e4 	ldrb.w	r2, [r2, #484]	; 0x1e4
 8008e74:	4313      	orrs	r3, r2
 8008e76:	4a24      	ldr	r2, [pc, #144]	; (8008f08 <find_volume+0x59c>)
 8008e78:	4293      	cmp	r3, r2
 8008e7a:	d129      	bne.n	8008ed0 <find_volume+0x564>
		{
#if (_FS_NOFSINFO & 1) == 0
			fs->free_clust = LD_DWORD(fs->win.d8 + FSI_Free_Count);
 8008e7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e7e:	f893 31eb 	ldrb.w	r3, [r3, #491]	; 0x1eb
 8008e82:	061a      	lsls	r2, r3, #24
 8008e84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e86:	f893 31ea 	ldrb.w	r3, [r3, #490]	; 0x1ea
 8008e8a:	041b      	lsls	r3, r3, #16
 8008e8c:	4313      	orrs	r3, r2
 8008e8e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008e90:	f892 21e9 	ldrb.w	r2, [r2, #489]	; 0x1e9
 8008e94:	0212      	lsls	r2, r2, #8
 8008e96:	4313      	orrs	r3, r2
 8008e98:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008e9a:	f892 21e8 	ldrb.w	r2, [r2, #488]	; 0x1e8
 8008e9e:	431a      	orrs	r2, r3
 8008ea0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ea2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
#endif
#if (_FS_NOFSINFO & 2) == 0
			fs->last_clust = LD_DWORD(fs->win.d8 + FSI_Nxt_Free);
 8008ea6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ea8:	f893 31ef 	ldrb.w	r3, [r3, #495]	; 0x1ef
 8008eac:	061a      	lsls	r2, r3, #24
 8008eae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008eb0:	f893 31ee 	ldrb.w	r3, [r3, #494]	; 0x1ee
 8008eb4:	041b      	lsls	r3, r3, #16
 8008eb6:	4313      	orrs	r3, r2
 8008eb8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008eba:	f892 21ed 	ldrb.w	r2, [r2, #493]	; 0x1ed
 8008ebe:	0212      	lsls	r2, r2, #8
 8008ec0:	4313      	orrs	r3, r2
 8008ec2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008ec4:	f892 21ec 	ldrb.w	r2, [r2, #492]	; 0x1ec
 8008ec8:	431a      	orrs	r2, r3
 8008eca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ecc:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
#endif
		}
	}
#endif
#endif
	fs->fs_type = fmt;	/* FAT sub-type */
 8008ed0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ed2:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8008ed6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
	fs->id = ++Fsid;	/* File system mount ID */
 8008eda:	4b0c      	ldr	r3, [pc, #48]	; (8008f0c <find_volume+0x5a0>)
 8008edc:	881b      	ldrh	r3, [r3, #0]
 8008ede:	3301      	adds	r3, #1
 8008ee0:	b29a      	uxth	r2, r3
 8008ee2:	4b0a      	ldr	r3, [pc, #40]	; (8008f0c <find_volume+0x5a0>)
 8008ee4:	801a      	strh	r2, [r3, #0]
 8008ee6:	4b09      	ldr	r3, [pc, #36]	; (8008f0c <find_volume+0x5a0>)
 8008ee8:	881a      	ldrh	r2, [r3, #0]
 8008eea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008eec:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
#if _FS_RPATH
	fs->cdir = 0;		/* Set current directory to root */
#endif
#if _FS_LOCK			/* Clear file lock semaphores */
	clear_lock(fs);
 8008ef0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008ef2:	f7fe fbbf 	bl	8007674 <clear_lock>
#endif

	return FR_OK;
 8008ef6:	2300      	movs	r3, #0
}
 8008ef8:	4618      	mov	r0, r3
 8008efa:	3758      	adds	r7, #88	; 0x58
 8008efc:	46bd      	mov	sp, r7
 8008efe:	bd80      	pop	{r7, pc}
 8008f00:	ffffaa55 	.word	0xffffaa55
 8008f04:	41615252 	.word	0x41615252
 8008f08:	61417272 	.word	0x61417272
 8008f0c:	20000518 	.word	0x20000518

08008f10 <validate>:

static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	void* obj		/* Pointer to the object FIL/DIR to check validity */
)
{
 8008f10:	b580      	push	{r7, lr}
 8008f12:	b084      	sub	sp, #16
 8008f14:	af00      	add	r7, sp, #0
 8008f16:	6078      	str	r0, [r7, #4]
	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	60fb      	str	r3, [r7, #12]


	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d022      	beq.n	8008f68 <validate+0x58>
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d01d      	beq.n	8008f68 <validate+0x58>
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8008f32:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d016      	beq.n	8008f68 <validate+0x58>
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8008f40:	f8b3 2206 	ldrh.w	r2, [r3, #518]	; 0x206
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	f8b3 3204 	ldrh.w	r3, [r3, #516]	; 0x204
 8008f4a:	429a      	cmp	r2, r3
 8008f4c:	d10c      	bne.n	8008f68 <validate+0x58>
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8008f54:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8008f58:	4618      	mov	r0, r3
 8008f5a:	f7fe f8bf 	bl	80070dc <disk_status>
 8008f5e:	4603      	mov	r3, r0
 8008f60:	f003 0301 	and.w	r3, r3, #1
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d001      	beq.n	8008f6c <validate+0x5c>
		return FR_INVALID_OBJECT;
 8008f68:	2309      	movs	r3, #9
 8008f6a:	e00b      	b.n	8008f84 <validate+0x74>

	ENTER_FF(fil->fs);		/* Lock file system */
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8008f72:	4618      	mov	r0, r3
 8008f74:	f7fe f9c6 	bl	8007304 <lock_fs>
 8008f78:	4603      	mov	r3, r0
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d101      	bne.n	8008f82 <validate+0x72>
 8008f7e:	230f      	movs	r3, #15
 8008f80:	e000      	b.n	8008f84 <validate+0x74>

	return FR_OK;
 8008f82:	2300      	movs	r3, #0
}
 8008f84:	4618      	mov	r0, r3
 8008f86:	3710      	adds	r7, #16
 8008f88:	46bd      	mov	sp, r7
 8008f8a:	bd80      	pop	{r7, pc}

08008f8c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8008f8c:	b580      	push	{r7, lr}
 8008f8e:	b088      	sub	sp, #32
 8008f90:	af00      	add	r7, sp, #0
 8008f92:	60f8      	str	r0, [r7, #12]
 8008f94:	60b9      	str	r1, [r7, #8]
 8008f96:	4613      	mov	r3, r2
 8008f98:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8008f9a:	68bb      	ldr	r3, [r7, #8]
 8008f9c:	613b      	str	r3, [r7, #16]


	vol = get_ldnumber(&rp);
 8008f9e:	f107 0310 	add.w	r3, r7, #16
 8008fa2:	4618      	mov	r0, r3
 8008fa4:	f7ff fc34 	bl	8008810 <get_ldnumber>
 8008fa8:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8008faa:	69fb      	ldr	r3, [r7, #28]
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	da01      	bge.n	8008fb4 <f_mount+0x28>
 8008fb0:	230b      	movs	r3, #11
 8008fb2:	e04c      	b.n	800904e <f_mount+0xc2>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8008fb4:	4a28      	ldr	r2, [pc, #160]	; (8009058 <f_mount+0xcc>)
 8008fb6:	69fb      	ldr	r3, [r7, #28]
 8008fb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008fbc:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8008fbe:	69bb      	ldr	r3, [r7, #24]
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d011      	beq.n	8008fe8 <f_mount+0x5c>
#if _FS_LOCK
		clear_lock(cfs);
 8008fc4:	69b8      	ldr	r0, [r7, #24]
 8008fc6:	f7fe fb55 	bl	8007674 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 8008fca:	69bb      	ldr	r3, [r7, #24]
 8008fcc:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8008fd0:	4618      	mov	r0, r3
 8008fd2:	f001 fbdc 	bl	800a78e <ff_del_syncobj>
 8008fd6:	4603      	mov	r3, r0
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d101      	bne.n	8008fe0 <f_mount+0x54>
 8008fdc:	2302      	movs	r3, #2
 8008fde:	e036      	b.n	800904e <f_mount+0xc2>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8008fe0:	69bb      	ldr	r3, [r7, #24]
 8008fe2:	2200      	movs	r2, #0
 8008fe4:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
	}

	if (fs) {
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d011      	beq.n	8009012 <f_mount+0x86>
		fs->fs_type = 0;				/* Clear new fs object */
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	2200      	movs	r2, #0
 8008ff2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 8008ff6:	69fb      	ldr	r3, [r7, #28]
 8008ff8:	b2da      	uxtb	r2, r3
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	f503 7303 	add.w	r3, r3, #524	; 0x20c
 8009000:	4619      	mov	r1, r3
 8009002:	4610      	mov	r0, r2
 8009004:	f001 fba3 	bl	800a74e <ff_cre_syncobj>
 8009008:	4603      	mov	r3, r0
 800900a:	2b00      	cmp	r3, #0
 800900c:	d101      	bne.n	8009012 <f_mount+0x86>
 800900e:	2302      	movs	r3, #2
 8009010:	e01d      	b.n	800904e <f_mount+0xc2>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8009012:	68fa      	ldr	r2, [r7, #12]
 8009014:	4910      	ldr	r1, [pc, #64]	; (8009058 <f_mount+0xcc>)
 8009016:	69fb      	ldr	r3, [r7, #28]
 8009018:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	2b00      	cmp	r3, #0
 8009020:	d002      	beq.n	8009028 <f_mount+0x9c>
 8009022:	79fb      	ldrb	r3, [r7, #7]
 8009024:	2b01      	cmp	r3, #1
 8009026:	d001      	beq.n	800902c <f_mount+0xa0>
 8009028:	2300      	movs	r3, #0
 800902a:	e010      	b.n	800904e <f_mount+0xc2>

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
 800902c:	f107 0108 	add.w	r1, r7, #8
 8009030:	f107 030c 	add.w	r3, r7, #12
 8009034:	2200      	movs	r2, #0
 8009036:	4618      	mov	r0, r3
 8009038:	f7ff fc98 	bl	800896c <find_volume>
 800903c:	4603      	mov	r3, r0
 800903e:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	7dfa      	ldrb	r2, [r7, #23]
 8009044:	4611      	mov	r1, r2
 8009046:	4618      	mov	r0, r3
 8009048:	f7fe f96b 	bl	8007322 <unlock_fs>
 800904c:	7dfb      	ldrb	r3, [r7, #23]
}
 800904e:	4618      	mov	r0, r3
 8009050:	3720      	adds	r7, #32
 8009052:	46bd      	mov	sp, r7
 8009054:	bd80      	pop	{r7, pc}
 8009056:	bf00      	nop
 8009058:	20000514 	.word	0x20000514

0800905c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800905c:	b580      	push	{r7, lr}
 800905e:	f5ad 7d14 	sub.w	sp, sp, #592	; 0x250
 8009062:	af00      	add	r7, sp, #0
 8009064:	f107 030c 	add.w	r3, r7, #12
 8009068:	6018      	str	r0, [r3, #0]
 800906a:	f107 0308 	add.w	r3, r7, #8
 800906e:	6019      	str	r1, [r3, #0]
 8009070:	1dfb      	adds	r3, r7, #7
 8009072:	701a      	strb	r2, [r3, #0]
#if !_FS_READONLY
	DWORD dw, cl;
#endif


	if (!fp) return FR_INVALID_OBJECT;
 8009074:	f107 030c 	add.w	r3, r7, #12
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	2b00      	cmp	r3, #0
 800907c:	d101      	bne.n	8009082 <f_open+0x26>
 800907e:	2309      	movs	r3, #9
 8009080:	e1fc      	b.n	800947c <f_open+0x420>
	fp->fs = 0;			/* Clear file object */
 8009082:	f107 030c 	add.w	r3, r7, #12
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	2200      	movs	r2, #0
 800908a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

	/* Get logical drive number */
#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
 800908e:	1dfb      	adds	r3, r7, #7
 8009090:	1dfa      	adds	r2, r7, #7
 8009092:	7812      	ldrb	r2, [r2, #0]
 8009094:	f002 021f 	and.w	r2, r2, #31
 8009098:	701a      	strb	r2, [r3, #0]
	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
 800909a:	1dfb      	adds	r3, r7, #7
 800909c:	781b      	ldrb	r3, [r3, #0]
 800909e:	f023 0301 	bic.w	r3, r3, #1
 80090a2:	b2da      	uxtb	r2, r3
 80090a4:	f107 0108 	add.w	r1, r7, #8
 80090a8:	f107 0320 	add.w	r3, r7, #32
 80090ac:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80090b0:	4618      	mov	r0, r3
 80090b2:	f7ff fc5b 	bl	800896c <find_volume>
 80090b6:	4603      	mov	r3, r0
 80090b8:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
#else
	mode &= FA_READ;
	res = find_volume(&dj.fs, &path, 0);
#endif
	if (res == FR_OK) {
 80090bc:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	f040 81cf 	bne.w	8009464 <f_open+0x408>
		INIT_BUF(dj);
 80090c6:	f107 0320 	add.w	r3, r7, #32
 80090ca:	f107 0214 	add.w	r2, r7, #20
 80090ce:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
		res = follow_path(&dj, path);	/* Follow the file path */
 80090d2:	f107 0308 	add.w	r3, r7, #8
 80090d6:	681a      	ldr	r2, [r3, #0]
 80090d8:	f107 0320 	add.w	r3, r7, #32
 80090dc:	4611      	mov	r1, r2
 80090de:	4618      	mov	r0, r3
 80090e0:	f7ff fb28 	bl	8008734 <follow_path>
 80090e4:	4603      	mov	r3, r0
 80090e6:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
		dir = dj.dir;
 80090ea:	f107 0320 	add.w	r3, r7, #32
 80090ee:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80090f2:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80090f6:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d11a      	bne.n	8009134 <f_open+0xd8>
			if (!dir)	/* Default directory itself */
 80090fe:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8009102:	2b00      	cmp	r3, #0
 8009104:	d103      	bne.n	800910e <f_open+0xb2>
				res = FR_INVALID_NAME;
 8009106:	2306      	movs	r3, #6
 8009108:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
 800910c:	e012      	b.n	8009134 <f_open+0xd8>
#if _FS_LOCK
			else
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800910e:	1dfb      	adds	r3, r7, #7
 8009110:	781b      	ldrb	r3, [r3, #0]
 8009112:	f023 0301 	bic.w	r3, r3, #1
 8009116:	2b00      	cmp	r3, #0
 8009118:	bf14      	ite	ne
 800911a:	2301      	movne	r3, #1
 800911c:	2300      	moveq	r3, #0
 800911e:	b2db      	uxtb	r3, r3
 8009120:	461a      	mov	r2, r3
 8009122:	f107 0320 	add.w	r3, r7, #32
 8009126:	4611      	mov	r1, r2
 8009128:	4618      	mov	r0, r3
 800912a:	f7fe f919 	bl	8007360 <chk_lock>
 800912e:	4603      	mov	r3, r0
 8009130:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8009134:	1dfb      	adds	r3, r7, #7
 8009136:	781b      	ldrb	r3, [r3, #0]
 8009138:	f003 031c 	and.w	r3, r3, #28
 800913c:	2b00      	cmp	r3, #0
 800913e:	f000 80cc 	beq.w	80092da <f_open+0x27e>
			if (res != FR_OK) {					/* No file, create new */
 8009142:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 8009146:	2b00      	cmp	r3, #0
 8009148:	d01f      	beq.n	800918a <f_open+0x12e>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
 800914a:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 800914e:	2b04      	cmp	r3, #4
 8009150:	d10e      	bne.n	8009170 <f_open+0x114>
#if _FS_LOCK
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8009152:	f7fe f971 	bl	8007438 <enq_lock>
 8009156:	4603      	mov	r3, r0
 8009158:	2b00      	cmp	r3, #0
 800915a:	d006      	beq.n	800916a <f_open+0x10e>
 800915c:	f107 0320 	add.w	r3, r7, #32
 8009160:	4618      	mov	r0, r3
 8009162:	f7ff f9b7 	bl	80084d4 <dir_register>
 8009166:	4603      	mov	r3, r0
 8009168:	e000      	b.n	800916c <f_open+0x110>
 800916a:	2312      	movs	r3, #18
 800916c:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
#else
					res = dir_register(&dj);
#endif
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8009170:	1dfb      	adds	r3, r7, #7
 8009172:	1dfa      	adds	r2, r7, #7
 8009174:	7812      	ldrb	r2, [r2, #0]
 8009176:	f042 0208 	orr.w	r2, r2, #8
 800917a:	701a      	strb	r2, [r3, #0]
				dir = dj.dir;					/* New entry */
 800917c:	f107 0320 	add.w	r3, r7, #32
 8009180:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009184:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
 8009188:	e014      	b.n	80091b4 <f_open+0x158>
			}
			else {								/* Any object is already existing */
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800918a:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800918e:	330b      	adds	r3, #11
 8009190:	781b      	ldrb	r3, [r3, #0]
 8009192:	f003 0311 	and.w	r3, r3, #17
 8009196:	2b00      	cmp	r3, #0
 8009198:	d003      	beq.n	80091a2 <f_open+0x146>
					res = FR_DENIED;
 800919a:	2307      	movs	r3, #7
 800919c:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
 80091a0:	e008      	b.n	80091b4 <f_open+0x158>
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
 80091a2:	1dfb      	adds	r3, r7, #7
 80091a4:	781b      	ldrb	r3, [r3, #0]
 80091a6:	f003 0304 	and.w	r3, r3, #4
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d002      	beq.n	80091b4 <f_open+0x158>
						res = FR_EXIST;
 80091ae:	2308      	movs	r3, #8
 80091b0:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80091b4:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	f040 80af 	bne.w	800931c <f_open+0x2c0>
 80091be:	1dfb      	adds	r3, r7, #7
 80091c0:	781b      	ldrb	r3, [r3, #0]
 80091c2:	f003 0308 	and.w	r3, r3, #8
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	f000 80a8 	beq.w	800931c <f_open+0x2c0>
				dw = GET_FATTIME();				/* Created time */
 80091cc:	f7fd ff2a 	bl	8007024 <get_fattime>
 80091d0:	f8c7 0244 	str.w	r0, [r7, #580]	; 0x244
				ST_DWORD(dir + DIR_CrtTime, dw);
 80091d4:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 80091d8:	330e      	adds	r3, #14
 80091da:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
 80091de:	b2d2      	uxtb	r2, r2
 80091e0:	701a      	strb	r2, [r3, #0]
 80091e2:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 80091e6:	b29b      	uxth	r3, r3
 80091e8:	0a1b      	lsrs	r3, r3, #8
 80091ea:	b29a      	uxth	r2, r3
 80091ec:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 80091f0:	330f      	adds	r3, #15
 80091f2:	b2d2      	uxtb	r2, r2
 80091f4:	701a      	strb	r2, [r3, #0]
 80091f6:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 80091fa:	0c1a      	lsrs	r2, r3, #16
 80091fc:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8009200:	3310      	adds	r3, #16
 8009202:	b2d2      	uxtb	r2, r2
 8009204:	701a      	strb	r2, [r3, #0]
 8009206:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 800920a:	0e1a      	lsrs	r2, r3, #24
 800920c:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8009210:	3311      	adds	r3, #17
 8009212:	b2d2      	uxtb	r2, r2
 8009214:	701a      	strb	r2, [r3, #0]
				dir[DIR_Attr] = 0;				/* Reset attribute */
 8009216:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800921a:	330b      	adds	r3, #11
 800921c:	2200      	movs	r2, #0
 800921e:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, 0);/* size = 0 */
 8009220:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8009224:	331c      	adds	r3, #28
 8009226:	2200      	movs	r2, #0
 8009228:	701a      	strb	r2, [r3, #0]
 800922a:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800922e:	331d      	adds	r3, #29
 8009230:	2200      	movs	r2, #0
 8009232:	701a      	strb	r2, [r3, #0]
 8009234:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8009238:	331e      	adds	r3, #30
 800923a:	2200      	movs	r2, #0
 800923c:	701a      	strb	r2, [r3, #0]
 800923e:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8009242:	331f      	adds	r3, #31
 8009244:	2200      	movs	r2, #0
 8009246:	701a      	strb	r2, [r3, #0]
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
 8009248:	f107 0320 	add.w	r3, r7, #32
 800924c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8009250:	f8d7 1248 	ldr.w	r1, [r7, #584]	; 0x248
 8009254:	4618      	mov	r0, r3
 8009256:	f7ff f83c 	bl	80082d2 <ld_clust>
 800925a:	f8c7 0240 	str.w	r0, [r7, #576]	; 0x240
				st_clust(dir, 0);				/* cluster = 0 */
 800925e:	2100      	movs	r1, #0
 8009260:	f8d7 0248 	ldr.w	r0, [r7, #584]	; 0x248
 8009264:	f7ff f862 	bl	800832c <st_clust>
				dj.fs->wflag = 1;
 8009268:	f107 0320 	add.w	r3, r7, #32
 800926c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8009270:	2201      	movs	r2, #1
 8009272:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
				if (cl) {						/* Remove the cluster chain if exist */
 8009276:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 800927a:	2b00      	cmp	r3, #0
 800927c:	d04e      	beq.n	800931c <f_open+0x2c0>
					dw = dj.fs->winsect;
 800927e:	f107 0320 	add.w	r3, r7, #32
 8009282:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8009286:	f8d3 3230 	ldr.w	r3, [r3, #560]	; 0x230
 800928a:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
					res = remove_chain(dj.fs, cl);
 800928e:	f107 0320 	add.w	r3, r7, #32
 8009292:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8009296:	f8d7 1240 	ldr.w	r1, [r7, #576]	; 0x240
 800929a:	4618      	mov	r0, r3
 800929c:	f7fe fd19 	bl	8007cd2 <remove_chain>
 80092a0:	4603      	mov	r3, r0
 80092a2:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
					if (res == FR_OK) {
 80092a6:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d136      	bne.n	800931c <f_open+0x2c0>
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 80092ae:	f107 0320 	add.w	r3, r7, #32
 80092b2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80092b6:	f8d7 2240 	ldr.w	r2, [r7, #576]	; 0x240
 80092ba:	3a01      	subs	r2, #1
 80092bc:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
						res = move_window(dj.fs, dw);
 80092c0:	f107 0320 	add.w	r3, r7, #32
 80092c4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80092c8:	f8d7 1244 	ldr.w	r1, [r7, #580]	; 0x244
 80092cc:	4618      	mov	r0, r3
 80092ce:	f7fe fa42 	bl	8007756 <move_window>
 80092d2:	4603      	mov	r3, r0
 80092d4:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
 80092d8:	e020      	b.n	800931c <f_open+0x2c0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Follow succeeded */
 80092da:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d11c      	bne.n	800931c <f_open+0x2c0>
				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
 80092e2:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 80092e6:	330b      	adds	r3, #11
 80092e8:	781b      	ldrb	r3, [r3, #0]
 80092ea:	f003 0310 	and.w	r3, r3, #16
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d003      	beq.n	80092fa <f_open+0x29e>
					res = FR_NO_FILE;
 80092f2:	2304      	movs	r3, #4
 80092f4:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
 80092f8:	e010      	b.n	800931c <f_open+0x2c0>
				} else {
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
 80092fa:	1dfb      	adds	r3, r7, #7
 80092fc:	781b      	ldrb	r3, [r3, #0]
 80092fe:	f003 0302 	and.w	r3, r3, #2
 8009302:	2b00      	cmp	r3, #0
 8009304:	d00a      	beq.n	800931c <f_open+0x2c0>
 8009306:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800930a:	330b      	adds	r3, #11
 800930c:	781b      	ldrb	r3, [r3, #0]
 800930e:	f003 0301 	and.w	r3, r3, #1
 8009312:	2b00      	cmp	r3, #0
 8009314:	d002      	beq.n	800931c <f_open+0x2c0>
						res = FR_DENIED;
 8009316:	2307      	movs	r3, #7
 8009318:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
				}
			}
		}
		if (res == FR_OK) {
 800931c:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 8009320:	2b00      	cmp	r3, #0
 8009322:	d13d      	bne.n	80093a0 <f_open+0x344>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8009324:	1dfb      	adds	r3, r7, #7
 8009326:	781b      	ldrb	r3, [r3, #0]
 8009328:	f003 0308 	and.w	r3, r3, #8
 800932c:	2b00      	cmp	r3, #0
 800932e:	d005      	beq.n	800933c <f_open+0x2e0>
				mode |= FA__WRITTEN;
 8009330:	1dfb      	adds	r3, r7, #7
 8009332:	1dfa      	adds	r2, r7, #7
 8009334:	7812      	ldrb	r2, [r2, #0]
 8009336:	f042 0220 	orr.w	r2, r2, #32
 800933a:	701a      	strb	r2, [r3, #0]
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 800933c:	f107 0320 	add.w	r3, r7, #32
 8009340:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8009344:	f8d3 2230 	ldr.w	r2, [r3, #560]	; 0x230
 8009348:	f107 030c 	add.w	r3, r7, #12
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
			fp->dir_ptr = dir;
 8009352:	f107 030c 	add.w	r3, r7, #12
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 800935c:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
#if _FS_LOCK
			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8009360:	1dfb      	adds	r3, r7, #7
 8009362:	781b      	ldrb	r3, [r3, #0]
 8009364:	f023 0301 	bic.w	r3, r3, #1
 8009368:	2b00      	cmp	r3, #0
 800936a:	bf14      	ite	ne
 800936c:	2301      	movne	r3, #1
 800936e:	2300      	moveq	r3, #0
 8009370:	b2db      	uxtb	r3, r3
 8009372:	461a      	mov	r2, r3
 8009374:	f107 0320 	add.w	r3, r7, #32
 8009378:	4611      	mov	r1, r2
 800937a:	4618      	mov	r0, r3
 800937c:	f7fe f880 	bl	8007480 <inc_lock>
 8009380:	4602      	mov	r2, r0
 8009382:	f107 030c 	add.w	r3, r7, #12
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
			if (!fp->lockid) res = FR_INT_ERR;
 800938c:	f107 030c 	add.w	r3, r7, #12
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 8009396:	2b00      	cmp	r3, #0
 8009398:	d102      	bne.n	80093a0 <f_open+0x344>
 800939a:	2302      	movs	r3, #2
 800939c:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
			}
		}
#endif
		FREE_BUF();

		if (res == FR_OK) {
 80093a0:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	d15d      	bne.n	8009464 <f_open+0x408>
			fp->flag = mode;					/* File access mode */
 80093a8:	f107 030c 	add.w	r3, r7, #12
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	1dfa      	adds	r2, r7, #7
 80093b0:	7812      	ldrb	r2, [r2, #0]
 80093b2:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
			fp->err = 0;						/* Clear error flag */
 80093b6:	f107 030c 	add.w	r3, r7, #12
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	2200      	movs	r2, #0
 80093be:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 80093c2:	f107 0320 	add.w	r3, r7, #32
 80093c6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80093ca:	f8d7 1248 	ldr.w	r1, [r7, #584]	; 0x248
 80093ce:	4618      	mov	r0, r3
 80093d0:	f7fe ff7f 	bl	80082d2 <ld_clust>
 80093d4:	4602      	mov	r2, r0
 80093d6:	f107 030c 	add.w	r3, r7, #12
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
			fp->fsize = LD_DWORD(dir + DIR_FileSize);	/* File size */
 80093e0:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 80093e4:	331f      	adds	r3, #31
 80093e6:	781b      	ldrb	r3, [r3, #0]
 80093e8:	061a      	lsls	r2, r3, #24
 80093ea:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 80093ee:	331e      	adds	r3, #30
 80093f0:	781b      	ldrb	r3, [r3, #0]
 80093f2:	041b      	lsls	r3, r3, #16
 80093f4:	4313      	orrs	r3, r2
 80093f6:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 80093fa:	321d      	adds	r2, #29
 80093fc:	7812      	ldrb	r2, [r2, #0]
 80093fe:	0212      	lsls	r2, r2, #8
 8009400:	4313      	orrs	r3, r2
 8009402:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 8009406:	321c      	adds	r2, #28
 8009408:	7812      	ldrb	r2, [r2, #0]
 800940a:	431a      	orrs	r2, r3
 800940c:	f107 030c 	add.w	r3, r7, #12
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
			fp->fptr = 0;						/* File pointer */
 8009416:	f107 030c 	add.w	r3, r7, #12
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	2200      	movs	r2, #0
 800941e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
			fp->dsect = 0;
 8009422:	f107 030c 	add.w	r3, r7, #12
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	2200      	movs	r2, #0
 800942a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
#if _USE_FASTSEEK
			fp->cltbl = 0;						/* Normal seek mode */
 800942e:	f107 030c 	add.w	r3, r7, #12
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	2200      	movs	r2, #0
 8009436:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
#endif
			fp->fs = dj.fs;	 					/* Validate file object */
 800943a:	f107 0320 	add.w	r3, r7, #32
 800943e:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8009442:	f107 030c 	add.w	r3, r7, #12
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
			fp->id = fp->fs->id;
 800944c:	f107 030c 	add.w	r3, r7, #12
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8009456:	f8b3 2206 	ldrh.w	r2, [r3, #518]	; 0x206
 800945a:	f107 030c 	add.w	r3, r7, #12
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	f8a3 2204 	strh.w	r2, [r3, #516]	; 0x204
		}
	}

	LEAVE_FF(dj.fs, res);
 8009464:	f107 0320 	add.w	r3, r7, #32
 8009468:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800946c:	f897 224f 	ldrb.w	r2, [r7, #591]	; 0x24f
 8009470:	4611      	mov	r1, r2
 8009472:	4618      	mov	r0, r3
 8009474:	f7fd ff55 	bl	8007322 <unlock_fs>
 8009478:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
}
 800947c:	4618      	mov	r0, r3
 800947e:	f507 7714 	add.w	r7, r7, #592	; 0x250
 8009482:	46bd      	mov	sp, r7
 8009484:	bd80      	pop	{r7, pc}

08009486 <f_read>:
	FIL* fp, 		/* Pointer to the file object */
	void* buff,		/* Pointer to data buffer */
	UINT btr,		/* Number of bytes to read */
	UINT* br		/* Pointer to number of bytes read */
)
{
 8009486:	b580      	push	{r7, lr}
 8009488:	b08c      	sub	sp, #48	; 0x30
 800948a:	af00      	add	r7, sp, #0
 800948c:	60f8      	str	r0, [r7, #12]
 800948e:	60b9      	str	r1, [r7, #8]
 8009490:	607a      	str	r2, [r7, #4]
 8009492:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect, remain;
	UINT rcnt, cc;
	BYTE csect, *rbuff = (BYTE*)buff;
 8009494:	68bb      	ldr	r3, [r7, #8]
 8009496:	623b      	str	r3, [r7, #32]


	*br = 0;	/* Clear read byte counter */
 8009498:	683b      	ldr	r3, [r7, #0]
 800949a:	2200      	movs	r2, #0
 800949c:	601a      	str	r2, [r3, #0]

	res = validate(fp);							/* Check validity */
 800949e:	68f8      	ldr	r0, [r7, #12]
 80094a0:	f7ff fd36 	bl	8008f10 <validate>
 80094a4:	4603      	mov	r3, r0
 80094a6:	77fb      	strb	r3, [r7, #31]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 80094a8:	7ffb      	ldrb	r3, [r7, #31]
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d009      	beq.n	80094c2 <f_read+0x3c>
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80094b4:	7ffa      	ldrb	r2, [r7, #31]
 80094b6:	4611      	mov	r1, r2
 80094b8:	4618      	mov	r0, r3
 80094ba:	f7fd ff32 	bl	8007322 <unlock_fs>
 80094be:	7ffb      	ldrb	r3, [r7, #31]
 80094c0:	e192      	b.n	80097e8 <f_read+0x362>
	if (fp->err)								/* Check error */
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	f893 3207 	ldrb.w	r3, [r3, #519]	; 0x207
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	d00d      	beq.n	80094e8 <f_read+0x62>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	f893 3207 	ldrb.w	r3, [r3, #519]	; 0x207
 80094d8:	4619      	mov	r1, r3
 80094da:	4610      	mov	r0, r2
 80094dc:	f7fd ff21 	bl	8007322 <unlock_fs>
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	f893 3207 	ldrb.w	r3, [r3, #519]	; 0x207
 80094e6:	e17f      	b.n	80097e8 <f_read+0x362>
	if (!(fp->flag & FA_READ)) 					/* Check access mode */
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 80094ee:	f003 0301 	and.w	r3, r3, #1
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d108      	bne.n	8009508 <f_read+0x82>
		LEAVE_FF(fp->fs, FR_DENIED);
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80094fc:	2107      	movs	r1, #7
 80094fe:	4618      	mov	r0, r3
 8009500:	f7fd ff0f 	bl	8007322 <unlock_fs>
 8009504:	2307      	movs	r3, #7
 8009506:	e16f      	b.n	80097e8 <f_read+0x362>
	remain = fp->fsize - fp->fptr;
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8009514:	1ad3      	subs	r3, r2, r3
 8009516:	61bb      	str	r3, [r7, #24]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8009518:	687a      	ldr	r2, [r7, #4]
 800951a:	69bb      	ldr	r3, [r7, #24]
 800951c:	429a      	cmp	r2, r3
 800951e:	f240 8157 	bls.w	80097d0 <f_read+0x34a>
 8009522:	69bb      	ldr	r3, [r7, #24]
 8009524:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8009526:	e153      	b.n	80097d0 <f_read+0x34a>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {		/* On the sector boundary? */
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800952e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009532:	2b00      	cmp	r3, #0
 8009534:	f040 811c 	bne.w	8009770 <f_read+0x2ea>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800953e:	0a5b      	lsrs	r3, r3, #9
 8009540:	b2da      	uxtb	r2, r3
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8009548:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 800954c:	3b01      	subs	r3, #1
 800954e:	b2db      	uxtb	r3, r3
 8009550:	4013      	ands	r3, r2
 8009552:	75fb      	strb	r3, [r7, #23]
			if (!csect) {						/* On the cluster boundary? */
 8009554:	7dfb      	ldrb	r3, [r7, #23]
 8009556:	2b00      	cmp	r3, #0
 8009558:	d147      	bne.n	80095ea <f_read+0x164>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8009560:	2b00      	cmp	r3, #0
 8009562:	d104      	bne.n	800956e <f_read+0xe8>
					clst = fp->sclust;			/* Follow from the origin */
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800956a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800956c:	e018      	b.n	80095a0 <f_read+0x11a>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl)
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 8009574:	2b00      	cmp	r3, #0
 8009576:	d008      	beq.n	800958a <f_read+0x104>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800957e:	4619      	mov	r1, r3
 8009580:	68f8      	ldr	r0, [r7, #12]
 8009582:	f7fe fc9d 	bl	8007ec0 <clmt_clust>
 8009586:	62f8      	str	r0, [r7, #44]	; 0x2c
 8009588:	e00a      	b.n	80095a0 <f_read+0x11a>
					else
#endif
						clst = get_fat(fp->fs, fp->clust);	/* Follow cluster chain on the FAT */
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009596:	4619      	mov	r1, r3
 8009598:	4610      	mov	r0, r2
 800959a:	f7fe f9d8 	bl	800794e <get_fat>
 800959e:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				if (clst < 2) ABORT(fp->fs, FR_INT_ERR);
 80095a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095a2:	2b01      	cmp	r3, #1
 80095a4:	d80c      	bhi.n	80095c0 <f_read+0x13a>
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	2202      	movs	r2, #2
 80095aa:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80095b4:	2102      	movs	r1, #2
 80095b6:	4618      	mov	r0, r3
 80095b8:	f7fd feb3 	bl	8007322 <unlock_fs>
 80095bc:	2302      	movs	r3, #2
 80095be:	e113      	b.n	80097e8 <f_read+0x362>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 80095c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80095c6:	d10c      	bne.n	80095e2 <f_read+0x15c>
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	2201      	movs	r2, #1
 80095cc:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80095d6:	2101      	movs	r1, #1
 80095d8:	4618      	mov	r0, r3
 80095da:	f7fd fea2 	bl	8007322 <unlock_fs>
 80095de:	2301      	movs	r3, #1
 80095e0:	e102      	b.n	80097e8 <f_read+0x362>
				fp->clust = clst;				/* Update current cluster */
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80095e6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
			}
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80095f6:	4619      	mov	r1, r3
 80095f8:	4610      	mov	r0, r2
 80095fa:	f7fe f987 	bl	800790c <clust2sect>
 80095fe:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 8009600:	693b      	ldr	r3, [r7, #16]
 8009602:	2b00      	cmp	r3, #0
 8009604:	d10c      	bne.n	8009620 <f_read+0x19a>
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	2202      	movs	r2, #2
 800960a:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8009614:	2102      	movs	r1, #2
 8009616:	4618      	mov	r0, r3
 8009618:	f7fd fe83 	bl	8007322 <unlock_fs>
 800961c:	2302      	movs	r3, #2
 800961e:	e0e3      	b.n	80097e8 <f_read+0x362>
			sect += csect;
 8009620:	7dfb      	ldrb	r3, [r7, #23]
 8009622:	693a      	ldr	r2, [r7, #16]
 8009624:	4413      	add	r3, r2
 8009626:	613b      	str	r3, [r7, #16]
			cc = btr / SS(fp->fs);				/* When remaining bytes >= sector size, */
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	0a5b      	lsrs	r3, r3, #9
 800962c:	627b      	str	r3, [r7, #36]	; 0x24
			if (cc) {							/* Read maximum contiguous sectors directly */
 800962e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009630:	2b00      	cmp	r3, #0
 8009632:	d04d      	beq.n	80096d0 <f_read+0x24a>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 8009634:	7dfa      	ldrb	r2, [r7, #23]
 8009636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009638:	4413      	add	r3, r2
 800963a:	68fa      	ldr	r2, [r7, #12]
 800963c:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 8009640:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 8009644:	4293      	cmp	r3, r2
 8009646:	d908      	bls.n	800965a <f_read+0x1d4>
					cc = fp->fs->csize - csect;
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800964e:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8009652:	461a      	mov	r2, r3
 8009654:	7dfb      	ldrb	r3, [r7, #23]
 8009656:	1ad3      	subs	r3, r2, r3
 8009658:	627b      	str	r3, [r7, #36]	; 0x24
				if (disk_read(fp->fs->drv, rbuff, sect, cc) != RES_OK)
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8009660:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8009664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009666:	693a      	ldr	r2, [r7, #16]
 8009668:	6a39      	ldr	r1, [r7, #32]
 800966a:	f7fd fd77 	bl	800715c <disk_read>
 800966e:	4603      	mov	r3, r0
 8009670:	2b00      	cmp	r3, #0
 8009672:	d00c      	beq.n	800968e <f_read+0x208>
					ABORT(fp->fs, FR_DISK_ERR);
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	2201      	movs	r2, #1
 8009678:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8009682:	2101      	movs	r1, #1
 8009684:	4618      	mov	r0, r3
 8009686:	f7fd fe4c 	bl	8007322 <unlock_fs>
 800968a:	2301      	movs	r3, #1
 800968c:	e0ac      	b.n	80097e8 <f_read+0x362>
#if !_FS_READONLY && _FS_MINIMIZE <= 2			/* Replace one of the read sectors with cached data if it contains a dirty sector */
#if _FS_TINY
				if (fp->fs->wflag && fp->fs->winsect - sect < cc)
					mem_cpy(rbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), fp->fs->win.d8, SS(fp->fs));
#else
				if ((fp->flag & FA__DIRTY) && fp->dsect - sect < cc)
 800968e:	68fb      	ldr	r3, [r7, #12]
 8009690:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8009694:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009698:	2b00      	cmp	r3, #0
 800969a:	d015      	beq.n	80096c8 <f_read+0x242>
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 80096a2:	693b      	ldr	r3, [r7, #16]
 80096a4:	1ad3      	subs	r3, r2, r3
 80096a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80096a8:	429a      	cmp	r2, r3
 80096aa:	d90d      	bls.n	80096c8 <f_read+0x242>
					mem_cpy(rbuff + ((fp->dsect - sect) * SS(fp->fs)), fp->buf.d8, SS(fp->fs));
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 80096b2:	693b      	ldr	r3, [r7, #16]
 80096b4:	1ad3      	subs	r3, r2, r3
 80096b6:	025b      	lsls	r3, r3, #9
 80096b8:	6a3a      	ldr	r2, [r7, #32]
 80096ba:	4413      	add	r3, r2
 80096bc:	68f9      	ldr	r1, [r7, #12]
 80096be:	f44f 7200 	mov.w	r2, #512	; 0x200
 80096c2:	4618      	mov	r0, r3
 80096c4:	f7fd fda8 	bl	8007218 <mem_cpy>
#endif
#endif
				rcnt = SS(fp->fs) * cc;			/* Number of bytes transferred */
 80096c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096ca:	025b      	lsls	r3, r3, #9
 80096cc:	62bb      	str	r3, [r7, #40]	; 0x28
				continue;
 80096ce:	e069      	b.n	80097a4 <f_read+0x31e>
			}
#if !_FS_TINY
			if (fp->dsect != sect) {			/* Load data sector if not in cache */
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80096d6:	693a      	ldr	r2, [r7, #16]
 80096d8:	429a      	cmp	r2, r3
 80096da:	d045      	beq.n	8009768 <f_read+0x2e2>
#if !_FS_READONLY
				if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 80096e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d024      	beq.n	8009734 <f_read+0x2ae>
					if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80096f0:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 80096f4:	68f9      	ldr	r1, [r7, #12]
 80096f6:	68fb      	ldr	r3, [r7, #12]
 80096f8:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 80096fc:	2301      	movs	r3, #1
 80096fe:	f7fd fd4d 	bl	800719c <disk_write>
 8009702:	4603      	mov	r3, r0
 8009704:	2b00      	cmp	r3, #0
 8009706:	d00c      	beq.n	8009722 <f_read+0x29c>
						ABORT(fp->fs, FR_DISK_ERR);
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	2201      	movs	r2, #1
 800970c:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8009716:	2101      	movs	r1, #1
 8009718:	4618      	mov	r0, r3
 800971a:	f7fd fe02 	bl	8007322 <unlock_fs>
 800971e:	2301      	movs	r3, #1
 8009720:	e062      	b.n	80097e8 <f_read+0x362>
					fp->flag &= ~FA__DIRTY;
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8009728:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800972c:	b2da      	uxtb	r2, r3
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
				}
#endif
				if (disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)	/* Fill sector cache */
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800973a:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 800973e:	68f9      	ldr	r1, [r7, #12]
 8009740:	2301      	movs	r3, #1
 8009742:	693a      	ldr	r2, [r7, #16]
 8009744:	f7fd fd0a 	bl	800715c <disk_read>
 8009748:	4603      	mov	r3, r0
 800974a:	2b00      	cmp	r3, #0
 800974c:	d00c      	beq.n	8009768 <f_read+0x2e2>
					ABORT(fp->fs, FR_DISK_ERR);
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	2201      	movs	r2, #1
 8009752:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8009756:	68fb      	ldr	r3, [r7, #12]
 8009758:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800975c:	2101      	movs	r1, #1
 800975e:	4618      	mov	r0, r3
 8009760:	f7fd fddf 	bl	8007322 <unlock_fs>
 8009764:	2301      	movs	r3, #1
 8009766:	e03f      	b.n	80097e8 <f_read+0x362>
			}
#endif
			fp->dsect = sect;
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	693a      	ldr	r2, [r7, #16]
 800976c:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
		}
		rcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8009776:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800977a:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800977e:	62bb      	str	r3, [r7, #40]	; 0x28
		if (rcnt > btr) rcnt = btr;
 8009780:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	429a      	cmp	r2, r3
 8009786:	d901      	bls.n	800978c <f_read+0x306>
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	62bb      	str	r3, [r7, #40]	; 0x28
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect) != FR_OK)		/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(rbuff, &fp->fs->win.d8[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
#else
		mem_cpy(rbuff, &fp->buf.d8[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8009792:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009796:	68fa      	ldr	r2, [r7, #12]
 8009798:	4413      	add	r3, r2
 800979a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800979c:	4619      	mov	r1, r3
 800979e:	6a38      	ldr	r0, [r7, #32]
 80097a0:	f7fd fd3a 	bl	8007218 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 80097a4:	6a3a      	ldr	r2, [r7, #32]
 80097a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097a8:	4413      	add	r3, r2
 80097aa:	623b      	str	r3, [r7, #32]
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80097b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097b4:	441a      	add	r2, r3
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
 80097bc:	683b      	ldr	r3, [r7, #0]
 80097be:	681a      	ldr	r2, [r3, #0]
 80097c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097c2:	441a      	add	r2, r3
 80097c4:	683b      	ldr	r3, [r7, #0]
 80097c6:	601a      	str	r2, [r3, #0]
 80097c8:	687a      	ldr	r2, [r7, #4]
 80097ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097cc:	1ad3      	subs	r3, r2, r3
 80097ce:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	f47f aea8 	bne.w	8009528 <f_read+0xa2>
#endif
	}

	LEAVE_FF(fp->fs, FR_OK);
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80097de:	2100      	movs	r1, #0
 80097e0:	4618      	mov	r0, r3
 80097e2:	f7fd fd9e 	bl	8007322 <unlock_fs>
 80097e6:	2300      	movs	r3, #0
}
 80097e8:	4618      	mov	r0, r3
 80097ea:	3730      	adds	r7, #48	; 0x30
 80097ec:	46bd      	mov	sp, r7
 80097ee:	bd80      	pop	{r7, pc}

080097f0 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 80097f0:	b580      	push	{r7, lr}
 80097f2:	b08a      	sub	sp, #40	; 0x28
 80097f4:	af00      	add	r7, sp, #0
 80097f6:	60f8      	str	r0, [r7, #12]
 80097f8:	60b9      	str	r1, [r7, #8]
 80097fa:	607a      	str	r2, [r7, #4]
 80097fc:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = (const BYTE*)buff;
 80097fe:	68bb      	ldr	r3, [r7, #8]
 8009800:	61bb      	str	r3, [r7, #24]
	BYTE csect;


	*bw = 0;	/* Clear write byte counter */
 8009802:	683b      	ldr	r3, [r7, #0]
 8009804:	2200      	movs	r2, #0
 8009806:	601a      	str	r2, [r3, #0]

	res = validate(fp);						/* Check validity */
 8009808:	68f8      	ldr	r0, [r7, #12]
 800980a:	f7ff fb81 	bl	8008f10 <validate>
 800980e:	4603      	mov	r3, r0
 8009810:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 8009812:	7dfb      	ldrb	r3, [r7, #23]
 8009814:	2b00      	cmp	r3, #0
 8009816:	d009      	beq.n	800982c <f_write+0x3c>
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800981e:	7dfa      	ldrb	r2, [r7, #23]
 8009820:	4611      	mov	r1, r2
 8009822:	4618      	mov	r0, r3
 8009824:	f7fd fd7d 	bl	8007322 <unlock_fs>
 8009828:	7dfb      	ldrb	r3, [r7, #23]
 800982a:	e1d4      	b.n	8009bd6 <f_write+0x3e6>
	if (fp->err)							/* Check error */
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	f893 3207 	ldrb.w	r3, [r3, #519]	; 0x207
 8009832:	2b00      	cmp	r3, #0
 8009834:	d00d      	beq.n	8009852 <f_write+0x62>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	f893 3207 	ldrb.w	r3, [r3, #519]	; 0x207
 8009842:	4619      	mov	r1, r3
 8009844:	4610      	mov	r0, r2
 8009846:	f7fd fd6c 	bl	8007322 <unlock_fs>
 800984a:	68fb      	ldr	r3, [r7, #12]
 800984c:	f893 3207 	ldrb.w	r3, [r3, #519]	; 0x207
 8009850:	e1c1      	b.n	8009bd6 <f_write+0x3e6>
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8009858:	f003 0302 	and.w	r3, r3, #2
 800985c:	2b00      	cmp	r3, #0
 800985e:	d108      	bne.n	8009872 <f_write+0x82>
		LEAVE_FF(fp->fs, FR_DENIED);
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8009866:	2107      	movs	r1, #7
 8009868:	4618      	mov	r0, r3
 800986a:	f7fd fd5a 	bl	8007322 <unlock_fs>
 800986e:	2307      	movs	r3, #7
 8009870:	e1b1      	b.n	8009bd6 <f_write+0x3e6>
	if (fp->fptr + btw < fp->fptr) btw = 0;	/* File size cannot reach 4GB */
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	441a      	add	r2, r3
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8009882:	429a      	cmp	r2, r3
 8009884:	f080 8182 	bcs.w	8009b8c <f_write+0x39c>
 8009888:	2300      	movs	r3, #0
 800988a:	607b      	str	r3, [r7, #4]

	for ( ;  btw;							/* Repeat until all data written */
 800988c:	e17e      	b.n	8009b8c <f_write+0x39c>
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8009894:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009898:	2b00      	cmp	r3, #0
 800989a:	f040 813e 	bne.w	8009b1a <f_write+0x32a>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 80098a4:	0a5b      	lsrs	r3, r3, #9
 80098a6:	b2da      	uxtb	r2, r3
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80098ae:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 80098b2:	3b01      	subs	r3, #1
 80098b4:	b2db      	uxtb	r3, r3
 80098b6:	4013      	ands	r3, r2
 80098b8:	75bb      	strb	r3, [r7, #22]
			if (!csect) {					/* On the cluster boundary? */
 80098ba:	7dbb      	ldrb	r3, [r7, #22]
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d15f      	bne.n	8009980 <f_write+0x190>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d10f      	bne.n	80098ea <f_write+0xfa>
					clst = fp->sclust;		/* Follow from the origin */
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80098d0:	627b      	str	r3, [r7, #36]	; 0x24
					if (clst == 0)			/* When no cluster is allocated, */
 80098d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d121      	bne.n	800991c <f_write+0x12c>
						clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80098de:	2100      	movs	r1, #0
 80098e0:	4618      	mov	r0, r3
 80098e2:	f7fe fa50 	bl	8007d86 <create_chain>
 80098e6:	6278      	str	r0, [r7, #36]	; 0x24
 80098e8:	e018      	b.n	800991c <f_write+0x12c>
				} else {					/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl)
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d008      	beq.n	8009906 <f_write+0x116>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 80098fa:	4619      	mov	r1, r3
 80098fc:	68f8      	ldr	r0, [r7, #12]
 80098fe:	f7fe fadf 	bl	8007ec0 <clmt_clust>
 8009902:	6278      	str	r0, [r7, #36]	; 0x24
 8009904:	e00a      	b.n	800991c <f_write+0x12c>
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800990c:	68fb      	ldr	r3, [r7, #12]
 800990e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009912:	4619      	mov	r1, r3
 8009914:	4610      	mov	r0, r2
 8009916:	f7fe fa36 	bl	8007d86 <create_chain>
 800991a:	6278      	str	r0, [r7, #36]	; 0x24
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800991c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800991e:	2b00      	cmp	r3, #0
 8009920:	f000 8139 	beq.w	8009b96 <f_write+0x3a6>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 8009924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009926:	2b01      	cmp	r3, #1
 8009928:	d10c      	bne.n	8009944 <f_write+0x154>
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	2202      	movs	r2, #2
 800992e:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8009938:	2102      	movs	r1, #2
 800993a:	4618      	mov	r0, r3
 800993c:	f7fd fcf1 	bl	8007322 <unlock_fs>
 8009940:	2302      	movs	r3, #2
 8009942:	e148      	b.n	8009bd6 <f_write+0x3e6>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8009944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009946:	f1b3 3fff 	cmp.w	r3, #4294967295
 800994a:	d10c      	bne.n	8009966 <f_write+0x176>
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	2201      	movs	r2, #1
 8009950:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800995a:	2101      	movs	r1, #1
 800995c:	4618      	mov	r0, r3
 800995e:	f7fd fce0 	bl	8007322 <unlock_fs>
 8009962:	2301      	movs	r3, #1
 8009964:	e137      	b.n	8009bd6 <f_write+0x3e6>
				fp->clust = clst;			/* Update current cluster */
 8009966:	68fb      	ldr	r3, [r7, #12]
 8009968:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800996a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
				if (fp->sclust == 0) fp->sclust = clst;	/* Set start cluster if the first write */
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8009974:	2b00      	cmp	r3, #0
 8009976:	d103      	bne.n	8009980 <f_write+0x190>
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800997c:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && sync_window(fp->fs))	/* Write-back sector cache */
				ABORT(fp->fs, FR_DISK_ERR);
#else
			if (fp->flag & FA__DIRTY) {		/* Write-back sector cache */
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8009986:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800998a:	2b00      	cmp	r3, #0
 800998c:	d024      	beq.n	80099d8 <f_write+0x1e8>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8009994:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8009998:	68f9      	ldr	r1, [r7, #12]
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 80099a0:	2301      	movs	r3, #1
 80099a2:	f7fd fbfb 	bl	800719c <disk_write>
 80099a6:	4603      	mov	r3, r0
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d00c      	beq.n	80099c6 <f_write+0x1d6>
					ABORT(fp->fs, FR_DISK_ERR);
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	2201      	movs	r2, #1
 80099b0:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80099ba:	2101      	movs	r1, #1
 80099bc:	4618      	mov	r0, r3
 80099be:	f7fd fcb0 	bl	8007322 <unlock_fs>
 80099c2:	2301      	movs	r3, #1
 80099c4:	e107      	b.n	8009bd6 <f_write+0x3e6>
				fp->flag &= ~FA__DIRTY;
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 80099cc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80099d0:	b2da      	uxtb	r2, r3
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80099de:	68fb      	ldr	r3, [r7, #12]
 80099e0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80099e4:	4619      	mov	r1, r3
 80099e6:	4610      	mov	r0, r2
 80099e8:	f7fd ff90 	bl	800790c <clust2sect>
 80099ec:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 80099ee:	693b      	ldr	r3, [r7, #16]
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	d10c      	bne.n	8009a0e <f_write+0x21e>
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	2202      	movs	r2, #2
 80099f8:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8009a02:	2102      	movs	r1, #2
 8009a04:	4618      	mov	r0, r3
 8009a06:	f7fd fc8c 	bl	8007322 <unlock_fs>
 8009a0a:	2302      	movs	r3, #2
 8009a0c:	e0e3      	b.n	8009bd6 <f_write+0x3e6>
			sect += csect;
 8009a0e:	7dbb      	ldrb	r3, [r7, #22]
 8009a10:	693a      	ldr	r2, [r7, #16]
 8009a12:	4413      	add	r3, r2
 8009a14:	613b      	str	r3, [r7, #16]
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	0a5b      	lsrs	r3, r3, #9
 8009a1a:	61fb      	str	r3, [r7, #28]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8009a1c:	69fb      	ldr	r3, [r7, #28]
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	d04f      	beq.n	8009ac2 <f_write+0x2d2>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 8009a22:	7dba      	ldrb	r2, [r7, #22]
 8009a24:	69fb      	ldr	r3, [r7, #28]
 8009a26:	4413      	add	r3, r2
 8009a28:	68fa      	ldr	r2, [r7, #12]
 8009a2a:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 8009a2e:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 8009a32:	4293      	cmp	r3, r2
 8009a34:	d908      	bls.n	8009a48 <f_write+0x258>
					cc = fp->fs->csize - csect;
 8009a36:	68fb      	ldr	r3, [r7, #12]
 8009a38:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8009a3c:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8009a40:	461a      	mov	r2, r3
 8009a42:	7dbb      	ldrb	r3, [r7, #22]
 8009a44:	1ad3      	subs	r3, r2, r3
 8009a46:	61fb      	str	r3, [r7, #28]
				if (disk_write(fp->fs->drv, wbuff, sect, cc) != RES_OK)
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8009a4e:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8009a52:	69fb      	ldr	r3, [r7, #28]
 8009a54:	693a      	ldr	r2, [r7, #16]
 8009a56:	69b9      	ldr	r1, [r7, #24]
 8009a58:	f7fd fba0 	bl	800719c <disk_write>
 8009a5c:	4603      	mov	r3, r0
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d00c      	beq.n	8009a7c <f_write+0x28c>
					ABORT(fp->fs, FR_DISK_ERR);
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	2201      	movs	r2, #1
 8009a66:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8009a70:	2101      	movs	r1, #1
 8009a72:	4618      	mov	r0, r3
 8009a74:	f7fd fc55 	bl	8007322 <unlock_fs>
 8009a78:	2301      	movs	r3, #1
 8009a7a:	e0ac      	b.n	8009bd6 <f_write+0x3e6>
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fp->fs->win.d8, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->fs->wflag = 0;
				}
#else
				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8009a82:	693b      	ldr	r3, [r7, #16]
 8009a84:	1ad3      	subs	r3, r2, r3
 8009a86:	69fa      	ldr	r2, [r7, #28]
 8009a88:	429a      	cmp	r2, r3
 8009a8a:	d916      	bls.n	8009aba <f_write+0x2ca>
					mem_cpy(fp->buf.d8, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
 8009a8c:	68f8      	ldr	r0, [r7, #12]
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8009a94:	693b      	ldr	r3, [r7, #16]
 8009a96:	1ad3      	subs	r3, r2, r3
 8009a98:	025b      	lsls	r3, r3, #9
 8009a9a:	69ba      	ldr	r2, [r7, #24]
 8009a9c:	4413      	add	r3, r2
 8009a9e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009aa2:	4619      	mov	r1, r3
 8009aa4:	f7fd fbb8 	bl	8007218 <mem_cpy>
					fp->flag &= ~FA__DIRTY;
 8009aa8:	68fb      	ldr	r3, [r7, #12]
 8009aaa:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8009aae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009ab2:	b2da      	uxtb	r2, r3
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
				}
#endif
#endif
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
 8009aba:	69fb      	ldr	r3, [r7, #28]
 8009abc:	025b      	lsls	r3, r3, #9
 8009abe:	623b      	str	r3, [r7, #32]
				continue;
 8009ac0:	e04e      	b.n	8009b60 <f_write+0x370>
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
				if (sync_window(fp->fs)) ABORT(fp->fs, FR_DISK_ERR);
				fp->fs->winsect = sect;
			}
#else
			if (fp->dsect != sect) {		/* Fill sector cache with file data */
 8009ac2:	68fb      	ldr	r3, [r7, #12]
 8009ac4:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8009ac8:	693a      	ldr	r2, [r7, #16]
 8009aca:	429a      	cmp	r2, r3
 8009acc:	d021      	beq.n	8009b12 <f_write+0x322>
				if (fp->fptr < fp->fsize &&
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8009ada:	429a      	cmp	r2, r3
 8009adc:	d219      	bcs.n	8009b12 <f_write+0x322>
					disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8009ae4:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8009ae8:	68f9      	ldr	r1, [r7, #12]
 8009aea:	2301      	movs	r3, #1
 8009aec:	693a      	ldr	r2, [r7, #16]
 8009aee:	f7fd fb35 	bl	800715c <disk_read>
 8009af2:	4603      	mov	r3, r0
				if (fp->fptr < fp->fsize &&
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d00c      	beq.n	8009b12 <f_write+0x322>
						ABORT(fp->fs, FR_DISK_ERR);
 8009af8:	68fb      	ldr	r3, [r7, #12]
 8009afa:	2201      	movs	r2, #1
 8009afc:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8009b06:	2101      	movs	r1, #1
 8009b08:	4618      	mov	r0, r3
 8009b0a:	f7fd fc0a 	bl	8007322 <unlock_fs>
 8009b0e:	2301      	movs	r3, #1
 8009b10:	e061      	b.n	8009bd6 <f_write+0x3e6>
			}
#endif
			fp->dsect = sect;
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	693a      	ldr	r2, [r7, #16]
 8009b16:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
		}
		wcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
 8009b1a:	68fb      	ldr	r3, [r7, #12]
 8009b1c:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8009b20:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b24:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8009b28:	623b      	str	r3, [r7, #32]
		if (wcnt > btw) wcnt = btw;
 8009b2a:	6a3a      	ldr	r2, [r7, #32]
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	429a      	cmp	r2, r3
 8009b30:	d901      	bls.n	8009b36 <f_write+0x346>
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	623b      	str	r3, [r7, #32]
		if (move_window(fp->fs, fp->dsect) != FR_OK)	/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(&fp->fs->win.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->fs->wflag = 1;
#else
		mem_cpy(&fp->buf.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
 8009b36:	68fb      	ldr	r3, [r7, #12]
 8009b38:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8009b3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b40:	68fa      	ldr	r2, [r7, #12]
 8009b42:	4413      	add	r3, r2
 8009b44:	6a3a      	ldr	r2, [r7, #32]
 8009b46:	69b9      	ldr	r1, [r7, #24]
 8009b48:	4618      	mov	r0, r3
 8009b4a:	f7fd fb65 	bl	8007218 <mem_cpy>
		fp->flag |= FA__DIRTY;
 8009b4e:	68fb      	ldr	r3, [r7, #12]
 8009b50:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8009b54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009b58:	b2da      	uxtb	r2, r3
 8009b5a:	68fb      	ldr	r3, [r7, #12]
 8009b5c:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
 8009b60:	69ba      	ldr	r2, [r7, #24]
 8009b62:	6a3b      	ldr	r3, [r7, #32]
 8009b64:	4413      	add	r3, r2
 8009b66:	61bb      	str	r3, [r7, #24]
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8009b6e:	6a3b      	ldr	r3, [r7, #32]
 8009b70:	441a      	add	r2, r3
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
 8009b78:	683b      	ldr	r3, [r7, #0]
 8009b7a:	681a      	ldr	r2, [r3, #0]
 8009b7c:	6a3b      	ldr	r3, [r7, #32]
 8009b7e:	441a      	add	r2, r3
 8009b80:	683b      	ldr	r3, [r7, #0]
 8009b82:	601a      	str	r2, [r3, #0]
 8009b84:	687a      	ldr	r2, [r7, #4]
 8009b86:	6a3b      	ldr	r3, [r7, #32]
 8009b88:	1ad3      	subs	r3, r2, r3
 8009b8a:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	f47f ae7d 	bne.w	800988e <f_write+0x9e>
 8009b94:	e000      	b.n	8009b98 <f_write+0x3a8>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8009b96:	bf00      	nop
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8009ba4:	429a      	cmp	r2, r3
 8009ba6:	d905      	bls.n	8009bb4 <f_write+0x3c4>
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8009bba:	f043 0320 	orr.w	r3, r3, #32
 8009bbe:	b2da      	uxtb	r2, r3
 8009bc0:	68fb      	ldr	r3, [r7, #12]
 8009bc2:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206

	LEAVE_FF(fp->fs, FR_OK);
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8009bcc:	2100      	movs	r1, #0
 8009bce:	4618      	mov	r0, r3
 8009bd0:	f7fd fba7 	bl	8007322 <unlock_fs>
 8009bd4:	2300      	movs	r3, #0
}
 8009bd6:	4618      	mov	r0, r3
 8009bd8:	3728      	adds	r7, #40	; 0x28
 8009bda:	46bd      	mov	sp, r7
 8009bdc:	bd80      	pop	{r7, pc}

08009bde <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8009bde:	b580      	push	{r7, lr}
 8009be0:	b086      	sub	sp, #24
 8009be2:	af00      	add	r7, sp, #0
 8009be4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD tm;
	BYTE *dir;


	res = validate(fp);					/* Check validity of the object */
 8009be6:	6878      	ldr	r0, [r7, #4]
 8009be8:	f7ff f992 	bl	8008f10 <validate>
 8009bec:	4603      	mov	r3, r0
 8009bee:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8009bf0:	7dfb      	ldrb	r3, [r7, #23]
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	f040 80af 	bne.w	8009d56 <f_sync+0x178>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8009bfe:	f003 0320 	and.w	r3, r3, #32
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	f000 80a7 	beq.w	8009d56 <f_sync+0x178>
			/* Write-back dirty buffer */
#if !_FS_TINY
			if (fp->flag & FA__DIRTY) {
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8009c0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d020      	beq.n	8009c58 <f_sync+0x7a>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8009c1c:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8009c20:	6879      	ldr	r1, [r7, #4]
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8009c28:	2301      	movs	r3, #1
 8009c2a:	f7fd fab7 	bl	800719c <disk_write>
 8009c2e:	4603      	mov	r3, r0
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	d008      	beq.n	8009c46 <f_sync+0x68>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8009c3a:	2101      	movs	r1, #1
 8009c3c:	4618      	mov	r0, r3
 8009c3e:	f7fd fb70 	bl	8007322 <unlock_fs>
 8009c42:	2301      	movs	r3, #1
 8009c44:	e090      	b.n	8009d68 <f_sync+0x18a>
				fp->flag &= ~FA__DIRTY;
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8009c4c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009c50:	b2da      	uxtb	r2, r3
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8009c64:	4619      	mov	r1, r3
 8009c66:	4610      	mov	r0, r2
 8009c68:	f7fd fd75 	bl	8007756 <move_window>
 8009c6c:	4603      	mov	r3, r0
 8009c6e:	75fb      	strb	r3, [r7, #23]
			if (res == FR_OK) {
 8009c70:	7dfb      	ldrb	r3, [r7, #23]
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	d16f      	bne.n	8009d56 <f_sync+0x178>
				dir = fp->dir_ptr;
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8009c7c:	613b      	str	r3, [r7, #16]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
 8009c7e:	693b      	ldr	r3, [r7, #16]
 8009c80:	330b      	adds	r3, #11
 8009c82:	781a      	ldrb	r2, [r3, #0]
 8009c84:	693b      	ldr	r3, [r7, #16]
 8009c86:	330b      	adds	r3, #11
 8009c88:	f042 0220 	orr.w	r2, r2, #32
 8009c8c:	b2d2      	uxtb	r2, r2
 8009c8e:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, fp->fsize);	/* Update file size */
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8009c96:	693b      	ldr	r3, [r7, #16]
 8009c98:	331c      	adds	r3, #28
 8009c9a:	b2d2      	uxtb	r2, r2
 8009c9c:	701a      	strb	r2, [r3, #0]
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8009ca4:	b29b      	uxth	r3, r3
 8009ca6:	0a1b      	lsrs	r3, r3, #8
 8009ca8:	b29a      	uxth	r2, r3
 8009caa:	693b      	ldr	r3, [r7, #16]
 8009cac:	331d      	adds	r3, #29
 8009cae:	b2d2      	uxtb	r2, r2
 8009cb0:	701a      	strb	r2, [r3, #0]
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8009cb8:	0c1a      	lsrs	r2, r3, #16
 8009cba:	693b      	ldr	r3, [r7, #16]
 8009cbc:	331e      	adds	r3, #30
 8009cbe:	b2d2      	uxtb	r2, r2
 8009cc0:	701a      	strb	r2, [r3, #0]
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8009cc8:	0e1a      	lsrs	r2, r3, #24
 8009cca:	693b      	ldr	r3, [r7, #16]
 8009ccc:	331f      	adds	r3, #31
 8009cce:	b2d2      	uxtb	r2, r2
 8009cd0:	701a      	strb	r2, [r3, #0]
				st_clust(dir, fp->sclust);					/* Update start cluster */
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8009cd8:	4619      	mov	r1, r3
 8009cda:	6938      	ldr	r0, [r7, #16]
 8009cdc:	f7fe fb26 	bl	800832c <st_clust>
				tm = GET_FATTIME();							/* Update updated time */
 8009ce0:	f7fd f9a0 	bl	8007024 <get_fattime>
 8009ce4:	60f8      	str	r0, [r7, #12]
				ST_DWORD(dir + DIR_WrtTime, tm);
 8009ce6:	693b      	ldr	r3, [r7, #16]
 8009ce8:	3316      	adds	r3, #22
 8009cea:	68fa      	ldr	r2, [r7, #12]
 8009cec:	b2d2      	uxtb	r2, r2
 8009cee:	701a      	strb	r2, [r3, #0]
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	b29b      	uxth	r3, r3
 8009cf4:	0a1b      	lsrs	r3, r3, #8
 8009cf6:	b29a      	uxth	r2, r3
 8009cf8:	693b      	ldr	r3, [r7, #16]
 8009cfa:	3317      	adds	r3, #23
 8009cfc:	b2d2      	uxtb	r2, r2
 8009cfe:	701a      	strb	r2, [r3, #0]
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	0c1a      	lsrs	r2, r3, #16
 8009d04:	693b      	ldr	r3, [r7, #16]
 8009d06:	3318      	adds	r3, #24
 8009d08:	b2d2      	uxtb	r2, r2
 8009d0a:	701a      	strb	r2, [r3, #0]
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	0e1a      	lsrs	r2, r3, #24
 8009d10:	693b      	ldr	r3, [r7, #16]
 8009d12:	3319      	adds	r3, #25
 8009d14:	b2d2      	uxtb	r2, r2
 8009d16:	701a      	strb	r2, [r3, #0]
				ST_WORD(dir + DIR_LstAccDate, 0);
 8009d18:	693b      	ldr	r3, [r7, #16]
 8009d1a:	3312      	adds	r3, #18
 8009d1c:	2200      	movs	r2, #0
 8009d1e:	701a      	strb	r2, [r3, #0]
 8009d20:	693b      	ldr	r3, [r7, #16]
 8009d22:	3313      	adds	r3, #19
 8009d24:	2200      	movs	r2, #0
 8009d26:	701a      	strb	r2, [r3, #0]
				fp->flag &= ~FA__WRITTEN;
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8009d2e:	f023 0320 	bic.w	r3, r3, #32
 8009d32:	b2da      	uxtb	r2, r3
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
				fp->fs->wflag = 1;
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8009d40:	2201      	movs	r2, #1
 8009d42:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
				res = sync_fs(fp->fs);
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8009d4c:	4618      	mov	r0, r3
 8009d4e:	f7fd fd30 	bl	80077b2 <sync_fs>
 8009d52:	4603      	mov	r3, r0
 8009d54:	75fb      	strb	r3, [r7, #23]
			}
		}
	}

	LEAVE_FF(fp->fs, res);
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8009d5c:	7dfa      	ldrb	r2, [r7, #23]
 8009d5e:	4611      	mov	r1, r2
 8009d60:	4618      	mov	r0, r3
 8009d62:	f7fd fade 	bl	8007322 <unlock_fs>
 8009d66:	7dfb      	ldrb	r3, [r7, #23]
}
 8009d68:	4618      	mov	r0, r3
 8009d6a:	3718      	adds	r7, #24
 8009d6c:	46bd      	mov	sp, r7
 8009d6e:	bd80      	pop	{r7, pc}

08009d70 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
 8009d70:	b580      	push	{r7, lr}
 8009d72:	b084      	sub	sp, #16
 8009d74:	af00      	add	r7, sp, #0
 8009d76:	6078      	str	r0, [r7, #4]
	FRESULT res;


#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8009d78:	6878      	ldr	r0, [r7, #4]
 8009d7a:	f7ff ff30 	bl	8009bde <f_sync>
 8009d7e:	4603      	mov	r3, r0
 8009d80:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8009d82:	7bfb      	ldrb	r3, [r7, #15]
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d11e      	bne.n	8009dc6 <f_close+0x56>
#endif
	{
		res = validate(fp);				/* Lock volume */
 8009d88:	6878      	ldr	r0, [r7, #4]
 8009d8a:	f7ff f8c1 	bl	8008f10 <validate>
 8009d8e:	4603      	mov	r3, r0
 8009d90:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8009d92:	7bfb      	ldrb	r3, [r7, #15]
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	d116      	bne.n	8009dc6 <f_close+0x56>
#if _FS_REENTRANT
			FATFS *fs = fp->fs;
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8009d9e:	60bb      	str	r3, [r7, #8]
#endif
#if _FS_LOCK
			res = dec_lock(fp->lockid);	/* Decrement file open counter */
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 8009da6:	4618      	mov	r0, r3
 8009da8:	f7fd fc20 	bl	80075ec <dec_lock>
 8009dac:	4603      	mov	r3, r0
 8009dae:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8009db0:	7bfb      	ldrb	r3, [r7, #15]
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	d103      	bne.n	8009dbe <f_close+0x4e>
#endif
				fp->fs = 0;				/* Invalidate file object */
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	2200      	movs	r2, #0
 8009dba:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 8009dbe:	2100      	movs	r1, #0
 8009dc0:	68b8      	ldr	r0, [r7, #8]
 8009dc2:	f7fd faae 	bl	8007322 <unlock_fs>
#endif
		}
	}
	return res;
 8009dc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8009dc8:	4618      	mov	r0, r3
 8009dca:	3710      	adds	r7, #16
 8009dcc:	46bd      	mov	sp, r7
 8009dce:	bd80      	pop	{r7, pc}

08009dd0 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File pointer from top of file */
)
{
 8009dd0:	b580      	push	{r7, lr}
 8009dd2:	b090      	sub	sp, #64	; 0x40
 8009dd4:	af00      	add	r7, sp, #0
 8009dd6:	6078      	str	r0, [r7, #4]
 8009dd8:	6039      	str	r1, [r7, #0]
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif


	res = validate(fp);					/* Check validity of the object */
 8009dda:	6878      	ldr	r0, [r7, #4]
 8009ddc:	f7ff f898 	bl	8008f10 <validate>
 8009de0:	4603      	mov	r3, r0
 8009de2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 8009de6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d00b      	beq.n	8009e06 <f_lseek+0x36>
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8009df4:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8009df8:	4611      	mov	r1, r2
 8009dfa:	4618      	mov	r0, r3
 8009dfc:	f7fd fa91 	bl	8007322 <unlock_fs>
 8009e00:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009e04:	e2af      	b.n	800a366 <f_lseek+0x596>
	if (fp->err)						/* Check error */
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	f893 3207 	ldrb.w	r3, [r3, #519]	; 0x207
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	d00d      	beq.n	8009e2c <f_lseek+0x5c>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	f893 3207 	ldrb.w	r3, [r3, #519]	; 0x207
 8009e1c:	4619      	mov	r1, r3
 8009e1e:	4610      	mov	r0, r2
 8009e20:	f7fd fa7f 	bl	8007322 <unlock_fs>
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	f893 3207 	ldrb.w	r3, [r3, #519]	; 0x207
 8009e2a:	e29c      	b.n	800a366 <f_lseek+0x596>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	f000 8115 	beq.w	800a062 <f_lseek+0x292>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8009e38:	683b      	ldr	r3, [r7, #0]
 8009e3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e3e:	d172      	bne.n	8009f26 <f_lseek+0x156>
			tbl = fp->cltbl;
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 8009e46:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8009e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e4a:	1d1a      	adds	r2, r3, #4
 8009e4c:	627a      	str	r2, [r7, #36]	; 0x24
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	617b      	str	r3, [r7, #20]
 8009e52:	2302      	movs	r3, #2
 8009e54:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->sclust;			/* Top of the chain */
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8009e5c:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 8009e5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d04f      	beq.n	8009f04 <f_lseek+0x134>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8009e64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e66:	613b      	str	r3, [r7, #16]
 8009e68:	2300      	movs	r3, #0
 8009e6a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009e6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e6e:	3302      	adds	r3, #2
 8009e70:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 8009e72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e74:	60fb      	str	r3, [r7, #12]
 8009e76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e78:	3301      	adds	r3, #1
 8009e7a:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(fp->fs, cl);
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8009e82:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009e84:	4618      	mov	r0, r3
 8009e86:	f7fd fd62 	bl	800794e <get_fat>
 8009e8a:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fp->fs, FR_INT_ERR);
 8009e8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e8e:	2b01      	cmp	r3, #1
 8009e90:	d80c      	bhi.n	8009eac <f_lseek+0xdc>
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	2202      	movs	r2, #2
 8009e96:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8009ea0:	2102      	movs	r1, #2
 8009ea2:	4618      	mov	r0, r3
 8009ea4:	f7fd fa3d 	bl	8007322 <unlock_fs>
 8009ea8:	2302      	movs	r3, #2
 8009eaa:	e25c      	b.n	800a366 <f_lseek+0x596>
						if (cl == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8009eac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009eae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009eb2:	d10c      	bne.n	8009ece <f_lseek+0xfe>
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	2201      	movs	r2, #1
 8009eb8:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8009ec2:	2101      	movs	r1, #1
 8009ec4:	4618      	mov	r0, r3
 8009ec6:	f7fd fa2c 	bl	8007322 <unlock_fs>
 8009eca:	2301      	movs	r3, #1
 8009ecc:	e24b      	b.n	800a366 <f_lseek+0x596>
					} while (cl == pcl + 1);
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	3301      	adds	r3, #1
 8009ed2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009ed4:	429a      	cmp	r2, r3
 8009ed6:	d0cc      	beq.n	8009e72 <f_lseek+0xa2>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8009ed8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009eda:	697b      	ldr	r3, [r7, #20]
 8009edc:	429a      	cmp	r2, r3
 8009ede:	d809      	bhi.n	8009ef4 <f_lseek+0x124>
						*tbl++ = ncl; *tbl++ = tcl;
 8009ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ee2:	1d1a      	adds	r2, r3, #4
 8009ee4:	627a      	str	r2, [r7, #36]	; 0x24
 8009ee6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009ee8:	601a      	str	r2, [r3, #0]
 8009eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009eec:	1d1a      	adds	r2, r3, #4
 8009eee:	627a      	str	r2, [r7, #36]	; 0x24
 8009ef0:	693a      	ldr	r2, [r7, #16]
 8009ef2:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fp->fs->n_fatent);	/* Repeat until end of chain */
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8009efa:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8009efe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009f00:	429a      	cmp	r2, r3
 8009f02:	d3af      	bcc.n	8009e64 <f_lseek+0x94>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 8009f0a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009f0c:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen)
 8009f0e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009f10:	697b      	ldr	r3, [r7, #20]
 8009f12:	429a      	cmp	r2, r3
 8009f14:	d803      	bhi.n	8009f1e <f_lseek+0x14e>
				*tbl = 0;		/* Terminate table */
 8009f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f18:	2200      	movs	r2, #0
 8009f1a:	601a      	str	r2, [r3, #0]
 8009f1c:	e218      	b.n	800a350 <f_lseek+0x580>
			else
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8009f1e:	2311      	movs	r3, #17
 8009f20:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8009f24:	e214      	b.n	800a350 <f_lseek+0x580>

		} else {						/* Fast seek */
			if (ofs > fp->fsize)		/* Clip offset at the file size */
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8009f2c:	683a      	ldr	r2, [r7, #0]
 8009f2e:	429a      	cmp	r2, r3
 8009f30:	d903      	bls.n	8009f3a <f_lseek+0x16a>
				ofs = fp->fsize;
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8009f38:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	683a      	ldr	r2, [r7, #0]
 8009f3e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
			if (ofs) {
 8009f42:	683b      	ldr	r3, [r7, #0]
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	f000 8203 	beq.w	800a350 <f_lseek+0x580>
				fp->clust = clmt_clust(fp, ofs - 1);
 8009f4a:	683b      	ldr	r3, [r7, #0]
 8009f4c:	3b01      	subs	r3, #1
 8009f4e:	4619      	mov	r1, r3
 8009f50:	6878      	ldr	r0, [r7, #4]
 8009f52:	f7fd ffb5 	bl	8007ec0 <clmt_clust>
 8009f56:	4602      	mov	r2, r0
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
				dsc = clust2sect(fp->fs, fp->clust);
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009f6a:	4619      	mov	r1, r3
 8009f6c:	4610      	mov	r0, r2
 8009f6e:	f7fd fccd 	bl	800790c <clust2sect>
 8009f72:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fp->fs, FR_INT_ERR);
 8009f74:	69bb      	ldr	r3, [r7, #24]
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d10c      	bne.n	8009f94 <f_lseek+0x1c4>
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	2202      	movs	r2, #2
 8009f7e:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8009f88:	2102      	movs	r1, #2
 8009f8a:	4618      	mov	r0, r3
 8009f8c:	f7fd f9c9 	bl	8007322 <unlock_fs>
 8009f90:	2302      	movs	r3, #2
 8009f92:	e1e8      	b.n	800a366 <f_lseek+0x596>
				dsc += (ofs - 1) / SS(fp->fs) & (fp->fs->csize - 1);
 8009f94:	683b      	ldr	r3, [r7, #0]
 8009f96:	3b01      	subs	r3, #1
 8009f98:	0a5b      	lsrs	r3, r3, #9
 8009f9a:	687a      	ldr	r2, [r7, #4]
 8009f9c:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 8009fa0:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 8009fa4:	3a01      	subs	r2, #1
 8009fa6:	4013      	ands	r3, r2
 8009fa8:	69ba      	ldr	r2, [r7, #24]
 8009faa:	4413      	add	r3, r2
 8009fac:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fp->fs) && dsc != fp->dsect) {	/* Refill sector cache if needed */
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8009fb4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	f000 81c9 	beq.w	800a350 <f_lseek+0x580>
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8009fc4:	69ba      	ldr	r2, [r7, #24]
 8009fc6:	429a      	cmp	r2, r3
 8009fc8:	f000 81c2 	beq.w	800a350 <f_lseek+0x580>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8009fd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	d024      	beq.n	800a024 <f_lseek+0x254>
						if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8009fe0:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8009fe4:	6879      	ldr	r1, [r7, #4]
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8009fec:	2301      	movs	r3, #1
 8009fee:	f7fd f8d5 	bl	800719c <disk_write>
 8009ff2:	4603      	mov	r3, r0
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d00c      	beq.n	800a012 <f_lseek+0x242>
							ABORT(fp->fs, FR_DISK_ERR);
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	2201      	movs	r2, #1
 8009ffc:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800a006:	2101      	movs	r1, #1
 800a008:	4618      	mov	r0, r3
 800a00a:	f7fd f98a 	bl	8007322 <unlock_fs>
 800a00e:	2301      	movs	r3, #1
 800a010:	e1a9      	b.n	800a366 <f_lseek+0x596>
						fp->flag &= ~FA__DIRTY;
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800a018:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a01c:	b2da      	uxtb	r2, r3
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
					}
#endif
					if (disk_read(fp->fs->drv, fp->buf.d8, dsc, 1) != RES_OK)	/* Load current sector */
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800a02a:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 800a02e:	6879      	ldr	r1, [r7, #4]
 800a030:	2301      	movs	r3, #1
 800a032:	69ba      	ldr	r2, [r7, #24]
 800a034:	f7fd f892 	bl	800715c <disk_read>
 800a038:	4603      	mov	r3, r0
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	d00c      	beq.n	800a058 <f_lseek+0x288>
						ABORT(fp->fs, FR_DISK_ERR);
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	2201      	movs	r2, #1
 800a042:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800a04c:	2101      	movs	r1, #1
 800a04e:	4618      	mov	r0, r3
 800a050:	f7fd f967 	bl	8007322 <unlock_fs>
 800a054:	2301      	movs	r3, #1
 800a056:	e186      	b.n	800a366 <f_lseek+0x596>
#endif
					fp->dsect = dsc;
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	69ba      	ldr	r2, [r7, #24]
 800a05c:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
 800a060:	e176      	b.n	800a350 <f_lseek+0x580>
	} else
#endif

	/* Normal Seek */
	{
		if (ofs > fp->fsize					/* In read-only mode, clip offset with the file size */
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800a068:	683a      	ldr	r2, [r7, #0]
 800a06a:	429a      	cmp	r2, r3
 800a06c:	d90a      	bls.n	800a084 <f_lseek+0x2b4>
#if !_FS_READONLY
			 && !(fp->flag & FA_WRITE)
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800a074:	f003 0302 	and.w	r3, r3, #2
 800a078:	2b00      	cmp	r3, #0
 800a07a:	d103      	bne.n	800a084 <f_lseek+0x2b4>
#endif
			) ofs = fp->fsize;
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800a082:	603b      	str	r3, [r7, #0]

		ifptr = fp->fptr;
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800a08a:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800a08c:	2300      	movs	r3, #0
 800a08e:	637b      	str	r3, [r7, #52]	; 0x34
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a094:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
		if (ofs) {
 800a098:	683b      	ldr	r3, [r7, #0]
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	f000 80ea 	beq.w	800a274 <f_lseek+0x4a4>
			bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800a0a6:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 800a0aa:	025b      	lsls	r3, r3, #9
 800a0ac:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800a0ae:	6a3b      	ldr	r3, [r7, #32]
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	d01e      	beq.n	800a0f2 <f_lseek+0x322>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800a0b4:	683b      	ldr	r3, [r7, #0]
 800a0b6:	1e5a      	subs	r2, r3, #1
 800a0b8:	69fb      	ldr	r3, [r7, #28]
 800a0ba:	fbb2 f2f3 	udiv	r2, r2, r3
 800a0be:	6a3b      	ldr	r3, [r7, #32]
 800a0c0:	1e59      	subs	r1, r3, #1
 800a0c2:	69fb      	ldr	r3, [r7, #28]
 800a0c4:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800a0c8:	429a      	cmp	r2, r3
 800a0ca:	d312      	bcc.n	800a0f2 <f_lseek+0x322>
				fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
 800a0cc:	6a3b      	ldr	r3, [r7, #32]
 800a0ce:	1e5a      	subs	r2, r3, #1
 800a0d0:	69fb      	ldr	r3, [r7, #28]
 800a0d2:	425b      	negs	r3, r3
 800a0d4:	401a      	ands	r2, r3
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
				ofs -= fp->fptr;
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800a0e2:	683a      	ldr	r2, [r7, #0]
 800a0e4:	1ad3      	subs	r3, r2, r3
 800a0e6:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a0ee:	63bb      	str	r3, [r7, #56]	; 0x38
 800a0f0:	e037      	b.n	800a162 <f_lseek+0x392>
			} else {									/* When seek to back cluster, */
				clst = fp->sclust;						/* start from the first cluster */
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800a0f8:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800a0fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	d12c      	bne.n	800a15a <f_lseek+0x38a>
					clst = create_chain(fp->fs, 0);
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800a106:	2100      	movs	r1, #0
 800a108:	4618      	mov	r0, r3
 800a10a:	f7fd fe3c 	bl	8007d86 <create_chain>
 800a10e:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 800a110:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a112:	2b01      	cmp	r3, #1
 800a114:	d10c      	bne.n	800a130 <f_lseek+0x360>
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	2202      	movs	r2, #2
 800a11a:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800a124:	2102      	movs	r1, #2
 800a126:	4618      	mov	r0, r3
 800a128:	f7fd f8fb 	bl	8007322 <unlock_fs>
 800a12c:	2302      	movs	r3, #2
 800a12e:	e11a      	b.n	800a366 <f_lseek+0x596>
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800a130:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a132:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a136:	d10c      	bne.n	800a152 <f_lseek+0x382>
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	2201      	movs	r2, #1
 800a13c:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800a146:	2101      	movs	r1, #1
 800a148:	4618      	mov	r0, r3
 800a14a:	f7fd f8ea 	bl	8007322 <unlock_fs>
 800a14e:	2301      	movs	r3, #1
 800a150:	e109      	b.n	800a366 <f_lseek+0x596>
					fp->sclust = clst;
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a156:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
				}
#endif
				fp->clust = clst;
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a15e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
			}
			if (clst != 0) {
 800a162:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a164:	2b00      	cmp	r3, #0
 800a166:	f000 8085 	beq.w	800a274 <f_lseek+0x4a4>
				while (ofs > bcs) {						/* Cluster following loop */
 800a16a:	e055      	b.n	800a218 <f_lseek+0x448>
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800a172:	f003 0302 	and.w	r3, r3, #2
 800a176:	2b00      	cmp	r3, #0
 800a178:	d00d      	beq.n	800a196 <f_lseek+0x3c6>
						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800a180:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a182:	4618      	mov	r0, r3
 800a184:	f7fd fdff 	bl	8007d86 <create_chain>
 800a188:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* When disk gets full, clip file size */
 800a18a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	d10a      	bne.n	800a1a6 <f_lseek+0x3d6>
							ofs = bcs; break;
 800a190:	69fb      	ldr	r3, [r7, #28]
 800a192:	603b      	str	r3, [r7, #0]
 800a194:	e044      	b.n	800a220 <f_lseek+0x450>
						}
					} else
#endif
						clst = get_fat(fp->fs, clst);	/* Follow cluster chain if not in write mode */
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800a19c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a19e:	4618      	mov	r0, r3
 800a1a0:	f7fd fbd5 	bl	800794e <get_fat>
 800a1a4:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800a1a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a1ac:	d10c      	bne.n	800a1c8 <f_lseek+0x3f8>
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	2201      	movs	r2, #1
 800a1b2:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800a1bc:	2101      	movs	r1, #1
 800a1be:	4618      	mov	r0, r3
 800a1c0:	f7fd f8af 	bl	8007322 <unlock_fs>
 800a1c4:	2301      	movs	r3, #1
 800a1c6:	e0ce      	b.n	800a366 <f_lseek+0x596>
					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
 800a1c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1ca:	2b01      	cmp	r3, #1
 800a1cc:	d907      	bls.n	800a1de <f_lseek+0x40e>
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800a1d4:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800a1d8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a1da:	429a      	cmp	r2, r3
 800a1dc:	d30c      	bcc.n	800a1f8 <f_lseek+0x428>
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	2202      	movs	r2, #2
 800a1e2:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800a1ec:	2102      	movs	r1, #2
 800a1ee:	4618      	mov	r0, r3
 800a1f0:	f7fd f897 	bl	8007322 <unlock_fs>
 800a1f4:	2302      	movs	r3, #2
 800a1f6:	e0b6      	b.n	800a366 <f_lseek+0x596>
					fp->clust = clst;
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a1fc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
					fp->fptr += bcs;
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800a206:	69fb      	ldr	r3, [r7, #28]
 800a208:	441a      	add	r2, r3
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
					ofs -= bcs;
 800a210:	683a      	ldr	r2, [r7, #0]
 800a212:	69fb      	ldr	r3, [r7, #28]
 800a214:	1ad3      	subs	r3, r2, r3
 800a216:	603b      	str	r3, [r7, #0]
				while (ofs > bcs) {						/* Cluster following loop */
 800a218:	683a      	ldr	r2, [r7, #0]
 800a21a:	69fb      	ldr	r3, [r7, #28]
 800a21c:	429a      	cmp	r2, r3
 800a21e:	d8a5      	bhi.n	800a16c <f_lseek+0x39c>
				}
				fp->fptr += ofs;
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800a226:	683b      	ldr	r3, [r7, #0]
 800a228:	441a      	add	r2, r3
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
				if (ofs % SS(fp->fs)) {
 800a230:	683b      	ldr	r3, [r7, #0]
 800a232:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a236:	2b00      	cmp	r3, #0
 800a238:	d01c      	beq.n	800a274 <f_lseek+0x4a4>
					nsect = clust2sect(fp->fs, clst);	/* Current sector */
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800a240:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a242:	4618      	mov	r0, r3
 800a244:	f7fd fb62 	bl	800790c <clust2sect>
 800a248:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fp->fs, FR_INT_ERR);
 800a24a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	d10c      	bne.n	800a26a <f_lseek+0x49a>
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	2202      	movs	r2, #2
 800a254:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800a25e:	2102      	movs	r1, #2
 800a260:	4618      	mov	r0, r3
 800a262:	f7fd f85e 	bl	8007322 <unlock_fs>
 800a266:	2302      	movs	r3, #2
 800a268:	e07d      	b.n	800a366 <f_lseek+0x596>
					nsect += ofs / SS(fp->fs);
 800a26a:	683b      	ldr	r3, [r7, #0]
 800a26c:	0a5b      	lsrs	r3, r3, #9
 800a26e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a270:	4413      	add	r3, r2
 800a272:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (fp->fptr % SS(fp->fs) && nsect != fp->dsect) {	/* Fill sector cache if needed */
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800a27a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a27e:	2b00      	cmp	r3, #0
 800a280:	d04f      	beq.n	800a322 <f_lseek+0x552>
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800a288:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a28a:	429a      	cmp	r2, r3
 800a28c:	d049      	beq.n	800a322 <f_lseek+0x552>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA__DIRTY) {			/* Write-back dirty sector cache */
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800a294:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a298:	2b00      	cmp	r3, #0
 800a29a:	d024      	beq.n	800a2e6 <f_lseek+0x516>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800a2a2:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 800a2a6:	6879      	ldr	r1, [r7, #4]
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 800a2ae:	2301      	movs	r3, #1
 800a2b0:	f7fc ff74 	bl	800719c <disk_write>
 800a2b4:	4603      	mov	r3, r0
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d00c      	beq.n	800a2d4 <f_lseek+0x504>
					ABORT(fp->fs, FR_DISK_ERR);
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	2201      	movs	r2, #1
 800a2be:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800a2c8:	2101      	movs	r1, #1
 800a2ca:	4618      	mov	r0, r3
 800a2cc:	f7fd f829 	bl	8007322 <unlock_fs>
 800a2d0:	2301      	movs	r3, #1
 800a2d2:	e048      	b.n	800a366 <f_lseek+0x596>
				fp->flag &= ~FA__DIRTY;
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800a2da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a2de:	b2da      	uxtb	r2, r3
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
			}
#endif
			if (disk_read(fp->fs->drv, fp->buf.d8, nsect, 1) != RES_OK)	/* Fill sector cache */
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800a2ec:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 800a2f0:	6879      	ldr	r1, [r7, #4]
 800a2f2:	2301      	movs	r3, #1
 800a2f4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a2f6:	f7fc ff31 	bl	800715c <disk_read>
 800a2fa:	4603      	mov	r3, r0
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	d00c      	beq.n	800a31a <f_lseek+0x54a>
				ABORT(fp->fs, FR_DISK_ERR);
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	2201      	movs	r2, #1
 800a304:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800a30e:	2101      	movs	r1, #1
 800a310:	4618      	mov	r0, r3
 800a312:	f7fd f806 	bl	8007322 <unlock_fs>
 800a316:	2301      	movs	r3, #1
 800a318:	e025      	b.n	800a366 <f_lseek+0x596>
#endif
			fp->dsect = nsect;
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a31e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
		}
#if !_FS_READONLY
		if (fp->fptr > fp->fsize) {			/* Set file change flag if the file size is extended */
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800a32e:	429a      	cmp	r2, r3
 800a330:	d90e      	bls.n	800a350 <f_lseek+0x580>
			fp->fsize = fp->fptr;
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
			fp->flag |= FA__WRITTEN;
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800a344:	f043 0320 	orr.w	r3, r3, #32
 800a348:	b2da      	uxtb	r2, r3
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
		}
#endif
	}

	LEAVE_FF(fp->fs, res);
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800a356:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800a35a:	4611      	mov	r1, r2
 800a35c:	4618      	mov	r0, r3
 800a35e:	f7fc ffe0 	bl	8007322 <unlock_fs>
 800a362:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800a366:	4618      	mov	r0, r3
 800a368:	3740      	adds	r7, #64	; 0x40
 800a36a:	46bd      	mov	sp, r7
 800a36c:	bd80      	pop	{r7, pc}

0800a36e <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 800a36e:	b580      	push	{r7, lr}
 800a370:	f5ad 6d8c 	sub.w	sp, sp, #1120	; 0x460
 800a374:	af00      	add	r7, sp, #0
 800a376:	1d3b      	adds	r3, r7, #4
 800a378:	6018      	str	r0, [r3, #0]
	FRESULT res;
	DIR dj, sdj;
	BYTE *dir;
	DWORD dclst = 0;
 800a37a:	2300      	movs	r3, #0
 800a37c:	f8c7 3458 	str.w	r3, [r7, #1112]	; 0x458
	DEFINE_NAMEBUF;


	/* Get logical drive number */
	res = find_volume(&dj.fs, &path, 1);
 800a380:	1d39      	adds	r1, r7, #4
 800a382:	f507 730d 	add.w	r3, r7, #564	; 0x234
 800a386:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800a38a:	2201      	movs	r2, #1
 800a38c:	4618      	mov	r0, r3
 800a38e:	f7fe faed 	bl	800896c <find_volume>
 800a392:	4603      	mov	r3, r0
 800a394:	f887 345f 	strb.w	r3, [r7, #1119]	; 0x45f
	if (res == FR_OK) {
 800a398:	f897 345f 	ldrb.w	r3, [r7, #1119]	; 0x45f
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	f040 80b8 	bne.w	800a512 <f_unlink+0x1a4>
		INIT_BUF(dj);
 800a3a2:	f507 730d 	add.w	r3, r7, #564	; 0x234
 800a3a6:	f107 0208 	add.w	r2, r7, #8
 800a3aa:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
		res = follow_path(&dj, path);		/* Follow the file path */
 800a3ae:	1d3b      	adds	r3, r7, #4
 800a3b0:	681a      	ldr	r2, [r3, #0]
 800a3b2:	f507 730d 	add.w	r3, r7, #564	; 0x234
 800a3b6:	4611      	mov	r1, r2
 800a3b8:	4618      	mov	r0, r3
 800a3ba:	f7fe f9bb 	bl	8008734 <follow_path>
 800a3be:	4603      	mov	r3, r0
 800a3c0:	f887 345f 	strb.w	r3, [r7, #1119]	; 0x45f
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT))
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
#if _FS_LOCK
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Cannot remove open object */
 800a3c4:	f897 345f 	ldrb.w	r3, [r7, #1119]	; 0x45f
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	d108      	bne.n	800a3de <f_unlink+0x70>
 800a3cc:	f507 730d 	add.w	r3, r7, #564	; 0x234
 800a3d0:	2102      	movs	r1, #2
 800a3d2:	4618      	mov	r0, r3
 800a3d4:	f7fc ffc4 	bl	8007360 <chk_lock>
 800a3d8:	4603      	mov	r3, r0
 800a3da:	f887 345f 	strb.w	r3, [r7, #1119]	; 0x45f
#endif
		if (res == FR_OK) {					/* The object is accessible */
 800a3de:	f897 345f 	ldrb.w	r3, [r7, #1119]	; 0x45f
 800a3e2:	2b00      	cmp	r3, #0
 800a3e4:	f040 8095 	bne.w	800a512 <f_unlink+0x1a4>
			dir = dj.dir;
 800a3e8:	f507 730d 	add.w	r3, r7, #564	; 0x234
 800a3ec:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a3f0:	f8c7 3454 	str.w	r3, [r7, #1108]	; 0x454
			if (!dir) {
 800a3f4:	f8d7 3454 	ldr.w	r3, [r7, #1108]	; 0x454
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	d103      	bne.n	800a404 <f_unlink+0x96>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 800a3fc:	2306      	movs	r3, #6
 800a3fe:	f887 345f 	strb.w	r3, [r7, #1119]	; 0x45f
 800a402:	e00a      	b.n	800a41a <f_unlink+0xac>
			} else {
				if (dir[DIR_Attr] & AM_RDO)
 800a404:	f8d7 3454 	ldr.w	r3, [r7, #1108]	; 0x454
 800a408:	330b      	adds	r3, #11
 800a40a:	781b      	ldrb	r3, [r3, #0]
 800a40c:	f003 0301 	and.w	r3, r3, #1
 800a410:	2b00      	cmp	r3, #0
 800a412:	d002      	beq.n	800a41a <f_unlink+0xac>
					res = FR_DENIED;		/* Cannot remove R/O object */
 800a414:	2307      	movs	r3, #7
 800a416:	f887 345f 	strb.w	r3, [r7, #1119]	; 0x45f
			}
			if (res == FR_OK) {
 800a41a:	f897 345f 	ldrb.w	r3, [r7, #1119]	; 0x45f
 800a41e:	2b00      	cmp	r3, #0
 800a420:	d149      	bne.n	800a4b6 <f_unlink+0x148>
				dclst = ld_clust(dj.fs, dir);
 800a422:	f507 730d 	add.w	r3, r7, #564	; 0x234
 800a426:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800a42a:	f8d7 1454 	ldr.w	r1, [r7, #1108]	; 0x454
 800a42e:	4618      	mov	r0, r3
 800a430:	f7fd ff4f 	bl	80082d2 <ld_clust>
 800a434:	f8c7 0458 	str.w	r0, [r7, #1112]	; 0x458
				if (dclst && (dir[DIR_Attr] & AM_DIR)) {	/* Is it a sub-directory ? */
 800a438:	f8d7 3458 	ldr.w	r3, [r7, #1112]	; 0x458
 800a43c:	2b00      	cmp	r3, #0
 800a43e:	d03a      	beq.n	800a4b6 <f_unlink+0x148>
 800a440:	f8d7 3454 	ldr.w	r3, [r7, #1108]	; 0x454
 800a444:	330b      	adds	r3, #11
 800a446:	781b      	ldrb	r3, [r3, #0]
 800a448:	f003 0310 	and.w	r3, r3, #16
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	d032      	beq.n	800a4b6 <f_unlink+0x148>
					if (dclst == dj.fs->cdir) {		 		/* Is it the current directory? */
						res = FR_DENIED;
					} else
#endif
					{
						mem_cpy(&sdj, &dj, sizeof (DIR));	/* Open the sub-directory */
 800a450:	f507 710d 	add.w	r1, r7, #564	; 0x234
 800a454:	f107 0314 	add.w	r3, r7, #20
 800a458:	f44f 7208 	mov.w	r2, #544	; 0x220
 800a45c:	4618      	mov	r0, r3
 800a45e:	f7fc fedb 	bl	8007218 <mem_cpy>
						sdj.sclust = dclst;
 800a462:	f107 0314 	add.w	r3, r7, #20
 800a466:	f8d7 2458 	ldr.w	r2, [r7, #1112]	; 0x458
 800a46a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
						res = dir_sdi(&sdj, 2);
 800a46e:	f107 0314 	add.w	r3, r7, #20
 800a472:	2102      	movs	r1, #2
 800a474:	4618      	mov	r0, r3
 800a476:	f7fd fd57 	bl	8007f28 <dir_sdi>
 800a47a:	4603      	mov	r3, r0
 800a47c:	f887 345f 	strb.w	r3, [r7, #1119]	; 0x45f
						if (res == FR_OK) {
 800a480:	f897 345f 	ldrb.w	r3, [r7, #1119]	; 0x45f
 800a484:	2b00      	cmp	r3, #0
 800a486:	d116      	bne.n	800a4b6 <f_unlink+0x148>
							res = dir_read(&sdj, 0);			/* Read an item (excluding dot entries) */
 800a488:	f107 0314 	add.w	r3, r7, #20
 800a48c:	2100      	movs	r1, #0
 800a48e:	4618      	mov	r0, r3
 800a490:	f7fd ffc1 	bl	8008416 <dir_read>
 800a494:	4603      	mov	r3, r0
 800a496:	f887 345f 	strb.w	r3, [r7, #1119]	; 0x45f
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? (cannot remove) */
 800a49a:	f897 345f 	ldrb.w	r3, [r7, #1119]	; 0x45f
 800a49e:	2b00      	cmp	r3, #0
 800a4a0:	d102      	bne.n	800a4a8 <f_unlink+0x13a>
 800a4a2:	2307      	movs	r3, #7
 800a4a4:	f887 345f 	strb.w	r3, [r7, #1119]	; 0x45f
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? (can remove) */
 800a4a8:	f897 345f 	ldrb.w	r3, [r7, #1119]	; 0x45f
 800a4ac:	2b04      	cmp	r3, #4
 800a4ae:	d102      	bne.n	800a4b6 <f_unlink+0x148>
 800a4b0:	2300      	movs	r3, #0
 800a4b2:	f887 345f 	strb.w	r3, [r7, #1119]	; 0x45f
						}
					}
				}
			}
			if (res == FR_OK) {
 800a4b6:	f897 345f 	ldrb.w	r3, [r7, #1119]	; 0x45f
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	d129      	bne.n	800a512 <f_unlink+0x1a4>
				res = dir_remove(&dj);		/* Remove the directory entry */
 800a4be:	f507 730d 	add.w	r3, r7, #564	; 0x234
 800a4c2:	4618      	mov	r0, r3
 800a4c4:	f7fe f83f 	bl	8008546 <dir_remove>
 800a4c8:	4603      	mov	r3, r0
 800a4ca:	f887 345f 	strb.w	r3, [r7, #1119]	; 0x45f
				if (res == FR_OK && dclst)	/* Remove the cluster chain if exist */
 800a4ce:	f897 345f 	ldrb.w	r3, [r7, #1119]	; 0x45f
 800a4d2:	2b00      	cmp	r3, #0
 800a4d4:	d10f      	bne.n	800a4f6 <f_unlink+0x188>
 800a4d6:	f8d7 3458 	ldr.w	r3, [r7, #1112]	; 0x458
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	d00b      	beq.n	800a4f6 <f_unlink+0x188>
					res = remove_chain(dj.fs, dclst);
 800a4de:	f507 730d 	add.w	r3, r7, #564	; 0x234
 800a4e2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800a4e6:	f8d7 1458 	ldr.w	r1, [r7, #1112]	; 0x458
 800a4ea:	4618      	mov	r0, r3
 800a4ec:	f7fd fbf1 	bl	8007cd2 <remove_chain>
 800a4f0:	4603      	mov	r3, r0
 800a4f2:	f887 345f 	strb.w	r3, [r7, #1119]	; 0x45f
				if (res == FR_OK) res = sync_fs(dj.fs);
 800a4f6:	f897 345f 	ldrb.w	r3, [r7, #1119]	; 0x45f
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	d109      	bne.n	800a512 <f_unlink+0x1a4>
 800a4fe:	f507 730d 	add.w	r3, r7, #564	; 0x234
 800a502:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800a506:	4618      	mov	r0, r3
 800a508:	f7fd f953 	bl	80077b2 <sync_fs>
 800a50c:	4603      	mov	r3, r0
 800a50e:	f887 345f 	strb.w	r3, [r7, #1119]	; 0x45f
			}
		}
		FREE_BUF();
	}

	LEAVE_FF(dj.fs, res);
 800a512:	f507 730d 	add.w	r3, r7, #564	; 0x234
 800a516:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800a51a:	f897 245f 	ldrb.w	r2, [r7, #1119]	; 0x45f
 800a51e:	4611      	mov	r1, r2
 800a520:	4618      	mov	r0, r3
 800a522:	f7fc fefe 	bl	8007322 <unlock_fs>
 800a526:	f897 345f 	ldrb.w	r3, [r7, #1119]	; 0x45f
}
 800a52a:	4618      	mov	r0, r3
 800a52c:	f507 678c 	add.w	r7, r7, #1120	; 0x460
 800a530:	46bd      	mov	sp, r7
 800a532:	bd80      	pop	{r7, pc}

0800a534 <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 800a534:	b580      	push	{r7, lr}
 800a536:	b088      	sub	sp, #32
 800a538:	af00      	add	r7, sp, #0
 800a53a:	60f8      	str	r0, [r7, #12]
 800a53c:	60b9      	str	r1, [r7, #8]
 800a53e:	607a      	str	r2, [r7, #4]
	int n = 0;
 800a540:	2300      	movs	r3, #0
 800a542:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 800a548:	e01b      	b.n	800a582 <f_gets+0x4e>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 800a54a:	f107 0310 	add.w	r3, r7, #16
 800a54e:	f107 0114 	add.w	r1, r7, #20
 800a552:	2201      	movs	r2, #1
 800a554:	6878      	ldr	r0, [r7, #4]
 800a556:	f7fe ff96 	bl	8009486 <f_read>
		if (rc != 1) break;
 800a55a:	693b      	ldr	r3, [r7, #16]
 800a55c:	2b01      	cmp	r3, #1
 800a55e:	d116      	bne.n	800a58e <f_gets+0x5a>
		c = s[0];
 800a560:	7d3b      	ldrb	r3, [r7, #20]
 800a562:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 800a564:	7dfb      	ldrb	r3, [r7, #23]
 800a566:	2b0d      	cmp	r3, #13
 800a568:	d100      	bne.n	800a56c <f_gets+0x38>
 800a56a:	e00a      	b.n	800a582 <f_gets+0x4e>
		*p++ = c;
 800a56c:	69bb      	ldr	r3, [r7, #24]
 800a56e:	1c5a      	adds	r2, r3, #1
 800a570:	61ba      	str	r2, [r7, #24]
 800a572:	7dfa      	ldrb	r2, [r7, #23]
 800a574:	701a      	strb	r2, [r3, #0]
		n++;
 800a576:	69fb      	ldr	r3, [r7, #28]
 800a578:	3301      	adds	r3, #1
 800a57a:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 800a57c:	7dfb      	ldrb	r3, [r7, #23]
 800a57e:	2b0a      	cmp	r3, #10
 800a580:	d007      	beq.n	800a592 <f_gets+0x5e>
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 800a582:	68bb      	ldr	r3, [r7, #8]
 800a584:	3b01      	subs	r3, #1
 800a586:	69fa      	ldr	r2, [r7, #28]
 800a588:	429a      	cmp	r2, r3
 800a58a:	dbde      	blt.n	800a54a <f_gets+0x16>
 800a58c:	e002      	b.n	800a594 <f_gets+0x60>
		if (rc != 1) break;
 800a58e:	bf00      	nop
 800a590:	e000      	b.n	800a594 <f_gets+0x60>
		if (c == '\n') break;		/* Break on EOL */
 800a592:	bf00      	nop
	}
	*p = 0;
 800a594:	69bb      	ldr	r3, [r7, #24]
 800a596:	2200      	movs	r2, #0
 800a598:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 800a59a:	69fb      	ldr	r3, [r7, #28]
 800a59c:	2b00      	cmp	r3, #0
 800a59e:	d001      	beq.n	800a5a4 <f_gets+0x70>
 800a5a0:	68fb      	ldr	r3, [r7, #12]
 800a5a2:	e000      	b.n	800a5a6 <f_gets+0x72>
 800a5a4:	2300      	movs	r3, #0
}
 800a5a6:	4618      	mov	r0, r3
 800a5a8:	3720      	adds	r7, #32
 800a5aa:	46bd      	mov	sp, r7
 800a5ac:	bd80      	pop	{r7, pc}

0800a5ae <putc_bfd>:
static
void putc_bfd (
	putbuff* pb,
	TCHAR c
)
{
 800a5ae:	b580      	push	{r7, lr}
 800a5b0:	b084      	sub	sp, #16
 800a5b2:	af00      	add	r7, sp, #0
 800a5b4:	6078      	str	r0, [r7, #4]
 800a5b6:	460b      	mov	r3, r1
 800a5b8:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n')	 /* LF -> CRLF conversion */
 800a5ba:	78fb      	ldrb	r3, [r7, #3]
 800a5bc:	2b0a      	cmp	r3, #10
 800a5be:	d103      	bne.n	800a5c8 <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 800a5c0:	210d      	movs	r1, #13
 800a5c2:	6878      	ldr	r0, [r7, #4]
 800a5c4:	f7ff fff3 	bl	800a5ae <putc_bfd>

	i = pb->idx;	/* Buffer write index (-1:error) */
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	685b      	ldr	r3, [r3, #4]
 800a5cc:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 800a5ce:	68fb      	ldr	r3, [r7, #12]
 800a5d0:	2b00      	cmp	r3, #0
 800a5d2:	db25      	blt.n	800a620 <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 800a5d4:	68fb      	ldr	r3, [r7, #12]
 800a5d6:	1c5a      	adds	r2, r3, #1
 800a5d8:	60fa      	str	r2, [r7, #12]
 800a5da:	687a      	ldr	r2, [r7, #4]
 800a5dc:	4413      	add	r3, r2
 800a5de:	78fa      	ldrb	r2, [r7, #3]
 800a5e0:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 800a5e2:	68fb      	ldr	r3, [r7, #12]
 800a5e4:	2b3c      	cmp	r3, #60	; 0x3c
 800a5e6:	dd12      	ble.n	800a60e <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	6818      	ldr	r0, [r3, #0]
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	f103 010c 	add.w	r1, r3, #12
 800a5f2:	68fa      	ldr	r2, [r7, #12]
 800a5f4:	f107 0308 	add.w	r3, r7, #8
 800a5f8:	f7ff f8fa 	bl	80097f0 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 800a5fc:	68ba      	ldr	r2, [r7, #8]
 800a5fe:	68fb      	ldr	r3, [r7, #12]
 800a600:	429a      	cmp	r2, r3
 800a602:	d101      	bne.n	800a608 <putc_bfd+0x5a>
 800a604:	2300      	movs	r3, #0
 800a606:	e001      	b.n	800a60c <putc_bfd+0x5e>
 800a608:	f04f 33ff 	mov.w	r3, #4294967295
 800a60c:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	68fa      	ldr	r2, [r7, #12]
 800a612:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	689b      	ldr	r3, [r3, #8]
 800a618:	1c5a      	adds	r2, r3, #1
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	609a      	str	r2, [r3, #8]
 800a61e:	e000      	b.n	800a622 <putc_bfd+0x74>
	if (i < 0) return;
 800a620:	bf00      	nop
}
 800a622:	3710      	adds	r7, #16
 800a624:	46bd      	mov	sp, r7
 800a626:	bd80      	pop	{r7, pc}

0800a628 <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 800a628:	b590      	push	{r4, r7, lr}
 800a62a:	b097      	sub	sp, #92	; 0x5c
 800a62c:	af00      	add	r7, sp, #0
 800a62e:	6078      	str	r0, [r7, #4]
 800a630:	6039      	str	r1, [r7, #0]
	putbuff pb;
	UINT nw;


	pb.fp = fp;				/* Initialize output buffer */
 800a632:	683b      	ldr	r3, [r7, #0]
 800a634:	60fb      	str	r3, [r7, #12]
	pb.nchr = pb.idx = 0;
 800a636:	2300      	movs	r3, #0
 800a638:	613b      	str	r3, [r7, #16]
 800a63a:	693b      	ldr	r3, [r7, #16]
 800a63c:	617b      	str	r3, [r7, #20]

	while (*str)			/* Put the string */
 800a63e:	e009      	b.n	800a654 <f_puts+0x2c>
		putc_bfd(&pb, *str++);
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	1c5a      	adds	r2, r3, #1
 800a644:	607a      	str	r2, [r7, #4]
 800a646:	781a      	ldrb	r2, [r3, #0]
 800a648:	f107 030c 	add.w	r3, r7, #12
 800a64c:	4611      	mov	r1, r2
 800a64e:	4618      	mov	r0, r3
 800a650:	f7ff ffad 	bl	800a5ae <putc_bfd>
	while (*str)			/* Put the string */
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	781b      	ldrb	r3, [r3, #0]
 800a658:	2b00      	cmp	r3, #0
 800a65a:	d1f1      	bne.n	800a640 <f_puts+0x18>

	if (   pb.idx >= 0		/* Flush buffered characters to the file */
 800a65c:	693b      	ldr	r3, [r7, #16]
 800a65e:	2b00      	cmp	r3, #0
 800a660:	db16      	blt.n	800a690 <f_puts+0x68>
		&& f_write(pb.fp, pb.buf, (UINT)pb.idx, &nw) == FR_OK
 800a662:	68f8      	ldr	r0, [r7, #12]
 800a664:	693b      	ldr	r3, [r7, #16]
 800a666:	461c      	mov	r4, r3
 800a668:	f107 0208 	add.w	r2, r7, #8
 800a66c:	f107 030c 	add.w	r3, r7, #12
 800a670:	f103 010c 	add.w	r1, r3, #12
 800a674:	4613      	mov	r3, r2
 800a676:	4622      	mov	r2, r4
 800a678:	f7ff f8ba 	bl	80097f0 <f_write>
 800a67c:	4603      	mov	r3, r0
 800a67e:	2b00      	cmp	r3, #0
 800a680:	d106      	bne.n	800a690 <f_puts+0x68>
		&& (UINT)pb.idx == nw) return pb.nchr;
 800a682:	693b      	ldr	r3, [r7, #16]
 800a684:	461a      	mov	r2, r3
 800a686:	68bb      	ldr	r3, [r7, #8]
 800a688:	429a      	cmp	r2, r3
 800a68a:	d101      	bne.n	800a690 <f_puts+0x68>
 800a68c:	697b      	ldr	r3, [r7, #20]
 800a68e:	e001      	b.n	800a694 <f_puts+0x6c>
	return EOF;
 800a690:	f04f 33ff 	mov.w	r3, #4294967295
}
 800a694:	4618      	mov	r0, r3
 800a696:	375c      	adds	r7, #92	; 0x5c
 800a698:	46bd      	mov	sp, r7
 800a69a:	bd90      	pop	{r4, r7, pc}

0800a69c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800a69c:	b480      	push	{r7}
 800a69e:	b087      	sub	sp, #28
 800a6a0:	af00      	add	r7, sp, #0
 800a6a2:	60f8      	str	r0, [r7, #12]
 800a6a4:	60b9      	str	r1, [r7, #8]
 800a6a6:	4613      	mov	r3, r2
 800a6a8:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800a6aa:	2301      	movs	r3, #1
 800a6ac:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800a6ae:	2300      	movs	r3, #0
 800a6b0:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 800a6b2:	4b1e      	ldr	r3, [pc, #120]	; (800a72c <FATFS_LinkDriverEx+0x90>)
 800a6b4:	7a5b      	ldrb	r3, [r3, #9]
 800a6b6:	b2db      	uxtb	r3, r3
 800a6b8:	2b01      	cmp	r3, #1
 800a6ba:	d831      	bhi.n	800a720 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800a6bc:	4b1b      	ldr	r3, [pc, #108]	; (800a72c <FATFS_LinkDriverEx+0x90>)
 800a6be:	7a5b      	ldrb	r3, [r3, #9]
 800a6c0:	b2db      	uxtb	r3, r3
 800a6c2:	461a      	mov	r2, r3
 800a6c4:	4b19      	ldr	r3, [pc, #100]	; (800a72c <FATFS_LinkDriverEx+0x90>)
 800a6c6:	2100      	movs	r1, #0
 800a6c8:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 800a6ca:	4b18      	ldr	r3, [pc, #96]	; (800a72c <FATFS_LinkDriverEx+0x90>)
 800a6cc:	7a5b      	ldrb	r3, [r3, #9]
 800a6ce:	b2db      	uxtb	r3, r3
 800a6d0:	4a16      	ldr	r2, [pc, #88]	; (800a72c <FATFS_LinkDriverEx+0x90>)
 800a6d2:	009b      	lsls	r3, r3, #2
 800a6d4:	4413      	add	r3, r2
 800a6d6:	68fa      	ldr	r2, [r7, #12]
 800a6d8:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 800a6da:	4b14      	ldr	r3, [pc, #80]	; (800a72c <FATFS_LinkDriverEx+0x90>)
 800a6dc:	7a5b      	ldrb	r3, [r3, #9]
 800a6de:	b2db      	uxtb	r3, r3
 800a6e0:	461a      	mov	r2, r3
 800a6e2:	4b12      	ldr	r3, [pc, #72]	; (800a72c <FATFS_LinkDriverEx+0x90>)
 800a6e4:	4413      	add	r3, r2
 800a6e6:	79fa      	ldrb	r2, [r7, #7]
 800a6e8:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800a6ea:	4b10      	ldr	r3, [pc, #64]	; (800a72c <FATFS_LinkDriverEx+0x90>)
 800a6ec:	7a5b      	ldrb	r3, [r3, #9]
 800a6ee:	b2db      	uxtb	r3, r3
 800a6f0:	1c5a      	adds	r2, r3, #1
 800a6f2:	b2d1      	uxtb	r1, r2
 800a6f4:	4a0d      	ldr	r2, [pc, #52]	; (800a72c <FATFS_LinkDriverEx+0x90>)
 800a6f6:	7251      	strb	r1, [r2, #9]
 800a6f8:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800a6fa:	7dbb      	ldrb	r3, [r7, #22]
 800a6fc:	3330      	adds	r3, #48	; 0x30
 800a6fe:	b2da      	uxtb	r2, r3
 800a700:	68bb      	ldr	r3, [r7, #8]
 800a702:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800a704:	68bb      	ldr	r3, [r7, #8]
 800a706:	3301      	adds	r3, #1
 800a708:	223a      	movs	r2, #58	; 0x3a
 800a70a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800a70c:	68bb      	ldr	r3, [r7, #8]
 800a70e:	3302      	adds	r3, #2
 800a710:	222f      	movs	r2, #47	; 0x2f
 800a712:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800a714:	68bb      	ldr	r3, [r7, #8]
 800a716:	3303      	adds	r3, #3
 800a718:	2200      	movs	r2, #0
 800a71a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800a71c:	2300      	movs	r3, #0
 800a71e:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 800a720:	7dfb      	ldrb	r3, [r7, #23]
}
 800a722:	4618      	mov	r0, r3
 800a724:	371c      	adds	r7, #28
 800a726:	46bd      	mov	sp, r7
 800a728:	bc80      	pop	{r7}
 800a72a:	4770      	bx	lr
 800a72c:	20000534 	.word	0x20000534

0800a730 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 800a730:	b580      	push	{r7, lr}
 800a732:	b082      	sub	sp, #8
 800a734:	af00      	add	r7, sp, #0
 800a736:	6078      	str	r0, [r7, #4]
 800a738:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800a73a:	2200      	movs	r2, #0
 800a73c:	6839      	ldr	r1, [r7, #0]
 800a73e:	6878      	ldr	r0, [r7, #4]
 800a740:	f7ff ffac 	bl	800a69c <FATFS_LinkDriverEx>
 800a744:	4603      	mov	r3, r0
}
 800a746:	4618      	mov	r0, r3
 800a748:	3708      	adds	r7, #8
 800a74a:	46bd      	mov	sp, r7
 800a74c:	bd80      	pop	{r7, pc}

0800a74e <ff_cre_syncobj>:

int ff_cre_syncobj (	/* TRUE:Function succeeded, FALSE:Could not create due to any error */
	BYTE vol,			/* Corresponding logical drive being processed */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 800a74e:	b580      	push	{r7, lr}
 800a750:	b086      	sub	sp, #24
 800a752:	af00      	add	r7, sp, #0
 800a754:	4603      	mov	r3, r0
 800a756:	6039      	str	r1, [r7, #0]
 800a758:	71fb      	strb	r3, [r7, #7]
  int ret;
  
  osSemaphoreDef(SEM);
 800a75a:	2300      	movs	r3, #0
 800a75c:	60fb      	str	r3, [r7, #12]
 800a75e:	2300      	movs	r3, #0
 800a760:	613b      	str	r3, [r7, #16]
  *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);		
 800a762:	f107 030c 	add.w	r3, r7, #12
 800a766:	2101      	movs	r1, #1
 800a768:	4618      	mov	r0, r3
 800a76a:	f000 f84d 	bl	800a808 <osSemaphoreCreate>
 800a76e:	4602      	mov	r2, r0
 800a770:	683b      	ldr	r3, [r7, #0]
 800a772:	601a      	str	r2, [r3, #0]
  ret = (*sobj != NULL);
 800a774:	683b      	ldr	r3, [r7, #0]
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	2b00      	cmp	r3, #0
 800a77a:	bf14      	ite	ne
 800a77c:	2301      	movne	r3, #1
 800a77e:	2300      	moveq	r3, #0
 800a780:	b2db      	uxtb	r3, r3
 800a782:	617b      	str	r3, [r7, #20]
  
  return ret;
 800a784:	697b      	ldr	r3, [r7, #20]
}
 800a786:	4618      	mov	r0, r3
 800a788:	3718      	adds	r7, #24
 800a78a:	46bd      	mov	sp, r7
 800a78c:	bd80      	pop	{r7, pc}

0800a78e <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* TRUE:Function succeeded, FALSE:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 800a78e:	b580      	push	{r7, lr}
 800a790:	b082      	sub	sp, #8
 800a792:	af00      	add	r7, sp, #0
 800a794:	6078      	str	r0, [r7, #4]
  osSemaphoreDelete (sobj);
 800a796:	6878      	ldr	r0, [r7, #4]
 800a798:	f000 f8fa 	bl	800a990 <osSemaphoreDelete>
  return 1;
 800a79c:	2301      	movs	r3, #1
}
 800a79e:	4618      	mov	r0, r3
 800a7a0:	3708      	adds	r7, #8
 800a7a2:	46bd      	mov	sp, r7
 800a7a4:	bd80      	pop	{r7, pc}

0800a7a6 <ff_req_grant>:
*/

int ff_req_grant (	/* TRUE:Got a grant to access the volume, FALSE:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 800a7a6:	b580      	push	{r7, lr}
 800a7a8:	b084      	sub	sp, #16
 800a7aa:	af00      	add	r7, sp, #0
 800a7ac:	6078      	str	r0, [r7, #4]
  int ret = 0;
 800a7ae:	2300      	movs	r3, #0
 800a7b0:	60fb      	str	r3, [r7, #12]
  
  if(osSemaphoreWait(sobj, _FS_TIMEOUT) == osOK)
 800a7b2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800a7b6:	6878      	ldr	r0, [r7, #4]
 800a7b8:	f000 f866 	bl	800a888 <osSemaphoreWait>
 800a7bc:	4603      	mov	r3, r0
 800a7be:	2b00      	cmp	r3, #0
 800a7c0:	d101      	bne.n	800a7c6 <ff_req_grant+0x20>
  {
    ret = 1;
 800a7c2:	2301      	movs	r3, #1
 800a7c4:	60fb      	str	r3, [r7, #12]
  }
  
  return ret;
 800a7c6:	68fb      	ldr	r3, [r7, #12]
}
 800a7c8:	4618      	mov	r0, r3
 800a7ca:	3710      	adds	r7, #16
 800a7cc:	46bd      	mov	sp, r7
 800a7ce:	bd80      	pop	{r7, pc}

0800a7d0 <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 800a7d0:	b580      	push	{r7, lr}
 800a7d2:	b082      	sub	sp, #8
 800a7d4:	af00      	add	r7, sp, #0
 800a7d6:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(sobj);
 800a7d8:	6878      	ldr	r0, [r7, #4]
 800a7da:	f000 f8a3 	bl	800a924 <osSemaphoreRelease>
}
 800a7de:	bf00      	nop
 800a7e0:	3708      	adds	r7, #8
 800a7e2:	46bd      	mov	sp, r7
 800a7e4:	bd80      	pop	{r7, pc}

0800a7e6 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800a7e6:	b480      	push	{r7}
 800a7e8:	b083      	sub	sp, #12
 800a7ea:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a7ec:	f3ef 8305 	mrs	r3, IPSR
 800a7f0:	607b      	str	r3, [r7, #4]
  return(result);
 800a7f2:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	bf14      	ite	ne
 800a7f8:	2301      	movne	r3, #1
 800a7fa:	2300      	moveq	r3, #0
 800a7fc:	b2db      	uxtb	r3, r3
}
 800a7fe:	4618      	mov	r0, r3
 800a800:	370c      	adds	r7, #12
 800a802:	46bd      	mov	sp, r7
 800a804:	bc80      	pop	{r7}
 800a806:	4770      	bx	lr

0800a808 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 800a808:	b580      	push	{r7, lr}
 800a80a:	b086      	sub	sp, #24
 800a80c:	af02      	add	r7, sp, #8
 800a80e:	6078      	str	r0, [r7, #4]
 800a810:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	685b      	ldr	r3, [r3, #4]
 800a816:	2b00      	cmp	r3, #0
 800a818:	d017      	beq.n	800a84a <osSemaphoreCreate+0x42>
    if (count == 1) {
 800a81a:	683b      	ldr	r3, [r7, #0]
 800a81c:	2b01      	cmp	r3, #1
 800a81e:	d10b      	bne.n	800a838 <osSemaphoreCreate+0x30>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	685a      	ldr	r2, [r3, #4]
 800a824:	2303      	movs	r3, #3
 800a826:	9300      	str	r3, [sp, #0]
 800a828:	4613      	mov	r3, r2
 800a82a:	2200      	movs	r2, #0
 800a82c:	2100      	movs	r1, #0
 800a82e:	2001      	movs	r0, #1
 800a830:	f000 f9d8 	bl	800abe4 <xQueueGenericCreateStatic>
 800a834:	4603      	mov	r3, r0
 800a836:	e023      	b.n	800a880 <osSemaphoreCreate+0x78>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
 800a838:	6838      	ldr	r0, [r7, #0]
 800a83a:	6839      	ldr	r1, [r7, #0]
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	685b      	ldr	r3, [r3, #4]
 800a840:	461a      	mov	r2, r3
 800a842:	f000 facf 	bl	800ade4 <xQueueCreateCountingSemaphoreStatic>
 800a846:	4603      	mov	r3, r0
 800a848:	e01a      	b.n	800a880 <osSemaphoreCreate+0x78>
      return NULL;
#endif
    }
  }
  else {
    if (count == 1) {
 800a84a:	683b      	ldr	r3, [r7, #0]
 800a84c:	2b01      	cmp	r3, #1
 800a84e:	d110      	bne.n	800a872 <osSemaphoreCreate+0x6a>
      vSemaphoreCreateBinary(sema);
 800a850:	2203      	movs	r2, #3
 800a852:	2100      	movs	r1, #0
 800a854:	2001      	movs	r0, #1
 800a856:	f000 fa37 	bl	800acc8 <xQueueGenericCreate>
 800a85a:	60f8      	str	r0, [r7, #12]
 800a85c:	68fb      	ldr	r3, [r7, #12]
 800a85e:	2b00      	cmp	r3, #0
 800a860:	d005      	beq.n	800a86e <osSemaphoreCreate+0x66>
 800a862:	2300      	movs	r3, #0
 800a864:	2200      	movs	r2, #0
 800a866:	2100      	movs	r1, #0
 800a868:	68f8      	ldr	r0, [r7, #12]
 800a86a:	f000 fb21 	bl	800aeb0 <xQueueGenericSend>
      return sema;
 800a86e:	68fb      	ldr	r3, [r7, #12]
 800a870:	e006      	b.n	800a880 <osSemaphoreCreate+0x78>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
 800a872:	683b      	ldr	r3, [r7, #0]
 800a874:	683a      	ldr	r2, [r7, #0]
 800a876:	4611      	mov	r1, r2
 800a878:	4618      	mov	r0, r3
 800a87a:	f000 fae8 	bl	800ae4e <xQueueCreateCountingSemaphore>
 800a87e:	4603      	mov	r3, r0
#else
    return NULL;
#endif
  }
#endif
}
 800a880:	4618      	mov	r0, r3
 800a882:	3710      	adds	r7, #16
 800a884:	46bd      	mov	sp, r7
 800a886:	bd80      	pop	{r7, pc}

0800a888 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 800a888:	b580      	push	{r7, lr}
 800a88a:	b084      	sub	sp, #16
 800a88c:	af00      	add	r7, sp, #0
 800a88e:	6078      	str	r0, [r7, #4]
 800a890:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800a892:	2300      	movs	r3, #0
 800a894:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	2b00      	cmp	r3, #0
 800a89a:	d101      	bne.n	800a8a0 <osSemaphoreWait+0x18>
    return osErrorParameter;
 800a89c:	2380      	movs	r3, #128	; 0x80
 800a89e:	e03a      	b.n	800a916 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 800a8a0:	2300      	movs	r3, #0
 800a8a2:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800a8a4:	683b      	ldr	r3, [r7, #0]
 800a8a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a8aa:	d103      	bne.n	800a8b4 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 800a8ac:	f04f 33ff 	mov.w	r3, #4294967295
 800a8b0:	60fb      	str	r3, [r7, #12]
 800a8b2:	e009      	b.n	800a8c8 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 800a8b4:	683b      	ldr	r3, [r7, #0]
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	d006      	beq.n	800a8c8 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800a8ba:	683b      	ldr	r3, [r7, #0]
 800a8bc:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800a8be:	68fb      	ldr	r3, [r7, #12]
 800a8c0:	2b00      	cmp	r3, #0
 800a8c2:	d101      	bne.n	800a8c8 <osSemaphoreWait+0x40>
      ticks = 1;
 800a8c4:	2301      	movs	r3, #1
 800a8c6:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800a8c8:	f7ff ff8d 	bl	800a7e6 <inHandlerMode>
 800a8cc:	4603      	mov	r3, r0
 800a8ce:	2b00      	cmp	r3, #0
 800a8d0:	d017      	beq.n	800a902 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800a8d2:	f107 0308 	add.w	r3, r7, #8
 800a8d6:	461a      	mov	r2, r3
 800a8d8:	2100      	movs	r1, #0
 800a8da:	6878      	ldr	r0, [r7, #4]
 800a8dc:	f000 fd74 	bl	800b3c8 <xQueueReceiveFromISR>
 800a8e0:	4603      	mov	r3, r0
 800a8e2:	2b01      	cmp	r3, #1
 800a8e4:	d001      	beq.n	800a8ea <osSemaphoreWait+0x62>
      return osErrorOS;
 800a8e6:	23ff      	movs	r3, #255	; 0xff
 800a8e8:	e015      	b.n	800a916 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800a8ea:	68bb      	ldr	r3, [r7, #8]
 800a8ec:	2b00      	cmp	r3, #0
 800a8ee:	d011      	beq.n	800a914 <osSemaphoreWait+0x8c>
 800a8f0:	4b0b      	ldr	r3, [pc, #44]	; (800a920 <osSemaphoreWait+0x98>)
 800a8f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a8f6:	601a      	str	r2, [r3, #0]
 800a8f8:	f3bf 8f4f 	dsb	sy
 800a8fc:	f3bf 8f6f 	isb	sy
 800a900:	e008      	b.n	800a914 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800a902:	68f9      	ldr	r1, [r7, #12]
 800a904:	6878      	ldr	r0, [r7, #4]
 800a906:	f000 fc57 	bl	800b1b8 <xQueueSemaphoreTake>
 800a90a:	4603      	mov	r3, r0
 800a90c:	2b01      	cmp	r3, #1
 800a90e:	d001      	beq.n	800a914 <osSemaphoreWait+0x8c>
    return osErrorOS;
 800a910:	23ff      	movs	r3, #255	; 0xff
 800a912:	e000      	b.n	800a916 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 800a914:	2300      	movs	r3, #0
}
 800a916:	4618      	mov	r0, r3
 800a918:	3710      	adds	r7, #16
 800a91a:	46bd      	mov	sp, r7
 800a91c:	bd80      	pop	{r7, pc}
 800a91e:	bf00      	nop
 800a920:	e000ed04 	.word	0xe000ed04

0800a924 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 800a924:	b580      	push	{r7, lr}
 800a926:	b084      	sub	sp, #16
 800a928:	af00      	add	r7, sp, #0
 800a92a:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800a92c:	2300      	movs	r3, #0
 800a92e:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800a930:	2300      	movs	r3, #0
 800a932:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 800a934:	f7ff ff57 	bl	800a7e6 <inHandlerMode>
 800a938:	4603      	mov	r3, r0
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	d016      	beq.n	800a96c <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800a93e:	f107 0308 	add.w	r3, r7, #8
 800a942:	4619      	mov	r1, r3
 800a944:	6878      	ldr	r0, [r7, #4]
 800a946:	f000 fbad 	bl	800b0a4 <xQueueGiveFromISR>
 800a94a:	4603      	mov	r3, r0
 800a94c:	2b01      	cmp	r3, #1
 800a94e:	d001      	beq.n	800a954 <osSemaphoreRelease+0x30>
      return osErrorOS;
 800a950:	23ff      	movs	r3, #255	; 0xff
 800a952:	e017      	b.n	800a984 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800a954:	68bb      	ldr	r3, [r7, #8]
 800a956:	2b00      	cmp	r3, #0
 800a958:	d013      	beq.n	800a982 <osSemaphoreRelease+0x5e>
 800a95a:	4b0c      	ldr	r3, [pc, #48]	; (800a98c <osSemaphoreRelease+0x68>)
 800a95c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a960:	601a      	str	r2, [r3, #0]
 800a962:	f3bf 8f4f 	dsb	sy
 800a966:	f3bf 8f6f 	isb	sy
 800a96a:	e00a      	b.n	800a982 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 800a96c:	2300      	movs	r3, #0
 800a96e:	2200      	movs	r2, #0
 800a970:	2100      	movs	r1, #0
 800a972:	6878      	ldr	r0, [r7, #4]
 800a974:	f000 fa9c 	bl	800aeb0 <xQueueGenericSend>
 800a978:	4603      	mov	r3, r0
 800a97a:	2b01      	cmp	r3, #1
 800a97c:	d001      	beq.n	800a982 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 800a97e:	23ff      	movs	r3, #255	; 0xff
 800a980:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 800a982:	68fb      	ldr	r3, [r7, #12]
}
 800a984:	4618      	mov	r0, r3
 800a986:	3710      	adds	r7, #16
 800a988:	46bd      	mov	sp, r7
 800a98a:	bd80      	pop	{r7, pc}
 800a98c:	e000ed04 	.word	0xe000ed04

0800a990 <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 800a990:	b580      	push	{r7, lr}
 800a992:	b082      	sub	sp, #8
 800a994:	af00      	add	r7, sp, #0
 800a996:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 800a998:	f7ff ff25 	bl	800a7e6 <inHandlerMode>
 800a99c:	4603      	mov	r3, r0
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	d001      	beq.n	800a9a6 <osSemaphoreDelete+0x16>
    return osErrorISR;
 800a9a2:	2382      	movs	r3, #130	; 0x82
 800a9a4:	e003      	b.n	800a9ae <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 800a9a6:	6878      	ldr	r0, [r7, #4]
 800a9a8:	f000 fd8b 	bl	800b4c2 <vQueueDelete>

  return osOK; 
 800a9ac:	2300      	movs	r3, #0
}
 800a9ae:	4618      	mov	r0, r3
 800a9b0:	3708      	adds	r7, #8
 800a9b2:	46bd      	mov	sp, r7
 800a9b4:	bd80      	pop	{r7, pc}

0800a9b6 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800a9b6:	b480      	push	{r7}
 800a9b8:	b083      	sub	sp, #12
 800a9ba:	af00      	add	r7, sp, #0
 800a9bc:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	f103 0208 	add.w	r2, r3, #8
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	f04f 32ff 	mov.w	r2, #4294967295
 800a9ce:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	f103 0208 	add.w	r2, r3, #8
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	f103 0208 	add.w	r2, r3, #8
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	2200      	movs	r2, #0
 800a9e8:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800a9ea:	bf00      	nop
 800a9ec:	370c      	adds	r7, #12
 800a9ee:	46bd      	mov	sp, r7
 800a9f0:	bc80      	pop	{r7}
 800a9f2:	4770      	bx	lr

0800a9f4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800a9f4:	b480      	push	{r7}
 800a9f6:	b083      	sub	sp, #12
 800a9f8:	af00      	add	r7, sp, #0
 800a9fa:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	2200      	movs	r2, #0
 800aa00:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800aa02:	bf00      	nop
 800aa04:	370c      	adds	r7, #12
 800aa06:	46bd      	mov	sp, r7
 800aa08:	bc80      	pop	{r7}
 800aa0a:	4770      	bx	lr

0800aa0c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800aa0c:	b480      	push	{r7}
 800aa0e:	b085      	sub	sp, #20
 800aa10:	af00      	add	r7, sp, #0
 800aa12:	6078      	str	r0, [r7, #4]
 800aa14:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	685b      	ldr	r3, [r3, #4]
 800aa1a:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800aa1c:	683b      	ldr	r3, [r7, #0]
 800aa1e:	68fa      	ldr	r2, [r7, #12]
 800aa20:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800aa22:	68fb      	ldr	r3, [r7, #12]
 800aa24:	689a      	ldr	r2, [r3, #8]
 800aa26:	683b      	ldr	r3, [r7, #0]
 800aa28:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800aa2a:	68fb      	ldr	r3, [r7, #12]
 800aa2c:	689b      	ldr	r3, [r3, #8]
 800aa2e:	683a      	ldr	r2, [r7, #0]
 800aa30:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800aa32:	68fb      	ldr	r3, [r7, #12]
 800aa34:	683a      	ldr	r2, [r7, #0]
 800aa36:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800aa38:	683b      	ldr	r3, [r7, #0]
 800aa3a:	687a      	ldr	r2, [r7, #4]
 800aa3c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	1c5a      	adds	r2, r3, #1
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	601a      	str	r2, [r3, #0]
}
 800aa48:	bf00      	nop
 800aa4a:	3714      	adds	r7, #20
 800aa4c:	46bd      	mov	sp, r7
 800aa4e:	bc80      	pop	{r7}
 800aa50:	4770      	bx	lr

0800aa52 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800aa52:	b480      	push	{r7}
 800aa54:	b085      	sub	sp, #20
 800aa56:	af00      	add	r7, sp, #0
 800aa58:	6078      	str	r0, [r7, #4]
 800aa5a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800aa5c:	683b      	ldr	r3, [r7, #0]
 800aa5e:	681b      	ldr	r3, [r3, #0]
 800aa60:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800aa62:	68bb      	ldr	r3, [r7, #8]
 800aa64:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa68:	d103      	bne.n	800aa72 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	691b      	ldr	r3, [r3, #16]
 800aa6e:	60fb      	str	r3, [r7, #12]
 800aa70:	e00c      	b.n	800aa8c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	3308      	adds	r3, #8
 800aa76:	60fb      	str	r3, [r7, #12]
 800aa78:	e002      	b.n	800aa80 <vListInsert+0x2e>
 800aa7a:	68fb      	ldr	r3, [r7, #12]
 800aa7c:	685b      	ldr	r3, [r3, #4]
 800aa7e:	60fb      	str	r3, [r7, #12]
 800aa80:	68fb      	ldr	r3, [r7, #12]
 800aa82:	685b      	ldr	r3, [r3, #4]
 800aa84:	681b      	ldr	r3, [r3, #0]
 800aa86:	68ba      	ldr	r2, [r7, #8]
 800aa88:	429a      	cmp	r2, r3
 800aa8a:	d2f6      	bcs.n	800aa7a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800aa8c:	68fb      	ldr	r3, [r7, #12]
 800aa8e:	685a      	ldr	r2, [r3, #4]
 800aa90:	683b      	ldr	r3, [r7, #0]
 800aa92:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800aa94:	683b      	ldr	r3, [r7, #0]
 800aa96:	685b      	ldr	r3, [r3, #4]
 800aa98:	683a      	ldr	r2, [r7, #0]
 800aa9a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800aa9c:	683b      	ldr	r3, [r7, #0]
 800aa9e:	68fa      	ldr	r2, [r7, #12]
 800aaa0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800aaa2:	68fb      	ldr	r3, [r7, #12]
 800aaa4:	683a      	ldr	r2, [r7, #0]
 800aaa6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800aaa8:	683b      	ldr	r3, [r7, #0]
 800aaaa:	687a      	ldr	r2, [r7, #4]
 800aaac:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	681b      	ldr	r3, [r3, #0]
 800aab2:	1c5a      	adds	r2, r3, #1
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	601a      	str	r2, [r3, #0]
}
 800aab8:	bf00      	nop
 800aaba:	3714      	adds	r7, #20
 800aabc:	46bd      	mov	sp, r7
 800aabe:	bc80      	pop	{r7}
 800aac0:	4770      	bx	lr

0800aac2 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800aac2:	b480      	push	{r7}
 800aac4:	b085      	sub	sp, #20
 800aac6:	af00      	add	r7, sp, #0
 800aac8:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	691b      	ldr	r3, [r3, #16]
 800aace:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	685b      	ldr	r3, [r3, #4]
 800aad4:	687a      	ldr	r2, [r7, #4]
 800aad6:	6892      	ldr	r2, [r2, #8]
 800aad8:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	689b      	ldr	r3, [r3, #8]
 800aade:	687a      	ldr	r2, [r7, #4]
 800aae0:	6852      	ldr	r2, [r2, #4]
 800aae2:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800aae4:	68fb      	ldr	r3, [r7, #12]
 800aae6:	685b      	ldr	r3, [r3, #4]
 800aae8:	687a      	ldr	r2, [r7, #4]
 800aaea:	429a      	cmp	r2, r3
 800aaec:	d103      	bne.n	800aaf6 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	689a      	ldr	r2, [r3, #8]
 800aaf2:	68fb      	ldr	r3, [r7, #12]
 800aaf4:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	2200      	movs	r2, #0
 800aafa:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800aafc:	68fb      	ldr	r3, [r7, #12]
 800aafe:	681b      	ldr	r3, [r3, #0]
 800ab00:	1e5a      	subs	r2, r3, #1
 800ab02:	68fb      	ldr	r3, [r7, #12]
 800ab04:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800ab06:	68fb      	ldr	r3, [r7, #12]
 800ab08:	681b      	ldr	r3, [r3, #0]
}
 800ab0a:	4618      	mov	r0, r3
 800ab0c:	3714      	adds	r7, #20
 800ab0e:	46bd      	mov	sp, r7
 800ab10:	bc80      	pop	{r7}
 800ab12:	4770      	bx	lr

0800ab14 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800ab14:	b580      	push	{r7, lr}
 800ab16:	b084      	sub	sp, #16
 800ab18:	af00      	add	r7, sp, #0
 800ab1a:	6078      	str	r0, [r7, #4]
 800ab1c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800ab22:	68fb      	ldr	r3, [r7, #12]
 800ab24:	2b00      	cmp	r3, #0
 800ab26:	d109      	bne.n	800ab3c <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800ab28:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab2c:	f383 8811 	msr	BASEPRI, r3
 800ab30:	f3bf 8f6f 	isb	sy
 800ab34:	f3bf 8f4f 	dsb	sy
 800ab38:	60bb      	str	r3, [r7, #8]
 800ab3a:	e7fe      	b.n	800ab3a <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 800ab3c:	f001 ff14 	bl	800c968 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800ab40:	68fb      	ldr	r3, [r7, #12]
 800ab42:	681a      	ldr	r2, [r3, #0]
 800ab44:	68fb      	ldr	r3, [r7, #12]
 800ab46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab48:	68f9      	ldr	r1, [r7, #12]
 800ab4a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800ab4c:	fb01 f303 	mul.w	r3, r1, r3
 800ab50:	441a      	add	r2, r3
 800ab52:	68fb      	ldr	r3, [r7, #12]
 800ab54:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800ab56:	68fb      	ldr	r3, [r7, #12]
 800ab58:	2200      	movs	r2, #0
 800ab5a:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800ab5c:	68fb      	ldr	r3, [r7, #12]
 800ab5e:	681a      	ldr	r2, [r3, #0]
 800ab60:	68fb      	ldr	r3, [r7, #12]
 800ab62:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800ab64:	68fb      	ldr	r3, [r7, #12]
 800ab66:	681a      	ldr	r2, [r3, #0]
 800ab68:	68fb      	ldr	r3, [r7, #12]
 800ab6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab6c:	3b01      	subs	r3, #1
 800ab6e:	68f9      	ldr	r1, [r7, #12]
 800ab70:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800ab72:	fb01 f303 	mul.w	r3, r1, r3
 800ab76:	441a      	add	r2, r3
 800ab78:	68fb      	ldr	r3, [r7, #12]
 800ab7a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800ab7c:	68fb      	ldr	r3, [r7, #12]
 800ab7e:	22ff      	movs	r2, #255	; 0xff
 800ab80:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800ab84:	68fb      	ldr	r3, [r7, #12]
 800ab86:	22ff      	movs	r2, #255	; 0xff
 800ab88:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800ab8c:	683b      	ldr	r3, [r7, #0]
 800ab8e:	2b00      	cmp	r3, #0
 800ab90:	d114      	bne.n	800abbc <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ab92:	68fb      	ldr	r3, [r7, #12]
 800ab94:	691b      	ldr	r3, [r3, #16]
 800ab96:	2b00      	cmp	r3, #0
 800ab98:	d01a      	beq.n	800abd0 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ab9a:	68fb      	ldr	r3, [r7, #12]
 800ab9c:	3310      	adds	r3, #16
 800ab9e:	4618      	mov	r0, r3
 800aba0:	f001 f9fc 	bl	800bf9c <xTaskRemoveFromEventList>
 800aba4:	4603      	mov	r3, r0
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	d012      	beq.n	800abd0 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800abaa:	4b0d      	ldr	r3, [pc, #52]	; (800abe0 <xQueueGenericReset+0xcc>)
 800abac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800abb0:	601a      	str	r2, [r3, #0]
 800abb2:	f3bf 8f4f 	dsb	sy
 800abb6:	f3bf 8f6f 	isb	sy
 800abba:	e009      	b.n	800abd0 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800abbc:	68fb      	ldr	r3, [r7, #12]
 800abbe:	3310      	adds	r3, #16
 800abc0:	4618      	mov	r0, r3
 800abc2:	f7ff fef8 	bl	800a9b6 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800abc6:	68fb      	ldr	r3, [r7, #12]
 800abc8:	3324      	adds	r3, #36	; 0x24
 800abca:	4618      	mov	r0, r3
 800abcc:	f7ff fef3 	bl	800a9b6 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800abd0:	f001 fef8 	bl	800c9c4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800abd4:	2301      	movs	r3, #1
}
 800abd6:	4618      	mov	r0, r3
 800abd8:	3710      	adds	r7, #16
 800abda:	46bd      	mov	sp, r7
 800abdc:	bd80      	pop	{r7, pc}
 800abde:	bf00      	nop
 800abe0:	e000ed04 	.word	0xe000ed04

0800abe4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800abe4:	b580      	push	{r7, lr}
 800abe6:	b08e      	sub	sp, #56	; 0x38
 800abe8:	af02      	add	r7, sp, #8
 800abea:	60f8      	str	r0, [r7, #12]
 800abec:	60b9      	str	r1, [r7, #8]
 800abee:	607a      	str	r2, [r7, #4]
 800abf0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800abf2:	68fb      	ldr	r3, [r7, #12]
 800abf4:	2b00      	cmp	r3, #0
 800abf6:	d109      	bne.n	800ac0c <xQueueGenericCreateStatic+0x28>
 800abf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abfc:	f383 8811 	msr	BASEPRI, r3
 800ac00:	f3bf 8f6f 	isb	sy
 800ac04:	f3bf 8f4f 	dsb	sy
 800ac08:	62bb      	str	r3, [r7, #40]	; 0x28
 800ac0a:	e7fe      	b.n	800ac0a <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800ac0c:	683b      	ldr	r3, [r7, #0]
 800ac0e:	2b00      	cmp	r3, #0
 800ac10:	d109      	bne.n	800ac26 <xQueueGenericCreateStatic+0x42>
 800ac12:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac16:	f383 8811 	msr	BASEPRI, r3
 800ac1a:	f3bf 8f6f 	isb	sy
 800ac1e:	f3bf 8f4f 	dsb	sy
 800ac22:	627b      	str	r3, [r7, #36]	; 0x24
 800ac24:	e7fe      	b.n	800ac24 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	2b00      	cmp	r3, #0
 800ac2a:	d002      	beq.n	800ac32 <xQueueGenericCreateStatic+0x4e>
 800ac2c:	68bb      	ldr	r3, [r7, #8]
 800ac2e:	2b00      	cmp	r3, #0
 800ac30:	d001      	beq.n	800ac36 <xQueueGenericCreateStatic+0x52>
 800ac32:	2301      	movs	r3, #1
 800ac34:	e000      	b.n	800ac38 <xQueueGenericCreateStatic+0x54>
 800ac36:	2300      	movs	r3, #0
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	d109      	bne.n	800ac50 <xQueueGenericCreateStatic+0x6c>
 800ac3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac40:	f383 8811 	msr	BASEPRI, r3
 800ac44:	f3bf 8f6f 	isb	sy
 800ac48:	f3bf 8f4f 	dsb	sy
 800ac4c:	623b      	str	r3, [r7, #32]
 800ac4e:	e7fe      	b.n	800ac4e <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	2b00      	cmp	r3, #0
 800ac54:	d102      	bne.n	800ac5c <xQueueGenericCreateStatic+0x78>
 800ac56:	68bb      	ldr	r3, [r7, #8]
 800ac58:	2b00      	cmp	r3, #0
 800ac5a:	d101      	bne.n	800ac60 <xQueueGenericCreateStatic+0x7c>
 800ac5c:	2301      	movs	r3, #1
 800ac5e:	e000      	b.n	800ac62 <xQueueGenericCreateStatic+0x7e>
 800ac60:	2300      	movs	r3, #0
 800ac62:	2b00      	cmp	r3, #0
 800ac64:	d109      	bne.n	800ac7a <xQueueGenericCreateStatic+0x96>
 800ac66:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac6a:	f383 8811 	msr	BASEPRI, r3
 800ac6e:	f3bf 8f6f 	isb	sy
 800ac72:	f3bf 8f4f 	dsb	sy
 800ac76:	61fb      	str	r3, [r7, #28]
 800ac78:	e7fe      	b.n	800ac78 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800ac7a:	2348      	movs	r3, #72	; 0x48
 800ac7c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800ac7e:	697b      	ldr	r3, [r7, #20]
 800ac80:	2b48      	cmp	r3, #72	; 0x48
 800ac82:	d009      	beq.n	800ac98 <xQueueGenericCreateStatic+0xb4>
 800ac84:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac88:	f383 8811 	msr	BASEPRI, r3
 800ac8c:	f3bf 8f6f 	isb	sy
 800ac90:	f3bf 8f4f 	dsb	sy
 800ac94:	61bb      	str	r3, [r7, #24]
 800ac96:	e7fe      	b.n	800ac96 <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ac98:	683b      	ldr	r3, [r7, #0]
 800ac9a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800ac9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	d00d      	beq.n	800acbe <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800aca2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aca4:	2201      	movs	r2, #1
 800aca6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800acaa:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800acae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acb0:	9300      	str	r3, [sp, #0]
 800acb2:	4613      	mov	r3, r2
 800acb4:	687a      	ldr	r2, [r7, #4]
 800acb6:	68b9      	ldr	r1, [r7, #8]
 800acb8:	68f8      	ldr	r0, [r7, #12]
 800acba:	f000 f842 	bl	800ad42 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800acbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800acc0:	4618      	mov	r0, r3
 800acc2:	3730      	adds	r7, #48	; 0x30
 800acc4:	46bd      	mov	sp, r7
 800acc6:	bd80      	pop	{r7, pc}

0800acc8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800acc8:	b580      	push	{r7, lr}
 800acca:	b08a      	sub	sp, #40	; 0x28
 800accc:	af02      	add	r7, sp, #8
 800acce:	60f8      	str	r0, [r7, #12]
 800acd0:	60b9      	str	r1, [r7, #8]
 800acd2:	4613      	mov	r3, r2
 800acd4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800acd6:	68fb      	ldr	r3, [r7, #12]
 800acd8:	2b00      	cmp	r3, #0
 800acda:	d109      	bne.n	800acf0 <xQueueGenericCreate+0x28>
 800acdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ace0:	f383 8811 	msr	BASEPRI, r3
 800ace4:	f3bf 8f6f 	isb	sy
 800ace8:	f3bf 8f4f 	dsb	sy
 800acec:	613b      	str	r3, [r7, #16]
 800acee:	e7fe      	b.n	800acee <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800acf0:	68bb      	ldr	r3, [r7, #8]
 800acf2:	2b00      	cmp	r3, #0
 800acf4:	d102      	bne.n	800acfc <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800acf6:	2300      	movs	r3, #0
 800acf8:	61fb      	str	r3, [r7, #28]
 800acfa:	e004      	b.n	800ad06 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800acfc:	68fb      	ldr	r3, [r7, #12]
 800acfe:	68ba      	ldr	r2, [r7, #8]
 800ad00:	fb02 f303 	mul.w	r3, r2, r3
 800ad04:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800ad06:	69fb      	ldr	r3, [r7, #28]
 800ad08:	3348      	adds	r3, #72	; 0x48
 800ad0a:	4618      	mov	r0, r3
 800ad0c:	f001 ff22 	bl	800cb54 <pvPortMalloc>
 800ad10:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800ad12:	69bb      	ldr	r3, [r7, #24]
 800ad14:	2b00      	cmp	r3, #0
 800ad16:	d00f      	beq.n	800ad38 <xQueueGenericCreate+0x70>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 800ad18:	69bb      	ldr	r3, [r7, #24]
 800ad1a:	3348      	adds	r3, #72	; 0x48
 800ad1c:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800ad1e:	69bb      	ldr	r3, [r7, #24]
 800ad20:	2200      	movs	r2, #0
 800ad22:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800ad26:	79fa      	ldrb	r2, [r7, #7]
 800ad28:	69bb      	ldr	r3, [r7, #24]
 800ad2a:	9300      	str	r3, [sp, #0]
 800ad2c:	4613      	mov	r3, r2
 800ad2e:	697a      	ldr	r2, [r7, #20]
 800ad30:	68b9      	ldr	r1, [r7, #8]
 800ad32:	68f8      	ldr	r0, [r7, #12]
 800ad34:	f000 f805 	bl	800ad42 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800ad38:	69bb      	ldr	r3, [r7, #24]
	}
 800ad3a:	4618      	mov	r0, r3
 800ad3c:	3720      	adds	r7, #32
 800ad3e:	46bd      	mov	sp, r7
 800ad40:	bd80      	pop	{r7, pc}

0800ad42 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800ad42:	b580      	push	{r7, lr}
 800ad44:	b084      	sub	sp, #16
 800ad46:	af00      	add	r7, sp, #0
 800ad48:	60f8      	str	r0, [r7, #12]
 800ad4a:	60b9      	str	r1, [r7, #8]
 800ad4c:	607a      	str	r2, [r7, #4]
 800ad4e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800ad50:	68bb      	ldr	r3, [r7, #8]
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	d103      	bne.n	800ad5e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800ad56:	69bb      	ldr	r3, [r7, #24]
 800ad58:	69ba      	ldr	r2, [r7, #24]
 800ad5a:	601a      	str	r2, [r3, #0]
 800ad5c:	e002      	b.n	800ad64 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800ad5e:	69bb      	ldr	r3, [r7, #24]
 800ad60:	687a      	ldr	r2, [r7, #4]
 800ad62:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800ad64:	69bb      	ldr	r3, [r7, #24]
 800ad66:	68fa      	ldr	r2, [r7, #12]
 800ad68:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800ad6a:	69bb      	ldr	r3, [r7, #24]
 800ad6c:	68ba      	ldr	r2, [r7, #8]
 800ad6e:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800ad70:	2101      	movs	r1, #1
 800ad72:	69b8      	ldr	r0, [r7, #24]
 800ad74:	f7ff fece 	bl	800ab14 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800ad78:	bf00      	nop
 800ad7a:	3710      	adds	r7, #16
 800ad7c:	46bd      	mov	sp, r7
 800ad7e:	bd80      	pop	{r7, pc}

0800ad80 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800ad80:	b580      	push	{r7, lr}
 800ad82:	b082      	sub	sp, #8
 800ad84:	af00      	add	r7, sp, #0
 800ad86:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	d00e      	beq.n	800adac <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	2200      	movs	r2, #0
 800ad92:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	2200      	movs	r2, #0
 800ad98:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	2200      	movs	r2, #0
 800ad9e:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800ada0:	2300      	movs	r3, #0
 800ada2:	2200      	movs	r2, #0
 800ada4:	2100      	movs	r1, #0
 800ada6:	6878      	ldr	r0, [r7, #4]
 800ada8:	f000 f882 	bl	800aeb0 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800adac:	bf00      	nop
 800adae:	3708      	adds	r7, #8
 800adb0:	46bd      	mov	sp, r7
 800adb2:	bd80      	pop	{r7, pc}

0800adb4 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800adb4:	b580      	push	{r7, lr}
 800adb6:	b086      	sub	sp, #24
 800adb8:	af00      	add	r7, sp, #0
 800adba:	4603      	mov	r3, r0
 800adbc:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800adbe:	2301      	movs	r3, #1
 800adc0:	617b      	str	r3, [r7, #20]
 800adc2:	2300      	movs	r3, #0
 800adc4:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800adc6:	79fb      	ldrb	r3, [r7, #7]
 800adc8:	461a      	mov	r2, r3
 800adca:	6939      	ldr	r1, [r7, #16]
 800adcc:	6978      	ldr	r0, [r7, #20]
 800adce:	f7ff ff7b 	bl	800acc8 <xQueueGenericCreate>
 800add2:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 800add4:	68f8      	ldr	r0, [r7, #12]
 800add6:	f7ff ffd3 	bl	800ad80 <prvInitialiseMutex>

		return pxNewQueue;
 800adda:	68fb      	ldr	r3, [r7, #12]
	}
 800addc:	4618      	mov	r0, r3
 800adde:	3718      	adds	r7, #24
 800ade0:	46bd      	mov	sp, r7
 800ade2:	bd80      	pop	{r7, pc}

0800ade4 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800ade4:	b580      	push	{r7, lr}
 800ade6:	b08a      	sub	sp, #40	; 0x28
 800ade8:	af02      	add	r7, sp, #8
 800adea:	60f8      	str	r0, [r7, #12]
 800adec:	60b9      	str	r1, [r7, #8]
 800adee:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800adf0:	68fb      	ldr	r3, [r7, #12]
 800adf2:	2b00      	cmp	r3, #0
 800adf4:	d109      	bne.n	800ae0a <xQueueCreateCountingSemaphoreStatic+0x26>
 800adf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adfa:	f383 8811 	msr	BASEPRI, r3
 800adfe:	f3bf 8f6f 	isb	sy
 800ae02:	f3bf 8f4f 	dsb	sy
 800ae06:	61bb      	str	r3, [r7, #24]
 800ae08:	e7fe      	b.n	800ae08 <xQueueCreateCountingSemaphoreStatic+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800ae0a:	68ba      	ldr	r2, [r7, #8]
 800ae0c:	68fb      	ldr	r3, [r7, #12]
 800ae0e:	429a      	cmp	r2, r3
 800ae10:	d909      	bls.n	800ae26 <xQueueCreateCountingSemaphoreStatic+0x42>
 800ae12:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae16:	f383 8811 	msr	BASEPRI, r3
 800ae1a:	f3bf 8f6f 	isb	sy
 800ae1e:	f3bf 8f4f 	dsb	sy
 800ae22:	617b      	str	r3, [r7, #20]
 800ae24:	e7fe      	b.n	800ae24 <xQueueCreateCountingSemaphoreStatic+0x40>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800ae26:	2302      	movs	r3, #2
 800ae28:	9300      	str	r3, [sp, #0]
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	2200      	movs	r2, #0
 800ae2e:	2100      	movs	r1, #0
 800ae30:	68f8      	ldr	r0, [r7, #12]
 800ae32:	f7ff fed7 	bl	800abe4 <xQueueGenericCreateStatic>
 800ae36:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800ae38:	69fb      	ldr	r3, [r7, #28]
 800ae3a:	2b00      	cmp	r3, #0
 800ae3c:	d002      	beq.n	800ae44 <xQueueCreateCountingSemaphoreStatic+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800ae3e:	69fb      	ldr	r3, [r7, #28]
 800ae40:	68ba      	ldr	r2, [r7, #8]
 800ae42:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800ae44:	69fb      	ldr	r3, [r7, #28]
	}
 800ae46:	4618      	mov	r0, r3
 800ae48:	3720      	adds	r7, #32
 800ae4a:	46bd      	mov	sp, r7
 800ae4c:	bd80      	pop	{r7, pc}

0800ae4e <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800ae4e:	b580      	push	{r7, lr}
 800ae50:	b086      	sub	sp, #24
 800ae52:	af00      	add	r7, sp, #0
 800ae54:	6078      	str	r0, [r7, #4]
 800ae56:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	2b00      	cmp	r3, #0
 800ae5c:	d109      	bne.n	800ae72 <xQueueCreateCountingSemaphore+0x24>
 800ae5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae62:	f383 8811 	msr	BASEPRI, r3
 800ae66:	f3bf 8f6f 	isb	sy
 800ae6a:	f3bf 8f4f 	dsb	sy
 800ae6e:	613b      	str	r3, [r7, #16]
 800ae70:	e7fe      	b.n	800ae70 <xQueueCreateCountingSemaphore+0x22>
		configASSERT( uxInitialCount <= uxMaxCount );
 800ae72:	683a      	ldr	r2, [r7, #0]
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	429a      	cmp	r2, r3
 800ae78:	d909      	bls.n	800ae8e <xQueueCreateCountingSemaphore+0x40>
 800ae7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae7e:	f383 8811 	msr	BASEPRI, r3
 800ae82:	f3bf 8f6f 	isb	sy
 800ae86:	f3bf 8f4f 	dsb	sy
 800ae8a:	60fb      	str	r3, [r7, #12]
 800ae8c:	e7fe      	b.n	800ae8c <xQueueCreateCountingSemaphore+0x3e>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800ae8e:	2202      	movs	r2, #2
 800ae90:	2100      	movs	r1, #0
 800ae92:	6878      	ldr	r0, [r7, #4]
 800ae94:	f7ff ff18 	bl	800acc8 <xQueueGenericCreate>
 800ae98:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800ae9a:	697b      	ldr	r3, [r7, #20]
 800ae9c:	2b00      	cmp	r3, #0
 800ae9e:	d002      	beq.n	800aea6 <xQueueCreateCountingSemaphore+0x58>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800aea0:	697b      	ldr	r3, [r7, #20]
 800aea2:	683a      	ldr	r2, [r7, #0]
 800aea4:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800aea6:	697b      	ldr	r3, [r7, #20]
	}
 800aea8:	4618      	mov	r0, r3
 800aeaa:	3718      	adds	r7, #24
 800aeac:	46bd      	mov	sp, r7
 800aeae:	bd80      	pop	{r7, pc}

0800aeb0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800aeb0:	b580      	push	{r7, lr}
 800aeb2:	b08e      	sub	sp, #56	; 0x38
 800aeb4:	af00      	add	r7, sp, #0
 800aeb6:	60f8      	str	r0, [r7, #12]
 800aeb8:	60b9      	str	r1, [r7, #8]
 800aeba:	607a      	str	r2, [r7, #4]
 800aebc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800aebe:	2300      	movs	r3, #0
 800aec0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800aec2:	68fb      	ldr	r3, [r7, #12]
 800aec4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800aec6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aec8:	2b00      	cmp	r3, #0
 800aeca:	d109      	bne.n	800aee0 <xQueueGenericSend+0x30>
 800aecc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aed0:	f383 8811 	msr	BASEPRI, r3
 800aed4:	f3bf 8f6f 	isb	sy
 800aed8:	f3bf 8f4f 	dsb	sy
 800aedc:	62bb      	str	r3, [r7, #40]	; 0x28
 800aede:	e7fe      	b.n	800aede <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800aee0:	68bb      	ldr	r3, [r7, #8]
 800aee2:	2b00      	cmp	r3, #0
 800aee4:	d103      	bne.n	800aeee <xQueueGenericSend+0x3e>
 800aee6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aeea:	2b00      	cmp	r3, #0
 800aeec:	d101      	bne.n	800aef2 <xQueueGenericSend+0x42>
 800aeee:	2301      	movs	r3, #1
 800aef0:	e000      	b.n	800aef4 <xQueueGenericSend+0x44>
 800aef2:	2300      	movs	r3, #0
 800aef4:	2b00      	cmp	r3, #0
 800aef6:	d109      	bne.n	800af0c <xQueueGenericSend+0x5c>
 800aef8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aefc:	f383 8811 	msr	BASEPRI, r3
 800af00:	f3bf 8f6f 	isb	sy
 800af04:	f3bf 8f4f 	dsb	sy
 800af08:	627b      	str	r3, [r7, #36]	; 0x24
 800af0a:	e7fe      	b.n	800af0a <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800af0c:	683b      	ldr	r3, [r7, #0]
 800af0e:	2b02      	cmp	r3, #2
 800af10:	d103      	bne.n	800af1a <xQueueGenericSend+0x6a>
 800af12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800af16:	2b01      	cmp	r3, #1
 800af18:	d101      	bne.n	800af1e <xQueueGenericSend+0x6e>
 800af1a:	2301      	movs	r3, #1
 800af1c:	e000      	b.n	800af20 <xQueueGenericSend+0x70>
 800af1e:	2300      	movs	r3, #0
 800af20:	2b00      	cmp	r3, #0
 800af22:	d109      	bne.n	800af38 <xQueueGenericSend+0x88>
 800af24:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af28:	f383 8811 	msr	BASEPRI, r3
 800af2c:	f3bf 8f6f 	isb	sy
 800af30:	f3bf 8f4f 	dsb	sy
 800af34:	623b      	str	r3, [r7, #32]
 800af36:	e7fe      	b.n	800af36 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800af38:	f001 f9ea 	bl	800c310 <xTaskGetSchedulerState>
 800af3c:	4603      	mov	r3, r0
 800af3e:	2b00      	cmp	r3, #0
 800af40:	d102      	bne.n	800af48 <xQueueGenericSend+0x98>
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	2b00      	cmp	r3, #0
 800af46:	d101      	bne.n	800af4c <xQueueGenericSend+0x9c>
 800af48:	2301      	movs	r3, #1
 800af4a:	e000      	b.n	800af4e <xQueueGenericSend+0x9e>
 800af4c:	2300      	movs	r3, #0
 800af4e:	2b00      	cmp	r3, #0
 800af50:	d109      	bne.n	800af66 <xQueueGenericSend+0xb6>
 800af52:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af56:	f383 8811 	msr	BASEPRI, r3
 800af5a:	f3bf 8f6f 	isb	sy
 800af5e:	f3bf 8f4f 	dsb	sy
 800af62:	61fb      	str	r3, [r7, #28]
 800af64:	e7fe      	b.n	800af64 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800af66:	f001 fcff 	bl	800c968 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800af6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af6c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800af6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800af72:	429a      	cmp	r2, r3
 800af74:	d302      	bcc.n	800af7c <xQueueGenericSend+0xcc>
 800af76:	683b      	ldr	r3, [r7, #0]
 800af78:	2b02      	cmp	r3, #2
 800af7a:	d129      	bne.n	800afd0 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800af7c:	683a      	ldr	r2, [r7, #0]
 800af7e:	68b9      	ldr	r1, [r7, #8]
 800af80:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800af82:	f000 fad7 	bl	800b534 <prvCopyDataToQueue>
 800af86:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800af88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	d010      	beq.n	800afb2 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800af90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af92:	3324      	adds	r3, #36	; 0x24
 800af94:	4618      	mov	r0, r3
 800af96:	f001 f801 	bl	800bf9c <xTaskRemoveFromEventList>
 800af9a:	4603      	mov	r3, r0
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	d013      	beq.n	800afc8 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800afa0:	4b3f      	ldr	r3, [pc, #252]	; (800b0a0 <xQueueGenericSend+0x1f0>)
 800afa2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800afa6:	601a      	str	r2, [r3, #0]
 800afa8:	f3bf 8f4f 	dsb	sy
 800afac:	f3bf 8f6f 	isb	sy
 800afb0:	e00a      	b.n	800afc8 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800afb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800afb4:	2b00      	cmp	r3, #0
 800afb6:	d007      	beq.n	800afc8 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800afb8:	4b39      	ldr	r3, [pc, #228]	; (800b0a0 <xQueueGenericSend+0x1f0>)
 800afba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800afbe:	601a      	str	r2, [r3, #0]
 800afc0:	f3bf 8f4f 	dsb	sy
 800afc4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800afc8:	f001 fcfc 	bl	800c9c4 <vPortExitCritical>
				return pdPASS;
 800afcc:	2301      	movs	r3, #1
 800afce:	e063      	b.n	800b098 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	2b00      	cmp	r3, #0
 800afd4:	d103      	bne.n	800afde <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800afd6:	f001 fcf5 	bl	800c9c4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800afda:	2300      	movs	r3, #0
 800afdc:	e05c      	b.n	800b098 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800afde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800afe0:	2b00      	cmp	r3, #0
 800afe2:	d106      	bne.n	800aff2 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800afe4:	f107 0314 	add.w	r3, r7, #20
 800afe8:	4618      	mov	r0, r3
 800afea:	f001 f839 	bl	800c060 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800afee:	2301      	movs	r3, #1
 800aff0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800aff2:	f001 fce7 	bl	800c9c4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800aff6:	f000 fded 	bl	800bbd4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800affa:	f001 fcb5 	bl	800c968 <vPortEnterCritical>
 800affe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b000:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b004:	b25b      	sxtb	r3, r3
 800b006:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b00a:	d103      	bne.n	800b014 <xQueueGenericSend+0x164>
 800b00c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b00e:	2200      	movs	r2, #0
 800b010:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b014:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b016:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b01a:	b25b      	sxtb	r3, r3
 800b01c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b020:	d103      	bne.n	800b02a <xQueueGenericSend+0x17a>
 800b022:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b024:	2200      	movs	r2, #0
 800b026:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b02a:	f001 fccb 	bl	800c9c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b02e:	1d3a      	adds	r2, r7, #4
 800b030:	f107 0314 	add.w	r3, r7, #20
 800b034:	4611      	mov	r1, r2
 800b036:	4618      	mov	r0, r3
 800b038:	f001 f828 	bl	800c08c <xTaskCheckForTimeOut>
 800b03c:	4603      	mov	r3, r0
 800b03e:	2b00      	cmp	r3, #0
 800b040:	d124      	bne.n	800b08c <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800b042:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b044:	f000 fb6e 	bl	800b724 <prvIsQueueFull>
 800b048:	4603      	mov	r3, r0
 800b04a:	2b00      	cmp	r3, #0
 800b04c:	d018      	beq.n	800b080 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800b04e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b050:	3310      	adds	r3, #16
 800b052:	687a      	ldr	r2, [r7, #4]
 800b054:	4611      	mov	r1, r2
 800b056:	4618      	mov	r0, r3
 800b058:	f000 ff7c 	bl	800bf54 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800b05c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b05e:	f000 faf9 	bl	800b654 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800b062:	f000 fdc5 	bl	800bbf0 <xTaskResumeAll>
 800b066:	4603      	mov	r3, r0
 800b068:	2b00      	cmp	r3, #0
 800b06a:	f47f af7c 	bne.w	800af66 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 800b06e:	4b0c      	ldr	r3, [pc, #48]	; (800b0a0 <xQueueGenericSend+0x1f0>)
 800b070:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b074:	601a      	str	r2, [r3, #0]
 800b076:	f3bf 8f4f 	dsb	sy
 800b07a:	f3bf 8f6f 	isb	sy
 800b07e:	e772      	b.n	800af66 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800b080:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b082:	f000 fae7 	bl	800b654 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b086:	f000 fdb3 	bl	800bbf0 <xTaskResumeAll>
 800b08a:	e76c      	b.n	800af66 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800b08c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b08e:	f000 fae1 	bl	800b654 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b092:	f000 fdad 	bl	800bbf0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800b096:	2300      	movs	r3, #0
		}
	}
}
 800b098:	4618      	mov	r0, r3
 800b09a:	3738      	adds	r7, #56	; 0x38
 800b09c:	46bd      	mov	sp, r7
 800b09e:	bd80      	pop	{r7, pc}
 800b0a0:	e000ed04 	.word	0xe000ed04

0800b0a4 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800b0a4:	b580      	push	{r7, lr}
 800b0a6:	b08e      	sub	sp, #56	; 0x38
 800b0a8:	af00      	add	r7, sp, #0
 800b0aa:	6078      	str	r0, [r7, #4]
 800b0ac:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800b0b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0b4:	2b00      	cmp	r3, #0
 800b0b6:	d109      	bne.n	800b0cc <xQueueGiveFromISR+0x28>
 800b0b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0bc:	f383 8811 	msr	BASEPRI, r3
 800b0c0:	f3bf 8f6f 	isb	sy
 800b0c4:	f3bf 8f4f 	dsb	sy
 800b0c8:	623b      	str	r3, [r7, #32]
 800b0ca:	e7fe      	b.n	800b0ca <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800b0cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b0d0:	2b00      	cmp	r3, #0
 800b0d2:	d009      	beq.n	800b0e8 <xQueueGiveFromISR+0x44>
 800b0d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0d8:	f383 8811 	msr	BASEPRI, r3
 800b0dc:	f3bf 8f6f 	isb	sy
 800b0e0:	f3bf 8f4f 	dsb	sy
 800b0e4:	61fb      	str	r3, [r7, #28]
 800b0e6:	e7fe      	b.n	800b0e6 <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 800b0e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0ea:	681b      	ldr	r3, [r3, #0]
 800b0ec:	2b00      	cmp	r3, #0
 800b0ee:	d103      	bne.n	800b0f8 <xQueueGiveFromISR+0x54>
 800b0f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0f2:	685b      	ldr	r3, [r3, #4]
 800b0f4:	2b00      	cmp	r3, #0
 800b0f6:	d101      	bne.n	800b0fc <xQueueGiveFromISR+0x58>
 800b0f8:	2301      	movs	r3, #1
 800b0fa:	e000      	b.n	800b0fe <xQueueGiveFromISR+0x5a>
 800b0fc:	2300      	movs	r3, #0
 800b0fe:	2b00      	cmp	r3, #0
 800b100:	d109      	bne.n	800b116 <xQueueGiveFromISR+0x72>
 800b102:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b106:	f383 8811 	msr	BASEPRI, r3
 800b10a:	f3bf 8f6f 	isb	sy
 800b10e:	f3bf 8f4f 	dsb	sy
 800b112:	61bb      	str	r3, [r7, #24]
 800b114:	e7fe      	b.n	800b114 <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b116:	f001 fce1 	bl	800cadc <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800b11a:	f3ef 8211 	mrs	r2, BASEPRI
 800b11e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b122:	f383 8811 	msr	BASEPRI, r3
 800b126:	f3bf 8f6f 	isb	sy
 800b12a:	f3bf 8f4f 	dsb	sy
 800b12e:	617a      	str	r2, [r7, #20]
 800b130:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800b132:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b134:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b136:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b138:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b13a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800b13c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b13e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b140:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b142:	429a      	cmp	r2, r3
 800b144:	d22b      	bcs.n	800b19e <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800b146:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b148:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b14c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b150:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b152:	1c5a      	adds	r2, r3, #1
 800b154:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b156:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800b158:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b15c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b160:	d112      	bne.n	800b188 <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b162:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b166:	2b00      	cmp	r3, #0
 800b168:	d016      	beq.n	800b198 <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b16a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b16c:	3324      	adds	r3, #36	; 0x24
 800b16e:	4618      	mov	r0, r3
 800b170:	f000 ff14 	bl	800bf9c <xTaskRemoveFromEventList>
 800b174:	4603      	mov	r3, r0
 800b176:	2b00      	cmp	r3, #0
 800b178:	d00e      	beq.n	800b198 <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800b17a:	683b      	ldr	r3, [r7, #0]
 800b17c:	2b00      	cmp	r3, #0
 800b17e:	d00b      	beq.n	800b198 <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800b180:	683b      	ldr	r3, [r7, #0]
 800b182:	2201      	movs	r2, #1
 800b184:	601a      	str	r2, [r3, #0]
 800b186:	e007      	b.n	800b198 <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800b188:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b18c:	3301      	adds	r3, #1
 800b18e:	b2db      	uxtb	r3, r3
 800b190:	b25a      	sxtb	r2, r3
 800b192:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b194:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800b198:	2301      	movs	r3, #1
 800b19a:	637b      	str	r3, [r7, #52]	; 0x34
 800b19c:	e001      	b.n	800b1a2 <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800b19e:	2300      	movs	r3, #0
 800b1a0:	637b      	str	r3, [r7, #52]	; 0x34
 800b1a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1a4:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800b1a6:	68fb      	ldr	r3, [r7, #12]
 800b1a8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b1ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800b1ae:	4618      	mov	r0, r3
 800b1b0:	3738      	adds	r7, #56	; 0x38
 800b1b2:	46bd      	mov	sp, r7
 800b1b4:	bd80      	pop	{r7, pc}
	...

0800b1b8 <xQueueSemaphoreTake>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800b1b8:	b580      	push	{r7, lr}
 800b1ba:	b08e      	sub	sp, #56	; 0x38
 800b1bc:	af00      	add	r7, sp, #0
 800b1be:	6078      	str	r0, [r7, #4]
 800b1c0:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800b1c2:	2300      	movs	r3, #0
 800b1c4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800b1ca:	2300      	movs	r3, #0
 800b1cc:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800b1ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1d0:	2b00      	cmp	r3, #0
 800b1d2:	d109      	bne.n	800b1e8 <xQueueSemaphoreTake+0x30>
	__asm volatile
 800b1d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1d8:	f383 8811 	msr	BASEPRI, r3
 800b1dc:	f3bf 8f6f 	isb	sy
 800b1e0:	f3bf 8f4f 	dsb	sy
 800b1e4:	623b      	str	r3, [r7, #32]
 800b1e6:	e7fe      	b.n	800b1e6 <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800b1e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1ec:	2b00      	cmp	r3, #0
 800b1ee:	d009      	beq.n	800b204 <xQueueSemaphoreTake+0x4c>
 800b1f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1f4:	f383 8811 	msr	BASEPRI, r3
 800b1f8:	f3bf 8f6f 	isb	sy
 800b1fc:	f3bf 8f4f 	dsb	sy
 800b200:	61fb      	str	r3, [r7, #28]
 800b202:	e7fe      	b.n	800b202 <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b204:	f001 f884 	bl	800c310 <xTaskGetSchedulerState>
 800b208:	4603      	mov	r3, r0
 800b20a:	2b00      	cmp	r3, #0
 800b20c:	d102      	bne.n	800b214 <xQueueSemaphoreTake+0x5c>
 800b20e:	683b      	ldr	r3, [r7, #0]
 800b210:	2b00      	cmp	r3, #0
 800b212:	d101      	bne.n	800b218 <xQueueSemaphoreTake+0x60>
 800b214:	2301      	movs	r3, #1
 800b216:	e000      	b.n	800b21a <xQueueSemaphoreTake+0x62>
 800b218:	2300      	movs	r3, #0
 800b21a:	2b00      	cmp	r3, #0
 800b21c:	d109      	bne.n	800b232 <xQueueSemaphoreTake+0x7a>
 800b21e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b222:	f383 8811 	msr	BASEPRI, r3
 800b226:	f3bf 8f6f 	isb	sy
 800b22a:	f3bf 8f4f 	dsb	sy
 800b22e:	61bb      	str	r3, [r7, #24]
 800b230:	e7fe      	b.n	800b230 <xQueueSemaphoreTake+0x78>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800b232:	f001 fb99 	bl	800c968 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800b236:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b238:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b23a:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800b23c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b23e:	2b00      	cmp	r3, #0
 800b240:	d024      	beq.n	800b28c <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800b242:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b244:	1e5a      	subs	r2, r3, #1
 800b246:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b248:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b24a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b24c:	681b      	ldr	r3, [r3, #0]
 800b24e:	2b00      	cmp	r3, #0
 800b250:	d104      	bne.n	800b25c <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 800b252:	f001 fa23 	bl	800c69c <pvTaskIncrementMutexHeldCount>
 800b256:	4602      	mov	r2, r0
 800b258:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b25a:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b25c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b25e:	691b      	ldr	r3, [r3, #16]
 800b260:	2b00      	cmp	r3, #0
 800b262:	d00f      	beq.n	800b284 <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b264:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b266:	3310      	adds	r3, #16
 800b268:	4618      	mov	r0, r3
 800b26a:	f000 fe97 	bl	800bf9c <xTaskRemoveFromEventList>
 800b26e:	4603      	mov	r3, r0
 800b270:	2b00      	cmp	r3, #0
 800b272:	d007      	beq.n	800b284 <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800b274:	4b53      	ldr	r3, [pc, #332]	; (800b3c4 <xQueueSemaphoreTake+0x20c>)
 800b276:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b27a:	601a      	str	r2, [r3, #0]
 800b27c:	f3bf 8f4f 	dsb	sy
 800b280:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800b284:	f001 fb9e 	bl	800c9c4 <vPortExitCritical>
				return pdPASS;
 800b288:	2301      	movs	r3, #1
 800b28a:	e096      	b.n	800b3ba <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b28c:	683b      	ldr	r3, [r7, #0]
 800b28e:	2b00      	cmp	r3, #0
 800b290:	d110      	bne.n	800b2b4 <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800b292:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b294:	2b00      	cmp	r3, #0
 800b296:	d009      	beq.n	800b2ac <xQueueSemaphoreTake+0xf4>
 800b298:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b29c:	f383 8811 	msr	BASEPRI, r3
 800b2a0:	f3bf 8f6f 	isb	sy
 800b2a4:	f3bf 8f4f 	dsb	sy
 800b2a8:	617b      	str	r3, [r7, #20]
 800b2aa:	e7fe      	b.n	800b2aa <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800b2ac:	f001 fb8a 	bl	800c9c4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800b2b0:	2300      	movs	r3, #0
 800b2b2:	e082      	b.n	800b3ba <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b2b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b2b6:	2b00      	cmp	r3, #0
 800b2b8:	d106      	bne.n	800b2c8 <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b2ba:	f107 030c 	add.w	r3, r7, #12
 800b2be:	4618      	mov	r0, r3
 800b2c0:	f000 fece 	bl	800c060 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b2c4:	2301      	movs	r3, #1
 800b2c6:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b2c8:	f001 fb7c 	bl	800c9c4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b2cc:	f000 fc82 	bl	800bbd4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b2d0:	f001 fb4a 	bl	800c968 <vPortEnterCritical>
 800b2d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2d6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b2da:	b25b      	sxtb	r3, r3
 800b2dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b2e0:	d103      	bne.n	800b2ea <xQueueSemaphoreTake+0x132>
 800b2e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2e4:	2200      	movs	r2, #0
 800b2e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b2ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2ec:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b2f0:	b25b      	sxtb	r3, r3
 800b2f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b2f6:	d103      	bne.n	800b300 <xQueueSemaphoreTake+0x148>
 800b2f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2fa:	2200      	movs	r2, #0
 800b2fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b300:	f001 fb60 	bl	800c9c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b304:	463a      	mov	r2, r7
 800b306:	f107 030c 	add.w	r3, r7, #12
 800b30a:	4611      	mov	r1, r2
 800b30c:	4618      	mov	r0, r3
 800b30e:	f000 febd 	bl	800c08c <xTaskCheckForTimeOut>
 800b312:	4603      	mov	r3, r0
 800b314:	2b00      	cmp	r3, #0
 800b316:	d132      	bne.n	800b37e <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b318:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b31a:	f000 f9ed 	bl	800b6f8 <prvIsQueueEmpty>
 800b31e:	4603      	mov	r3, r0
 800b320:	2b00      	cmp	r3, #0
 800b322:	d026      	beq.n	800b372 <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b324:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b326:	681b      	ldr	r3, [r3, #0]
 800b328:	2b00      	cmp	r3, #0
 800b32a:	d109      	bne.n	800b340 <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 800b32c:	f001 fb1c 	bl	800c968 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 800b330:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b332:	685b      	ldr	r3, [r3, #4]
 800b334:	4618      	mov	r0, r3
 800b336:	f001 f809 	bl	800c34c <xTaskPriorityInherit>
 800b33a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800b33c:	f001 fb42 	bl	800c9c4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800b340:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b342:	3324      	adds	r3, #36	; 0x24
 800b344:	683a      	ldr	r2, [r7, #0]
 800b346:	4611      	mov	r1, r2
 800b348:	4618      	mov	r0, r3
 800b34a:	f000 fe03 	bl	800bf54 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b34e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b350:	f000 f980 	bl	800b654 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b354:	f000 fc4c 	bl	800bbf0 <xTaskResumeAll>
 800b358:	4603      	mov	r3, r0
 800b35a:	2b00      	cmp	r3, #0
 800b35c:	f47f af69 	bne.w	800b232 <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 800b360:	4b18      	ldr	r3, [pc, #96]	; (800b3c4 <xQueueSemaphoreTake+0x20c>)
 800b362:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b366:	601a      	str	r2, [r3, #0]
 800b368:	f3bf 8f4f 	dsb	sy
 800b36c:	f3bf 8f6f 	isb	sy
 800b370:	e75f      	b.n	800b232 <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800b372:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b374:	f000 f96e 	bl	800b654 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b378:	f000 fc3a 	bl	800bbf0 <xTaskResumeAll>
 800b37c:	e759      	b.n	800b232 <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800b37e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b380:	f000 f968 	bl	800b654 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b384:	f000 fc34 	bl	800bbf0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b388:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b38a:	f000 f9b5 	bl	800b6f8 <prvIsQueueEmpty>
 800b38e:	4603      	mov	r3, r0
 800b390:	2b00      	cmp	r3, #0
 800b392:	f43f af4e 	beq.w	800b232 <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800b396:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b398:	2b00      	cmp	r3, #0
 800b39a:	d00d      	beq.n	800b3b8 <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 800b39c:	f001 fae4 	bl	800c968 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800b3a0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b3a2:	f000 f8b0 	bl	800b506 <prvGetDisinheritPriorityAfterTimeout>
 800b3a6:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 800b3a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3aa:	685b      	ldr	r3, [r3, #4]
 800b3ac:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b3ae:	4618      	mov	r0, r3
 800b3b0:	f001 f8d6 	bl	800c560 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800b3b4:	f001 fb06 	bl	800c9c4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800b3b8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800b3ba:	4618      	mov	r0, r3
 800b3bc:	3738      	adds	r7, #56	; 0x38
 800b3be:	46bd      	mov	sp, r7
 800b3c0:	bd80      	pop	{r7, pc}
 800b3c2:	bf00      	nop
 800b3c4:	e000ed04 	.word	0xe000ed04

0800b3c8 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800b3c8:	b580      	push	{r7, lr}
 800b3ca:	b08e      	sub	sp, #56	; 0x38
 800b3cc:	af00      	add	r7, sp, #0
 800b3ce:	60f8      	str	r0, [r7, #12]
 800b3d0:	60b9      	str	r1, [r7, #8]
 800b3d2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800b3d4:	68fb      	ldr	r3, [r7, #12]
 800b3d6:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800b3d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	d109      	bne.n	800b3f2 <xQueueReceiveFromISR+0x2a>
 800b3de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3e2:	f383 8811 	msr	BASEPRI, r3
 800b3e6:	f3bf 8f6f 	isb	sy
 800b3ea:	f3bf 8f4f 	dsb	sy
 800b3ee:	623b      	str	r3, [r7, #32]
 800b3f0:	e7fe      	b.n	800b3f0 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b3f2:	68bb      	ldr	r3, [r7, #8]
 800b3f4:	2b00      	cmp	r3, #0
 800b3f6:	d103      	bne.n	800b400 <xQueueReceiveFromISR+0x38>
 800b3f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b3fc:	2b00      	cmp	r3, #0
 800b3fe:	d101      	bne.n	800b404 <xQueueReceiveFromISR+0x3c>
 800b400:	2301      	movs	r3, #1
 800b402:	e000      	b.n	800b406 <xQueueReceiveFromISR+0x3e>
 800b404:	2300      	movs	r3, #0
 800b406:	2b00      	cmp	r3, #0
 800b408:	d109      	bne.n	800b41e <xQueueReceiveFromISR+0x56>
 800b40a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b40e:	f383 8811 	msr	BASEPRI, r3
 800b412:	f3bf 8f6f 	isb	sy
 800b416:	f3bf 8f4f 	dsb	sy
 800b41a:	61fb      	str	r3, [r7, #28]
 800b41c:	e7fe      	b.n	800b41c <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b41e:	f001 fb5d 	bl	800cadc <vPortValidateInterruptPriority>
	__asm volatile
 800b422:	f3ef 8211 	mrs	r2, BASEPRI
 800b426:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b42a:	f383 8811 	msr	BASEPRI, r3
 800b42e:	f3bf 8f6f 	isb	sy
 800b432:	f3bf 8f4f 	dsb	sy
 800b436:	61ba      	str	r2, [r7, #24]
 800b438:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800b43a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b43c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b43e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b440:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b442:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b444:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b446:	2b00      	cmp	r3, #0
 800b448:	d02f      	beq.n	800b4aa <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800b44a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b44c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b450:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b454:	68b9      	ldr	r1, [r7, #8]
 800b456:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b458:	f000 f8d6 	bl	800b608 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b45c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b45e:	1e5a      	subs	r2, r3, #1
 800b460:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b462:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800b464:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b468:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b46c:	d112      	bne.n	800b494 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b46e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b470:	691b      	ldr	r3, [r3, #16]
 800b472:	2b00      	cmp	r3, #0
 800b474:	d016      	beq.n	800b4a4 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b476:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b478:	3310      	adds	r3, #16
 800b47a:	4618      	mov	r0, r3
 800b47c:	f000 fd8e 	bl	800bf9c <xTaskRemoveFromEventList>
 800b480:	4603      	mov	r3, r0
 800b482:	2b00      	cmp	r3, #0
 800b484:	d00e      	beq.n	800b4a4 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	2b00      	cmp	r3, #0
 800b48a:	d00b      	beq.n	800b4a4 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	2201      	movs	r2, #1
 800b490:	601a      	str	r2, [r3, #0]
 800b492:	e007      	b.n	800b4a4 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800b494:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b498:	3301      	adds	r3, #1
 800b49a:	b2db      	uxtb	r3, r3
 800b49c:	b25a      	sxtb	r2, r3
 800b49e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800b4a4:	2301      	movs	r3, #1
 800b4a6:	637b      	str	r3, [r7, #52]	; 0x34
 800b4a8:	e001      	b.n	800b4ae <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 800b4aa:	2300      	movs	r3, #0
 800b4ac:	637b      	str	r3, [r7, #52]	; 0x34
 800b4ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4b0:	613b      	str	r3, [r7, #16]
	__asm volatile
 800b4b2:	693b      	ldr	r3, [r7, #16]
 800b4b4:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b4b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800b4ba:	4618      	mov	r0, r3
 800b4bc:	3738      	adds	r7, #56	; 0x38
 800b4be:	46bd      	mov	sp, r7
 800b4c0:	bd80      	pop	{r7, pc}

0800b4c2 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800b4c2:	b580      	push	{r7, lr}
 800b4c4:	b084      	sub	sp, #16
 800b4c6:	af00      	add	r7, sp, #0
 800b4c8:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800b4ce:	68fb      	ldr	r3, [r7, #12]
 800b4d0:	2b00      	cmp	r3, #0
 800b4d2:	d109      	bne.n	800b4e8 <vQueueDelete+0x26>
	__asm volatile
 800b4d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4d8:	f383 8811 	msr	BASEPRI, r3
 800b4dc:	f3bf 8f6f 	isb	sy
 800b4e0:	f3bf 8f4f 	dsb	sy
 800b4e4:	60bb      	str	r3, [r7, #8]
 800b4e6:	e7fe      	b.n	800b4e6 <vQueueDelete+0x24>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800b4e8:	68f8      	ldr	r0, [r7, #12]
 800b4ea:	f000 f933 	bl	800b754 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800b4ee:	68fb      	ldr	r3, [r7, #12]
 800b4f0:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800b4f4:	2b00      	cmp	r3, #0
 800b4f6:	d102      	bne.n	800b4fe <vQueueDelete+0x3c>
		{
			vPortFree( pxQueue );
 800b4f8:	68f8      	ldr	r0, [r7, #12]
 800b4fa:	f001 fbed 	bl	800ccd8 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800b4fe:	bf00      	nop
 800b500:	3710      	adds	r7, #16
 800b502:	46bd      	mov	sp, r7
 800b504:	bd80      	pop	{r7, pc}

0800b506 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800b506:	b480      	push	{r7}
 800b508:	b085      	sub	sp, #20
 800b50a:	af00      	add	r7, sp, #0
 800b50c:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b512:	2b00      	cmp	r3, #0
 800b514:	d006      	beq.n	800b524 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b51a:	681b      	ldr	r3, [r3, #0]
 800b51c:	f1c3 0307 	rsb	r3, r3, #7
 800b520:	60fb      	str	r3, [r7, #12]
 800b522:	e001      	b.n	800b528 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800b524:	2300      	movs	r3, #0
 800b526:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800b528:	68fb      	ldr	r3, [r7, #12]
	}
 800b52a:	4618      	mov	r0, r3
 800b52c:	3714      	adds	r7, #20
 800b52e:	46bd      	mov	sp, r7
 800b530:	bc80      	pop	{r7}
 800b532:	4770      	bx	lr

0800b534 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800b534:	b580      	push	{r7, lr}
 800b536:	b086      	sub	sp, #24
 800b538:	af00      	add	r7, sp, #0
 800b53a:	60f8      	str	r0, [r7, #12]
 800b53c:	60b9      	str	r1, [r7, #8]
 800b53e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800b540:	2300      	movs	r3, #0
 800b542:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b544:	68fb      	ldr	r3, [r7, #12]
 800b546:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b548:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800b54a:	68fb      	ldr	r3, [r7, #12]
 800b54c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b54e:	2b00      	cmp	r3, #0
 800b550:	d10d      	bne.n	800b56e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b552:	68fb      	ldr	r3, [r7, #12]
 800b554:	681b      	ldr	r3, [r3, #0]
 800b556:	2b00      	cmp	r3, #0
 800b558:	d14d      	bne.n	800b5f6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800b55a:	68fb      	ldr	r3, [r7, #12]
 800b55c:	685b      	ldr	r3, [r3, #4]
 800b55e:	4618      	mov	r0, r3
 800b560:	f000 ff7a 	bl	800c458 <xTaskPriorityDisinherit>
 800b564:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800b566:	68fb      	ldr	r3, [r7, #12]
 800b568:	2200      	movs	r2, #0
 800b56a:	605a      	str	r2, [r3, #4]
 800b56c:	e043      	b.n	800b5f6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	2b00      	cmp	r3, #0
 800b572:	d119      	bne.n	800b5a8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800b574:	68fb      	ldr	r3, [r7, #12]
 800b576:	6898      	ldr	r0, [r3, #8]
 800b578:	68fb      	ldr	r3, [r7, #12]
 800b57a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b57c:	461a      	mov	r2, r3
 800b57e:	68b9      	ldr	r1, [r7, #8]
 800b580:	f001 fd1a 	bl	800cfb8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800b584:	68fb      	ldr	r3, [r7, #12]
 800b586:	689a      	ldr	r2, [r3, #8]
 800b588:	68fb      	ldr	r3, [r7, #12]
 800b58a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b58c:	441a      	add	r2, r3
 800b58e:	68fb      	ldr	r3, [r7, #12]
 800b590:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b592:	68fb      	ldr	r3, [r7, #12]
 800b594:	689a      	ldr	r2, [r3, #8]
 800b596:	68fb      	ldr	r3, [r7, #12]
 800b598:	685b      	ldr	r3, [r3, #4]
 800b59a:	429a      	cmp	r2, r3
 800b59c:	d32b      	bcc.n	800b5f6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800b59e:	68fb      	ldr	r3, [r7, #12]
 800b5a0:	681a      	ldr	r2, [r3, #0]
 800b5a2:	68fb      	ldr	r3, [r7, #12]
 800b5a4:	609a      	str	r2, [r3, #8]
 800b5a6:	e026      	b.n	800b5f6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b5a8:	68fb      	ldr	r3, [r7, #12]
 800b5aa:	68d8      	ldr	r0, [r3, #12]
 800b5ac:	68fb      	ldr	r3, [r7, #12]
 800b5ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b5b0:	461a      	mov	r2, r3
 800b5b2:	68b9      	ldr	r1, [r7, #8]
 800b5b4:	f001 fd00 	bl	800cfb8 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800b5b8:	68fb      	ldr	r3, [r7, #12]
 800b5ba:	68da      	ldr	r2, [r3, #12]
 800b5bc:	68fb      	ldr	r3, [r7, #12]
 800b5be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b5c0:	425b      	negs	r3, r3
 800b5c2:	441a      	add	r2, r3
 800b5c4:	68fb      	ldr	r3, [r7, #12]
 800b5c6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b5c8:	68fb      	ldr	r3, [r7, #12]
 800b5ca:	68da      	ldr	r2, [r3, #12]
 800b5cc:	68fb      	ldr	r3, [r7, #12]
 800b5ce:	681b      	ldr	r3, [r3, #0]
 800b5d0:	429a      	cmp	r2, r3
 800b5d2:	d207      	bcs.n	800b5e4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800b5d4:	68fb      	ldr	r3, [r7, #12]
 800b5d6:	685a      	ldr	r2, [r3, #4]
 800b5d8:	68fb      	ldr	r3, [r7, #12]
 800b5da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b5dc:	425b      	negs	r3, r3
 800b5de:	441a      	add	r2, r3
 800b5e0:	68fb      	ldr	r3, [r7, #12]
 800b5e2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	2b02      	cmp	r3, #2
 800b5e8:	d105      	bne.n	800b5f6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b5ea:	693b      	ldr	r3, [r7, #16]
 800b5ec:	2b00      	cmp	r3, #0
 800b5ee:	d002      	beq.n	800b5f6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800b5f0:	693b      	ldr	r3, [r7, #16]
 800b5f2:	3b01      	subs	r3, #1
 800b5f4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b5f6:	693b      	ldr	r3, [r7, #16]
 800b5f8:	1c5a      	adds	r2, r3, #1
 800b5fa:	68fb      	ldr	r3, [r7, #12]
 800b5fc:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800b5fe:	697b      	ldr	r3, [r7, #20]
}
 800b600:	4618      	mov	r0, r3
 800b602:	3718      	adds	r7, #24
 800b604:	46bd      	mov	sp, r7
 800b606:	bd80      	pop	{r7, pc}

0800b608 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800b608:	b580      	push	{r7, lr}
 800b60a:	b082      	sub	sp, #8
 800b60c:	af00      	add	r7, sp, #0
 800b60e:	6078      	str	r0, [r7, #4]
 800b610:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b616:	2b00      	cmp	r3, #0
 800b618:	d018      	beq.n	800b64c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	68da      	ldr	r2, [r3, #12]
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b622:	441a      	add	r2, r3
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	68da      	ldr	r2, [r3, #12]
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	685b      	ldr	r3, [r3, #4]
 800b630:	429a      	cmp	r2, r3
 800b632:	d303      	bcc.n	800b63c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	681a      	ldr	r2, [r3, #0]
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	68d9      	ldr	r1, [r3, #12]
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b644:	461a      	mov	r2, r3
 800b646:	6838      	ldr	r0, [r7, #0]
 800b648:	f001 fcb6 	bl	800cfb8 <memcpy>
	}
}
 800b64c:	bf00      	nop
 800b64e:	3708      	adds	r7, #8
 800b650:	46bd      	mov	sp, r7
 800b652:	bd80      	pop	{r7, pc}

0800b654 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800b654:	b580      	push	{r7, lr}
 800b656:	b084      	sub	sp, #16
 800b658:	af00      	add	r7, sp, #0
 800b65a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800b65c:	f001 f984 	bl	800c968 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b666:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b668:	e011      	b.n	800b68e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b66e:	2b00      	cmp	r3, #0
 800b670:	d012      	beq.n	800b698 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	3324      	adds	r3, #36	; 0x24
 800b676:	4618      	mov	r0, r3
 800b678:	f000 fc90 	bl	800bf9c <xTaskRemoveFromEventList>
 800b67c:	4603      	mov	r3, r0
 800b67e:	2b00      	cmp	r3, #0
 800b680:	d001      	beq.n	800b686 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800b682:	f000 fd63 	bl	800c14c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800b686:	7bfb      	ldrb	r3, [r7, #15]
 800b688:	3b01      	subs	r3, #1
 800b68a:	b2db      	uxtb	r3, r3
 800b68c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b68e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b692:	2b00      	cmp	r3, #0
 800b694:	dce9      	bgt.n	800b66a <prvUnlockQueue+0x16>
 800b696:	e000      	b.n	800b69a <prvUnlockQueue+0x46>
					break;
 800b698:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	22ff      	movs	r2, #255	; 0xff
 800b69e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800b6a2:	f001 f98f 	bl	800c9c4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800b6a6:	f001 f95f 	bl	800c968 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b6b0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b6b2:	e011      	b.n	800b6d8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	691b      	ldr	r3, [r3, #16]
 800b6b8:	2b00      	cmp	r3, #0
 800b6ba:	d012      	beq.n	800b6e2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	3310      	adds	r3, #16
 800b6c0:	4618      	mov	r0, r3
 800b6c2:	f000 fc6b 	bl	800bf9c <xTaskRemoveFromEventList>
 800b6c6:	4603      	mov	r3, r0
 800b6c8:	2b00      	cmp	r3, #0
 800b6ca:	d001      	beq.n	800b6d0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800b6cc:	f000 fd3e 	bl	800c14c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800b6d0:	7bbb      	ldrb	r3, [r7, #14]
 800b6d2:	3b01      	subs	r3, #1
 800b6d4:	b2db      	uxtb	r3, r3
 800b6d6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b6d8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b6dc:	2b00      	cmp	r3, #0
 800b6de:	dce9      	bgt.n	800b6b4 <prvUnlockQueue+0x60>
 800b6e0:	e000      	b.n	800b6e4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800b6e2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	22ff      	movs	r2, #255	; 0xff
 800b6e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800b6ec:	f001 f96a 	bl	800c9c4 <vPortExitCritical>
}
 800b6f0:	bf00      	nop
 800b6f2:	3710      	adds	r7, #16
 800b6f4:	46bd      	mov	sp, r7
 800b6f6:	bd80      	pop	{r7, pc}

0800b6f8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800b6f8:	b580      	push	{r7, lr}
 800b6fa:	b084      	sub	sp, #16
 800b6fc:	af00      	add	r7, sp, #0
 800b6fe:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b700:	f001 f932 	bl	800c968 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b708:	2b00      	cmp	r3, #0
 800b70a:	d102      	bne.n	800b712 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800b70c:	2301      	movs	r3, #1
 800b70e:	60fb      	str	r3, [r7, #12]
 800b710:	e001      	b.n	800b716 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800b712:	2300      	movs	r3, #0
 800b714:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b716:	f001 f955 	bl	800c9c4 <vPortExitCritical>

	return xReturn;
 800b71a:	68fb      	ldr	r3, [r7, #12]
}
 800b71c:	4618      	mov	r0, r3
 800b71e:	3710      	adds	r7, #16
 800b720:	46bd      	mov	sp, r7
 800b722:	bd80      	pop	{r7, pc}

0800b724 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800b724:	b580      	push	{r7, lr}
 800b726:	b084      	sub	sp, #16
 800b728:	af00      	add	r7, sp, #0
 800b72a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b72c:	f001 f91c 	bl	800c968 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b738:	429a      	cmp	r2, r3
 800b73a:	d102      	bne.n	800b742 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800b73c:	2301      	movs	r3, #1
 800b73e:	60fb      	str	r3, [r7, #12]
 800b740:	e001      	b.n	800b746 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800b742:	2300      	movs	r3, #0
 800b744:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b746:	f001 f93d 	bl	800c9c4 <vPortExitCritical>

	return xReturn;
 800b74a:	68fb      	ldr	r3, [r7, #12]
}
 800b74c:	4618      	mov	r0, r3
 800b74e:	3710      	adds	r7, #16
 800b750:	46bd      	mov	sp, r7
 800b752:	bd80      	pop	{r7, pc}

0800b754 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800b754:	b480      	push	{r7}
 800b756:	b085      	sub	sp, #20
 800b758:	af00      	add	r7, sp, #0
 800b75a:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b75c:	2300      	movs	r3, #0
 800b75e:	60fb      	str	r3, [r7, #12]
 800b760:	e016      	b.n	800b790 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800b762:	4a0f      	ldr	r2, [pc, #60]	; (800b7a0 <vQueueUnregisterQueue+0x4c>)
 800b764:	68fb      	ldr	r3, [r7, #12]
 800b766:	00db      	lsls	r3, r3, #3
 800b768:	4413      	add	r3, r2
 800b76a:	685b      	ldr	r3, [r3, #4]
 800b76c:	687a      	ldr	r2, [r7, #4]
 800b76e:	429a      	cmp	r2, r3
 800b770:	d10b      	bne.n	800b78a <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800b772:	4a0b      	ldr	r2, [pc, #44]	; (800b7a0 <vQueueUnregisterQueue+0x4c>)
 800b774:	68fb      	ldr	r3, [r7, #12]
 800b776:	2100      	movs	r1, #0
 800b778:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800b77c:	4a08      	ldr	r2, [pc, #32]	; (800b7a0 <vQueueUnregisterQueue+0x4c>)
 800b77e:	68fb      	ldr	r3, [r7, #12]
 800b780:	00db      	lsls	r3, r3, #3
 800b782:	4413      	add	r3, r2
 800b784:	2200      	movs	r2, #0
 800b786:	605a      	str	r2, [r3, #4]
				break;
 800b788:	e005      	b.n	800b796 <vQueueUnregisterQueue+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b78a:	68fb      	ldr	r3, [r7, #12]
 800b78c:	3301      	adds	r3, #1
 800b78e:	60fb      	str	r3, [r7, #12]
 800b790:	68fb      	ldr	r3, [r7, #12]
 800b792:	2b07      	cmp	r3, #7
 800b794:	d9e5      	bls.n	800b762 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800b796:	bf00      	nop
 800b798:	3714      	adds	r7, #20
 800b79a:	46bd      	mov	sp, r7
 800b79c:	bc80      	pop	{r7}
 800b79e:	4770      	bx	lr
 800b7a0:	20003008 	.word	0x20003008

0800b7a4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800b7a4:	b580      	push	{r7, lr}
 800b7a6:	b08e      	sub	sp, #56	; 0x38
 800b7a8:	af04      	add	r7, sp, #16
 800b7aa:	60f8      	str	r0, [r7, #12]
 800b7ac:	60b9      	str	r1, [r7, #8]
 800b7ae:	607a      	str	r2, [r7, #4]
 800b7b0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800b7b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b7b4:	2b00      	cmp	r3, #0
 800b7b6:	d109      	bne.n	800b7cc <xTaskCreateStatic+0x28>
 800b7b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7bc:	f383 8811 	msr	BASEPRI, r3
 800b7c0:	f3bf 8f6f 	isb	sy
 800b7c4:	f3bf 8f4f 	dsb	sy
 800b7c8:	623b      	str	r3, [r7, #32]
 800b7ca:	e7fe      	b.n	800b7ca <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 800b7cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7ce:	2b00      	cmp	r3, #0
 800b7d0:	d109      	bne.n	800b7e6 <xTaskCreateStatic+0x42>
 800b7d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7d6:	f383 8811 	msr	BASEPRI, r3
 800b7da:	f3bf 8f6f 	isb	sy
 800b7de:	f3bf 8f4f 	dsb	sy
 800b7e2:	61fb      	str	r3, [r7, #28]
 800b7e4:	e7fe      	b.n	800b7e4 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800b7e6:	2354      	movs	r3, #84	; 0x54
 800b7e8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800b7ea:	693b      	ldr	r3, [r7, #16]
 800b7ec:	2b54      	cmp	r3, #84	; 0x54
 800b7ee:	d009      	beq.n	800b804 <xTaskCreateStatic+0x60>
 800b7f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7f4:	f383 8811 	msr	BASEPRI, r3
 800b7f8:	f3bf 8f6f 	isb	sy
 800b7fc:	f3bf 8f4f 	dsb	sy
 800b800:	61bb      	str	r3, [r7, #24]
 800b802:	e7fe      	b.n	800b802 <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800b804:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b806:	2b00      	cmp	r3, #0
 800b808:	d01e      	beq.n	800b848 <xTaskCreateStatic+0xa4>
 800b80a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b80c:	2b00      	cmp	r3, #0
 800b80e:	d01b      	beq.n	800b848 <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b810:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b812:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800b814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b816:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b818:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800b81a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b81c:	2202      	movs	r2, #2
 800b81e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800b822:	2300      	movs	r3, #0
 800b824:	9303      	str	r3, [sp, #12]
 800b826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b828:	9302      	str	r3, [sp, #8]
 800b82a:	f107 0314 	add.w	r3, r7, #20
 800b82e:	9301      	str	r3, [sp, #4]
 800b830:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b832:	9300      	str	r3, [sp, #0]
 800b834:	683b      	ldr	r3, [r7, #0]
 800b836:	687a      	ldr	r2, [r7, #4]
 800b838:	68b9      	ldr	r1, [r7, #8]
 800b83a:	68f8      	ldr	r0, [r7, #12]
 800b83c:	f000 f850 	bl	800b8e0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b840:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b842:	f000 f8cb 	bl	800b9dc <prvAddNewTaskToReadyList>
 800b846:	e001      	b.n	800b84c <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 800b848:	2300      	movs	r3, #0
 800b84a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800b84c:	697b      	ldr	r3, [r7, #20]
	}
 800b84e:	4618      	mov	r0, r3
 800b850:	3728      	adds	r7, #40	; 0x28
 800b852:	46bd      	mov	sp, r7
 800b854:	bd80      	pop	{r7, pc}

0800b856 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800b856:	b580      	push	{r7, lr}
 800b858:	b08c      	sub	sp, #48	; 0x30
 800b85a:	af04      	add	r7, sp, #16
 800b85c:	60f8      	str	r0, [r7, #12]
 800b85e:	60b9      	str	r1, [r7, #8]
 800b860:	603b      	str	r3, [r7, #0]
 800b862:	4613      	mov	r3, r2
 800b864:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b866:	88fb      	ldrh	r3, [r7, #6]
 800b868:	009b      	lsls	r3, r3, #2
 800b86a:	4618      	mov	r0, r3
 800b86c:	f001 f972 	bl	800cb54 <pvPortMalloc>
 800b870:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800b872:	697b      	ldr	r3, [r7, #20]
 800b874:	2b00      	cmp	r3, #0
 800b876:	d00e      	beq.n	800b896 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800b878:	2054      	movs	r0, #84	; 0x54
 800b87a:	f001 f96b 	bl	800cb54 <pvPortMalloc>
 800b87e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800b880:	69fb      	ldr	r3, [r7, #28]
 800b882:	2b00      	cmp	r3, #0
 800b884:	d003      	beq.n	800b88e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800b886:	69fb      	ldr	r3, [r7, #28]
 800b888:	697a      	ldr	r2, [r7, #20]
 800b88a:	631a      	str	r2, [r3, #48]	; 0x30
 800b88c:	e005      	b.n	800b89a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800b88e:	6978      	ldr	r0, [r7, #20]
 800b890:	f001 fa22 	bl	800ccd8 <vPortFree>
 800b894:	e001      	b.n	800b89a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800b896:	2300      	movs	r3, #0
 800b898:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800b89a:	69fb      	ldr	r3, [r7, #28]
 800b89c:	2b00      	cmp	r3, #0
 800b89e:	d017      	beq.n	800b8d0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800b8a0:	69fb      	ldr	r3, [r7, #28]
 800b8a2:	2200      	movs	r2, #0
 800b8a4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b8a8:	88fa      	ldrh	r2, [r7, #6]
 800b8aa:	2300      	movs	r3, #0
 800b8ac:	9303      	str	r3, [sp, #12]
 800b8ae:	69fb      	ldr	r3, [r7, #28]
 800b8b0:	9302      	str	r3, [sp, #8]
 800b8b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8b4:	9301      	str	r3, [sp, #4]
 800b8b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8b8:	9300      	str	r3, [sp, #0]
 800b8ba:	683b      	ldr	r3, [r7, #0]
 800b8bc:	68b9      	ldr	r1, [r7, #8]
 800b8be:	68f8      	ldr	r0, [r7, #12]
 800b8c0:	f000 f80e 	bl	800b8e0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b8c4:	69f8      	ldr	r0, [r7, #28]
 800b8c6:	f000 f889 	bl	800b9dc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b8ca:	2301      	movs	r3, #1
 800b8cc:	61bb      	str	r3, [r7, #24]
 800b8ce:	e002      	b.n	800b8d6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b8d0:	f04f 33ff 	mov.w	r3, #4294967295
 800b8d4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800b8d6:	69bb      	ldr	r3, [r7, #24]
	}
 800b8d8:	4618      	mov	r0, r3
 800b8da:	3720      	adds	r7, #32
 800b8dc:	46bd      	mov	sp, r7
 800b8de:	bd80      	pop	{r7, pc}

0800b8e0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800b8e0:	b580      	push	{r7, lr}
 800b8e2:	b088      	sub	sp, #32
 800b8e4:	af00      	add	r7, sp, #0
 800b8e6:	60f8      	str	r0, [r7, #12]
 800b8e8:	60b9      	str	r1, [r7, #8]
 800b8ea:	607a      	str	r2, [r7, #4]
 800b8ec:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800b8ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800b8f8:	3b01      	subs	r3, #1
 800b8fa:	009b      	lsls	r3, r3, #2
 800b8fc:	4413      	add	r3, r2
 800b8fe:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800b900:	69bb      	ldr	r3, [r7, #24]
 800b902:	f023 0307 	bic.w	r3, r3, #7
 800b906:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800b908:	69bb      	ldr	r3, [r7, #24]
 800b90a:	f003 0307 	and.w	r3, r3, #7
 800b90e:	2b00      	cmp	r3, #0
 800b910:	d009      	beq.n	800b926 <prvInitialiseNewTask+0x46>
 800b912:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b916:	f383 8811 	msr	BASEPRI, r3
 800b91a:	f3bf 8f6f 	isb	sy
 800b91e:	f3bf 8f4f 	dsb	sy
 800b922:	617b      	str	r3, [r7, #20]
 800b924:	e7fe      	b.n	800b924 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b926:	2300      	movs	r3, #0
 800b928:	61fb      	str	r3, [r7, #28]
 800b92a:	e012      	b.n	800b952 <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b92c:	68ba      	ldr	r2, [r7, #8]
 800b92e:	69fb      	ldr	r3, [r7, #28]
 800b930:	4413      	add	r3, r2
 800b932:	7819      	ldrb	r1, [r3, #0]
 800b934:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b936:	69fb      	ldr	r3, [r7, #28]
 800b938:	4413      	add	r3, r2
 800b93a:	3334      	adds	r3, #52	; 0x34
 800b93c:	460a      	mov	r2, r1
 800b93e:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800b940:	68ba      	ldr	r2, [r7, #8]
 800b942:	69fb      	ldr	r3, [r7, #28]
 800b944:	4413      	add	r3, r2
 800b946:	781b      	ldrb	r3, [r3, #0]
 800b948:	2b00      	cmp	r3, #0
 800b94a:	d006      	beq.n	800b95a <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b94c:	69fb      	ldr	r3, [r7, #28]
 800b94e:	3301      	adds	r3, #1
 800b950:	61fb      	str	r3, [r7, #28]
 800b952:	69fb      	ldr	r3, [r7, #28]
 800b954:	2b0f      	cmp	r3, #15
 800b956:	d9e9      	bls.n	800b92c <prvInitialiseNewTask+0x4c>
 800b958:	e000      	b.n	800b95c <prvInitialiseNewTask+0x7c>
		{
			break;
 800b95a:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b95c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b95e:	2200      	movs	r2, #0
 800b960:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b964:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b966:	2b06      	cmp	r3, #6
 800b968:	d901      	bls.n	800b96e <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b96a:	2306      	movs	r3, #6
 800b96c:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800b96e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b970:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b972:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800b974:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b976:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b978:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800b97a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b97c:	2200      	movs	r2, #0
 800b97e:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b980:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b982:	3304      	adds	r3, #4
 800b984:	4618      	mov	r0, r3
 800b986:	f7ff f835 	bl	800a9f4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b98a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b98c:	3318      	adds	r3, #24
 800b98e:	4618      	mov	r0, r3
 800b990:	f7ff f830 	bl	800a9f4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b994:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b996:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b998:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b99a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b99c:	f1c3 0207 	rsb	r2, r3, #7
 800b9a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9a2:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b9a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9a6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b9a8:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800b9aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9ac:	2200      	movs	r2, #0
 800b9ae:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b9b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9b2:	2200      	movs	r2, #0
 800b9b4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b9b8:	683a      	ldr	r2, [r7, #0]
 800b9ba:	68f9      	ldr	r1, [r7, #12]
 800b9bc:	69b8      	ldr	r0, [r7, #24]
 800b9be:	f000 fee7 	bl	800c790 <pxPortInitialiseStack>
 800b9c2:	4602      	mov	r2, r0
 800b9c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9c6:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800b9c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9ca:	2b00      	cmp	r3, #0
 800b9cc:	d002      	beq.n	800b9d4 <prvInitialiseNewTask+0xf4>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b9ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b9d2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b9d4:	bf00      	nop
 800b9d6:	3720      	adds	r7, #32
 800b9d8:	46bd      	mov	sp, r7
 800b9da:	bd80      	pop	{r7, pc}

0800b9dc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b9dc:	b580      	push	{r7, lr}
 800b9de:	b082      	sub	sp, #8
 800b9e0:	af00      	add	r7, sp, #0
 800b9e2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b9e4:	f000 ffc0 	bl	800c968 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b9e8:	4b2a      	ldr	r3, [pc, #168]	; (800ba94 <prvAddNewTaskToReadyList+0xb8>)
 800b9ea:	681b      	ldr	r3, [r3, #0]
 800b9ec:	3301      	adds	r3, #1
 800b9ee:	4a29      	ldr	r2, [pc, #164]	; (800ba94 <prvAddNewTaskToReadyList+0xb8>)
 800b9f0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b9f2:	4b29      	ldr	r3, [pc, #164]	; (800ba98 <prvAddNewTaskToReadyList+0xbc>)
 800b9f4:	681b      	ldr	r3, [r3, #0]
 800b9f6:	2b00      	cmp	r3, #0
 800b9f8:	d109      	bne.n	800ba0e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b9fa:	4a27      	ldr	r2, [pc, #156]	; (800ba98 <prvAddNewTaskToReadyList+0xbc>)
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800ba00:	4b24      	ldr	r3, [pc, #144]	; (800ba94 <prvAddNewTaskToReadyList+0xb8>)
 800ba02:	681b      	ldr	r3, [r3, #0]
 800ba04:	2b01      	cmp	r3, #1
 800ba06:	d110      	bne.n	800ba2a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800ba08:	f000 fbc4 	bl	800c194 <prvInitialiseTaskLists>
 800ba0c:	e00d      	b.n	800ba2a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800ba0e:	4b23      	ldr	r3, [pc, #140]	; (800ba9c <prvAddNewTaskToReadyList+0xc0>)
 800ba10:	681b      	ldr	r3, [r3, #0]
 800ba12:	2b00      	cmp	r3, #0
 800ba14:	d109      	bne.n	800ba2a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800ba16:	4b20      	ldr	r3, [pc, #128]	; (800ba98 <prvAddNewTaskToReadyList+0xbc>)
 800ba18:	681b      	ldr	r3, [r3, #0]
 800ba1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba20:	429a      	cmp	r2, r3
 800ba22:	d802      	bhi.n	800ba2a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800ba24:	4a1c      	ldr	r2, [pc, #112]	; (800ba98 <prvAddNewTaskToReadyList+0xbc>)
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800ba2a:	4b1d      	ldr	r3, [pc, #116]	; (800baa0 <prvAddNewTaskToReadyList+0xc4>)
 800ba2c:	681b      	ldr	r3, [r3, #0]
 800ba2e:	3301      	adds	r3, #1
 800ba30:	4a1b      	ldr	r2, [pc, #108]	; (800baa0 <prvAddNewTaskToReadyList+0xc4>)
 800ba32:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba38:	2201      	movs	r2, #1
 800ba3a:	409a      	lsls	r2, r3
 800ba3c:	4b19      	ldr	r3, [pc, #100]	; (800baa4 <prvAddNewTaskToReadyList+0xc8>)
 800ba3e:	681b      	ldr	r3, [r3, #0]
 800ba40:	4313      	orrs	r3, r2
 800ba42:	4a18      	ldr	r2, [pc, #96]	; (800baa4 <prvAddNewTaskToReadyList+0xc8>)
 800ba44:	6013      	str	r3, [r2, #0]
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba4a:	4613      	mov	r3, r2
 800ba4c:	009b      	lsls	r3, r3, #2
 800ba4e:	4413      	add	r3, r2
 800ba50:	009b      	lsls	r3, r3, #2
 800ba52:	4a15      	ldr	r2, [pc, #84]	; (800baa8 <prvAddNewTaskToReadyList+0xcc>)
 800ba54:	441a      	add	r2, r3
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	3304      	adds	r3, #4
 800ba5a:	4619      	mov	r1, r3
 800ba5c:	4610      	mov	r0, r2
 800ba5e:	f7fe ffd5 	bl	800aa0c <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800ba62:	f000 ffaf 	bl	800c9c4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800ba66:	4b0d      	ldr	r3, [pc, #52]	; (800ba9c <prvAddNewTaskToReadyList+0xc0>)
 800ba68:	681b      	ldr	r3, [r3, #0]
 800ba6a:	2b00      	cmp	r3, #0
 800ba6c:	d00e      	beq.n	800ba8c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800ba6e:	4b0a      	ldr	r3, [pc, #40]	; (800ba98 <prvAddNewTaskToReadyList+0xbc>)
 800ba70:	681b      	ldr	r3, [r3, #0]
 800ba72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba78:	429a      	cmp	r2, r3
 800ba7a:	d207      	bcs.n	800ba8c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800ba7c:	4b0b      	ldr	r3, [pc, #44]	; (800baac <prvAddNewTaskToReadyList+0xd0>)
 800ba7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ba82:	601a      	str	r2, [r3, #0]
 800ba84:	f3bf 8f4f 	dsb	sy
 800ba88:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ba8c:	bf00      	nop
 800ba8e:	3708      	adds	r7, #8
 800ba90:	46bd      	mov	sp, r7
 800ba92:	bd80      	pop	{r7, pc}
 800ba94:	20000640 	.word	0x20000640
 800ba98:	20000540 	.word	0x20000540
 800ba9c:	2000064c 	.word	0x2000064c
 800baa0:	2000065c 	.word	0x2000065c
 800baa4:	20000648 	.word	0x20000648
 800baa8:	20000544 	.word	0x20000544
 800baac:	e000ed04 	.word	0xe000ed04

0800bab0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800bab0:	b580      	push	{r7, lr}
 800bab2:	b084      	sub	sp, #16
 800bab4:	af00      	add	r7, sp, #0
 800bab6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800bab8:	2300      	movs	r3, #0
 800baba:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	2b00      	cmp	r3, #0
 800bac0:	d016      	beq.n	800baf0 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800bac2:	4b13      	ldr	r3, [pc, #76]	; (800bb10 <vTaskDelay+0x60>)
 800bac4:	681b      	ldr	r3, [r3, #0]
 800bac6:	2b00      	cmp	r3, #0
 800bac8:	d009      	beq.n	800bade <vTaskDelay+0x2e>
 800baca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bace:	f383 8811 	msr	BASEPRI, r3
 800bad2:	f3bf 8f6f 	isb	sy
 800bad6:	f3bf 8f4f 	dsb	sy
 800bada:	60bb      	str	r3, [r7, #8]
 800badc:	e7fe      	b.n	800badc <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800bade:	f000 f879 	bl	800bbd4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800bae2:	2100      	movs	r1, #0
 800bae4:	6878      	ldr	r0, [r7, #4]
 800bae6:	f000 fded 	bl	800c6c4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800baea:	f000 f881 	bl	800bbf0 <xTaskResumeAll>
 800baee:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800baf0:	68fb      	ldr	r3, [r7, #12]
 800baf2:	2b00      	cmp	r3, #0
 800baf4:	d107      	bne.n	800bb06 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 800baf6:	4b07      	ldr	r3, [pc, #28]	; (800bb14 <vTaskDelay+0x64>)
 800baf8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bafc:	601a      	str	r2, [r3, #0]
 800bafe:	f3bf 8f4f 	dsb	sy
 800bb02:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800bb06:	bf00      	nop
 800bb08:	3710      	adds	r7, #16
 800bb0a:	46bd      	mov	sp, r7
 800bb0c:	bd80      	pop	{r7, pc}
 800bb0e:	bf00      	nop
 800bb10:	20000668 	.word	0x20000668
 800bb14:	e000ed04 	.word	0xe000ed04

0800bb18 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800bb18:	b580      	push	{r7, lr}
 800bb1a:	b08a      	sub	sp, #40	; 0x28
 800bb1c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800bb1e:	2300      	movs	r3, #0
 800bb20:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800bb22:	2300      	movs	r3, #0
 800bb24:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800bb26:	463a      	mov	r2, r7
 800bb28:	1d39      	adds	r1, r7, #4
 800bb2a:	f107 0308 	add.w	r3, r7, #8
 800bb2e:	4618      	mov	r0, r3
 800bb30:	f7f6 fbee 	bl	8002310 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800bb34:	6839      	ldr	r1, [r7, #0]
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	68ba      	ldr	r2, [r7, #8]
 800bb3a:	9202      	str	r2, [sp, #8]
 800bb3c:	9301      	str	r3, [sp, #4]
 800bb3e:	2300      	movs	r3, #0
 800bb40:	9300      	str	r3, [sp, #0]
 800bb42:	2300      	movs	r3, #0
 800bb44:	460a      	mov	r2, r1
 800bb46:	491d      	ldr	r1, [pc, #116]	; (800bbbc <vTaskStartScheduler+0xa4>)
 800bb48:	481d      	ldr	r0, [pc, #116]	; (800bbc0 <vTaskStartScheduler+0xa8>)
 800bb4a:	f7ff fe2b 	bl	800b7a4 <xTaskCreateStatic>
 800bb4e:	4602      	mov	r2, r0
 800bb50:	4b1c      	ldr	r3, [pc, #112]	; (800bbc4 <vTaskStartScheduler+0xac>)
 800bb52:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800bb54:	4b1b      	ldr	r3, [pc, #108]	; (800bbc4 <vTaskStartScheduler+0xac>)
 800bb56:	681b      	ldr	r3, [r3, #0]
 800bb58:	2b00      	cmp	r3, #0
 800bb5a:	d002      	beq.n	800bb62 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800bb5c:	2301      	movs	r3, #1
 800bb5e:	617b      	str	r3, [r7, #20]
 800bb60:	e001      	b.n	800bb66 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800bb62:	2300      	movs	r3, #0
 800bb64:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800bb66:	697b      	ldr	r3, [r7, #20]
 800bb68:	2b01      	cmp	r3, #1
 800bb6a:	d115      	bne.n	800bb98 <vTaskStartScheduler+0x80>
 800bb6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb70:	f383 8811 	msr	BASEPRI, r3
 800bb74:	f3bf 8f6f 	isb	sy
 800bb78:	f3bf 8f4f 	dsb	sy
 800bb7c:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800bb7e:	4b12      	ldr	r3, [pc, #72]	; (800bbc8 <vTaskStartScheduler+0xb0>)
 800bb80:	f04f 32ff 	mov.w	r2, #4294967295
 800bb84:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800bb86:	4b11      	ldr	r3, [pc, #68]	; (800bbcc <vTaskStartScheduler+0xb4>)
 800bb88:	2201      	movs	r2, #1
 800bb8a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800bb8c:	4b10      	ldr	r3, [pc, #64]	; (800bbd0 <vTaskStartScheduler+0xb8>)
 800bb8e:	2200      	movs	r2, #0
 800bb90:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800bb92:	f000 fe79 	bl	800c888 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800bb96:	e00d      	b.n	800bbb4 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800bb98:	697b      	ldr	r3, [r7, #20]
 800bb9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb9e:	d109      	bne.n	800bbb4 <vTaskStartScheduler+0x9c>
 800bba0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bba4:	f383 8811 	msr	BASEPRI, r3
 800bba8:	f3bf 8f6f 	isb	sy
 800bbac:	f3bf 8f4f 	dsb	sy
 800bbb0:	60fb      	str	r3, [r7, #12]
 800bbb2:	e7fe      	b.n	800bbb2 <vTaskStartScheduler+0x9a>
}
 800bbb4:	bf00      	nop
 800bbb6:	3718      	adds	r7, #24
 800bbb8:	46bd      	mov	sp, r7
 800bbba:	bd80      	pop	{r7, pc}
 800bbbc:	0800e5b8 	.word	0x0800e5b8
 800bbc0:	0800c165 	.word	0x0800c165
 800bbc4:	20000664 	.word	0x20000664
 800bbc8:	20000660 	.word	0x20000660
 800bbcc:	2000064c 	.word	0x2000064c
 800bbd0:	20000644 	.word	0x20000644

0800bbd4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800bbd4:	b480      	push	{r7}
 800bbd6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800bbd8:	4b04      	ldr	r3, [pc, #16]	; (800bbec <vTaskSuspendAll+0x18>)
 800bbda:	681b      	ldr	r3, [r3, #0]
 800bbdc:	3301      	adds	r3, #1
 800bbde:	4a03      	ldr	r2, [pc, #12]	; (800bbec <vTaskSuspendAll+0x18>)
 800bbe0:	6013      	str	r3, [r2, #0]
}
 800bbe2:	bf00      	nop
 800bbe4:	46bd      	mov	sp, r7
 800bbe6:	bc80      	pop	{r7}
 800bbe8:	4770      	bx	lr
 800bbea:	bf00      	nop
 800bbec:	20000668 	.word	0x20000668

0800bbf0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800bbf0:	b580      	push	{r7, lr}
 800bbf2:	b084      	sub	sp, #16
 800bbf4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800bbf6:	2300      	movs	r3, #0
 800bbf8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800bbfa:	2300      	movs	r3, #0
 800bbfc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800bbfe:	4b41      	ldr	r3, [pc, #260]	; (800bd04 <xTaskResumeAll+0x114>)
 800bc00:	681b      	ldr	r3, [r3, #0]
 800bc02:	2b00      	cmp	r3, #0
 800bc04:	d109      	bne.n	800bc1a <xTaskResumeAll+0x2a>
 800bc06:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc0a:	f383 8811 	msr	BASEPRI, r3
 800bc0e:	f3bf 8f6f 	isb	sy
 800bc12:	f3bf 8f4f 	dsb	sy
 800bc16:	603b      	str	r3, [r7, #0]
 800bc18:	e7fe      	b.n	800bc18 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800bc1a:	f000 fea5 	bl	800c968 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800bc1e:	4b39      	ldr	r3, [pc, #228]	; (800bd04 <xTaskResumeAll+0x114>)
 800bc20:	681b      	ldr	r3, [r3, #0]
 800bc22:	3b01      	subs	r3, #1
 800bc24:	4a37      	ldr	r2, [pc, #220]	; (800bd04 <xTaskResumeAll+0x114>)
 800bc26:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bc28:	4b36      	ldr	r3, [pc, #216]	; (800bd04 <xTaskResumeAll+0x114>)
 800bc2a:	681b      	ldr	r3, [r3, #0]
 800bc2c:	2b00      	cmp	r3, #0
 800bc2e:	d161      	bne.n	800bcf4 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800bc30:	4b35      	ldr	r3, [pc, #212]	; (800bd08 <xTaskResumeAll+0x118>)
 800bc32:	681b      	ldr	r3, [r3, #0]
 800bc34:	2b00      	cmp	r3, #0
 800bc36:	d05d      	beq.n	800bcf4 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800bc38:	e02e      	b.n	800bc98 <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800bc3a:	4b34      	ldr	r3, [pc, #208]	; (800bd0c <xTaskResumeAll+0x11c>)
 800bc3c:	68db      	ldr	r3, [r3, #12]
 800bc3e:	68db      	ldr	r3, [r3, #12]
 800bc40:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800bc42:	68fb      	ldr	r3, [r7, #12]
 800bc44:	3318      	adds	r3, #24
 800bc46:	4618      	mov	r0, r3
 800bc48:	f7fe ff3b 	bl	800aac2 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bc4c:	68fb      	ldr	r3, [r7, #12]
 800bc4e:	3304      	adds	r3, #4
 800bc50:	4618      	mov	r0, r3
 800bc52:	f7fe ff36 	bl	800aac2 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800bc56:	68fb      	ldr	r3, [r7, #12]
 800bc58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc5a:	2201      	movs	r2, #1
 800bc5c:	409a      	lsls	r2, r3
 800bc5e:	4b2c      	ldr	r3, [pc, #176]	; (800bd10 <xTaskResumeAll+0x120>)
 800bc60:	681b      	ldr	r3, [r3, #0]
 800bc62:	4313      	orrs	r3, r2
 800bc64:	4a2a      	ldr	r2, [pc, #168]	; (800bd10 <xTaskResumeAll+0x120>)
 800bc66:	6013      	str	r3, [r2, #0]
 800bc68:	68fb      	ldr	r3, [r7, #12]
 800bc6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc6c:	4613      	mov	r3, r2
 800bc6e:	009b      	lsls	r3, r3, #2
 800bc70:	4413      	add	r3, r2
 800bc72:	009b      	lsls	r3, r3, #2
 800bc74:	4a27      	ldr	r2, [pc, #156]	; (800bd14 <xTaskResumeAll+0x124>)
 800bc76:	441a      	add	r2, r3
 800bc78:	68fb      	ldr	r3, [r7, #12]
 800bc7a:	3304      	adds	r3, #4
 800bc7c:	4619      	mov	r1, r3
 800bc7e:	4610      	mov	r0, r2
 800bc80:	f7fe fec4 	bl	800aa0c <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800bc84:	68fb      	ldr	r3, [r7, #12]
 800bc86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc88:	4b23      	ldr	r3, [pc, #140]	; (800bd18 <xTaskResumeAll+0x128>)
 800bc8a:	681b      	ldr	r3, [r3, #0]
 800bc8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc8e:	429a      	cmp	r2, r3
 800bc90:	d302      	bcc.n	800bc98 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 800bc92:	4b22      	ldr	r3, [pc, #136]	; (800bd1c <xTaskResumeAll+0x12c>)
 800bc94:	2201      	movs	r2, #1
 800bc96:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800bc98:	4b1c      	ldr	r3, [pc, #112]	; (800bd0c <xTaskResumeAll+0x11c>)
 800bc9a:	681b      	ldr	r3, [r3, #0]
 800bc9c:	2b00      	cmp	r3, #0
 800bc9e:	d1cc      	bne.n	800bc3a <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800bca0:	68fb      	ldr	r3, [r7, #12]
 800bca2:	2b00      	cmp	r3, #0
 800bca4:	d001      	beq.n	800bcaa <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800bca6:	f000 fb0f 	bl	800c2c8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800bcaa:	4b1d      	ldr	r3, [pc, #116]	; (800bd20 <xTaskResumeAll+0x130>)
 800bcac:	681b      	ldr	r3, [r3, #0]
 800bcae:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	2b00      	cmp	r3, #0
 800bcb4:	d010      	beq.n	800bcd8 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800bcb6:	f000 f837 	bl	800bd28 <xTaskIncrementTick>
 800bcba:	4603      	mov	r3, r0
 800bcbc:	2b00      	cmp	r3, #0
 800bcbe:	d002      	beq.n	800bcc6 <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 800bcc0:	4b16      	ldr	r3, [pc, #88]	; (800bd1c <xTaskResumeAll+0x12c>)
 800bcc2:	2201      	movs	r2, #1
 800bcc4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	3b01      	subs	r3, #1
 800bcca:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	2b00      	cmp	r3, #0
 800bcd0:	d1f1      	bne.n	800bcb6 <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 800bcd2:	4b13      	ldr	r3, [pc, #76]	; (800bd20 <xTaskResumeAll+0x130>)
 800bcd4:	2200      	movs	r2, #0
 800bcd6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800bcd8:	4b10      	ldr	r3, [pc, #64]	; (800bd1c <xTaskResumeAll+0x12c>)
 800bcda:	681b      	ldr	r3, [r3, #0]
 800bcdc:	2b00      	cmp	r3, #0
 800bcde:	d009      	beq.n	800bcf4 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800bce0:	2301      	movs	r3, #1
 800bce2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800bce4:	4b0f      	ldr	r3, [pc, #60]	; (800bd24 <xTaskResumeAll+0x134>)
 800bce6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bcea:	601a      	str	r2, [r3, #0]
 800bcec:	f3bf 8f4f 	dsb	sy
 800bcf0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800bcf4:	f000 fe66 	bl	800c9c4 <vPortExitCritical>

	return xAlreadyYielded;
 800bcf8:	68bb      	ldr	r3, [r7, #8]
}
 800bcfa:	4618      	mov	r0, r3
 800bcfc:	3710      	adds	r7, #16
 800bcfe:	46bd      	mov	sp, r7
 800bd00:	bd80      	pop	{r7, pc}
 800bd02:	bf00      	nop
 800bd04:	20000668 	.word	0x20000668
 800bd08:	20000640 	.word	0x20000640
 800bd0c:	20000600 	.word	0x20000600
 800bd10:	20000648 	.word	0x20000648
 800bd14:	20000544 	.word	0x20000544
 800bd18:	20000540 	.word	0x20000540
 800bd1c:	20000654 	.word	0x20000654
 800bd20:	20000650 	.word	0x20000650
 800bd24:	e000ed04 	.word	0xe000ed04

0800bd28 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800bd28:	b580      	push	{r7, lr}
 800bd2a:	b086      	sub	sp, #24
 800bd2c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800bd2e:	2300      	movs	r3, #0
 800bd30:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bd32:	4b50      	ldr	r3, [pc, #320]	; (800be74 <xTaskIncrementTick+0x14c>)
 800bd34:	681b      	ldr	r3, [r3, #0]
 800bd36:	2b00      	cmp	r3, #0
 800bd38:	f040 808c 	bne.w	800be54 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800bd3c:	4b4e      	ldr	r3, [pc, #312]	; (800be78 <xTaskIncrementTick+0x150>)
 800bd3e:	681b      	ldr	r3, [r3, #0]
 800bd40:	3301      	adds	r3, #1
 800bd42:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800bd44:	4a4c      	ldr	r2, [pc, #304]	; (800be78 <xTaskIncrementTick+0x150>)
 800bd46:	693b      	ldr	r3, [r7, #16]
 800bd48:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800bd4a:	693b      	ldr	r3, [r7, #16]
 800bd4c:	2b00      	cmp	r3, #0
 800bd4e:	d11f      	bne.n	800bd90 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 800bd50:	4b4a      	ldr	r3, [pc, #296]	; (800be7c <xTaskIncrementTick+0x154>)
 800bd52:	681b      	ldr	r3, [r3, #0]
 800bd54:	681b      	ldr	r3, [r3, #0]
 800bd56:	2b00      	cmp	r3, #0
 800bd58:	d009      	beq.n	800bd6e <xTaskIncrementTick+0x46>
 800bd5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd5e:	f383 8811 	msr	BASEPRI, r3
 800bd62:	f3bf 8f6f 	isb	sy
 800bd66:	f3bf 8f4f 	dsb	sy
 800bd6a:	603b      	str	r3, [r7, #0]
 800bd6c:	e7fe      	b.n	800bd6c <xTaskIncrementTick+0x44>
 800bd6e:	4b43      	ldr	r3, [pc, #268]	; (800be7c <xTaskIncrementTick+0x154>)
 800bd70:	681b      	ldr	r3, [r3, #0]
 800bd72:	60fb      	str	r3, [r7, #12]
 800bd74:	4b42      	ldr	r3, [pc, #264]	; (800be80 <xTaskIncrementTick+0x158>)
 800bd76:	681b      	ldr	r3, [r3, #0]
 800bd78:	4a40      	ldr	r2, [pc, #256]	; (800be7c <xTaskIncrementTick+0x154>)
 800bd7a:	6013      	str	r3, [r2, #0]
 800bd7c:	4a40      	ldr	r2, [pc, #256]	; (800be80 <xTaskIncrementTick+0x158>)
 800bd7e:	68fb      	ldr	r3, [r7, #12]
 800bd80:	6013      	str	r3, [r2, #0]
 800bd82:	4b40      	ldr	r3, [pc, #256]	; (800be84 <xTaskIncrementTick+0x15c>)
 800bd84:	681b      	ldr	r3, [r3, #0]
 800bd86:	3301      	adds	r3, #1
 800bd88:	4a3e      	ldr	r2, [pc, #248]	; (800be84 <xTaskIncrementTick+0x15c>)
 800bd8a:	6013      	str	r3, [r2, #0]
 800bd8c:	f000 fa9c 	bl	800c2c8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800bd90:	4b3d      	ldr	r3, [pc, #244]	; (800be88 <xTaskIncrementTick+0x160>)
 800bd92:	681b      	ldr	r3, [r3, #0]
 800bd94:	693a      	ldr	r2, [r7, #16]
 800bd96:	429a      	cmp	r2, r3
 800bd98:	d34d      	bcc.n	800be36 <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bd9a:	4b38      	ldr	r3, [pc, #224]	; (800be7c <xTaskIncrementTick+0x154>)
 800bd9c:	681b      	ldr	r3, [r3, #0]
 800bd9e:	681b      	ldr	r3, [r3, #0]
 800bda0:	2b00      	cmp	r3, #0
 800bda2:	d101      	bne.n	800bda8 <xTaskIncrementTick+0x80>
 800bda4:	2301      	movs	r3, #1
 800bda6:	e000      	b.n	800bdaa <xTaskIncrementTick+0x82>
 800bda8:	2300      	movs	r3, #0
 800bdaa:	2b00      	cmp	r3, #0
 800bdac:	d004      	beq.n	800bdb8 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bdae:	4b36      	ldr	r3, [pc, #216]	; (800be88 <xTaskIncrementTick+0x160>)
 800bdb0:	f04f 32ff 	mov.w	r2, #4294967295
 800bdb4:	601a      	str	r2, [r3, #0]
					break;
 800bdb6:	e03e      	b.n	800be36 <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800bdb8:	4b30      	ldr	r3, [pc, #192]	; (800be7c <xTaskIncrementTick+0x154>)
 800bdba:	681b      	ldr	r3, [r3, #0]
 800bdbc:	68db      	ldr	r3, [r3, #12]
 800bdbe:	68db      	ldr	r3, [r3, #12]
 800bdc0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800bdc2:	68bb      	ldr	r3, [r7, #8]
 800bdc4:	685b      	ldr	r3, [r3, #4]
 800bdc6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800bdc8:	693a      	ldr	r2, [r7, #16]
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	429a      	cmp	r2, r3
 800bdce:	d203      	bcs.n	800bdd8 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800bdd0:	4a2d      	ldr	r2, [pc, #180]	; (800be88 <xTaskIncrementTick+0x160>)
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	6013      	str	r3, [r2, #0]
						break;
 800bdd6:	e02e      	b.n	800be36 <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bdd8:	68bb      	ldr	r3, [r7, #8]
 800bdda:	3304      	adds	r3, #4
 800bddc:	4618      	mov	r0, r3
 800bdde:	f7fe fe70 	bl	800aac2 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800bde2:	68bb      	ldr	r3, [r7, #8]
 800bde4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bde6:	2b00      	cmp	r3, #0
 800bde8:	d004      	beq.n	800bdf4 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800bdea:	68bb      	ldr	r3, [r7, #8]
 800bdec:	3318      	adds	r3, #24
 800bdee:	4618      	mov	r0, r3
 800bdf0:	f7fe fe67 	bl	800aac2 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800bdf4:	68bb      	ldr	r3, [r7, #8]
 800bdf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bdf8:	2201      	movs	r2, #1
 800bdfa:	409a      	lsls	r2, r3
 800bdfc:	4b23      	ldr	r3, [pc, #140]	; (800be8c <xTaskIncrementTick+0x164>)
 800bdfe:	681b      	ldr	r3, [r3, #0]
 800be00:	4313      	orrs	r3, r2
 800be02:	4a22      	ldr	r2, [pc, #136]	; (800be8c <xTaskIncrementTick+0x164>)
 800be04:	6013      	str	r3, [r2, #0]
 800be06:	68bb      	ldr	r3, [r7, #8]
 800be08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800be0a:	4613      	mov	r3, r2
 800be0c:	009b      	lsls	r3, r3, #2
 800be0e:	4413      	add	r3, r2
 800be10:	009b      	lsls	r3, r3, #2
 800be12:	4a1f      	ldr	r2, [pc, #124]	; (800be90 <xTaskIncrementTick+0x168>)
 800be14:	441a      	add	r2, r3
 800be16:	68bb      	ldr	r3, [r7, #8]
 800be18:	3304      	adds	r3, #4
 800be1a:	4619      	mov	r1, r3
 800be1c:	4610      	mov	r0, r2
 800be1e:	f7fe fdf5 	bl	800aa0c <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800be22:	68bb      	ldr	r3, [r7, #8]
 800be24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800be26:	4b1b      	ldr	r3, [pc, #108]	; (800be94 <xTaskIncrementTick+0x16c>)
 800be28:	681b      	ldr	r3, [r3, #0]
 800be2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be2c:	429a      	cmp	r2, r3
 800be2e:	d3b4      	bcc.n	800bd9a <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800be30:	2301      	movs	r3, #1
 800be32:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800be34:	e7b1      	b.n	800bd9a <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800be36:	4b17      	ldr	r3, [pc, #92]	; (800be94 <xTaskIncrementTick+0x16c>)
 800be38:	681b      	ldr	r3, [r3, #0]
 800be3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800be3c:	4914      	ldr	r1, [pc, #80]	; (800be90 <xTaskIncrementTick+0x168>)
 800be3e:	4613      	mov	r3, r2
 800be40:	009b      	lsls	r3, r3, #2
 800be42:	4413      	add	r3, r2
 800be44:	009b      	lsls	r3, r3, #2
 800be46:	440b      	add	r3, r1
 800be48:	681b      	ldr	r3, [r3, #0]
 800be4a:	2b01      	cmp	r3, #1
 800be4c:	d907      	bls.n	800be5e <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 800be4e:	2301      	movs	r3, #1
 800be50:	617b      	str	r3, [r7, #20]
 800be52:	e004      	b.n	800be5e <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800be54:	4b10      	ldr	r3, [pc, #64]	; (800be98 <xTaskIncrementTick+0x170>)
 800be56:	681b      	ldr	r3, [r3, #0]
 800be58:	3301      	adds	r3, #1
 800be5a:	4a0f      	ldr	r2, [pc, #60]	; (800be98 <xTaskIncrementTick+0x170>)
 800be5c:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800be5e:	4b0f      	ldr	r3, [pc, #60]	; (800be9c <xTaskIncrementTick+0x174>)
 800be60:	681b      	ldr	r3, [r3, #0]
 800be62:	2b00      	cmp	r3, #0
 800be64:	d001      	beq.n	800be6a <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 800be66:	2301      	movs	r3, #1
 800be68:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800be6a:	697b      	ldr	r3, [r7, #20]
}
 800be6c:	4618      	mov	r0, r3
 800be6e:	3718      	adds	r7, #24
 800be70:	46bd      	mov	sp, r7
 800be72:	bd80      	pop	{r7, pc}
 800be74:	20000668 	.word	0x20000668
 800be78:	20000644 	.word	0x20000644
 800be7c:	200005f8 	.word	0x200005f8
 800be80:	200005fc 	.word	0x200005fc
 800be84:	20000658 	.word	0x20000658
 800be88:	20000660 	.word	0x20000660
 800be8c:	20000648 	.word	0x20000648
 800be90:	20000544 	.word	0x20000544
 800be94:	20000540 	.word	0x20000540
 800be98:	20000650 	.word	0x20000650
 800be9c:	20000654 	.word	0x20000654

0800bea0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800bea0:	b480      	push	{r7}
 800bea2:	b087      	sub	sp, #28
 800bea4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800bea6:	4b26      	ldr	r3, [pc, #152]	; (800bf40 <vTaskSwitchContext+0xa0>)
 800bea8:	681b      	ldr	r3, [r3, #0]
 800beaa:	2b00      	cmp	r3, #0
 800beac:	d003      	beq.n	800beb6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800beae:	4b25      	ldr	r3, [pc, #148]	; (800bf44 <vTaskSwitchContext+0xa4>)
 800beb0:	2201      	movs	r2, #1
 800beb2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800beb4:	e03e      	b.n	800bf34 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 800beb6:	4b23      	ldr	r3, [pc, #140]	; (800bf44 <vTaskSwitchContext+0xa4>)
 800beb8:	2200      	movs	r2, #0
 800beba:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800bebc:	4b22      	ldr	r3, [pc, #136]	; (800bf48 <vTaskSwitchContext+0xa8>)
 800bebe:	681b      	ldr	r3, [r3, #0]
 800bec0:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800bec2:	68fb      	ldr	r3, [r7, #12]
 800bec4:	fab3 f383 	clz	r3, r3
 800bec8:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800beca:	7afb      	ldrb	r3, [r7, #11]
 800becc:	f1c3 031f 	rsb	r3, r3, #31
 800bed0:	617b      	str	r3, [r7, #20]
 800bed2:	491e      	ldr	r1, [pc, #120]	; (800bf4c <vTaskSwitchContext+0xac>)
 800bed4:	697a      	ldr	r2, [r7, #20]
 800bed6:	4613      	mov	r3, r2
 800bed8:	009b      	lsls	r3, r3, #2
 800beda:	4413      	add	r3, r2
 800bedc:	009b      	lsls	r3, r3, #2
 800bede:	440b      	add	r3, r1
 800bee0:	681b      	ldr	r3, [r3, #0]
 800bee2:	2b00      	cmp	r3, #0
 800bee4:	d109      	bne.n	800befa <vTaskSwitchContext+0x5a>
	__asm volatile
 800bee6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800beea:	f383 8811 	msr	BASEPRI, r3
 800beee:	f3bf 8f6f 	isb	sy
 800bef2:	f3bf 8f4f 	dsb	sy
 800bef6:	607b      	str	r3, [r7, #4]
 800bef8:	e7fe      	b.n	800bef8 <vTaskSwitchContext+0x58>
 800befa:	697a      	ldr	r2, [r7, #20]
 800befc:	4613      	mov	r3, r2
 800befe:	009b      	lsls	r3, r3, #2
 800bf00:	4413      	add	r3, r2
 800bf02:	009b      	lsls	r3, r3, #2
 800bf04:	4a11      	ldr	r2, [pc, #68]	; (800bf4c <vTaskSwitchContext+0xac>)
 800bf06:	4413      	add	r3, r2
 800bf08:	613b      	str	r3, [r7, #16]
 800bf0a:	693b      	ldr	r3, [r7, #16]
 800bf0c:	685b      	ldr	r3, [r3, #4]
 800bf0e:	685a      	ldr	r2, [r3, #4]
 800bf10:	693b      	ldr	r3, [r7, #16]
 800bf12:	605a      	str	r2, [r3, #4]
 800bf14:	693b      	ldr	r3, [r7, #16]
 800bf16:	685a      	ldr	r2, [r3, #4]
 800bf18:	693b      	ldr	r3, [r7, #16]
 800bf1a:	3308      	adds	r3, #8
 800bf1c:	429a      	cmp	r2, r3
 800bf1e:	d104      	bne.n	800bf2a <vTaskSwitchContext+0x8a>
 800bf20:	693b      	ldr	r3, [r7, #16]
 800bf22:	685b      	ldr	r3, [r3, #4]
 800bf24:	685a      	ldr	r2, [r3, #4]
 800bf26:	693b      	ldr	r3, [r7, #16]
 800bf28:	605a      	str	r2, [r3, #4]
 800bf2a:	693b      	ldr	r3, [r7, #16]
 800bf2c:	685b      	ldr	r3, [r3, #4]
 800bf2e:	68db      	ldr	r3, [r3, #12]
 800bf30:	4a07      	ldr	r2, [pc, #28]	; (800bf50 <vTaskSwitchContext+0xb0>)
 800bf32:	6013      	str	r3, [r2, #0]
}
 800bf34:	bf00      	nop
 800bf36:	371c      	adds	r7, #28
 800bf38:	46bd      	mov	sp, r7
 800bf3a:	bc80      	pop	{r7}
 800bf3c:	4770      	bx	lr
 800bf3e:	bf00      	nop
 800bf40:	20000668 	.word	0x20000668
 800bf44:	20000654 	.word	0x20000654
 800bf48:	20000648 	.word	0x20000648
 800bf4c:	20000544 	.word	0x20000544
 800bf50:	20000540 	.word	0x20000540

0800bf54 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800bf54:	b580      	push	{r7, lr}
 800bf56:	b084      	sub	sp, #16
 800bf58:	af00      	add	r7, sp, #0
 800bf5a:	6078      	str	r0, [r7, #4]
 800bf5c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	2b00      	cmp	r3, #0
 800bf62:	d109      	bne.n	800bf78 <vTaskPlaceOnEventList+0x24>
 800bf64:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf68:	f383 8811 	msr	BASEPRI, r3
 800bf6c:	f3bf 8f6f 	isb	sy
 800bf70:	f3bf 8f4f 	dsb	sy
 800bf74:	60fb      	str	r3, [r7, #12]
 800bf76:	e7fe      	b.n	800bf76 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800bf78:	4b07      	ldr	r3, [pc, #28]	; (800bf98 <vTaskPlaceOnEventList+0x44>)
 800bf7a:	681b      	ldr	r3, [r3, #0]
 800bf7c:	3318      	adds	r3, #24
 800bf7e:	4619      	mov	r1, r3
 800bf80:	6878      	ldr	r0, [r7, #4]
 800bf82:	f7fe fd66 	bl	800aa52 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800bf86:	2101      	movs	r1, #1
 800bf88:	6838      	ldr	r0, [r7, #0]
 800bf8a:	f000 fb9b 	bl	800c6c4 <prvAddCurrentTaskToDelayedList>
}
 800bf8e:	bf00      	nop
 800bf90:	3710      	adds	r7, #16
 800bf92:	46bd      	mov	sp, r7
 800bf94:	bd80      	pop	{r7, pc}
 800bf96:	bf00      	nop
 800bf98:	20000540 	.word	0x20000540

0800bf9c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800bf9c:	b580      	push	{r7, lr}
 800bf9e:	b086      	sub	sp, #24
 800bfa0:	af00      	add	r7, sp, #0
 800bfa2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	68db      	ldr	r3, [r3, #12]
 800bfa8:	68db      	ldr	r3, [r3, #12]
 800bfaa:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800bfac:	693b      	ldr	r3, [r7, #16]
 800bfae:	2b00      	cmp	r3, #0
 800bfb0:	d109      	bne.n	800bfc6 <xTaskRemoveFromEventList+0x2a>
 800bfb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfb6:	f383 8811 	msr	BASEPRI, r3
 800bfba:	f3bf 8f6f 	isb	sy
 800bfbe:	f3bf 8f4f 	dsb	sy
 800bfc2:	60fb      	str	r3, [r7, #12]
 800bfc4:	e7fe      	b.n	800bfc4 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800bfc6:	693b      	ldr	r3, [r7, #16]
 800bfc8:	3318      	adds	r3, #24
 800bfca:	4618      	mov	r0, r3
 800bfcc:	f7fe fd79 	bl	800aac2 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bfd0:	4b1d      	ldr	r3, [pc, #116]	; (800c048 <xTaskRemoveFromEventList+0xac>)
 800bfd2:	681b      	ldr	r3, [r3, #0]
 800bfd4:	2b00      	cmp	r3, #0
 800bfd6:	d11c      	bne.n	800c012 <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800bfd8:	693b      	ldr	r3, [r7, #16]
 800bfda:	3304      	adds	r3, #4
 800bfdc:	4618      	mov	r0, r3
 800bfde:	f7fe fd70 	bl	800aac2 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800bfe2:	693b      	ldr	r3, [r7, #16]
 800bfe4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bfe6:	2201      	movs	r2, #1
 800bfe8:	409a      	lsls	r2, r3
 800bfea:	4b18      	ldr	r3, [pc, #96]	; (800c04c <xTaskRemoveFromEventList+0xb0>)
 800bfec:	681b      	ldr	r3, [r3, #0]
 800bfee:	4313      	orrs	r3, r2
 800bff0:	4a16      	ldr	r2, [pc, #88]	; (800c04c <xTaskRemoveFromEventList+0xb0>)
 800bff2:	6013      	str	r3, [r2, #0]
 800bff4:	693b      	ldr	r3, [r7, #16]
 800bff6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bff8:	4613      	mov	r3, r2
 800bffa:	009b      	lsls	r3, r3, #2
 800bffc:	4413      	add	r3, r2
 800bffe:	009b      	lsls	r3, r3, #2
 800c000:	4a13      	ldr	r2, [pc, #76]	; (800c050 <xTaskRemoveFromEventList+0xb4>)
 800c002:	441a      	add	r2, r3
 800c004:	693b      	ldr	r3, [r7, #16]
 800c006:	3304      	adds	r3, #4
 800c008:	4619      	mov	r1, r3
 800c00a:	4610      	mov	r0, r2
 800c00c:	f7fe fcfe 	bl	800aa0c <vListInsertEnd>
 800c010:	e005      	b.n	800c01e <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800c012:	693b      	ldr	r3, [r7, #16]
 800c014:	3318      	adds	r3, #24
 800c016:	4619      	mov	r1, r3
 800c018:	480e      	ldr	r0, [pc, #56]	; (800c054 <xTaskRemoveFromEventList+0xb8>)
 800c01a:	f7fe fcf7 	bl	800aa0c <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c01e:	693b      	ldr	r3, [r7, #16]
 800c020:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c022:	4b0d      	ldr	r3, [pc, #52]	; (800c058 <xTaskRemoveFromEventList+0xbc>)
 800c024:	681b      	ldr	r3, [r3, #0]
 800c026:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c028:	429a      	cmp	r2, r3
 800c02a:	d905      	bls.n	800c038 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800c02c:	2301      	movs	r3, #1
 800c02e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800c030:	4b0a      	ldr	r3, [pc, #40]	; (800c05c <xTaskRemoveFromEventList+0xc0>)
 800c032:	2201      	movs	r2, #1
 800c034:	601a      	str	r2, [r3, #0]
 800c036:	e001      	b.n	800c03c <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 800c038:	2300      	movs	r3, #0
 800c03a:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800c03c:	697b      	ldr	r3, [r7, #20]
}
 800c03e:	4618      	mov	r0, r3
 800c040:	3718      	adds	r7, #24
 800c042:	46bd      	mov	sp, r7
 800c044:	bd80      	pop	{r7, pc}
 800c046:	bf00      	nop
 800c048:	20000668 	.word	0x20000668
 800c04c:	20000648 	.word	0x20000648
 800c050:	20000544 	.word	0x20000544
 800c054:	20000600 	.word	0x20000600
 800c058:	20000540 	.word	0x20000540
 800c05c:	20000654 	.word	0x20000654

0800c060 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800c060:	b480      	push	{r7}
 800c062:	b083      	sub	sp, #12
 800c064:	af00      	add	r7, sp, #0
 800c066:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800c068:	4b06      	ldr	r3, [pc, #24]	; (800c084 <vTaskInternalSetTimeOutState+0x24>)
 800c06a:	681a      	ldr	r2, [r3, #0]
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800c070:	4b05      	ldr	r3, [pc, #20]	; (800c088 <vTaskInternalSetTimeOutState+0x28>)
 800c072:	681a      	ldr	r2, [r3, #0]
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	605a      	str	r2, [r3, #4]
}
 800c078:	bf00      	nop
 800c07a:	370c      	adds	r7, #12
 800c07c:	46bd      	mov	sp, r7
 800c07e:	bc80      	pop	{r7}
 800c080:	4770      	bx	lr
 800c082:	bf00      	nop
 800c084:	20000658 	.word	0x20000658
 800c088:	20000644 	.word	0x20000644

0800c08c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800c08c:	b580      	push	{r7, lr}
 800c08e:	b088      	sub	sp, #32
 800c090:	af00      	add	r7, sp, #0
 800c092:	6078      	str	r0, [r7, #4]
 800c094:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	2b00      	cmp	r3, #0
 800c09a:	d109      	bne.n	800c0b0 <xTaskCheckForTimeOut+0x24>
 800c09c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0a0:	f383 8811 	msr	BASEPRI, r3
 800c0a4:	f3bf 8f6f 	isb	sy
 800c0a8:	f3bf 8f4f 	dsb	sy
 800c0ac:	613b      	str	r3, [r7, #16]
 800c0ae:	e7fe      	b.n	800c0ae <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 800c0b0:	683b      	ldr	r3, [r7, #0]
 800c0b2:	2b00      	cmp	r3, #0
 800c0b4:	d109      	bne.n	800c0ca <xTaskCheckForTimeOut+0x3e>
 800c0b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0ba:	f383 8811 	msr	BASEPRI, r3
 800c0be:	f3bf 8f6f 	isb	sy
 800c0c2:	f3bf 8f4f 	dsb	sy
 800c0c6:	60fb      	str	r3, [r7, #12]
 800c0c8:	e7fe      	b.n	800c0c8 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 800c0ca:	f000 fc4d 	bl	800c968 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800c0ce:	4b1d      	ldr	r3, [pc, #116]	; (800c144 <xTaskCheckForTimeOut+0xb8>)
 800c0d0:	681b      	ldr	r3, [r3, #0]
 800c0d2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	685b      	ldr	r3, [r3, #4]
 800c0d8:	69ba      	ldr	r2, [r7, #24]
 800c0da:	1ad3      	subs	r3, r2, r3
 800c0dc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800c0de:	683b      	ldr	r3, [r7, #0]
 800c0e0:	681b      	ldr	r3, [r3, #0]
 800c0e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c0e6:	d102      	bne.n	800c0ee <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800c0e8:	2300      	movs	r3, #0
 800c0ea:	61fb      	str	r3, [r7, #28]
 800c0ec:	e023      	b.n	800c136 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	681a      	ldr	r2, [r3, #0]
 800c0f2:	4b15      	ldr	r3, [pc, #84]	; (800c148 <xTaskCheckForTimeOut+0xbc>)
 800c0f4:	681b      	ldr	r3, [r3, #0]
 800c0f6:	429a      	cmp	r2, r3
 800c0f8:	d007      	beq.n	800c10a <xTaskCheckForTimeOut+0x7e>
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	685b      	ldr	r3, [r3, #4]
 800c0fe:	69ba      	ldr	r2, [r7, #24]
 800c100:	429a      	cmp	r2, r3
 800c102:	d302      	bcc.n	800c10a <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800c104:	2301      	movs	r3, #1
 800c106:	61fb      	str	r3, [r7, #28]
 800c108:	e015      	b.n	800c136 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800c10a:	683b      	ldr	r3, [r7, #0]
 800c10c:	681b      	ldr	r3, [r3, #0]
 800c10e:	697a      	ldr	r2, [r7, #20]
 800c110:	429a      	cmp	r2, r3
 800c112:	d20b      	bcs.n	800c12c <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800c114:	683b      	ldr	r3, [r7, #0]
 800c116:	681a      	ldr	r2, [r3, #0]
 800c118:	697b      	ldr	r3, [r7, #20]
 800c11a:	1ad2      	subs	r2, r2, r3
 800c11c:	683b      	ldr	r3, [r7, #0]
 800c11e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800c120:	6878      	ldr	r0, [r7, #4]
 800c122:	f7ff ff9d 	bl	800c060 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800c126:	2300      	movs	r3, #0
 800c128:	61fb      	str	r3, [r7, #28]
 800c12a:	e004      	b.n	800c136 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 800c12c:	683b      	ldr	r3, [r7, #0]
 800c12e:	2200      	movs	r2, #0
 800c130:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800c132:	2301      	movs	r3, #1
 800c134:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800c136:	f000 fc45 	bl	800c9c4 <vPortExitCritical>

	return xReturn;
 800c13a:	69fb      	ldr	r3, [r7, #28]
}
 800c13c:	4618      	mov	r0, r3
 800c13e:	3720      	adds	r7, #32
 800c140:	46bd      	mov	sp, r7
 800c142:	bd80      	pop	{r7, pc}
 800c144:	20000644 	.word	0x20000644
 800c148:	20000658 	.word	0x20000658

0800c14c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800c14c:	b480      	push	{r7}
 800c14e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800c150:	4b03      	ldr	r3, [pc, #12]	; (800c160 <vTaskMissedYield+0x14>)
 800c152:	2201      	movs	r2, #1
 800c154:	601a      	str	r2, [r3, #0]
}
 800c156:	bf00      	nop
 800c158:	46bd      	mov	sp, r7
 800c15a:	bc80      	pop	{r7}
 800c15c:	4770      	bx	lr
 800c15e:	bf00      	nop
 800c160:	20000654 	.word	0x20000654

0800c164 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800c164:	b580      	push	{r7, lr}
 800c166:	b082      	sub	sp, #8
 800c168:	af00      	add	r7, sp, #0
 800c16a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800c16c:	f000 f852 	bl	800c214 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800c170:	4b06      	ldr	r3, [pc, #24]	; (800c18c <prvIdleTask+0x28>)
 800c172:	681b      	ldr	r3, [r3, #0]
 800c174:	2b01      	cmp	r3, #1
 800c176:	d9f9      	bls.n	800c16c <prvIdleTask+0x8>
			{
				taskYIELD();
 800c178:	4b05      	ldr	r3, [pc, #20]	; (800c190 <prvIdleTask+0x2c>)
 800c17a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c17e:	601a      	str	r2, [r3, #0]
 800c180:	f3bf 8f4f 	dsb	sy
 800c184:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800c188:	e7f0      	b.n	800c16c <prvIdleTask+0x8>
 800c18a:	bf00      	nop
 800c18c:	20000544 	.word	0x20000544
 800c190:	e000ed04 	.word	0xe000ed04

0800c194 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800c194:	b580      	push	{r7, lr}
 800c196:	b082      	sub	sp, #8
 800c198:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c19a:	2300      	movs	r3, #0
 800c19c:	607b      	str	r3, [r7, #4]
 800c19e:	e00c      	b.n	800c1ba <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800c1a0:	687a      	ldr	r2, [r7, #4]
 800c1a2:	4613      	mov	r3, r2
 800c1a4:	009b      	lsls	r3, r3, #2
 800c1a6:	4413      	add	r3, r2
 800c1a8:	009b      	lsls	r3, r3, #2
 800c1aa:	4a12      	ldr	r2, [pc, #72]	; (800c1f4 <prvInitialiseTaskLists+0x60>)
 800c1ac:	4413      	add	r3, r2
 800c1ae:	4618      	mov	r0, r3
 800c1b0:	f7fe fc01 	bl	800a9b6 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	3301      	adds	r3, #1
 800c1b8:	607b      	str	r3, [r7, #4]
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	2b06      	cmp	r3, #6
 800c1be:	d9ef      	bls.n	800c1a0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800c1c0:	480d      	ldr	r0, [pc, #52]	; (800c1f8 <prvInitialiseTaskLists+0x64>)
 800c1c2:	f7fe fbf8 	bl	800a9b6 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800c1c6:	480d      	ldr	r0, [pc, #52]	; (800c1fc <prvInitialiseTaskLists+0x68>)
 800c1c8:	f7fe fbf5 	bl	800a9b6 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800c1cc:	480c      	ldr	r0, [pc, #48]	; (800c200 <prvInitialiseTaskLists+0x6c>)
 800c1ce:	f7fe fbf2 	bl	800a9b6 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800c1d2:	480c      	ldr	r0, [pc, #48]	; (800c204 <prvInitialiseTaskLists+0x70>)
 800c1d4:	f7fe fbef 	bl	800a9b6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800c1d8:	480b      	ldr	r0, [pc, #44]	; (800c208 <prvInitialiseTaskLists+0x74>)
 800c1da:	f7fe fbec 	bl	800a9b6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800c1de:	4b0b      	ldr	r3, [pc, #44]	; (800c20c <prvInitialiseTaskLists+0x78>)
 800c1e0:	4a05      	ldr	r2, [pc, #20]	; (800c1f8 <prvInitialiseTaskLists+0x64>)
 800c1e2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800c1e4:	4b0a      	ldr	r3, [pc, #40]	; (800c210 <prvInitialiseTaskLists+0x7c>)
 800c1e6:	4a05      	ldr	r2, [pc, #20]	; (800c1fc <prvInitialiseTaskLists+0x68>)
 800c1e8:	601a      	str	r2, [r3, #0]
}
 800c1ea:	bf00      	nop
 800c1ec:	3708      	adds	r7, #8
 800c1ee:	46bd      	mov	sp, r7
 800c1f0:	bd80      	pop	{r7, pc}
 800c1f2:	bf00      	nop
 800c1f4:	20000544 	.word	0x20000544
 800c1f8:	200005d0 	.word	0x200005d0
 800c1fc:	200005e4 	.word	0x200005e4
 800c200:	20000600 	.word	0x20000600
 800c204:	20000614 	.word	0x20000614
 800c208:	2000062c 	.word	0x2000062c
 800c20c:	200005f8 	.word	0x200005f8
 800c210:	200005fc 	.word	0x200005fc

0800c214 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800c214:	b580      	push	{r7, lr}
 800c216:	b082      	sub	sp, #8
 800c218:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c21a:	e019      	b.n	800c250 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800c21c:	f000 fba4 	bl	800c968 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800c220:	4b0f      	ldr	r3, [pc, #60]	; (800c260 <prvCheckTasksWaitingTermination+0x4c>)
 800c222:	68db      	ldr	r3, [r3, #12]
 800c224:	68db      	ldr	r3, [r3, #12]
 800c226:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	3304      	adds	r3, #4
 800c22c:	4618      	mov	r0, r3
 800c22e:	f7fe fc48 	bl	800aac2 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800c232:	4b0c      	ldr	r3, [pc, #48]	; (800c264 <prvCheckTasksWaitingTermination+0x50>)
 800c234:	681b      	ldr	r3, [r3, #0]
 800c236:	3b01      	subs	r3, #1
 800c238:	4a0a      	ldr	r2, [pc, #40]	; (800c264 <prvCheckTasksWaitingTermination+0x50>)
 800c23a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800c23c:	4b0a      	ldr	r3, [pc, #40]	; (800c268 <prvCheckTasksWaitingTermination+0x54>)
 800c23e:	681b      	ldr	r3, [r3, #0]
 800c240:	3b01      	subs	r3, #1
 800c242:	4a09      	ldr	r2, [pc, #36]	; (800c268 <prvCheckTasksWaitingTermination+0x54>)
 800c244:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800c246:	f000 fbbd 	bl	800c9c4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800c24a:	6878      	ldr	r0, [r7, #4]
 800c24c:	f000 f80e 	bl	800c26c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c250:	4b05      	ldr	r3, [pc, #20]	; (800c268 <prvCheckTasksWaitingTermination+0x54>)
 800c252:	681b      	ldr	r3, [r3, #0]
 800c254:	2b00      	cmp	r3, #0
 800c256:	d1e1      	bne.n	800c21c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800c258:	bf00      	nop
 800c25a:	3708      	adds	r7, #8
 800c25c:	46bd      	mov	sp, r7
 800c25e:	bd80      	pop	{r7, pc}
 800c260:	20000614 	.word	0x20000614
 800c264:	20000640 	.word	0x20000640
 800c268:	20000628 	.word	0x20000628

0800c26c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800c26c:	b580      	push	{r7, lr}
 800c26e:	b084      	sub	sp, #16
 800c270:	af00      	add	r7, sp, #0
 800c272:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800c27a:	2b00      	cmp	r3, #0
 800c27c:	d108      	bne.n	800c290 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c282:	4618      	mov	r0, r3
 800c284:	f000 fd28 	bl	800ccd8 <vPortFree>
				vPortFree( pxTCB );
 800c288:	6878      	ldr	r0, [r7, #4]
 800c28a:	f000 fd25 	bl	800ccd8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800c28e:	e017      	b.n	800c2c0 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800c296:	2b01      	cmp	r3, #1
 800c298:	d103      	bne.n	800c2a2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800c29a:	6878      	ldr	r0, [r7, #4]
 800c29c:	f000 fd1c 	bl	800ccd8 <vPortFree>
	}
 800c2a0:	e00e      	b.n	800c2c0 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800c2a8:	2b02      	cmp	r3, #2
 800c2aa:	d009      	beq.n	800c2c0 <prvDeleteTCB+0x54>
 800c2ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2b0:	f383 8811 	msr	BASEPRI, r3
 800c2b4:	f3bf 8f6f 	isb	sy
 800c2b8:	f3bf 8f4f 	dsb	sy
 800c2bc:	60fb      	str	r3, [r7, #12]
 800c2be:	e7fe      	b.n	800c2be <prvDeleteTCB+0x52>
	}
 800c2c0:	bf00      	nop
 800c2c2:	3710      	adds	r7, #16
 800c2c4:	46bd      	mov	sp, r7
 800c2c6:	bd80      	pop	{r7, pc}

0800c2c8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800c2c8:	b480      	push	{r7}
 800c2ca:	b083      	sub	sp, #12
 800c2cc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c2ce:	4b0e      	ldr	r3, [pc, #56]	; (800c308 <prvResetNextTaskUnblockTime+0x40>)
 800c2d0:	681b      	ldr	r3, [r3, #0]
 800c2d2:	681b      	ldr	r3, [r3, #0]
 800c2d4:	2b00      	cmp	r3, #0
 800c2d6:	d101      	bne.n	800c2dc <prvResetNextTaskUnblockTime+0x14>
 800c2d8:	2301      	movs	r3, #1
 800c2da:	e000      	b.n	800c2de <prvResetNextTaskUnblockTime+0x16>
 800c2dc:	2300      	movs	r3, #0
 800c2de:	2b00      	cmp	r3, #0
 800c2e0:	d004      	beq.n	800c2ec <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800c2e2:	4b0a      	ldr	r3, [pc, #40]	; (800c30c <prvResetNextTaskUnblockTime+0x44>)
 800c2e4:	f04f 32ff 	mov.w	r2, #4294967295
 800c2e8:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800c2ea:	e008      	b.n	800c2fe <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800c2ec:	4b06      	ldr	r3, [pc, #24]	; (800c308 <prvResetNextTaskUnblockTime+0x40>)
 800c2ee:	681b      	ldr	r3, [r3, #0]
 800c2f0:	68db      	ldr	r3, [r3, #12]
 800c2f2:	68db      	ldr	r3, [r3, #12]
 800c2f4:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	685b      	ldr	r3, [r3, #4]
 800c2fa:	4a04      	ldr	r2, [pc, #16]	; (800c30c <prvResetNextTaskUnblockTime+0x44>)
 800c2fc:	6013      	str	r3, [r2, #0]
}
 800c2fe:	bf00      	nop
 800c300:	370c      	adds	r7, #12
 800c302:	46bd      	mov	sp, r7
 800c304:	bc80      	pop	{r7}
 800c306:	4770      	bx	lr
 800c308:	200005f8 	.word	0x200005f8
 800c30c:	20000660 	.word	0x20000660

0800c310 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800c310:	b480      	push	{r7}
 800c312:	b083      	sub	sp, #12
 800c314:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800c316:	4b0b      	ldr	r3, [pc, #44]	; (800c344 <xTaskGetSchedulerState+0x34>)
 800c318:	681b      	ldr	r3, [r3, #0]
 800c31a:	2b00      	cmp	r3, #0
 800c31c:	d102      	bne.n	800c324 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800c31e:	2301      	movs	r3, #1
 800c320:	607b      	str	r3, [r7, #4]
 800c322:	e008      	b.n	800c336 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c324:	4b08      	ldr	r3, [pc, #32]	; (800c348 <xTaskGetSchedulerState+0x38>)
 800c326:	681b      	ldr	r3, [r3, #0]
 800c328:	2b00      	cmp	r3, #0
 800c32a:	d102      	bne.n	800c332 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800c32c:	2302      	movs	r3, #2
 800c32e:	607b      	str	r3, [r7, #4]
 800c330:	e001      	b.n	800c336 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800c332:	2300      	movs	r3, #0
 800c334:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800c336:	687b      	ldr	r3, [r7, #4]
	}
 800c338:	4618      	mov	r0, r3
 800c33a:	370c      	adds	r7, #12
 800c33c:	46bd      	mov	sp, r7
 800c33e:	bc80      	pop	{r7}
 800c340:	4770      	bx	lr
 800c342:	bf00      	nop
 800c344:	2000064c 	.word	0x2000064c
 800c348:	20000668 	.word	0x20000668

0800c34c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800c34c:	b580      	push	{r7, lr}
 800c34e:	b084      	sub	sp, #16
 800c350:	af00      	add	r7, sp, #0
 800c352:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800c358:	2300      	movs	r3, #0
 800c35a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	2b00      	cmp	r3, #0
 800c360:	d06e      	beq.n	800c440 <xTaskPriorityInherit+0xf4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800c362:	68bb      	ldr	r3, [r7, #8]
 800c364:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c366:	4b39      	ldr	r3, [pc, #228]	; (800c44c <xTaskPriorityInherit+0x100>)
 800c368:	681b      	ldr	r3, [r3, #0]
 800c36a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c36c:	429a      	cmp	r2, r3
 800c36e:	d25e      	bcs.n	800c42e <xTaskPriorityInherit+0xe2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800c370:	68bb      	ldr	r3, [r7, #8]
 800c372:	699b      	ldr	r3, [r3, #24]
 800c374:	2b00      	cmp	r3, #0
 800c376:	db06      	blt.n	800c386 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c378:	4b34      	ldr	r3, [pc, #208]	; (800c44c <xTaskPriorityInherit+0x100>)
 800c37a:	681b      	ldr	r3, [r3, #0]
 800c37c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c37e:	f1c3 0207 	rsb	r2, r3, #7
 800c382:	68bb      	ldr	r3, [r7, #8]
 800c384:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800c386:	68bb      	ldr	r3, [r7, #8]
 800c388:	6959      	ldr	r1, [r3, #20]
 800c38a:	68bb      	ldr	r3, [r7, #8]
 800c38c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c38e:	4613      	mov	r3, r2
 800c390:	009b      	lsls	r3, r3, #2
 800c392:	4413      	add	r3, r2
 800c394:	009b      	lsls	r3, r3, #2
 800c396:	4a2e      	ldr	r2, [pc, #184]	; (800c450 <xTaskPriorityInherit+0x104>)
 800c398:	4413      	add	r3, r2
 800c39a:	4299      	cmp	r1, r3
 800c39c:	d101      	bne.n	800c3a2 <xTaskPriorityInherit+0x56>
 800c39e:	2301      	movs	r3, #1
 800c3a0:	e000      	b.n	800c3a4 <xTaskPriorityInherit+0x58>
 800c3a2:	2300      	movs	r3, #0
 800c3a4:	2b00      	cmp	r3, #0
 800c3a6:	d03a      	beq.n	800c41e <xTaskPriorityInherit+0xd2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c3a8:	68bb      	ldr	r3, [r7, #8]
 800c3aa:	3304      	adds	r3, #4
 800c3ac:	4618      	mov	r0, r3
 800c3ae:	f7fe fb88 	bl	800aac2 <uxListRemove>
 800c3b2:	4603      	mov	r3, r0
 800c3b4:	2b00      	cmp	r3, #0
 800c3b6:	d115      	bne.n	800c3e4 <xTaskPriorityInherit+0x98>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 800c3b8:	68bb      	ldr	r3, [r7, #8]
 800c3ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c3bc:	4924      	ldr	r1, [pc, #144]	; (800c450 <xTaskPriorityInherit+0x104>)
 800c3be:	4613      	mov	r3, r2
 800c3c0:	009b      	lsls	r3, r3, #2
 800c3c2:	4413      	add	r3, r2
 800c3c4:	009b      	lsls	r3, r3, #2
 800c3c6:	440b      	add	r3, r1
 800c3c8:	681b      	ldr	r3, [r3, #0]
 800c3ca:	2b00      	cmp	r3, #0
 800c3cc:	d10a      	bne.n	800c3e4 <xTaskPriorityInherit+0x98>
 800c3ce:	68bb      	ldr	r3, [r7, #8]
 800c3d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c3d2:	2201      	movs	r2, #1
 800c3d4:	fa02 f303 	lsl.w	r3, r2, r3
 800c3d8:	43da      	mvns	r2, r3
 800c3da:	4b1e      	ldr	r3, [pc, #120]	; (800c454 <xTaskPriorityInherit+0x108>)
 800c3dc:	681b      	ldr	r3, [r3, #0]
 800c3de:	4013      	ands	r3, r2
 800c3e0:	4a1c      	ldr	r2, [pc, #112]	; (800c454 <xTaskPriorityInherit+0x108>)
 800c3e2:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800c3e4:	4b19      	ldr	r3, [pc, #100]	; (800c44c <xTaskPriorityInherit+0x100>)
 800c3e6:	681b      	ldr	r3, [r3, #0]
 800c3e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c3ea:	68bb      	ldr	r3, [r7, #8]
 800c3ec:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800c3ee:	68bb      	ldr	r3, [r7, #8]
 800c3f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c3f2:	2201      	movs	r2, #1
 800c3f4:	409a      	lsls	r2, r3
 800c3f6:	4b17      	ldr	r3, [pc, #92]	; (800c454 <xTaskPriorityInherit+0x108>)
 800c3f8:	681b      	ldr	r3, [r3, #0]
 800c3fa:	4313      	orrs	r3, r2
 800c3fc:	4a15      	ldr	r2, [pc, #84]	; (800c454 <xTaskPriorityInherit+0x108>)
 800c3fe:	6013      	str	r3, [r2, #0]
 800c400:	68bb      	ldr	r3, [r7, #8]
 800c402:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c404:	4613      	mov	r3, r2
 800c406:	009b      	lsls	r3, r3, #2
 800c408:	4413      	add	r3, r2
 800c40a:	009b      	lsls	r3, r3, #2
 800c40c:	4a10      	ldr	r2, [pc, #64]	; (800c450 <xTaskPriorityInherit+0x104>)
 800c40e:	441a      	add	r2, r3
 800c410:	68bb      	ldr	r3, [r7, #8]
 800c412:	3304      	adds	r3, #4
 800c414:	4619      	mov	r1, r3
 800c416:	4610      	mov	r0, r2
 800c418:	f7fe faf8 	bl	800aa0c <vListInsertEnd>
 800c41c:	e004      	b.n	800c428 <xTaskPriorityInherit+0xdc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800c41e:	4b0b      	ldr	r3, [pc, #44]	; (800c44c <xTaskPriorityInherit+0x100>)
 800c420:	681b      	ldr	r3, [r3, #0]
 800c422:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c424:	68bb      	ldr	r3, [r7, #8]
 800c426:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800c428:	2301      	movs	r3, #1
 800c42a:	60fb      	str	r3, [r7, #12]
 800c42c:	e008      	b.n	800c440 <xTaskPriorityInherit+0xf4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800c42e:	68bb      	ldr	r3, [r7, #8]
 800c430:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c432:	4b06      	ldr	r3, [pc, #24]	; (800c44c <xTaskPriorityInherit+0x100>)
 800c434:	681b      	ldr	r3, [r3, #0]
 800c436:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c438:	429a      	cmp	r2, r3
 800c43a:	d201      	bcs.n	800c440 <xTaskPriorityInherit+0xf4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800c43c:	2301      	movs	r3, #1
 800c43e:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c440:	68fb      	ldr	r3, [r7, #12]
	}
 800c442:	4618      	mov	r0, r3
 800c444:	3710      	adds	r7, #16
 800c446:	46bd      	mov	sp, r7
 800c448:	bd80      	pop	{r7, pc}
 800c44a:	bf00      	nop
 800c44c:	20000540 	.word	0x20000540
 800c450:	20000544 	.word	0x20000544
 800c454:	20000648 	.word	0x20000648

0800c458 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800c458:	b580      	push	{r7, lr}
 800c45a:	b086      	sub	sp, #24
 800c45c:	af00      	add	r7, sp, #0
 800c45e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800c464:	2300      	movs	r3, #0
 800c466:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	2b00      	cmp	r3, #0
 800c46c:	d06c      	beq.n	800c548 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800c46e:	4b39      	ldr	r3, [pc, #228]	; (800c554 <xTaskPriorityDisinherit+0xfc>)
 800c470:	681b      	ldr	r3, [r3, #0]
 800c472:	693a      	ldr	r2, [r7, #16]
 800c474:	429a      	cmp	r2, r3
 800c476:	d009      	beq.n	800c48c <xTaskPriorityDisinherit+0x34>
 800c478:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c47c:	f383 8811 	msr	BASEPRI, r3
 800c480:	f3bf 8f6f 	isb	sy
 800c484:	f3bf 8f4f 	dsb	sy
 800c488:	60fb      	str	r3, [r7, #12]
 800c48a:	e7fe      	b.n	800c48a <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 800c48c:	693b      	ldr	r3, [r7, #16]
 800c48e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c490:	2b00      	cmp	r3, #0
 800c492:	d109      	bne.n	800c4a8 <xTaskPriorityDisinherit+0x50>
 800c494:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c498:	f383 8811 	msr	BASEPRI, r3
 800c49c:	f3bf 8f6f 	isb	sy
 800c4a0:	f3bf 8f4f 	dsb	sy
 800c4a4:	60bb      	str	r3, [r7, #8]
 800c4a6:	e7fe      	b.n	800c4a6 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 800c4a8:	693b      	ldr	r3, [r7, #16]
 800c4aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c4ac:	1e5a      	subs	r2, r3, #1
 800c4ae:	693b      	ldr	r3, [r7, #16]
 800c4b0:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800c4b2:	693b      	ldr	r3, [r7, #16]
 800c4b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c4b6:	693b      	ldr	r3, [r7, #16]
 800c4b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c4ba:	429a      	cmp	r2, r3
 800c4bc:	d044      	beq.n	800c548 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800c4be:	693b      	ldr	r3, [r7, #16]
 800c4c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c4c2:	2b00      	cmp	r3, #0
 800c4c4:	d140      	bne.n	800c548 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c4c6:	693b      	ldr	r3, [r7, #16]
 800c4c8:	3304      	adds	r3, #4
 800c4ca:	4618      	mov	r0, r3
 800c4cc:	f7fe faf9 	bl	800aac2 <uxListRemove>
 800c4d0:	4603      	mov	r3, r0
 800c4d2:	2b00      	cmp	r3, #0
 800c4d4:	d115      	bne.n	800c502 <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800c4d6:	693b      	ldr	r3, [r7, #16]
 800c4d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c4da:	491f      	ldr	r1, [pc, #124]	; (800c558 <xTaskPriorityDisinherit+0x100>)
 800c4dc:	4613      	mov	r3, r2
 800c4de:	009b      	lsls	r3, r3, #2
 800c4e0:	4413      	add	r3, r2
 800c4e2:	009b      	lsls	r3, r3, #2
 800c4e4:	440b      	add	r3, r1
 800c4e6:	681b      	ldr	r3, [r3, #0]
 800c4e8:	2b00      	cmp	r3, #0
 800c4ea:	d10a      	bne.n	800c502 <xTaskPriorityDisinherit+0xaa>
 800c4ec:	693b      	ldr	r3, [r7, #16]
 800c4ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4f0:	2201      	movs	r2, #1
 800c4f2:	fa02 f303 	lsl.w	r3, r2, r3
 800c4f6:	43da      	mvns	r2, r3
 800c4f8:	4b18      	ldr	r3, [pc, #96]	; (800c55c <xTaskPriorityDisinherit+0x104>)
 800c4fa:	681b      	ldr	r3, [r3, #0]
 800c4fc:	4013      	ands	r3, r2
 800c4fe:	4a17      	ldr	r2, [pc, #92]	; (800c55c <xTaskPriorityDisinherit+0x104>)
 800c500:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800c502:	693b      	ldr	r3, [r7, #16]
 800c504:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c506:	693b      	ldr	r3, [r7, #16]
 800c508:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c50a:	693b      	ldr	r3, [r7, #16]
 800c50c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c50e:	f1c3 0207 	rsb	r2, r3, #7
 800c512:	693b      	ldr	r3, [r7, #16]
 800c514:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800c516:	693b      	ldr	r3, [r7, #16]
 800c518:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c51a:	2201      	movs	r2, #1
 800c51c:	409a      	lsls	r2, r3
 800c51e:	4b0f      	ldr	r3, [pc, #60]	; (800c55c <xTaskPriorityDisinherit+0x104>)
 800c520:	681b      	ldr	r3, [r3, #0]
 800c522:	4313      	orrs	r3, r2
 800c524:	4a0d      	ldr	r2, [pc, #52]	; (800c55c <xTaskPriorityDisinherit+0x104>)
 800c526:	6013      	str	r3, [r2, #0]
 800c528:	693b      	ldr	r3, [r7, #16]
 800c52a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c52c:	4613      	mov	r3, r2
 800c52e:	009b      	lsls	r3, r3, #2
 800c530:	4413      	add	r3, r2
 800c532:	009b      	lsls	r3, r3, #2
 800c534:	4a08      	ldr	r2, [pc, #32]	; (800c558 <xTaskPriorityDisinherit+0x100>)
 800c536:	441a      	add	r2, r3
 800c538:	693b      	ldr	r3, [r7, #16]
 800c53a:	3304      	adds	r3, #4
 800c53c:	4619      	mov	r1, r3
 800c53e:	4610      	mov	r0, r2
 800c540:	f7fe fa64 	bl	800aa0c <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800c544:	2301      	movs	r3, #1
 800c546:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c548:	697b      	ldr	r3, [r7, #20]
	}
 800c54a:	4618      	mov	r0, r3
 800c54c:	3718      	adds	r7, #24
 800c54e:	46bd      	mov	sp, r7
 800c550:	bd80      	pop	{r7, pc}
 800c552:	bf00      	nop
 800c554:	20000540 	.word	0x20000540
 800c558:	20000544 	.word	0x20000544
 800c55c:	20000648 	.word	0x20000648

0800c560 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800c560:	b580      	push	{r7, lr}
 800c562:	b088      	sub	sp, #32
 800c564:	af00      	add	r7, sp, #0
 800c566:	6078      	str	r0, [r7, #4]
 800c568:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800c56e:	2301      	movs	r3, #1
 800c570:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	2b00      	cmp	r3, #0
 800c576:	f000 8086 	beq.w	800c686 <vTaskPriorityDisinheritAfterTimeout+0x126>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800c57a:	69bb      	ldr	r3, [r7, #24]
 800c57c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c57e:	2b00      	cmp	r3, #0
 800c580:	d109      	bne.n	800c596 <vTaskPriorityDisinheritAfterTimeout+0x36>
 800c582:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c586:	f383 8811 	msr	BASEPRI, r3
 800c58a:	f3bf 8f6f 	isb	sy
 800c58e:	f3bf 8f4f 	dsb	sy
 800c592:	60fb      	str	r3, [r7, #12]
 800c594:	e7fe      	b.n	800c594 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800c596:	69bb      	ldr	r3, [r7, #24]
 800c598:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c59a:	683a      	ldr	r2, [r7, #0]
 800c59c:	429a      	cmp	r2, r3
 800c59e:	d902      	bls.n	800c5a6 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800c5a0:	683b      	ldr	r3, [r7, #0]
 800c5a2:	61fb      	str	r3, [r7, #28]
 800c5a4:	e002      	b.n	800c5ac <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800c5a6:	69bb      	ldr	r3, [r7, #24]
 800c5a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c5aa:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800c5ac:	69bb      	ldr	r3, [r7, #24]
 800c5ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c5b0:	69fa      	ldr	r2, [r7, #28]
 800c5b2:	429a      	cmp	r2, r3
 800c5b4:	d067      	beq.n	800c686 <vTaskPriorityDisinheritAfterTimeout+0x126>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800c5b6:	69bb      	ldr	r3, [r7, #24]
 800c5b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c5ba:	697a      	ldr	r2, [r7, #20]
 800c5bc:	429a      	cmp	r2, r3
 800c5be:	d162      	bne.n	800c686 <vTaskPriorityDisinheritAfterTimeout+0x126>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800c5c0:	4b33      	ldr	r3, [pc, #204]	; (800c690 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800c5c2:	681b      	ldr	r3, [r3, #0]
 800c5c4:	69ba      	ldr	r2, [r7, #24]
 800c5c6:	429a      	cmp	r2, r3
 800c5c8:	d109      	bne.n	800c5de <vTaskPriorityDisinheritAfterTimeout+0x7e>
 800c5ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5ce:	f383 8811 	msr	BASEPRI, r3
 800c5d2:	f3bf 8f6f 	isb	sy
 800c5d6:	f3bf 8f4f 	dsb	sy
 800c5da:	60bb      	str	r3, [r7, #8]
 800c5dc:	e7fe      	b.n	800c5dc <vTaskPriorityDisinheritAfterTimeout+0x7c>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800c5de:	69bb      	ldr	r3, [r7, #24]
 800c5e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c5e2:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800c5e4:	69bb      	ldr	r3, [r7, #24]
 800c5e6:	69fa      	ldr	r2, [r7, #28]
 800c5e8:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800c5ea:	69bb      	ldr	r3, [r7, #24]
 800c5ec:	699b      	ldr	r3, [r3, #24]
 800c5ee:	2b00      	cmp	r3, #0
 800c5f0:	db04      	blt.n	800c5fc <vTaskPriorityDisinheritAfterTimeout+0x9c>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c5f2:	69fb      	ldr	r3, [r7, #28]
 800c5f4:	f1c3 0207 	rsb	r2, r3, #7
 800c5f8:	69bb      	ldr	r3, [r7, #24]
 800c5fa:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800c5fc:	69bb      	ldr	r3, [r7, #24]
 800c5fe:	6959      	ldr	r1, [r3, #20]
 800c600:	693a      	ldr	r2, [r7, #16]
 800c602:	4613      	mov	r3, r2
 800c604:	009b      	lsls	r3, r3, #2
 800c606:	4413      	add	r3, r2
 800c608:	009b      	lsls	r3, r3, #2
 800c60a:	4a22      	ldr	r2, [pc, #136]	; (800c694 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800c60c:	4413      	add	r3, r2
 800c60e:	4299      	cmp	r1, r3
 800c610:	d101      	bne.n	800c616 <vTaskPriorityDisinheritAfterTimeout+0xb6>
 800c612:	2301      	movs	r3, #1
 800c614:	e000      	b.n	800c618 <vTaskPriorityDisinheritAfterTimeout+0xb8>
 800c616:	2300      	movs	r3, #0
 800c618:	2b00      	cmp	r3, #0
 800c61a:	d034      	beq.n	800c686 <vTaskPriorityDisinheritAfterTimeout+0x126>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c61c:	69bb      	ldr	r3, [r7, #24]
 800c61e:	3304      	adds	r3, #4
 800c620:	4618      	mov	r0, r3
 800c622:	f7fe fa4e 	bl	800aac2 <uxListRemove>
 800c626:	4603      	mov	r3, r0
 800c628:	2b00      	cmp	r3, #0
 800c62a:	d115      	bne.n	800c658 <vTaskPriorityDisinheritAfterTimeout+0xf8>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800c62c:	69bb      	ldr	r3, [r7, #24]
 800c62e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c630:	4918      	ldr	r1, [pc, #96]	; (800c694 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800c632:	4613      	mov	r3, r2
 800c634:	009b      	lsls	r3, r3, #2
 800c636:	4413      	add	r3, r2
 800c638:	009b      	lsls	r3, r3, #2
 800c63a:	440b      	add	r3, r1
 800c63c:	681b      	ldr	r3, [r3, #0]
 800c63e:	2b00      	cmp	r3, #0
 800c640:	d10a      	bne.n	800c658 <vTaskPriorityDisinheritAfterTimeout+0xf8>
 800c642:	69bb      	ldr	r3, [r7, #24]
 800c644:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c646:	2201      	movs	r2, #1
 800c648:	fa02 f303 	lsl.w	r3, r2, r3
 800c64c:	43da      	mvns	r2, r3
 800c64e:	4b12      	ldr	r3, [pc, #72]	; (800c698 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800c650:	681b      	ldr	r3, [r3, #0]
 800c652:	4013      	ands	r3, r2
 800c654:	4a10      	ldr	r2, [pc, #64]	; (800c698 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800c656:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800c658:	69bb      	ldr	r3, [r7, #24]
 800c65a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c65c:	2201      	movs	r2, #1
 800c65e:	409a      	lsls	r2, r3
 800c660:	4b0d      	ldr	r3, [pc, #52]	; (800c698 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800c662:	681b      	ldr	r3, [r3, #0]
 800c664:	4313      	orrs	r3, r2
 800c666:	4a0c      	ldr	r2, [pc, #48]	; (800c698 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800c668:	6013      	str	r3, [r2, #0]
 800c66a:	69bb      	ldr	r3, [r7, #24]
 800c66c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c66e:	4613      	mov	r3, r2
 800c670:	009b      	lsls	r3, r3, #2
 800c672:	4413      	add	r3, r2
 800c674:	009b      	lsls	r3, r3, #2
 800c676:	4a07      	ldr	r2, [pc, #28]	; (800c694 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800c678:	441a      	add	r2, r3
 800c67a:	69bb      	ldr	r3, [r7, #24]
 800c67c:	3304      	adds	r3, #4
 800c67e:	4619      	mov	r1, r3
 800c680:	4610      	mov	r0, r2
 800c682:	f7fe f9c3 	bl	800aa0c <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c686:	bf00      	nop
 800c688:	3720      	adds	r7, #32
 800c68a:	46bd      	mov	sp, r7
 800c68c:	bd80      	pop	{r7, pc}
 800c68e:	bf00      	nop
 800c690:	20000540 	.word	0x20000540
 800c694:	20000544 	.word	0x20000544
 800c698:	20000648 	.word	0x20000648

0800c69c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 800c69c:	b480      	push	{r7}
 800c69e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800c6a0:	4b07      	ldr	r3, [pc, #28]	; (800c6c0 <pvTaskIncrementMutexHeldCount+0x24>)
 800c6a2:	681b      	ldr	r3, [r3, #0]
 800c6a4:	2b00      	cmp	r3, #0
 800c6a6:	d004      	beq.n	800c6b2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800c6a8:	4b05      	ldr	r3, [pc, #20]	; (800c6c0 <pvTaskIncrementMutexHeldCount+0x24>)
 800c6aa:	681b      	ldr	r3, [r3, #0]
 800c6ac:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800c6ae:	3201      	adds	r2, #1
 800c6b0:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800c6b2:	4b03      	ldr	r3, [pc, #12]	; (800c6c0 <pvTaskIncrementMutexHeldCount+0x24>)
 800c6b4:	681b      	ldr	r3, [r3, #0]
	}
 800c6b6:	4618      	mov	r0, r3
 800c6b8:	46bd      	mov	sp, r7
 800c6ba:	bc80      	pop	{r7}
 800c6bc:	4770      	bx	lr
 800c6be:	bf00      	nop
 800c6c0:	20000540 	.word	0x20000540

0800c6c4 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800c6c4:	b580      	push	{r7, lr}
 800c6c6:	b084      	sub	sp, #16
 800c6c8:	af00      	add	r7, sp, #0
 800c6ca:	6078      	str	r0, [r7, #4]
 800c6cc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800c6ce:	4b29      	ldr	r3, [pc, #164]	; (800c774 <prvAddCurrentTaskToDelayedList+0xb0>)
 800c6d0:	681b      	ldr	r3, [r3, #0]
 800c6d2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c6d4:	4b28      	ldr	r3, [pc, #160]	; (800c778 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c6d6:	681b      	ldr	r3, [r3, #0]
 800c6d8:	3304      	adds	r3, #4
 800c6da:	4618      	mov	r0, r3
 800c6dc:	f7fe f9f1 	bl	800aac2 <uxListRemove>
 800c6e0:	4603      	mov	r3, r0
 800c6e2:	2b00      	cmp	r3, #0
 800c6e4:	d10b      	bne.n	800c6fe <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800c6e6:	4b24      	ldr	r3, [pc, #144]	; (800c778 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c6e8:	681b      	ldr	r3, [r3, #0]
 800c6ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c6ec:	2201      	movs	r2, #1
 800c6ee:	fa02 f303 	lsl.w	r3, r2, r3
 800c6f2:	43da      	mvns	r2, r3
 800c6f4:	4b21      	ldr	r3, [pc, #132]	; (800c77c <prvAddCurrentTaskToDelayedList+0xb8>)
 800c6f6:	681b      	ldr	r3, [r3, #0]
 800c6f8:	4013      	ands	r3, r2
 800c6fa:	4a20      	ldr	r2, [pc, #128]	; (800c77c <prvAddCurrentTaskToDelayedList+0xb8>)
 800c6fc:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c704:	d10a      	bne.n	800c71c <prvAddCurrentTaskToDelayedList+0x58>
 800c706:	683b      	ldr	r3, [r7, #0]
 800c708:	2b00      	cmp	r3, #0
 800c70a:	d007      	beq.n	800c71c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c70c:	4b1a      	ldr	r3, [pc, #104]	; (800c778 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c70e:	681b      	ldr	r3, [r3, #0]
 800c710:	3304      	adds	r3, #4
 800c712:	4619      	mov	r1, r3
 800c714:	481a      	ldr	r0, [pc, #104]	; (800c780 <prvAddCurrentTaskToDelayedList+0xbc>)
 800c716:	f7fe f979 	bl	800aa0c <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800c71a:	e026      	b.n	800c76a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800c71c:	68fa      	ldr	r2, [r7, #12]
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	4413      	add	r3, r2
 800c722:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800c724:	4b14      	ldr	r3, [pc, #80]	; (800c778 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c726:	681b      	ldr	r3, [r3, #0]
 800c728:	68ba      	ldr	r2, [r7, #8]
 800c72a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800c72c:	68ba      	ldr	r2, [r7, #8]
 800c72e:	68fb      	ldr	r3, [r7, #12]
 800c730:	429a      	cmp	r2, r3
 800c732:	d209      	bcs.n	800c748 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c734:	4b13      	ldr	r3, [pc, #76]	; (800c784 <prvAddCurrentTaskToDelayedList+0xc0>)
 800c736:	681a      	ldr	r2, [r3, #0]
 800c738:	4b0f      	ldr	r3, [pc, #60]	; (800c778 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c73a:	681b      	ldr	r3, [r3, #0]
 800c73c:	3304      	adds	r3, #4
 800c73e:	4619      	mov	r1, r3
 800c740:	4610      	mov	r0, r2
 800c742:	f7fe f986 	bl	800aa52 <vListInsert>
}
 800c746:	e010      	b.n	800c76a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c748:	4b0f      	ldr	r3, [pc, #60]	; (800c788 <prvAddCurrentTaskToDelayedList+0xc4>)
 800c74a:	681a      	ldr	r2, [r3, #0]
 800c74c:	4b0a      	ldr	r3, [pc, #40]	; (800c778 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c74e:	681b      	ldr	r3, [r3, #0]
 800c750:	3304      	adds	r3, #4
 800c752:	4619      	mov	r1, r3
 800c754:	4610      	mov	r0, r2
 800c756:	f7fe f97c 	bl	800aa52 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800c75a:	4b0c      	ldr	r3, [pc, #48]	; (800c78c <prvAddCurrentTaskToDelayedList+0xc8>)
 800c75c:	681b      	ldr	r3, [r3, #0]
 800c75e:	68ba      	ldr	r2, [r7, #8]
 800c760:	429a      	cmp	r2, r3
 800c762:	d202      	bcs.n	800c76a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800c764:	4a09      	ldr	r2, [pc, #36]	; (800c78c <prvAddCurrentTaskToDelayedList+0xc8>)
 800c766:	68bb      	ldr	r3, [r7, #8]
 800c768:	6013      	str	r3, [r2, #0]
}
 800c76a:	bf00      	nop
 800c76c:	3710      	adds	r7, #16
 800c76e:	46bd      	mov	sp, r7
 800c770:	bd80      	pop	{r7, pc}
 800c772:	bf00      	nop
 800c774:	20000644 	.word	0x20000644
 800c778:	20000540 	.word	0x20000540
 800c77c:	20000648 	.word	0x20000648
 800c780:	2000062c 	.word	0x2000062c
 800c784:	200005fc 	.word	0x200005fc
 800c788:	200005f8 	.word	0x200005f8
 800c78c:	20000660 	.word	0x20000660

0800c790 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c790:	b480      	push	{r7}
 800c792:	b085      	sub	sp, #20
 800c794:	af00      	add	r7, sp, #0
 800c796:	60f8      	str	r0, [r7, #12]
 800c798:	60b9      	str	r1, [r7, #8]
 800c79a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800c79c:	68fb      	ldr	r3, [r7, #12]
 800c79e:	3b04      	subs	r3, #4
 800c7a0:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c7a2:	68fb      	ldr	r3, [r7, #12]
 800c7a4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800c7a8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c7aa:	68fb      	ldr	r3, [r7, #12]
 800c7ac:	3b04      	subs	r3, #4
 800c7ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c7b0:	68bb      	ldr	r3, [r7, #8]
 800c7b2:	f023 0201 	bic.w	r2, r3, #1
 800c7b6:	68fb      	ldr	r3, [r7, #12]
 800c7b8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c7ba:	68fb      	ldr	r3, [r7, #12]
 800c7bc:	3b04      	subs	r3, #4
 800c7be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c7c0:	4a08      	ldr	r2, [pc, #32]	; (800c7e4 <pxPortInitialiseStack+0x54>)
 800c7c2:	68fb      	ldr	r3, [r7, #12]
 800c7c4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c7c6:	68fb      	ldr	r3, [r7, #12]
 800c7c8:	3b14      	subs	r3, #20
 800c7ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c7cc:	687a      	ldr	r2, [r7, #4]
 800c7ce:	68fb      	ldr	r3, [r7, #12]
 800c7d0:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c7d2:	68fb      	ldr	r3, [r7, #12]
 800c7d4:	3b20      	subs	r3, #32
 800c7d6:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c7d8:	68fb      	ldr	r3, [r7, #12]
}
 800c7da:	4618      	mov	r0, r3
 800c7dc:	3714      	adds	r7, #20
 800c7de:	46bd      	mov	sp, r7
 800c7e0:	bc80      	pop	{r7}
 800c7e2:	4770      	bx	lr
 800c7e4:	0800c7e9 	.word	0x0800c7e9

0800c7e8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c7e8:	b480      	push	{r7}
 800c7ea:	b085      	sub	sp, #20
 800c7ec:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800c7ee:	2300      	movs	r3, #0
 800c7f0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c7f2:	4b10      	ldr	r3, [pc, #64]	; (800c834 <prvTaskExitError+0x4c>)
 800c7f4:	681b      	ldr	r3, [r3, #0]
 800c7f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c7fa:	d009      	beq.n	800c810 <prvTaskExitError+0x28>
 800c7fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c800:	f383 8811 	msr	BASEPRI, r3
 800c804:	f3bf 8f6f 	isb	sy
 800c808:	f3bf 8f4f 	dsb	sy
 800c80c:	60fb      	str	r3, [r7, #12]
 800c80e:	e7fe      	b.n	800c80e <prvTaskExitError+0x26>
 800c810:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c814:	f383 8811 	msr	BASEPRI, r3
 800c818:	f3bf 8f6f 	isb	sy
 800c81c:	f3bf 8f4f 	dsb	sy
 800c820:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c822:	bf00      	nop
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	2b00      	cmp	r3, #0
 800c828:	d0fc      	beq.n	800c824 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c82a:	bf00      	nop
 800c82c:	3714      	adds	r7, #20
 800c82e:	46bd      	mov	sp, r7
 800c830:	bc80      	pop	{r7}
 800c832:	4770      	bx	lr
 800c834:	20000030 	.word	0x20000030
	...

0800c840 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c840:	4b07      	ldr	r3, [pc, #28]	; (800c860 <pxCurrentTCBConst2>)
 800c842:	6819      	ldr	r1, [r3, #0]
 800c844:	6808      	ldr	r0, [r1, #0]
 800c846:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800c84a:	f380 8809 	msr	PSP, r0
 800c84e:	f3bf 8f6f 	isb	sy
 800c852:	f04f 0000 	mov.w	r0, #0
 800c856:	f380 8811 	msr	BASEPRI, r0
 800c85a:	f04e 0e0d 	orr.w	lr, lr, #13
 800c85e:	4770      	bx	lr

0800c860 <pxCurrentTCBConst2>:
 800c860:	20000540 	.word	0x20000540
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c864:	bf00      	nop
 800c866:	bf00      	nop

0800c868 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 800c868:	4806      	ldr	r0, [pc, #24]	; (800c884 <prvPortStartFirstTask+0x1c>)
 800c86a:	6800      	ldr	r0, [r0, #0]
 800c86c:	6800      	ldr	r0, [r0, #0]
 800c86e:	f380 8808 	msr	MSP, r0
 800c872:	b662      	cpsie	i
 800c874:	b661      	cpsie	f
 800c876:	f3bf 8f4f 	dsb	sy
 800c87a:	f3bf 8f6f 	isb	sy
 800c87e:	df00      	svc	0
 800c880:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c882:	bf00      	nop
 800c884:	e000ed08 	.word	0xe000ed08

0800c888 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c888:	b580      	push	{r7, lr}
 800c88a:	b084      	sub	sp, #16
 800c88c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c88e:	4b31      	ldr	r3, [pc, #196]	; (800c954 <xPortStartScheduler+0xcc>)
 800c890:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c892:	68fb      	ldr	r3, [r7, #12]
 800c894:	781b      	ldrb	r3, [r3, #0]
 800c896:	b2db      	uxtb	r3, r3
 800c898:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c89a:	68fb      	ldr	r3, [r7, #12]
 800c89c:	22ff      	movs	r2, #255	; 0xff
 800c89e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c8a0:	68fb      	ldr	r3, [r7, #12]
 800c8a2:	781b      	ldrb	r3, [r3, #0]
 800c8a4:	b2db      	uxtb	r3, r3
 800c8a6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c8a8:	78fb      	ldrb	r3, [r7, #3]
 800c8aa:	b2db      	uxtb	r3, r3
 800c8ac:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800c8b0:	b2da      	uxtb	r2, r3
 800c8b2:	4b29      	ldr	r3, [pc, #164]	; (800c958 <xPortStartScheduler+0xd0>)
 800c8b4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c8b6:	4b29      	ldr	r3, [pc, #164]	; (800c95c <xPortStartScheduler+0xd4>)
 800c8b8:	2207      	movs	r2, #7
 800c8ba:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c8bc:	e009      	b.n	800c8d2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800c8be:	4b27      	ldr	r3, [pc, #156]	; (800c95c <xPortStartScheduler+0xd4>)
 800c8c0:	681b      	ldr	r3, [r3, #0]
 800c8c2:	3b01      	subs	r3, #1
 800c8c4:	4a25      	ldr	r2, [pc, #148]	; (800c95c <xPortStartScheduler+0xd4>)
 800c8c6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c8c8:	78fb      	ldrb	r3, [r7, #3]
 800c8ca:	b2db      	uxtb	r3, r3
 800c8cc:	005b      	lsls	r3, r3, #1
 800c8ce:	b2db      	uxtb	r3, r3
 800c8d0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c8d2:	78fb      	ldrb	r3, [r7, #3]
 800c8d4:	b2db      	uxtb	r3, r3
 800c8d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c8da:	2b80      	cmp	r3, #128	; 0x80
 800c8dc:	d0ef      	beq.n	800c8be <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c8de:	4b1f      	ldr	r3, [pc, #124]	; (800c95c <xPortStartScheduler+0xd4>)
 800c8e0:	681b      	ldr	r3, [r3, #0]
 800c8e2:	f1c3 0307 	rsb	r3, r3, #7
 800c8e6:	2b04      	cmp	r3, #4
 800c8e8:	d009      	beq.n	800c8fe <xPortStartScheduler+0x76>
 800c8ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8ee:	f383 8811 	msr	BASEPRI, r3
 800c8f2:	f3bf 8f6f 	isb	sy
 800c8f6:	f3bf 8f4f 	dsb	sy
 800c8fa:	60bb      	str	r3, [r7, #8]
 800c8fc:	e7fe      	b.n	800c8fc <xPortStartScheduler+0x74>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c8fe:	4b17      	ldr	r3, [pc, #92]	; (800c95c <xPortStartScheduler+0xd4>)
 800c900:	681b      	ldr	r3, [r3, #0]
 800c902:	021b      	lsls	r3, r3, #8
 800c904:	4a15      	ldr	r2, [pc, #84]	; (800c95c <xPortStartScheduler+0xd4>)
 800c906:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c908:	4b14      	ldr	r3, [pc, #80]	; (800c95c <xPortStartScheduler+0xd4>)
 800c90a:	681b      	ldr	r3, [r3, #0]
 800c90c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800c910:	4a12      	ldr	r2, [pc, #72]	; (800c95c <xPortStartScheduler+0xd4>)
 800c912:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	b2da      	uxtb	r2, r3
 800c918:	68fb      	ldr	r3, [r7, #12]
 800c91a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c91c:	4b10      	ldr	r3, [pc, #64]	; (800c960 <xPortStartScheduler+0xd8>)
 800c91e:	681b      	ldr	r3, [r3, #0]
 800c920:	4a0f      	ldr	r2, [pc, #60]	; (800c960 <xPortStartScheduler+0xd8>)
 800c922:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800c926:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c928:	4b0d      	ldr	r3, [pc, #52]	; (800c960 <xPortStartScheduler+0xd8>)
 800c92a:	681b      	ldr	r3, [r3, #0]
 800c92c:	4a0c      	ldr	r2, [pc, #48]	; (800c960 <xPortStartScheduler+0xd8>)
 800c92e:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800c932:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c934:	f000 f8b0 	bl	800ca98 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c938:	4b0a      	ldr	r3, [pc, #40]	; (800c964 <xPortStartScheduler+0xdc>)
 800c93a:	2200      	movs	r2, #0
 800c93c:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c93e:	f7ff ff93 	bl	800c868 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c942:	f7ff faad 	bl	800bea0 <vTaskSwitchContext>
	prvTaskExitError();
 800c946:	f7ff ff4f 	bl	800c7e8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c94a:	2300      	movs	r3, #0
}
 800c94c:	4618      	mov	r0, r3
 800c94e:	3710      	adds	r7, #16
 800c950:	46bd      	mov	sp, r7
 800c952:	bd80      	pop	{r7, pc}
 800c954:	e000e400 	.word	0xe000e400
 800c958:	2000066c 	.word	0x2000066c
 800c95c:	20000670 	.word	0x20000670
 800c960:	e000ed20 	.word	0xe000ed20
 800c964:	20000030 	.word	0x20000030

0800c968 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c968:	b480      	push	{r7}
 800c96a:	b083      	sub	sp, #12
 800c96c:	af00      	add	r7, sp, #0
 800c96e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c972:	f383 8811 	msr	BASEPRI, r3
 800c976:	f3bf 8f6f 	isb	sy
 800c97a:	f3bf 8f4f 	dsb	sy
 800c97e:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c980:	4b0e      	ldr	r3, [pc, #56]	; (800c9bc <vPortEnterCritical+0x54>)
 800c982:	681b      	ldr	r3, [r3, #0]
 800c984:	3301      	adds	r3, #1
 800c986:	4a0d      	ldr	r2, [pc, #52]	; (800c9bc <vPortEnterCritical+0x54>)
 800c988:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c98a:	4b0c      	ldr	r3, [pc, #48]	; (800c9bc <vPortEnterCritical+0x54>)
 800c98c:	681b      	ldr	r3, [r3, #0]
 800c98e:	2b01      	cmp	r3, #1
 800c990:	d10e      	bne.n	800c9b0 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c992:	4b0b      	ldr	r3, [pc, #44]	; (800c9c0 <vPortEnterCritical+0x58>)
 800c994:	681b      	ldr	r3, [r3, #0]
 800c996:	b2db      	uxtb	r3, r3
 800c998:	2b00      	cmp	r3, #0
 800c99a:	d009      	beq.n	800c9b0 <vPortEnterCritical+0x48>
 800c99c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9a0:	f383 8811 	msr	BASEPRI, r3
 800c9a4:	f3bf 8f6f 	isb	sy
 800c9a8:	f3bf 8f4f 	dsb	sy
 800c9ac:	603b      	str	r3, [r7, #0]
 800c9ae:	e7fe      	b.n	800c9ae <vPortEnterCritical+0x46>
	}
}
 800c9b0:	bf00      	nop
 800c9b2:	370c      	adds	r7, #12
 800c9b4:	46bd      	mov	sp, r7
 800c9b6:	bc80      	pop	{r7}
 800c9b8:	4770      	bx	lr
 800c9ba:	bf00      	nop
 800c9bc:	20000030 	.word	0x20000030
 800c9c0:	e000ed04 	.word	0xe000ed04

0800c9c4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c9c4:	b480      	push	{r7}
 800c9c6:	b083      	sub	sp, #12
 800c9c8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c9ca:	4b10      	ldr	r3, [pc, #64]	; (800ca0c <vPortExitCritical+0x48>)
 800c9cc:	681b      	ldr	r3, [r3, #0]
 800c9ce:	2b00      	cmp	r3, #0
 800c9d0:	d109      	bne.n	800c9e6 <vPortExitCritical+0x22>
 800c9d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9d6:	f383 8811 	msr	BASEPRI, r3
 800c9da:	f3bf 8f6f 	isb	sy
 800c9de:	f3bf 8f4f 	dsb	sy
 800c9e2:	607b      	str	r3, [r7, #4]
 800c9e4:	e7fe      	b.n	800c9e4 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800c9e6:	4b09      	ldr	r3, [pc, #36]	; (800ca0c <vPortExitCritical+0x48>)
 800c9e8:	681b      	ldr	r3, [r3, #0]
 800c9ea:	3b01      	subs	r3, #1
 800c9ec:	4a07      	ldr	r2, [pc, #28]	; (800ca0c <vPortExitCritical+0x48>)
 800c9ee:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c9f0:	4b06      	ldr	r3, [pc, #24]	; (800ca0c <vPortExitCritical+0x48>)
 800c9f2:	681b      	ldr	r3, [r3, #0]
 800c9f4:	2b00      	cmp	r3, #0
 800c9f6:	d104      	bne.n	800ca02 <vPortExitCritical+0x3e>
 800c9f8:	2300      	movs	r3, #0
 800c9fa:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c9fc:	683b      	ldr	r3, [r7, #0]
 800c9fe:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800ca02:	bf00      	nop
 800ca04:	370c      	adds	r7, #12
 800ca06:	46bd      	mov	sp, r7
 800ca08:	bc80      	pop	{r7}
 800ca0a:	4770      	bx	lr
 800ca0c:	20000030 	.word	0x20000030

0800ca10 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800ca10:	f3ef 8009 	mrs	r0, PSP
 800ca14:	f3bf 8f6f 	isb	sy
 800ca18:	4b0d      	ldr	r3, [pc, #52]	; (800ca50 <pxCurrentTCBConst>)
 800ca1a:	681a      	ldr	r2, [r3, #0]
 800ca1c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800ca20:	6010      	str	r0, [r2, #0]
 800ca22:	e92d 4008 	stmdb	sp!, {r3, lr}
 800ca26:	f04f 0050 	mov.w	r0, #80	; 0x50
 800ca2a:	f380 8811 	msr	BASEPRI, r0
 800ca2e:	f7ff fa37 	bl	800bea0 <vTaskSwitchContext>
 800ca32:	f04f 0000 	mov.w	r0, #0
 800ca36:	f380 8811 	msr	BASEPRI, r0
 800ca3a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800ca3e:	6819      	ldr	r1, [r3, #0]
 800ca40:	6808      	ldr	r0, [r1, #0]
 800ca42:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800ca46:	f380 8809 	msr	PSP, r0
 800ca4a:	f3bf 8f6f 	isb	sy
 800ca4e:	4770      	bx	lr

0800ca50 <pxCurrentTCBConst>:
 800ca50:	20000540 	.word	0x20000540
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800ca54:	bf00      	nop
 800ca56:	bf00      	nop

0800ca58 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800ca58:	b580      	push	{r7, lr}
 800ca5a:	b082      	sub	sp, #8
 800ca5c:	af00      	add	r7, sp, #0
	__asm volatile
 800ca5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca62:	f383 8811 	msr	BASEPRI, r3
 800ca66:	f3bf 8f6f 	isb	sy
 800ca6a:	f3bf 8f4f 	dsb	sy
 800ca6e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800ca70:	f7ff f95a 	bl	800bd28 <xTaskIncrementTick>
 800ca74:	4603      	mov	r3, r0
 800ca76:	2b00      	cmp	r3, #0
 800ca78:	d003      	beq.n	800ca82 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800ca7a:	4b06      	ldr	r3, [pc, #24]	; (800ca94 <SysTick_Handler+0x3c>)
 800ca7c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ca80:	601a      	str	r2, [r3, #0]
 800ca82:	2300      	movs	r3, #0
 800ca84:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ca86:	683b      	ldr	r3, [r7, #0]
 800ca88:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800ca8c:	bf00      	nop
 800ca8e:	3708      	adds	r7, #8
 800ca90:	46bd      	mov	sp, r7
 800ca92:	bd80      	pop	{r7, pc}
 800ca94:	e000ed04 	.word	0xe000ed04

0800ca98 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800ca98:	b480      	push	{r7}
 800ca9a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800ca9c:	4b0a      	ldr	r3, [pc, #40]	; (800cac8 <vPortSetupTimerInterrupt+0x30>)
 800ca9e:	2200      	movs	r2, #0
 800caa0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800caa2:	4b0a      	ldr	r3, [pc, #40]	; (800cacc <vPortSetupTimerInterrupt+0x34>)
 800caa4:	2200      	movs	r2, #0
 800caa6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800caa8:	4b09      	ldr	r3, [pc, #36]	; (800cad0 <vPortSetupTimerInterrupt+0x38>)
 800caaa:	681b      	ldr	r3, [r3, #0]
 800caac:	4a09      	ldr	r2, [pc, #36]	; (800cad4 <vPortSetupTimerInterrupt+0x3c>)
 800caae:	fba2 2303 	umull	r2, r3, r2, r3
 800cab2:	099b      	lsrs	r3, r3, #6
 800cab4:	4a08      	ldr	r2, [pc, #32]	; (800cad8 <vPortSetupTimerInterrupt+0x40>)
 800cab6:	3b01      	subs	r3, #1
 800cab8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800caba:	4b03      	ldr	r3, [pc, #12]	; (800cac8 <vPortSetupTimerInterrupt+0x30>)
 800cabc:	2207      	movs	r2, #7
 800cabe:	601a      	str	r2, [r3, #0]
}
 800cac0:	bf00      	nop
 800cac2:	46bd      	mov	sp, r7
 800cac4:	bc80      	pop	{r7}
 800cac6:	4770      	bx	lr
 800cac8:	e000e010 	.word	0xe000e010
 800cacc:	e000e018 	.word	0xe000e018
 800cad0:	20000010 	.word	0x20000010
 800cad4:	10624dd3 	.word	0x10624dd3
 800cad8:	e000e014 	.word	0xe000e014

0800cadc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800cadc:	b480      	push	{r7}
 800cade:	b085      	sub	sp, #20
 800cae0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800cae2:	f3ef 8305 	mrs	r3, IPSR
 800cae6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800cae8:	68fb      	ldr	r3, [r7, #12]
 800caea:	2b0f      	cmp	r3, #15
 800caec:	d913      	bls.n	800cb16 <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800caee:	4a15      	ldr	r2, [pc, #84]	; (800cb44 <vPortValidateInterruptPriority+0x68>)
 800caf0:	68fb      	ldr	r3, [r7, #12]
 800caf2:	4413      	add	r3, r2
 800caf4:	781b      	ldrb	r3, [r3, #0]
 800caf6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800caf8:	4b13      	ldr	r3, [pc, #76]	; (800cb48 <vPortValidateInterruptPriority+0x6c>)
 800cafa:	781b      	ldrb	r3, [r3, #0]
 800cafc:	7afa      	ldrb	r2, [r7, #11]
 800cafe:	429a      	cmp	r2, r3
 800cb00:	d209      	bcs.n	800cb16 <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800cb02:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb06:	f383 8811 	msr	BASEPRI, r3
 800cb0a:	f3bf 8f6f 	isb	sy
 800cb0e:	f3bf 8f4f 	dsb	sy
 800cb12:	607b      	str	r3, [r7, #4]
 800cb14:	e7fe      	b.n	800cb14 <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800cb16:	4b0d      	ldr	r3, [pc, #52]	; (800cb4c <vPortValidateInterruptPriority+0x70>)
 800cb18:	681b      	ldr	r3, [r3, #0]
 800cb1a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800cb1e:	4b0c      	ldr	r3, [pc, #48]	; (800cb50 <vPortValidateInterruptPriority+0x74>)
 800cb20:	681b      	ldr	r3, [r3, #0]
 800cb22:	429a      	cmp	r2, r3
 800cb24:	d909      	bls.n	800cb3a <vPortValidateInterruptPriority+0x5e>
 800cb26:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb2a:	f383 8811 	msr	BASEPRI, r3
 800cb2e:	f3bf 8f6f 	isb	sy
 800cb32:	f3bf 8f4f 	dsb	sy
 800cb36:	603b      	str	r3, [r7, #0]
 800cb38:	e7fe      	b.n	800cb38 <vPortValidateInterruptPriority+0x5c>
	}
 800cb3a:	bf00      	nop
 800cb3c:	3714      	adds	r7, #20
 800cb3e:	46bd      	mov	sp, r7
 800cb40:	bc80      	pop	{r7}
 800cb42:	4770      	bx	lr
 800cb44:	e000e3f0 	.word	0xe000e3f0
 800cb48:	2000066c 	.word	0x2000066c
 800cb4c:	e000ed0c 	.word	0xe000ed0c
 800cb50:	20000670 	.word	0x20000670

0800cb54 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800cb54:	b580      	push	{r7, lr}
 800cb56:	b08a      	sub	sp, #40	; 0x28
 800cb58:	af00      	add	r7, sp, #0
 800cb5a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800cb5c:	2300      	movs	r3, #0
 800cb5e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800cb60:	f7ff f838 	bl	800bbd4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800cb64:	4b57      	ldr	r3, [pc, #348]	; (800ccc4 <pvPortMalloc+0x170>)
 800cb66:	681b      	ldr	r3, [r3, #0]
 800cb68:	2b00      	cmp	r3, #0
 800cb6a:	d101      	bne.n	800cb70 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800cb6c:	f000 f90c 	bl	800cd88 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800cb70:	4b55      	ldr	r3, [pc, #340]	; (800ccc8 <pvPortMalloc+0x174>)
 800cb72:	681a      	ldr	r2, [r3, #0]
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	4013      	ands	r3, r2
 800cb78:	2b00      	cmp	r3, #0
 800cb7a:	f040 808c 	bne.w	800cc96 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	2b00      	cmp	r3, #0
 800cb82:	d01c      	beq.n	800cbbe <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 800cb84:	2208      	movs	r2, #8
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	4413      	add	r3, r2
 800cb8a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	f003 0307 	and.w	r3, r3, #7
 800cb92:	2b00      	cmp	r3, #0
 800cb94:	d013      	beq.n	800cbbe <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	f023 0307 	bic.w	r3, r3, #7
 800cb9c:	3308      	adds	r3, #8
 800cb9e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	f003 0307 	and.w	r3, r3, #7
 800cba6:	2b00      	cmp	r3, #0
 800cba8:	d009      	beq.n	800cbbe <pvPortMalloc+0x6a>
 800cbaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbae:	f383 8811 	msr	BASEPRI, r3
 800cbb2:	f3bf 8f6f 	isb	sy
 800cbb6:	f3bf 8f4f 	dsb	sy
 800cbba:	617b      	str	r3, [r7, #20]
 800cbbc:	e7fe      	b.n	800cbbc <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	2b00      	cmp	r3, #0
 800cbc2:	d068      	beq.n	800cc96 <pvPortMalloc+0x142>
 800cbc4:	4b41      	ldr	r3, [pc, #260]	; (800cccc <pvPortMalloc+0x178>)
 800cbc6:	681b      	ldr	r3, [r3, #0]
 800cbc8:	687a      	ldr	r2, [r7, #4]
 800cbca:	429a      	cmp	r2, r3
 800cbcc:	d863      	bhi.n	800cc96 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800cbce:	4b40      	ldr	r3, [pc, #256]	; (800ccd0 <pvPortMalloc+0x17c>)
 800cbd0:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800cbd2:	4b3f      	ldr	r3, [pc, #252]	; (800ccd0 <pvPortMalloc+0x17c>)
 800cbd4:	681b      	ldr	r3, [r3, #0]
 800cbd6:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800cbd8:	e004      	b.n	800cbe4 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800cbda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbdc:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800cbde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbe0:	681b      	ldr	r3, [r3, #0]
 800cbe2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800cbe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbe6:	685b      	ldr	r3, [r3, #4]
 800cbe8:	687a      	ldr	r2, [r7, #4]
 800cbea:	429a      	cmp	r2, r3
 800cbec:	d903      	bls.n	800cbf6 <pvPortMalloc+0xa2>
 800cbee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbf0:	681b      	ldr	r3, [r3, #0]
 800cbf2:	2b00      	cmp	r3, #0
 800cbf4:	d1f1      	bne.n	800cbda <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800cbf6:	4b33      	ldr	r3, [pc, #204]	; (800ccc4 <pvPortMalloc+0x170>)
 800cbf8:	681b      	ldr	r3, [r3, #0]
 800cbfa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cbfc:	429a      	cmp	r2, r3
 800cbfe:	d04a      	beq.n	800cc96 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800cc00:	6a3b      	ldr	r3, [r7, #32]
 800cc02:	681b      	ldr	r3, [r3, #0]
 800cc04:	2208      	movs	r2, #8
 800cc06:	4413      	add	r3, r2
 800cc08:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800cc0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc0c:	681a      	ldr	r2, [r3, #0]
 800cc0e:	6a3b      	ldr	r3, [r7, #32]
 800cc10:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800cc12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc14:	685a      	ldr	r2, [r3, #4]
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	1ad2      	subs	r2, r2, r3
 800cc1a:	2308      	movs	r3, #8
 800cc1c:	005b      	lsls	r3, r3, #1
 800cc1e:	429a      	cmp	r2, r3
 800cc20:	d91e      	bls.n	800cc60 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800cc22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	4413      	add	r3, r2
 800cc28:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800cc2a:	69bb      	ldr	r3, [r7, #24]
 800cc2c:	f003 0307 	and.w	r3, r3, #7
 800cc30:	2b00      	cmp	r3, #0
 800cc32:	d009      	beq.n	800cc48 <pvPortMalloc+0xf4>
 800cc34:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc38:	f383 8811 	msr	BASEPRI, r3
 800cc3c:	f3bf 8f6f 	isb	sy
 800cc40:	f3bf 8f4f 	dsb	sy
 800cc44:	613b      	str	r3, [r7, #16]
 800cc46:	e7fe      	b.n	800cc46 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800cc48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc4a:	685a      	ldr	r2, [r3, #4]
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	1ad2      	subs	r2, r2, r3
 800cc50:	69bb      	ldr	r3, [r7, #24]
 800cc52:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800cc54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc56:	687a      	ldr	r2, [r7, #4]
 800cc58:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800cc5a:	69b8      	ldr	r0, [r7, #24]
 800cc5c:	f000 f8f6 	bl	800ce4c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800cc60:	4b1a      	ldr	r3, [pc, #104]	; (800cccc <pvPortMalloc+0x178>)
 800cc62:	681a      	ldr	r2, [r3, #0]
 800cc64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc66:	685b      	ldr	r3, [r3, #4]
 800cc68:	1ad3      	subs	r3, r2, r3
 800cc6a:	4a18      	ldr	r2, [pc, #96]	; (800cccc <pvPortMalloc+0x178>)
 800cc6c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800cc6e:	4b17      	ldr	r3, [pc, #92]	; (800cccc <pvPortMalloc+0x178>)
 800cc70:	681a      	ldr	r2, [r3, #0]
 800cc72:	4b18      	ldr	r3, [pc, #96]	; (800ccd4 <pvPortMalloc+0x180>)
 800cc74:	681b      	ldr	r3, [r3, #0]
 800cc76:	429a      	cmp	r2, r3
 800cc78:	d203      	bcs.n	800cc82 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800cc7a:	4b14      	ldr	r3, [pc, #80]	; (800cccc <pvPortMalloc+0x178>)
 800cc7c:	681b      	ldr	r3, [r3, #0]
 800cc7e:	4a15      	ldr	r2, [pc, #84]	; (800ccd4 <pvPortMalloc+0x180>)
 800cc80:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800cc82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc84:	685a      	ldr	r2, [r3, #4]
 800cc86:	4b10      	ldr	r3, [pc, #64]	; (800ccc8 <pvPortMalloc+0x174>)
 800cc88:	681b      	ldr	r3, [r3, #0]
 800cc8a:	431a      	orrs	r2, r3
 800cc8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc8e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800cc90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc92:	2200      	movs	r2, #0
 800cc94:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800cc96:	f7fe ffab 	bl	800bbf0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800cc9a:	69fb      	ldr	r3, [r7, #28]
 800cc9c:	f003 0307 	and.w	r3, r3, #7
 800cca0:	2b00      	cmp	r3, #0
 800cca2:	d009      	beq.n	800ccb8 <pvPortMalloc+0x164>
 800cca4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cca8:	f383 8811 	msr	BASEPRI, r3
 800ccac:	f3bf 8f6f 	isb	sy
 800ccb0:	f3bf 8f4f 	dsb	sy
 800ccb4:	60fb      	str	r3, [r7, #12]
 800ccb6:	e7fe      	b.n	800ccb6 <pvPortMalloc+0x162>
	return pvReturn;
 800ccb8:	69fb      	ldr	r3, [r7, #28]
}
 800ccba:	4618      	mov	r0, r3
 800ccbc:	3728      	adds	r7, #40	; 0x28
 800ccbe:	46bd      	mov	sp, r7
 800ccc0:	bd80      	pop	{r7, pc}
 800ccc2:	bf00      	nop
 800ccc4:	200016e8 	.word	0x200016e8
 800ccc8:	200016f4 	.word	0x200016f4
 800cccc:	200016ec 	.word	0x200016ec
 800ccd0:	200016e0 	.word	0x200016e0
 800ccd4:	200016f0 	.word	0x200016f0

0800ccd8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800ccd8:	b580      	push	{r7, lr}
 800ccda:	b086      	sub	sp, #24
 800ccdc:	af00      	add	r7, sp, #0
 800ccde:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	2b00      	cmp	r3, #0
 800cce8:	d046      	beq.n	800cd78 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800ccea:	2308      	movs	r3, #8
 800ccec:	425b      	negs	r3, r3
 800ccee:	697a      	ldr	r2, [r7, #20]
 800ccf0:	4413      	add	r3, r2
 800ccf2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800ccf4:	697b      	ldr	r3, [r7, #20]
 800ccf6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800ccf8:	693b      	ldr	r3, [r7, #16]
 800ccfa:	685a      	ldr	r2, [r3, #4]
 800ccfc:	4b20      	ldr	r3, [pc, #128]	; (800cd80 <vPortFree+0xa8>)
 800ccfe:	681b      	ldr	r3, [r3, #0]
 800cd00:	4013      	ands	r3, r2
 800cd02:	2b00      	cmp	r3, #0
 800cd04:	d109      	bne.n	800cd1a <vPortFree+0x42>
 800cd06:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd0a:	f383 8811 	msr	BASEPRI, r3
 800cd0e:	f3bf 8f6f 	isb	sy
 800cd12:	f3bf 8f4f 	dsb	sy
 800cd16:	60fb      	str	r3, [r7, #12]
 800cd18:	e7fe      	b.n	800cd18 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800cd1a:	693b      	ldr	r3, [r7, #16]
 800cd1c:	681b      	ldr	r3, [r3, #0]
 800cd1e:	2b00      	cmp	r3, #0
 800cd20:	d009      	beq.n	800cd36 <vPortFree+0x5e>
 800cd22:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd26:	f383 8811 	msr	BASEPRI, r3
 800cd2a:	f3bf 8f6f 	isb	sy
 800cd2e:	f3bf 8f4f 	dsb	sy
 800cd32:	60bb      	str	r3, [r7, #8]
 800cd34:	e7fe      	b.n	800cd34 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800cd36:	693b      	ldr	r3, [r7, #16]
 800cd38:	685a      	ldr	r2, [r3, #4]
 800cd3a:	4b11      	ldr	r3, [pc, #68]	; (800cd80 <vPortFree+0xa8>)
 800cd3c:	681b      	ldr	r3, [r3, #0]
 800cd3e:	4013      	ands	r3, r2
 800cd40:	2b00      	cmp	r3, #0
 800cd42:	d019      	beq.n	800cd78 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800cd44:	693b      	ldr	r3, [r7, #16]
 800cd46:	681b      	ldr	r3, [r3, #0]
 800cd48:	2b00      	cmp	r3, #0
 800cd4a:	d115      	bne.n	800cd78 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800cd4c:	693b      	ldr	r3, [r7, #16]
 800cd4e:	685a      	ldr	r2, [r3, #4]
 800cd50:	4b0b      	ldr	r3, [pc, #44]	; (800cd80 <vPortFree+0xa8>)
 800cd52:	681b      	ldr	r3, [r3, #0]
 800cd54:	43db      	mvns	r3, r3
 800cd56:	401a      	ands	r2, r3
 800cd58:	693b      	ldr	r3, [r7, #16]
 800cd5a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800cd5c:	f7fe ff3a 	bl	800bbd4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800cd60:	693b      	ldr	r3, [r7, #16]
 800cd62:	685a      	ldr	r2, [r3, #4]
 800cd64:	4b07      	ldr	r3, [pc, #28]	; (800cd84 <vPortFree+0xac>)
 800cd66:	681b      	ldr	r3, [r3, #0]
 800cd68:	4413      	add	r3, r2
 800cd6a:	4a06      	ldr	r2, [pc, #24]	; (800cd84 <vPortFree+0xac>)
 800cd6c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800cd6e:	6938      	ldr	r0, [r7, #16]
 800cd70:	f000 f86c 	bl	800ce4c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800cd74:	f7fe ff3c 	bl	800bbf0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800cd78:	bf00      	nop
 800cd7a:	3718      	adds	r7, #24
 800cd7c:	46bd      	mov	sp, r7
 800cd7e:	bd80      	pop	{r7, pc}
 800cd80:	200016f4 	.word	0x200016f4
 800cd84:	200016ec 	.word	0x200016ec

0800cd88 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800cd88:	b480      	push	{r7}
 800cd8a:	b085      	sub	sp, #20
 800cd8c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800cd8e:	f241 036c 	movw	r3, #4204	; 0x106c
 800cd92:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800cd94:	4b27      	ldr	r3, [pc, #156]	; (800ce34 <prvHeapInit+0xac>)
 800cd96:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800cd98:	68fb      	ldr	r3, [r7, #12]
 800cd9a:	f003 0307 	and.w	r3, r3, #7
 800cd9e:	2b00      	cmp	r3, #0
 800cda0:	d00c      	beq.n	800cdbc <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800cda2:	68fb      	ldr	r3, [r7, #12]
 800cda4:	3307      	adds	r3, #7
 800cda6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800cda8:	68fb      	ldr	r3, [r7, #12]
 800cdaa:	f023 0307 	bic.w	r3, r3, #7
 800cdae:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800cdb0:	68ba      	ldr	r2, [r7, #8]
 800cdb2:	68fb      	ldr	r3, [r7, #12]
 800cdb4:	1ad3      	subs	r3, r2, r3
 800cdb6:	4a1f      	ldr	r2, [pc, #124]	; (800ce34 <prvHeapInit+0xac>)
 800cdb8:	4413      	add	r3, r2
 800cdba:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800cdbc:	68fb      	ldr	r3, [r7, #12]
 800cdbe:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800cdc0:	4a1d      	ldr	r2, [pc, #116]	; (800ce38 <prvHeapInit+0xb0>)
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800cdc6:	4b1c      	ldr	r3, [pc, #112]	; (800ce38 <prvHeapInit+0xb0>)
 800cdc8:	2200      	movs	r2, #0
 800cdca:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	68ba      	ldr	r2, [r7, #8]
 800cdd0:	4413      	add	r3, r2
 800cdd2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800cdd4:	2208      	movs	r2, #8
 800cdd6:	68fb      	ldr	r3, [r7, #12]
 800cdd8:	1a9b      	subs	r3, r3, r2
 800cdda:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800cddc:	68fb      	ldr	r3, [r7, #12]
 800cdde:	f023 0307 	bic.w	r3, r3, #7
 800cde2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800cde4:	68fb      	ldr	r3, [r7, #12]
 800cde6:	4a15      	ldr	r2, [pc, #84]	; (800ce3c <prvHeapInit+0xb4>)
 800cde8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800cdea:	4b14      	ldr	r3, [pc, #80]	; (800ce3c <prvHeapInit+0xb4>)
 800cdec:	681b      	ldr	r3, [r3, #0]
 800cdee:	2200      	movs	r2, #0
 800cdf0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800cdf2:	4b12      	ldr	r3, [pc, #72]	; (800ce3c <prvHeapInit+0xb4>)
 800cdf4:	681b      	ldr	r3, [r3, #0]
 800cdf6:	2200      	movs	r2, #0
 800cdf8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800cdfe:	683b      	ldr	r3, [r7, #0]
 800ce00:	68fa      	ldr	r2, [r7, #12]
 800ce02:	1ad2      	subs	r2, r2, r3
 800ce04:	683b      	ldr	r3, [r7, #0]
 800ce06:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800ce08:	4b0c      	ldr	r3, [pc, #48]	; (800ce3c <prvHeapInit+0xb4>)
 800ce0a:	681a      	ldr	r2, [r3, #0]
 800ce0c:	683b      	ldr	r3, [r7, #0]
 800ce0e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ce10:	683b      	ldr	r3, [r7, #0]
 800ce12:	685b      	ldr	r3, [r3, #4]
 800ce14:	4a0a      	ldr	r2, [pc, #40]	; (800ce40 <prvHeapInit+0xb8>)
 800ce16:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ce18:	683b      	ldr	r3, [r7, #0]
 800ce1a:	685b      	ldr	r3, [r3, #4]
 800ce1c:	4a09      	ldr	r2, [pc, #36]	; (800ce44 <prvHeapInit+0xbc>)
 800ce1e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800ce20:	4b09      	ldr	r3, [pc, #36]	; (800ce48 <prvHeapInit+0xc0>)
 800ce22:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800ce26:	601a      	str	r2, [r3, #0]
}
 800ce28:	bf00      	nop
 800ce2a:	3714      	adds	r7, #20
 800ce2c:	46bd      	mov	sp, r7
 800ce2e:	bc80      	pop	{r7}
 800ce30:	4770      	bx	lr
 800ce32:	bf00      	nop
 800ce34:	20000674 	.word	0x20000674
 800ce38:	200016e0 	.word	0x200016e0
 800ce3c:	200016e8 	.word	0x200016e8
 800ce40:	200016f0 	.word	0x200016f0
 800ce44:	200016ec 	.word	0x200016ec
 800ce48:	200016f4 	.word	0x200016f4

0800ce4c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800ce4c:	b480      	push	{r7}
 800ce4e:	b085      	sub	sp, #20
 800ce50:	af00      	add	r7, sp, #0
 800ce52:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800ce54:	4b27      	ldr	r3, [pc, #156]	; (800cef4 <prvInsertBlockIntoFreeList+0xa8>)
 800ce56:	60fb      	str	r3, [r7, #12]
 800ce58:	e002      	b.n	800ce60 <prvInsertBlockIntoFreeList+0x14>
 800ce5a:	68fb      	ldr	r3, [r7, #12]
 800ce5c:	681b      	ldr	r3, [r3, #0]
 800ce5e:	60fb      	str	r3, [r7, #12]
 800ce60:	68fb      	ldr	r3, [r7, #12]
 800ce62:	681b      	ldr	r3, [r3, #0]
 800ce64:	687a      	ldr	r2, [r7, #4]
 800ce66:	429a      	cmp	r2, r3
 800ce68:	d8f7      	bhi.n	800ce5a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800ce6a:	68fb      	ldr	r3, [r7, #12]
 800ce6c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800ce6e:	68fb      	ldr	r3, [r7, #12]
 800ce70:	685b      	ldr	r3, [r3, #4]
 800ce72:	68ba      	ldr	r2, [r7, #8]
 800ce74:	4413      	add	r3, r2
 800ce76:	687a      	ldr	r2, [r7, #4]
 800ce78:	429a      	cmp	r2, r3
 800ce7a:	d108      	bne.n	800ce8e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800ce7c:	68fb      	ldr	r3, [r7, #12]
 800ce7e:	685a      	ldr	r2, [r3, #4]
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	685b      	ldr	r3, [r3, #4]
 800ce84:	441a      	add	r2, r3
 800ce86:	68fb      	ldr	r3, [r7, #12]
 800ce88:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800ce8a:	68fb      	ldr	r3, [r7, #12]
 800ce8c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	685b      	ldr	r3, [r3, #4]
 800ce96:	68ba      	ldr	r2, [r7, #8]
 800ce98:	441a      	add	r2, r3
 800ce9a:	68fb      	ldr	r3, [r7, #12]
 800ce9c:	681b      	ldr	r3, [r3, #0]
 800ce9e:	429a      	cmp	r2, r3
 800cea0:	d118      	bne.n	800ced4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800cea2:	68fb      	ldr	r3, [r7, #12]
 800cea4:	681a      	ldr	r2, [r3, #0]
 800cea6:	4b14      	ldr	r3, [pc, #80]	; (800cef8 <prvInsertBlockIntoFreeList+0xac>)
 800cea8:	681b      	ldr	r3, [r3, #0]
 800ceaa:	429a      	cmp	r2, r3
 800ceac:	d00d      	beq.n	800ceca <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	685a      	ldr	r2, [r3, #4]
 800ceb2:	68fb      	ldr	r3, [r7, #12]
 800ceb4:	681b      	ldr	r3, [r3, #0]
 800ceb6:	685b      	ldr	r3, [r3, #4]
 800ceb8:	441a      	add	r2, r3
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800cebe:	68fb      	ldr	r3, [r7, #12]
 800cec0:	681b      	ldr	r3, [r3, #0]
 800cec2:	681a      	ldr	r2, [r3, #0]
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	601a      	str	r2, [r3, #0]
 800cec8:	e008      	b.n	800cedc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800ceca:	4b0b      	ldr	r3, [pc, #44]	; (800cef8 <prvInsertBlockIntoFreeList+0xac>)
 800cecc:	681a      	ldr	r2, [r3, #0]
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	601a      	str	r2, [r3, #0]
 800ced2:	e003      	b.n	800cedc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800ced4:	68fb      	ldr	r3, [r7, #12]
 800ced6:	681a      	ldr	r2, [r3, #0]
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800cedc:	68fa      	ldr	r2, [r7, #12]
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	429a      	cmp	r2, r3
 800cee2:	d002      	beq.n	800ceea <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800cee4:	68fb      	ldr	r3, [r7, #12]
 800cee6:	687a      	ldr	r2, [r7, #4]
 800cee8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ceea:	bf00      	nop
 800ceec:	3714      	adds	r7, #20
 800ceee:	46bd      	mov	sp, r7
 800cef0:	bc80      	pop	{r7}
 800cef2:	4770      	bx	lr
 800cef4:	200016e0 	.word	0x200016e0
 800cef8:	200016e8 	.word	0x200016e8

0800cefc <__errno>:
 800cefc:	4b01      	ldr	r3, [pc, #4]	; (800cf04 <__errno+0x8>)
 800cefe:	6818      	ldr	r0, [r3, #0]
 800cf00:	4770      	bx	lr
 800cf02:	bf00      	nop
 800cf04:	20000034 	.word	0x20000034

0800cf08 <__libc_init_array>:
 800cf08:	b570      	push	{r4, r5, r6, lr}
 800cf0a:	2500      	movs	r5, #0
 800cf0c:	4e0c      	ldr	r6, [pc, #48]	; (800cf40 <__libc_init_array+0x38>)
 800cf0e:	4c0d      	ldr	r4, [pc, #52]	; (800cf44 <__libc_init_array+0x3c>)
 800cf10:	1ba4      	subs	r4, r4, r6
 800cf12:	10a4      	asrs	r4, r4, #2
 800cf14:	42a5      	cmp	r5, r4
 800cf16:	d109      	bne.n	800cf2c <__libc_init_array+0x24>
 800cf18:	f001 f938 	bl	800e18c <_init>
 800cf1c:	2500      	movs	r5, #0
 800cf1e:	4e0a      	ldr	r6, [pc, #40]	; (800cf48 <__libc_init_array+0x40>)
 800cf20:	4c0a      	ldr	r4, [pc, #40]	; (800cf4c <__libc_init_array+0x44>)
 800cf22:	1ba4      	subs	r4, r4, r6
 800cf24:	10a4      	asrs	r4, r4, #2
 800cf26:	42a5      	cmp	r5, r4
 800cf28:	d105      	bne.n	800cf36 <__libc_init_array+0x2e>
 800cf2a:	bd70      	pop	{r4, r5, r6, pc}
 800cf2c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800cf30:	4798      	blx	r3
 800cf32:	3501      	adds	r5, #1
 800cf34:	e7ee      	b.n	800cf14 <__libc_init_array+0xc>
 800cf36:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800cf3a:	4798      	blx	r3
 800cf3c:	3501      	adds	r5, #1
 800cf3e:	e7f2      	b.n	800cf26 <__libc_init_array+0x1e>
 800cf40:	0800e824 	.word	0x0800e824
 800cf44:	0800e824 	.word	0x0800e824
 800cf48:	0800e824 	.word	0x0800e824
 800cf4c:	0800e828 	.word	0x0800e828

0800cf50 <__locale_ctype_ptr_l>:
 800cf50:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 800cf54:	4770      	bx	lr
	...

0800cf58 <__locale_ctype_ptr>:
 800cf58:	4b04      	ldr	r3, [pc, #16]	; (800cf6c <__locale_ctype_ptr+0x14>)
 800cf5a:	4a05      	ldr	r2, [pc, #20]	; (800cf70 <__locale_ctype_ptr+0x18>)
 800cf5c:	681b      	ldr	r3, [r3, #0]
 800cf5e:	6a1b      	ldr	r3, [r3, #32]
 800cf60:	2b00      	cmp	r3, #0
 800cf62:	bf08      	it	eq
 800cf64:	4613      	moveq	r3, r2
 800cf66:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 800cf6a:	4770      	bx	lr
 800cf6c:	20000034 	.word	0x20000034
 800cf70:	20000098 	.word	0x20000098

0800cf74 <malloc>:
 800cf74:	4b02      	ldr	r3, [pc, #8]	; (800cf80 <malloc+0xc>)
 800cf76:	4601      	mov	r1, r0
 800cf78:	6818      	ldr	r0, [r3, #0]
 800cf7a:	f000 b87d 	b.w	800d078 <_malloc_r>
 800cf7e:	bf00      	nop
 800cf80:	20000034 	.word	0x20000034

0800cf84 <free>:
 800cf84:	4b02      	ldr	r3, [pc, #8]	; (800cf90 <free+0xc>)
 800cf86:	4601      	mov	r1, r0
 800cf88:	6818      	ldr	r0, [r3, #0]
 800cf8a:	f000 b829 	b.w	800cfe0 <_free_r>
 800cf8e:	bf00      	nop
 800cf90:	20000034 	.word	0x20000034

0800cf94 <__ascii_mbtowc>:
 800cf94:	b082      	sub	sp, #8
 800cf96:	b901      	cbnz	r1, 800cf9a <__ascii_mbtowc+0x6>
 800cf98:	a901      	add	r1, sp, #4
 800cf9a:	b142      	cbz	r2, 800cfae <__ascii_mbtowc+0x1a>
 800cf9c:	b14b      	cbz	r3, 800cfb2 <__ascii_mbtowc+0x1e>
 800cf9e:	7813      	ldrb	r3, [r2, #0]
 800cfa0:	600b      	str	r3, [r1, #0]
 800cfa2:	7812      	ldrb	r2, [r2, #0]
 800cfa4:	1c10      	adds	r0, r2, #0
 800cfa6:	bf18      	it	ne
 800cfa8:	2001      	movne	r0, #1
 800cfaa:	b002      	add	sp, #8
 800cfac:	4770      	bx	lr
 800cfae:	4610      	mov	r0, r2
 800cfb0:	e7fb      	b.n	800cfaa <__ascii_mbtowc+0x16>
 800cfb2:	f06f 0001 	mvn.w	r0, #1
 800cfb6:	e7f8      	b.n	800cfaa <__ascii_mbtowc+0x16>

0800cfb8 <memcpy>:
 800cfb8:	b510      	push	{r4, lr}
 800cfba:	1e43      	subs	r3, r0, #1
 800cfbc:	440a      	add	r2, r1
 800cfbe:	4291      	cmp	r1, r2
 800cfc0:	d100      	bne.n	800cfc4 <memcpy+0xc>
 800cfc2:	bd10      	pop	{r4, pc}
 800cfc4:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cfc8:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cfcc:	e7f7      	b.n	800cfbe <memcpy+0x6>

0800cfce <memset>:
 800cfce:	4603      	mov	r3, r0
 800cfd0:	4402      	add	r2, r0
 800cfd2:	4293      	cmp	r3, r2
 800cfd4:	d100      	bne.n	800cfd8 <memset+0xa>
 800cfd6:	4770      	bx	lr
 800cfd8:	f803 1b01 	strb.w	r1, [r3], #1
 800cfdc:	e7f9      	b.n	800cfd2 <memset+0x4>
	...

0800cfe0 <_free_r>:
 800cfe0:	b538      	push	{r3, r4, r5, lr}
 800cfe2:	4605      	mov	r5, r0
 800cfe4:	2900      	cmp	r1, #0
 800cfe6:	d043      	beq.n	800d070 <_free_r+0x90>
 800cfe8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cfec:	1f0c      	subs	r4, r1, #4
 800cfee:	2b00      	cmp	r3, #0
 800cff0:	bfb8      	it	lt
 800cff2:	18e4      	addlt	r4, r4, r3
 800cff4:	f000 f913 	bl	800d21e <__malloc_lock>
 800cff8:	4a1e      	ldr	r2, [pc, #120]	; (800d074 <_free_r+0x94>)
 800cffa:	6813      	ldr	r3, [r2, #0]
 800cffc:	4610      	mov	r0, r2
 800cffe:	b933      	cbnz	r3, 800d00e <_free_r+0x2e>
 800d000:	6063      	str	r3, [r4, #4]
 800d002:	6014      	str	r4, [r2, #0]
 800d004:	4628      	mov	r0, r5
 800d006:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d00a:	f000 b909 	b.w	800d220 <__malloc_unlock>
 800d00e:	42a3      	cmp	r3, r4
 800d010:	d90b      	bls.n	800d02a <_free_r+0x4a>
 800d012:	6821      	ldr	r1, [r4, #0]
 800d014:	1862      	adds	r2, r4, r1
 800d016:	4293      	cmp	r3, r2
 800d018:	bf01      	itttt	eq
 800d01a:	681a      	ldreq	r2, [r3, #0]
 800d01c:	685b      	ldreq	r3, [r3, #4]
 800d01e:	1852      	addeq	r2, r2, r1
 800d020:	6022      	streq	r2, [r4, #0]
 800d022:	6063      	str	r3, [r4, #4]
 800d024:	6004      	str	r4, [r0, #0]
 800d026:	e7ed      	b.n	800d004 <_free_r+0x24>
 800d028:	4613      	mov	r3, r2
 800d02a:	685a      	ldr	r2, [r3, #4]
 800d02c:	b10a      	cbz	r2, 800d032 <_free_r+0x52>
 800d02e:	42a2      	cmp	r2, r4
 800d030:	d9fa      	bls.n	800d028 <_free_r+0x48>
 800d032:	6819      	ldr	r1, [r3, #0]
 800d034:	1858      	adds	r0, r3, r1
 800d036:	42a0      	cmp	r0, r4
 800d038:	d10b      	bne.n	800d052 <_free_r+0x72>
 800d03a:	6820      	ldr	r0, [r4, #0]
 800d03c:	4401      	add	r1, r0
 800d03e:	1858      	adds	r0, r3, r1
 800d040:	4282      	cmp	r2, r0
 800d042:	6019      	str	r1, [r3, #0]
 800d044:	d1de      	bne.n	800d004 <_free_r+0x24>
 800d046:	6810      	ldr	r0, [r2, #0]
 800d048:	6852      	ldr	r2, [r2, #4]
 800d04a:	4401      	add	r1, r0
 800d04c:	6019      	str	r1, [r3, #0]
 800d04e:	605a      	str	r2, [r3, #4]
 800d050:	e7d8      	b.n	800d004 <_free_r+0x24>
 800d052:	d902      	bls.n	800d05a <_free_r+0x7a>
 800d054:	230c      	movs	r3, #12
 800d056:	602b      	str	r3, [r5, #0]
 800d058:	e7d4      	b.n	800d004 <_free_r+0x24>
 800d05a:	6820      	ldr	r0, [r4, #0]
 800d05c:	1821      	adds	r1, r4, r0
 800d05e:	428a      	cmp	r2, r1
 800d060:	bf01      	itttt	eq
 800d062:	6811      	ldreq	r1, [r2, #0]
 800d064:	6852      	ldreq	r2, [r2, #4]
 800d066:	1809      	addeq	r1, r1, r0
 800d068:	6021      	streq	r1, [r4, #0]
 800d06a:	6062      	str	r2, [r4, #4]
 800d06c:	605c      	str	r4, [r3, #4]
 800d06e:	e7c9      	b.n	800d004 <_free_r+0x24>
 800d070:	bd38      	pop	{r3, r4, r5, pc}
 800d072:	bf00      	nop
 800d074:	200016f8 	.word	0x200016f8

0800d078 <_malloc_r>:
 800d078:	b570      	push	{r4, r5, r6, lr}
 800d07a:	1ccd      	adds	r5, r1, #3
 800d07c:	f025 0503 	bic.w	r5, r5, #3
 800d080:	3508      	adds	r5, #8
 800d082:	2d0c      	cmp	r5, #12
 800d084:	bf38      	it	cc
 800d086:	250c      	movcc	r5, #12
 800d088:	2d00      	cmp	r5, #0
 800d08a:	4606      	mov	r6, r0
 800d08c:	db01      	blt.n	800d092 <_malloc_r+0x1a>
 800d08e:	42a9      	cmp	r1, r5
 800d090:	d903      	bls.n	800d09a <_malloc_r+0x22>
 800d092:	230c      	movs	r3, #12
 800d094:	6033      	str	r3, [r6, #0]
 800d096:	2000      	movs	r0, #0
 800d098:	bd70      	pop	{r4, r5, r6, pc}
 800d09a:	f000 f8c0 	bl	800d21e <__malloc_lock>
 800d09e:	4a21      	ldr	r2, [pc, #132]	; (800d124 <_malloc_r+0xac>)
 800d0a0:	6814      	ldr	r4, [r2, #0]
 800d0a2:	4621      	mov	r1, r4
 800d0a4:	b991      	cbnz	r1, 800d0cc <_malloc_r+0x54>
 800d0a6:	4c20      	ldr	r4, [pc, #128]	; (800d128 <_malloc_r+0xb0>)
 800d0a8:	6823      	ldr	r3, [r4, #0]
 800d0aa:	b91b      	cbnz	r3, 800d0b4 <_malloc_r+0x3c>
 800d0ac:	4630      	mov	r0, r6
 800d0ae:	f000 f845 	bl	800d13c <_sbrk_r>
 800d0b2:	6020      	str	r0, [r4, #0]
 800d0b4:	4629      	mov	r1, r5
 800d0b6:	4630      	mov	r0, r6
 800d0b8:	f000 f840 	bl	800d13c <_sbrk_r>
 800d0bc:	1c43      	adds	r3, r0, #1
 800d0be:	d124      	bne.n	800d10a <_malloc_r+0x92>
 800d0c0:	230c      	movs	r3, #12
 800d0c2:	4630      	mov	r0, r6
 800d0c4:	6033      	str	r3, [r6, #0]
 800d0c6:	f000 f8ab 	bl	800d220 <__malloc_unlock>
 800d0ca:	e7e4      	b.n	800d096 <_malloc_r+0x1e>
 800d0cc:	680b      	ldr	r3, [r1, #0]
 800d0ce:	1b5b      	subs	r3, r3, r5
 800d0d0:	d418      	bmi.n	800d104 <_malloc_r+0x8c>
 800d0d2:	2b0b      	cmp	r3, #11
 800d0d4:	d90f      	bls.n	800d0f6 <_malloc_r+0x7e>
 800d0d6:	600b      	str	r3, [r1, #0]
 800d0d8:	18cc      	adds	r4, r1, r3
 800d0da:	50cd      	str	r5, [r1, r3]
 800d0dc:	4630      	mov	r0, r6
 800d0de:	f000 f89f 	bl	800d220 <__malloc_unlock>
 800d0e2:	f104 000b 	add.w	r0, r4, #11
 800d0e6:	1d23      	adds	r3, r4, #4
 800d0e8:	f020 0007 	bic.w	r0, r0, #7
 800d0ec:	1ac3      	subs	r3, r0, r3
 800d0ee:	d0d3      	beq.n	800d098 <_malloc_r+0x20>
 800d0f0:	425a      	negs	r2, r3
 800d0f2:	50e2      	str	r2, [r4, r3]
 800d0f4:	e7d0      	b.n	800d098 <_malloc_r+0x20>
 800d0f6:	684b      	ldr	r3, [r1, #4]
 800d0f8:	428c      	cmp	r4, r1
 800d0fa:	bf16      	itet	ne
 800d0fc:	6063      	strne	r3, [r4, #4]
 800d0fe:	6013      	streq	r3, [r2, #0]
 800d100:	460c      	movne	r4, r1
 800d102:	e7eb      	b.n	800d0dc <_malloc_r+0x64>
 800d104:	460c      	mov	r4, r1
 800d106:	6849      	ldr	r1, [r1, #4]
 800d108:	e7cc      	b.n	800d0a4 <_malloc_r+0x2c>
 800d10a:	1cc4      	adds	r4, r0, #3
 800d10c:	f024 0403 	bic.w	r4, r4, #3
 800d110:	42a0      	cmp	r0, r4
 800d112:	d005      	beq.n	800d120 <_malloc_r+0xa8>
 800d114:	1a21      	subs	r1, r4, r0
 800d116:	4630      	mov	r0, r6
 800d118:	f000 f810 	bl	800d13c <_sbrk_r>
 800d11c:	3001      	adds	r0, #1
 800d11e:	d0cf      	beq.n	800d0c0 <_malloc_r+0x48>
 800d120:	6025      	str	r5, [r4, #0]
 800d122:	e7db      	b.n	800d0dc <_malloc_r+0x64>
 800d124:	200016f8 	.word	0x200016f8
 800d128:	200016fc 	.word	0x200016fc

0800d12c <realloc>:
 800d12c:	4b02      	ldr	r3, [pc, #8]	; (800d138 <realloc+0xc>)
 800d12e:	460a      	mov	r2, r1
 800d130:	4601      	mov	r1, r0
 800d132:	6818      	ldr	r0, [r3, #0]
 800d134:	f000 b875 	b.w	800d222 <_realloc_r>
 800d138:	20000034 	.word	0x20000034

0800d13c <_sbrk_r>:
 800d13c:	b538      	push	{r3, r4, r5, lr}
 800d13e:	2300      	movs	r3, #0
 800d140:	4c05      	ldr	r4, [pc, #20]	; (800d158 <_sbrk_r+0x1c>)
 800d142:	4605      	mov	r5, r0
 800d144:	4608      	mov	r0, r1
 800d146:	6023      	str	r3, [r4, #0]
 800d148:	f7f6 ffdc 	bl	8004104 <_sbrk>
 800d14c:	1c43      	adds	r3, r0, #1
 800d14e:	d102      	bne.n	800d156 <_sbrk_r+0x1a>
 800d150:	6823      	ldr	r3, [r4, #0]
 800d152:	b103      	cbz	r3, 800d156 <_sbrk_r+0x1a>
 800d154:	602b      	str	r3, [r5, #0]
 800d156:	bd38      	pop	{r3, r4, r5, pc}
 800d158:	20003048 	.word	0x20003048

0800d15c <siprintf>:
 800d15c:	b40e      	push	{r1, r2, r3}
 800d15e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800d162:	b500      	push	{lr}
 800d164:	b09c      	sub	sp, #112	; 0x70
 800d166:	ab1d      	add	r3, sp, #116	; 0x74
 800d168:	9002      	str	r0, [sp, #8]
 800d16a:	9006      	str	r0, [sp, #24]
 800d16c:	9107      	str	r1, [sp, #28]
 800d16e:	9104      	str	r1, [sp, #16]
 800d170:	4808      	ldr	r0, [pc, #32]	; (800d194 <siprintf+0x38>)
 800d172:	4909      	ldr	r1, [pc, #36]	; (800d198 <siprintf+0x3c>)
 800d174:	f853 2b04 	ldr.w	r2, [r3], #4
 800d178:	9105      	str	r1, [sp, #20]
 800d17a:	6800      	ldr	r0, [r0, #0]
 800d17c:	a902      	add	r1, sp, #8
 800d17e:	9301      	str	r3, [sp, #4]
 800d180:	f000 f8d0 	bl	800d324 <_svfiprintf_r>
 800d184:	2200      	movs	r2, #0
 800d186:	9b02      	ldr	r3, [sp, #8]
 800d188:	701a      	strb	r2, [r3, #0]
 800d18a:	b01c      	add	sp, #112	; 0x70
 800d18c:	f85d eb04 	ldr.w	lr, [sp], #4
 800d190:	b003      	add	sp, #12
 800d192:	4770      	bx	lr
 800d194:	20000034 	.word	0x20000034
 800d198:	ffff0208 	.word	0xffff0208

0800d19c <siscanf>:
 800d19c:	b40e      	push	{r1, r2, r3}
 800d19e:	f44f 7201 	mov.w	r2, #516	; 0x204
 800d1a2:	b530      	push	{r4, r5, lr}
 800d1a4:	b09c      	sub	sp, #112	; 0x70
 800d1a6:	ac1f      	add	r4, sp, #124	; 0x7c
 800d1a8:	f854 5b04 	ldr.w	r5, [r4], #4
 800d1ac:	f8ad 2014 	strh.w	r2, [sp, #20]
 800d1b0:	9002      	str	r0, [sp, #8]
 800d1b2:	9006      	str	r0, [sp, #24]
 800d1b4:	f7f2 ffcc 	bl	8000150 <strlen>
 800d1b8:	4b0b      	ldr	r3, [pc, #44]	; (800d1e8 <siscanf+0x4c>)
 800d1ba:	9003      	str	r0, [sp, #12]
 800d1bc:	930b      	str	r3, [sp, #44]	; 0x2c
 800d1be:	2300      	movs	r3, #0
 800d1c0:	930f      	str	r3, [sp, #60]	; 0x3c
 800d1c2:	9314      	str	r3, [sp, #80]	; 0x50
 800d1c4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d1c8:	9007      	str	r0, [sp, #28]
 800d1ca:	4808      	ldr	r0, [pc, #32]	; (800d1ec <siscanf+0x50>)
 800d1cc:	f8ad 3016 	strh.w	r3, [sp, #22]
 800d1d0:	462a      	mov	r2, r5
 800d1d2:	4623      	mov	r3, r4
 800d1d4:	a902      	add	r1, sp, #8
 800d1d6:	6800      	ldr	r0, [r0, #0]
 800d1d8:	9401      	str	r4, [sp, #4]
 800d1da:	f000 f9f5 	bl	800d5c8 <__ssvfiscanf_r>
 800d1de:	b01c      	add	sp, #112	; 0x70
 800d1e0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d1e4:	b003      	add	sp, #12
 800d1e6:	4770      	bx	lr
 800d1e8:	0800d1f1 	.word	0x0800d1f1
 800d1ec:	20000034 	.word	0x20000034

0800d1f0 <__seofread>:
 800d1f0:	2000      	movs	r0, #0
 800d1f2:	4770      	bx	lr

0800d1f4 <strcpy>:
 800d1f4:	4603      	mov	r3, r0
 800d1f6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d1fa:	f803 2b01 	strb.w	r2, [r3], #1
 800d1fe:	2a00      	cmp	r2, #0
 800d200:	d1f9      	bne.n	800d1f6 <strcpy+0x2>
 800d202:	4770      	bx	lr

0800d204 <__ascii_wctomb>:
 800d204:	b149      	cbz	r1, 800d21a <__ascii_wctomb+0x16>
 800d206:	2aff      	cmp	r2, #255	; 0xff
 800d208:	bf8b      	itete	hi
 800d20a:	238a      	movhi	r3, #138	; 0x8a
 800d20c:	700a      	strbls	r2, [r1, #0]
 800d20e:	6003      	strhi	r3, [r0, #0]
 800d210:	2001      	movls	r0, #1
 800d212:	bf88      	it	hi
 800d214:	f04f 30ff 	movhi.w	r0, #4294967295
 800d218:	4770      	bx	lr
 800d21a:	4608      	mov	r0, r1
 800d21c:	4770      	bx	lr

0800d21e <__malloc_lock>:
 800d21e:	4770      	bx	lr

0800d220 <__malloc_unlock>:
 800d220:	4770      	bx	lr

0800d222 <_realloc_r>:
 800d222:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d224:	4607      	mov	r7, r0
 800d226:	4614      	mov	r4, r2
 800d228:	460e      	mov	r6, r1
 800d22a:	b921      	cbnz	r1, 800d236 <_realloc_r+0x14>
 800d22c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800d230:	4611      	mov	r1, r2
 800d232:	f7ff bf21 	b.w	800d078 <_malloc_r>
 800d236:	b922      	cbnz	r2, 800d242 <_realloc_r+0x20>
 800d238:	f7ff fed2 	bl	800cfe0 <_free_r>
 800d23c:	4625      	mov	r5, r4
 800d23e:	4628      	mov	r0, r5
 800d240:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d242:	f000 ff9a 	bl	800e17a <_malloc_usable_size_r>
 800d246:	42a0      	cmp	r0, r4
 800d248:	d20f      	bcs.n	800d26a <_realloc_r+0x48>
 800d24a:	4621      	mov	r1, r4
 800d24c:	4638      	mov	r0, r7
 800d24e:	f7ff ff13 	bl	800d078 <_malloc_r>
 800d252:	4605      	mov	r5, r0
 800d254:	2800      	cmp	r0, #0
 800d256:	d0f2      	beq.n	800d23e <_realloc_r+0x1c>
 800d258:	4631      	mov	r1, r6
 800d25a:	4622      	mov	r2, r4
 800d25c:	f7ff feac 	bl	800cfb8 <memcpy>
 800d260:	4631      	mov	r1, r6
 800d262:	4638      	mov	r0, r7
 800d264:	f7ff febc 	bl	800cfe0 <_free_r>
 800d268:	e7e9      	b.n	800d23e <_realloc_r+0x1c>
 800d26a:	4635      	mov	r5, r6
 800d26c:	e7e7      	b.n	800d23e <_realloc_r+0x1c>

0800d26e <__ssputs_r>:
 800d26e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d272:	688e      	ldr	r6, [r1, #8]
 800d274:	4682      	mov	sl, r0
 800d276:	429e      	cmp	r6, r3
 800d278:	460c      	mov	r4, r1
 800d27a:	4690      	mov	r8, r2
 800d27c:	4699      	mov	r9, r3
 800d27e:	d837      	bhi.n	800d2f0 <__ssputs_r+0x82>
 800d280:	898a      	ldrh	r2, [r1, #12]
 800d282:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d286:	d031      	beq.n	800d2ec <__ssputs_r+0x7e>
 800d288:	2302      	movs	r3, #2
 800d28a:	6825      	ldr	r5, [r4, #0]
 800d28c:	6909      	ldr	r1, [r1, #16]
 800d28e:	1a6f      	subs	r7, r5, r1
 800d290:	6965      	ldr	r5, [r4, #20]
 800d292:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d296:	fb95 f5f3 	sdiv	r5, r5, r3
 800d29a:	f109 0301 	add.w	r3, r9, #1
 800d29e:	443b      	add	r3, r7
 800d2a0:	429d      	cmp	r5, r3
 800d2a2:	bf38      	it	cc
 800d2a4:	461d      	movcc	r5, r3
 800d2a6:	0553      	lsls	r3, r2, #21
 800d2a8:	d530      	bpl.n	800d30c <__ssputs_r+0x9e>
 800d2aa:	4629      	mov	r1, r5
 800d2ac:	f7ff fee4 	bl	800d078 <_malloc_r>
 800d2b0:	4606      	mov	r6, r0
 800d2b2:	b950      	cbnz	r0, 800d2ca <__ssputs_r+0x5c>
 800d2b4:	230c      	movs	r3, #12
 800d2b6:	f04f 30ff 	mov.w	r0, #4294967295
 800d2ba:	f8ca 3000 	str.w	r3, [sl]
 800d2be:	89a3      	ldrh	r3, [r4, #12]
 800d2c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d2c4:	81a3      	strh	r3, [r4, #12]
 800d2c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d2ca:	463a      	mov	r2, r7
 800d2cc:	6921      	ldr	r1, [r4, #16]
 800d2ce:	f7ff fe73 	bl	800cfb8 <memcpy>
 800d2d2:	89a3      	ldrh	r3, [r4, #12]
 800d2d4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d2d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d2dc:	81a3      	strh	r3, [r4, #12]
 800d2de:	6126      	str	r6, [r4, #16]
 800d2e0:	443e      	add	r6, r7
 800d2e2:	6026      	str	r6, [r4, #0]
 800d2e4:	464e      	mov	r6, r9
 800d2e6:	6165      	str	r5, [r4, #20]
 800d2e8:	1bed      	subs	r5, r5, r7
 800d2ea:	60a5      	str	r5, [r4, #8]
 800d2ec:	454e      	cmp	r6, r9
 800d2ee:	d900      	bls.n	800d2f2 <__ssputs_r+0x84>
 800d2f0:	464e      	mov	r6, r9
 800d2f2:	4632      	mov	r2, r6
 800d2f4:	4641      	mov	r1, r8
 800d2f6:	6820      	ldr	r0, [r4, #0]
 800d2f8:	f000 ff26 	bl	800e148 <memmove>
 800d2fc:	68a3      	ldr	r3, [r4, #8]
 800d2fe:	2000      	movs	r0, #0
 800d300:	1b9b      	subs	r3, r3, r6
 800d302:	60a3      	str	r3, [r4, #8]
 800d304:	6823      	ldr	r3, [r4, #0]
 800d306:	441e      	add	r6, r3
 800d308:	6026      	str	r6, [r4, #0]
 800d30a:	e7dc      	b.n	800d2c6 <__ssputs_r+0x58>
 800d30c:	462a      	mov	r2, r5
 800d30e:	f7ff ff88 	bl	800d222 <_realloc_r>
 800d312:	4606      	mov	r6, r0
 800d314:	2800      	cmp	r0, #0
 800d316:	d1e2      	bne.n	800d2de <__ssputs_r+0x70>
 800d318:	6921      	ldr	r1, [r4, #16]
 800d31a:	4650      	mov	r0, sl
 800d31c:	f7ff fe60 	bl	800cfe0 <_free_r>
 800d320:	e7c8      	b.n	800d2b4 <__ssputs_r+0x46>
	...

0800d324 <_svfiprintf_r>:
 800d324:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d328:	461d      	mov	r5, r3
 800d32a:	898b      	ldrh	r3, [r1, #12]
 800d32c:	b09d      	sub	sp, #116	; 0x74
 800d32e:	061f      	lsls	r7, r3, #24
 800d330:	4680      	mov	r8, r0
 800d332:	460c      	mov	r4, r1
 800d334:	4616      	mov	r6, r2
 800d336:	d50f      	bpl.n	800d358 <_svfiprintf_r+0x34>
 800d338:	690b      	ldr	r3, [r1, #16]
 800d33a:	b96b      	cbnz	r3, 800d358 <_svfiprintf_r+0x34>
 800d33c:	2140      	movs	r1, #64	; 0x40
 800d33e:	f7ff fe9b 	bl	800d078 <_malloc_r>
 800d342:	6020      	str	r0, [r4, #0]
 800d344:	6120      	str	r0, [r4, #16]
 800d346:	b928      	cbnz	r0, 800d354 <_svfiprintf_r+0x30>
 800d348:	230c      	movs	r3, #12
 800d34a:	f8c8 3000 	str.w	r3, [r8]
 800d34e:	f04f 30ff 	mov.w	r0, #4294967295
 800d352:	e0c8      	b.n	800d4e6 <_svfiprintf_r+0x1c2>
 800d354:	2340      	movs	r3, #64	; 0x40
 800d356:	6163      	str	r3, [r4, #20]
 800d358:	2300      	movs	r3, #0
 800d35a:	9309      	str	r3, [sp, #36]	; 0x24
 800d35c:	2320      	movs	r3, #32
 800d35e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d362:	2330      	movs	r3, #48	; 0x30
 800d364:	f04f 0b01 	mov.w	fp, #1
 800d368:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d36c:	9503      	str	r5, [sp, #12]
 800d36e:	4637      	mov	r7, r6
 800d370:	463d      	mov	r5, r7
 800d372:	f815 3b01 	ldrb.w	r3, [r5], #1
 800d376:	b10b      	cbz	r3, 800d37c <_svfiprintf_r+0x58>
 800d378:	2b25      	cmp	r3, #37	; 0x25
 800d37a:	d13e      	bne.n	800d3fa <_svfiprintf_r+0xd6>
 800d37c:	ebb7 0a06 	subs.w	sl, r7, r6
 800d380:	d00b      	beq.n	800d39a <_svfiprintf_r+0x76>
 800d382:	4653      	mov	r3, sl
 800d384:	4632      	mov	r2, r6
 800d386:	4621      	mov	r1, r4
 800d388:	4640      	mov	r0, r8
 800d38a:	f7ff ff70 	bl	800d26e <__ssputs_r>
 800d38e:	3001      	adds	r0, #1
 800d390:	f000 80a4 	beq.w	800d4dc <_svfiprintf_r+0x1b8>
 800d394:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d396:	4453      	add	r3, sl
 800d398:	9309      	str	r3, [sp, #36]	; 0x24
 800d39a:	783b      	ldrb	r3, [r7, #0]
 800d39c:	2b00      	cmp	r3, #0
 800d39e:	f000 809d 	beq.w	800d4dc <_svfiprintf_r+0x1b8>
 800d3a2:	2300      	movs	r3, #0
 800d3a4:	f04f 32ff 	mov.w	r2, #4294967295
 800d3a8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d3ac:	9304      	str	r3, [sp, #16]
 800d3ae:	9307      	str	r3, [sp, #28]
 800d3b0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d3b4:	931a      	str	r3, [sp, #104]	; 0x68
 800d3b6:	462f      	mov	r7, r5
 800d3b8:	2205      	movs	r2, #5
 800d3ba:	f817 1b01 	ldrb.w	r1, [r7], #1
 800d3be:	4850      	ldr	r0, [pc, #320]	; (800d500 <_svfiprintf_r+0x1dc>)
 800d3c0:	f000 feb4 	bl	800e12c <memchr>
 800d3c4:	9b04      	ldr	r3, [sp, #16]
 800d3c6:	b9d0      	cbnz	r0, 800d3fe <_svfiprintf_r+0xda>
 800d3c8:	06d9      	lsls	r1, r3, #27
 800d3ca:	bf44      	itt	mi
 800d3cc:	2220      	movmi	r2, #32
 800d3ce:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800d3d2:	071a      	lsls	r2, r3, #28
 800d3d4:	bf44      	itt	mi
 800d3d6:	222b      	movmi	r2, #43	; 0x2b
 800d3d8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800d3dc:	782a      	ldrb	r2, [r5, #0]
 800d3de:	2a2a      	cmp	r2, #42	; 0x2a
 800d3e0:	d015      	beq.n	800d40e <_svfiprintf_r+0xea>
 800d3e2:	462f      	mov	r7, r5
 800d3e4:	2000      	movs	r0, #0
 800d3e6:	250a      	movs	r5, #10
 800d3e8:	9a07      	ldr	r2, [sp, #28]
 800d3ea:	4639      	mov	r1, r7
 800d3ec:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d3f0:	3b30      	subs	r3, #48	; 0x30
 800d3f2:	2b09      	cmp	r3, #9
 800d3f4:	d94d      	bls.n	800d492 <_svfiprintf_r+0x16e>
 800d3f6:	b1b8      	cbz	r0, 800d428 <_svfiprintf_r+0x104>
 800d3f8:	e00f      	b.n	800d41a <_svfiprintf_r+0xf6>
 800d3fa:	462f      	mov	r7, r5
 800d3fc:	e7b8      	b.n	800d370 <_svfiprintf_r+0x4c>
 800d3fe:	4a40      	ldr	r2, [pc, #256]	; (800d500 <_svfiprintf_r+0x1dc>)
 800d400:	463d      	mov	r5, r7
 800d402:	1a80      	subs	r0, r0, r2
 800d404:	fa0b f000 	lsl.w	r0, fp, r0
 800d408:	4318      	orrs	r0, r3
 800d40a:	9004      	str	r0, [sp, #16]
 800d40c:	e7d3      	b.n	800d3b6 <_svfiprintf_r+0x92>
 800d40e:	9a03      	ldr	r2, [sp, #12]
 800d410:	1d11      	adds	r1, r2, #4
 800d412:	6812      	ldr	r2, [r2, #0]
 800d414:	9103      	str	r1, [sp, #12]
 800d416:	2a00      	cmp	r2, #0
 800d418:	db01      	blt.n	800d41e <_svfiprintf_r+0xfa>
 800d41a:	9207      	str	r2, [sp, #28]
 800d41c:	e004      	b.n	800d428 <_svfiprintf_r+0x104>
 800d41e:	4252      	negs	r2, r2
 800d420:	f043 0302 	orr.w	r3, r3, #2
 800d424:	9207      	str	r2, [sp, #28]
 800d426:	9304      	str	r3, [sp, #16]
 800d428:	783b      	ldrb	r3, [r7, #0]
 800d42a:	2b2e      	cmp	r3, #46	; 0x2e
 800d42c:	d10c      	bne.n	800d448 <_svfiprintf_r+0x124>
 800d42e:	787b      	ldrb	r3, [r7, #1]
 800d430:	2b2a      	cmp	r3, #42	; 0x2a
 800d432:	d133      	bne.n	800d49c <_svfiprintf_r+0x178>
 800d434:	9b03      	ldr	r3, [sp, #12]
 800d436:	3702      	adds	r7, #2
 800d438:	1d1a      	adds	r2, r3, #4
 800d43a:	681b      	ldr	r3, [r3, #0]
 800d43c:	9203      	str	r2, [sp, #12]
 800d43e:	2b00      	cmp	r3, #0
 800d440:	bfb8      	it	lt
 800d442:	f04f 33ff 	movlt.w	r3, #4294967295
 800d446:	9305      	str	r3, [sp, #20]
 800d448:	4d2e      	ldr	r5, [pc, #184]	; (800d504 <_svfiprintf_r+0x1e0>)
 800d44a:	2203      	movs	r2, #3
 800d44c:	7839      	ldrb	r1, [r7, #0]
 800d44e:	4628      	mov	r0, r5
 800d450:	f000 fe6c 	bl	800e12c <memchr>
 800d454:	b138      	cbz	r0, 800d466 <_svfiprintf_r+0x142>
 800d456:	2340      	movs	r3, #64	; 0x40
 800d458:	1b40      	subs	r0, r0, r5
 800d45a:	fa03 f000 	lsl.w	r0, r3, r0
 800d45e:	9b04      	ldr	r3, [sp, #16]
 800d460:	3701      	adds	r7, #1
 800d462:	4303      	orrs	r3, r0
 800d464:	9304      	str	r3, [sp, #16]
 800d466:	7839      	ldrb	r1, [r7, #0]
 800d468:	2206      	movs	r2, #6
 800d46a:	4827      	ldr	r0, [pc, #156]	; (800d508 <_svfiprintf_r+0x1e4>)
 800d46c:	1c7e      	adds	r6, r7, #1
 800d46e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d472:	f000 fe5b 	bl	800e12c <memchr>
 800d476:	2800      	cmp	r0, #0
 800d478:	d038      	beq.n	800d4ec <_svfiprintf_r+0x1c8>
 800d47a:	4b24      	ldr	r3, [pc, #144]	; (800d50c <_svfiprintf_r+0x1e8>)
 800d47c:	bb13      	cbnz	r3, 800d4c4 <_svfiprintf_r+0x1a0>
 800d47e:	9b03      	ldr	r3, [sp, #12]
 800d480:	3307      	adds	r3, #7
 800d482:	f023 0307 	bic.w	r3, r3, #7
 800d486:	3308      	adds	r3, #8
 800d488:	9303      	str	r3, [sp, #12]
 800d48a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d48c:	444b      	add	r3, r9
 800d48e:	9309      	str	r3, [sp, #36]	; 0x24
 800d490:	e76d      	b.n	800d36e <_svfiprintf_r+0x4a>
 800d492:	fb05 3202 	mla	r2, r5, r2, r3
 800d496:	2001      	movs	r0, #1
 800d498:	460f      	mov	r7, r1
 800d49a:	e7a6      	b.n	800d3ea <_svfiprintf_r+0xc6>
 800d49c:	2300      	movs	r3, #0
 800d49e:	250a      	movs	r5, #10
 800d4a0:	4619      	mov	r1, r3
 800d4a2:	3701      	adds	r7, #1
 800d4a4:	9305      	str	r3, [sp, #20]
 800d4a6:	4638      	mov	r0, r7
 800d4a8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d4ac:	3a30      	subs	r2, #48	; 0x30
 800d4ae:	2a09      	cmp	r2, #9
 800d4b0:	d903      	bls.n	800d4ba <_svfiprintf_r+0x196>
 800d4b2:	2b00      	cmp	r3, #0
 800d4b4:	d0c8      	beq.n	800d448 <_svfiprintf_r+0x124>
 800d4b6:	9105      	str	r1, [sp, #20]
 800d4b8:	e7c6      	b.n	800d448 <_svfiprintf_r+0x124>
 800d4ba:	fb05 2101 	mla	r1, r5, r1, r2
 800d4be:	2301      	movs	r3, #1
 800d4c0:	4607      	mov	r7, r0
 800d4c2:	e7f0      	b.n	800d4a6 <_svfiprintf_r+0x182>
 800d4c4:	ab03      	add	r3, sp, #12
 800d4c6:	9300      	str	r3, [sp, #0]
 800d4c8:	4622      	mov	r2, r4
 800d4ca:	4b11      	ldr	r3, [pc, #68]	; (800d510 <_svfiprintf_r+0x1ec>)
 800d4cc:	a904      	add	r1, sp, #16
 800d4ce:	4640      	mov	r0, r8
 800d4d0:	f3af 8000 	nop.w
 800d4d4:	f1b0 3fff 	cmp.w	r0, #4294967295
 800d4d8:	4681      	mov	r9, r0
 800d4da:	d1d6      	bne.n	800d48a <_svfiprintf_r+0x166>
 800d4dc:	89a3      	ldrh	r3, [r4, #12]
 800d4de:	065b      	lsls	r3, r3, #25
 800d4e0:	f53f af35 	bmi.w	800d34e <_svfiprintf_r+0x2a>
 800d4e4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d4e6:	b01d      	add	sp, #116	; 0x74
 800d4e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d4ec:	ab03      	add	r3, sp, #12
 800d4ee:	9300      	str	r3, [sp, #0]
 800d4f0:	4622      	mov	r2, r4
 800d4f2:	4b07      	ldr	r3, [pc, #28]	; (800d510 <_svfiprintf_r+0x1ec>)
 800d4f4:	a904      	add	r1, sp, #16
 800d4f6:	4640      	mov	r0, r8
 800d4f8:	f000 fa2c 	bl	800d954 <_printf_i>
 800d4fc:	e7ea      	b.n	800d4d4 <_svfiprintf_r+0x1b0>
 800d4fe:	bf00      	nop
 800d500:	0800e773 	.word	0x0800e773
 800d504:	0800e779 	.word	0x0800e779
 800d508:	0800e77d 	.word	0x0800e77d
 800d50c:	00000000 	.word	0x00000000
 800d510:	0800d26f 	.word	0x0800d26f

0800d514 <_sungetc_r>:
 800d514:	b538      	push	{r3, r4, r5, lr}
 800d516:	1c4b      	adds	r3, r1, #1
 800d518:	4614      	mov	r4, r2
 800d51a:	d103      	bne.n	800d524 <_sungetc_r+0x10>
 800d51c:	f04f 35ff 	mov.w	r5, #4294967295
 800d520:	4628      	mov	r0, r5
 800d522:	bd38      	pop	{r3, r4, r5, pc}
 800d524:	8993      	ldrh	r3, [r2, #12]
 800d526:	b2cd      	uxtb	r5, r1
 800d528:	f023 0320 	bic.w	r3, r3, #32
 800d52c:	8193      	strh	r3, [r2, #12]
 800d52e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d530:	6852      	ldr	r2, [r2, #4]
 800d532:	b18b      	cbz	r3, 800d558 <_sungetc_r+0x44>
 800d534:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800d536:	4293      	cmp	r3, r2
 800d538:	dd08      	ble.n	800d54c <_sungetc_r+0x38>
 800d53a:	6823      	ldr	r3, [r4, #0]
 800d53c:	1e5a      	subs	r2, r3, #1
 800d53e:	6022      	str	r2, [r4, #0]
 800d540:	f803 5c01 	strb.w	r5, [r3, #-1]
 800d544:	6863      	ldr	r3, [r4, #4]
 800d546:	3301      	adds	r3, #1
 800d548:	6063      	str	r3, [r4, #4]
 800d54a:	e7e9      	b.n	800d520 <_sungetc_r+0xc>
 800d54c:	4621      	mov	r1, r4
 800d54e:	f000 fdb5 	bl	800e0bc <__submore>
 800d552:	2800      	cmp	r0, #0
 800d554:	d0f1      	beq.n	800d53a <_sungetc_r+0x26>
 800d556:	e7e1      	b.n	800d51c <_sungetc_r+0x8>
 800d558:	6921      	ldr	r1, [r4, #16]
 800d55a:	6823      	ldr	r3, [r4, #0]
 800d55c:	b151      	cbz	r1, 800d574 <_sungetc_r+0x60>
 800d55e:	4299      	cmp	r1, r3
 800d560:	d208      	bcs.n	800d574 <_sungetc_r+0x60>
 800d562:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800d566:	42a9      	cmp	r1, r5
 800d568:	d104      	bne.n	800d574 <_sungetc_r+0x60>
 800d56a:	3b01      	subs	r3, #1
 800d56c:	3201      	adds	r2, #1
 800d56e:	6023      	str	r3, [r4, #0]
 800d570:	6062      	str	r2, [r4, #4]
 800d572:	e7d5      	b.n	800d520 <_sungetc_r+0xc>
 800d574:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800d578:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d57c:	6363      	str	r3, [r4, #52]	; 0x34
 800d57e:	2303      	movs	r3, #3
 800d580:	63a3      	str	r3, [r4, #56]	; 0x38
 800d582:	4623      	mov	r3, r4
 800d584:	f803 5f46 	strb.w	r5, [r3, #70]!
 800d588:	6023      	str	r3, [r4, #0]
 800d58a:	2301      	movs	r3, #1
 800d58c:	e7dc      	b.n	800d548 <_sungetc_r+0x34>

0800d58e <__ssrefill_r>:
 800d58e:	b510      	push	{r4, lr}
 800d590:	460c      	mov	r4, r1
 800d592:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800d594:	b169      	cbz	r1, 800d5b2 <__ssrefill_r+0x24>
 800d596:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d59a:	4299      	cmp	r1, r3
 800d59c:	d001      	beq.n	800d5a2 <__ssrefill_r+0x14>
 800d59e:	f7ff fd1f 	bl	800cfe0 <_free_r>
 800d5a2:	2000      	movs	r0, #0
 800d5a4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d5a6:	6360      	str	r0, [r4, #52]	; 0x34
 800d5a8:	6063      	str	r3, [r4, #4]
 800d5aa:	b113      	cbz	r3, 800d5b2 <__ssrefill_r+0x24>
 800d5ac:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800d5ae:	6023      	str	r3, [r4, #0]
 800d5b0:	bd10      	pop	{r4, pc}
 800d5b2:	6923      	ldr	r3, [r4, #16]
 800d5b4:	f04f 30ff 	mov.w	r0, #4294967295
 800d5b8:	6023      	str	r3, [r4, #0]
 800d5ba:	2300      	movs	r3, #0
 800d5bc:	6063      	str	r3, [r4, #4]
 800d5be:	89a3      	ldrh	r3, [r4, #12]
 800d5c0:	f043 0320 	orr.w	r3, r3, #32
 800d5c4:	81a3      	strh	r3, [r4, #12]
 800d5c6:	e7f3      	b.n	800d5b0 <__ssrefill_r+0x22>

0800d5c8 <__ssvfiscanf_r>:
 800d5c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d5cc:	460c      	mov	r4, r1
 800d5ce:	2100      	movs	r1, #0
 800d5d0:	4606      	mov	r6, r0
 800d5d2:	4692      	mov	sl, r2
 800d5d4:	270a      	movs	r7, #10
 800d5d6:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 800d5da:	9144      	str	r1, [sp, #272]	; 0x110
 800d5dc:	9145      	str	r1, [sp, #276]	; 0x114
 800d5de:	499e      	ldr	r1, [pc, #632]	; (800d858 <__ssvfiscanf_r+0x290>)
 800d5e0:	f10d 0804 	add.w	r8, sp, #4
 800d5e4:	91a0      	str	r1, [sp, #640]	; 0x280
 800d5e6:	499d      	ldr	r1, [pc, #628]	; (800d85c <__ssvfiscanf_r+0x294>)
 800d5e8:	f8df 9274 	ldr.w	r9, [pc, #628]	; 800d860 <__ssvfiscanf_r+0x298>
 800d5ec:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800d5f0:	91a1      	str	r1, [sp, #644]	; 0x284
 800d5f2:	9300      	str	r3, [sp, #0]
 800d5f4:	f89a 3000 	ldrb.w	r3, [sl]
 800d5f8:	2b00      	cmp	r3, #0
 800d5fa:	f000 812a 	beq.w	800d852 <__ssvfiscanf_r+0x28a>
 800d5fe:	4655      	mov	r5, sl
 800d600:	f7ff fcaa 	bl	800cf58 <__locale_ctype_ptr>
 800d604:	f815 bb01 	ldrb.w	fp, [r5], #1
 800d608:	4458      	add	r0, fp
 800d60a:	7843      	ldrb	r3, [r0, #1]
 800d60c:	f013 0308 	ands.w	r3, r3, #8
 800d610:	d01c      	beq.n	800d64c <__ssvfiscanf_r+0x84>
 800d612:	6863      	ldr	r3, [r4, #4]
 800d614:	2b00      	cmp	r3, #0
 800d616:	dd12      	ble.n	800d63e <__ssvfiscanf_r+0x76>
 800d618:	f7ff fc9e 	bl	800cf58 <__locale_ctype_ptr>
 800d61c:	6823      	ldr	r3, [r4, #0]
 800d61e:	781a      	ldrb	r2, [r3, #0]
 800d620:	4410      	add	r0, r2
 800d622:	7842      	ldrb	r2, [r0, #1]
 800d624:	0712      	lsls	r2, r2, #28
 800d626:	d401      	bmi.n	800d62c <__ssvfiscanf_r+0x64>
 800d628:	46aa      	mov	sl, r5
 800d62a:	e7e3      	b.n	800d5f4 <__ssvfiscanf_r+0x2c>
 800d62c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800d62e:	3301      	adds	r3, #1
 800d630:	3201      	adds	r2, #1
 800d632:	9245      	str	r2, [sp, #276]	; 0x114
 800d634:	6862      	ldr	r2, [r4, #4]
 800d636:	6023      	str	r3, [r4, #0]
 800d638:	3a01      	subs	r2, #1
 800d63a:	6062      	str	r2, [r4, #4]
 800d63c:	e7e9      	b.n	800d612 <__ssvfiscanf_r+0x4a>
 800d63e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800d640:	4621      	mov	r1, r4
 800d642:	4630      	mov	r0, r6
 800d644:	4798      	blx	r3
 800d646:	2800      	cmp	r0, #0
 800d648:	d0e6      	beq.n	800d618 <__ssvfiscanf_r+0x50>
 800d64a:	e7ed      	b.n	800d628 <__ssvfiscanf_r+0x60>
 800d64c:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 800d650:	f040 8082 	bne.w	800d758 <__ssvfiscanf_r+0x190>
 800d654:	9343      	str	r3, [sp, #268]	; 0x10c
 800d656:	9341      	str	r3, [sp, #260]	; 0x104
 800d658:	f89a 3001 	ldrb.w	r3, [sl, #1]
 800d65c:	2b2a      	cmp	r3, #42	; 0x2a
 800d65e:	d103      	bne.n	800d668 <__ssvfiscanf_r+0xa0>
 800d660:	2310      	movs	r3, #16
 800d662:	f10a 0502 	add.w	r5, sl, #2
 800d666:	9341      	str	r3, [sp, #260]	; 0x104
 800d668:	46aa      	mov	sl, r5
 800d66a:	f815 1b01 	ldrb.w	r1, [r5], #1
 800d66e:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800d672:	2a09      	cmp	r2, #9
 800d674:	d922      	bls.n	800d6bc <__ssvfiscanf_r+0xf4>
 800d676:	2203      	movs	r2, #3
 800d678:	4879      	ldr	r0, [pc, #484]	; (800d860 <__ssvfiscanf_r+0x298>)
 800d67a:	f000 fd57 	bl	800e12c <memchr>
 800d67e:	b138      	cbz	r0, 800d690 <__ssvfiscanf_r+0xc8>
 800d680:	eba0 0309 	sub.w	r3, r0, r9
 800d684:	2001      	movs	r0, #1
 800d686:	46aa      	mov	sl, r5
 800d688:	4098      	lsls	r0, r3
 800d68a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800d68c:	4318      	orrs	r0, r3
 800d68e:	9041      	str	r0, [sp, #260]	; 0x104
 800d690:	f89a 3000 	ldrb.w	r3, [sl]
 800d694:	f10a 0501 	add.w	r5, sl, #1
 800d698:	2b67      	cmp	r3, #103	; 0x67
 800d69a:	d82b      	bhi.n	800d6f4 <__ssvfiscanf_r+0x12c>
 800d69c:	2b65      	cmp	r3, #101	; 0x65
 800d69e:	f080 809f 	bcs.w	800d7e0 <__ssvfiscanf_r+0x218>
 800d6a2:	2b47      	cmp	r3, #71	; 0x47
 800d6a4:	d810      	bhi.n	800d6c8 <__ssvfiscanf_r+0x100>
 800d6a6:	2b45      	cmp	r3, #69	; 0x45
 800d6a8:	f080 809a 	bcs.w	800d7e0 <__ssvfiscanf_r+0x218>
 800d6ac:	2b00      	cmp	r3, #0
 800d6ae:	d06c      	beq.n	800d78a <__ssvfiscanf_r+0x1c2>
 800d6b0:	2b25      	cmp	r3, #37	; 0x25
 800d6b2:	d051      	beq.n	800d758 <__ssvfiscanf_r+0x190>
 800d6b4:	2303      	movs	r3, #3
 800d6b6:	9742      	str	r7, [sp, #264]	; 0x108
 800d6b8:	9347      	str	r3, [sp, #284]	; 0x11c
 800d6ba:	e027      	b.n	800d70c <__ssvfiscanf_r+0x144>
 800d6bc:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800d6be:	fb07 1303 	mla	r3, r7, r3, r1
 800d6c2:	3b30      	subs	r3, #48	; 0x30
 800d6c4:	9343      	str	r3, [sp, #268]	; 0x10c
 800d6c6:	e7cf      	b.n	800d668 <__ssvfiscanf_r+0xa0>
 800d6c8:	2b5b      	cmp	r3, #91	; 0x5b
 800d6ca:	d06a      	beq.n	800d7a2 <__ssvfiscanf_r+0x1da>
 800d6cc:	d80c      	bhi.n	800d6e8 <__ssvfiscanf_r+0x120>
 800d6ce:	2b58      	cmp	r3, #88	; 0x58
 800d6d0:	d1f0      	bne.n	800d6b4 <__ssvfiscanf_r+0xec>
 800d6d2:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800d6d4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d6d8:	9241      	str	r2, [sp, #260]	; 0x104
 800d6da:	2210      	movs	r2, #16
 800d6dc:	9242      	str	r2, [sp, #264]	; 0x108
 800d6de:	2b6e      	cmp	r3, #110	; 0x6e
 800d6e0:	bf8c      	ite	hi
 800d6e2:	2304      	movhi	r3, #4
 800d6e4:	2303      	movls	r3, #3
 800d6e6:	e010      	b.n	800d70a <__ssvfiscanf_r+0x142>
 800d6e8:	2b63      	cmp	r3, #99	; 0x63
 800d6ea:	d065      	beq.n	800d7b8 <__ssvfiscanf_r+0x1f0>
 800d6ec:	2b64      	cmp	r3, #100	; 0x64
 800d6ee:	d1e1      	bne.n	800d6b4 <__ssvfiscanf_r+0xec>
 800d6f0:	9742      	str	r7, [sp, #264]	; 0x108
 800d6f2:	e7f4      	b.n	800d6de <__ssvfiscanf_r+0x116>
 800d6f4:	2b70      	cmp	r3, #112	; 0x70
 800d6f6:	d04b      	beq.n	800d790 <__ssvfiscanf_r+0x1c8>
 800d6f8:	d826      	bhi.n	800d748 <__ssvfiscanf_r+0x180>
 800d6fa:	2b6e      	cmp	r3, #110	; 0x6e
 800d6fc:	d062      	beq.n	800d7c4 <__ssvfiscanf_r+0x1fc>
 800d6fe:	d84c      	bhi.n	800d79a <__ssvfiscanf_r+0x1d2>
 800d700:	2b69      	cmp	r3, #105	; 0x69
 800d702:	d1d7      	bne.n	800d6b4 <__ssvfiscanf_r+0xec>
 800d704:	2300      	movs	r3, #0
 800d706:	9342      	str	r3, [sp, #264]	; 0x108
 800d708:	2303      	movs	r3, #3
 800d70a:	9347      	str	r3, [sp, #284]	; 0x11c
 800d70c:	6863      	ldr	r3, [r4, #4]
 800d70e:	2b00      	cmp	r3, #0
 800d710:	dd68      	ble.n	800d7e4 <__ssvfiscanf_r+0x21c>
 800d712:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800d714:	0659      	lsls	r1, r3, #25
 800d716:	d407      	bmi.n	800d728 <__ssvfiscanf_r+0x160>
 800d718:	f7ff fc1e 	bl	800cf58 <__locale_ctype_ptr>
 800d71c:	6823      	ldr	r3, [r4, #0]
 800d71e:	781a      	ldrb	r2, [r3, #0]
 800d720:	4410      	add	r0, r2
 800d722:	7842      	ldrb	r2, [r0, #1]
 800d724:	0712      	lsls	r2, r2, #28
 800d726:	d464      	bmi.n	800d7f2 <__ssvfiscanf_r+0x22a>
 800d728:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800d72a:	2b02      	cmp	r3, #2
 800d72c:	dc73      	bgt.n	800d816 <__ssvfiscanf_r+0x24e>
 800d72e:	466b      	mov	r3, sp
 800d730:	4622      	mov	r2, r4
 800d732:	a941      	add	r1, sp, #260	; 0x104
 800d734:	4630      	mov	r0, r6
 800d736:	f000 fa1f 	bl	800db78 <_scanf_chars>
 800d73a:	2801      	cmp	r0, #1
 800d73c:	f000 8089 	beq.w	800d852 <__ssvfiscanf_r+0x28a>
 800d740:	2802      	cmp	r0, #2
 800d742:	f47f af71 	bne.w	800d628 <__ssvfiscanf_r+0x60>
 800d746:	e01d      	b.n	800d784 <__ssvfiscanf_r+0x1bc>
 800d748:	2b75      	cmp	r3, #117	; 0x75
 800d74a:	d0d1      	beq.n	800d6f0 <__ssvfiscanf_r+0x128>
 800d74c:	2b78      	cmp	r3, #120	; 0x78
 800d74e:	d0c0      	beq.n	800d6d2 <__ssvfiscanf_r+0x10a>
 800d750:	2b73      	cmp	r3, #115	; 0x73
 800d752:	d1af      	bne.n	800d6b4 <__ssvfiscanf_r+0xec>
 800d754:	2302      	movs	r3, #2
 800d756:	e7d8      	b.n	800d70a <__ssvfiscanf_r+0x142>
 800d758:	6863      	ldr	r3, [r4, #4]
 800d75a:	2b00      	cmp	r3, #0
 800d75c:	dd0c      	ble.n	800d778 <__ssvfiscanf_r+0x1b0>
 800d75e:	6823      	ldr	r3, [r4, #0]
 800d760:	781a      	ldrb	r2, [r3, #0]
 800d762:	455a      	cmp	r2, fp
 800d764:	d175      	bne.n	800d852 <__ssvfiscanf_r+0x28a>
 800d766:	3301      	adds	r3, #1
 800d768:	6862      	ldr	r2, [r4, #4]
 800d76a:	6023      	str	r3, [r4, #0]
 800d76c:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800d76e:	3a01      	subs	r2, #1
 800d770:	3301      	adds	r3, #1
 800d772:	6062      	str	r2, [r4, #4]
 800d774:	9345      	str	r3, [sp, #276]	; 0x114
 800d776:	e757      	b.n	800d628 <__ssvfiscanf_r+0x60>
 800d778:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800d77a:	4621      	mov	r1, r4
 800d77c:	4630      	mov	r0, r6
 800d77e:	4798      	blx	r3
 800d780:	2800      	cmp	r0, #0
 800d782:	d0ec      	beq.n	800d75e <__ssvfiscanf_r+0x196>
 800d784:	9844      	ldr	r0, [sp, #272]	; 0x110
 800d786:	2800      	cmp	r0, #0
 800d788:	d159      	bne.n	800d83e <__ssvfiscanf_r+0x276>
 800d78a:	f04f 30ff 	mov.w	r0, #4294967295
 800d78e:	e05c      	b.n	800d84a <__ssvfiscanf_r+0x282>
 800d790:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800d792:	f042 0220 	orr.w	r2, r2, #32
 800d796:	9241      	str	r2, [sp, #260]	; 0x104
 800d798:	e79b      	b.n	800d6d2 <__ssvfiscanf_r+0x10a>
 800d79a:	2308      	movs	r3, #8
 800d79c:	9342      	str	r3, [sp, #264]	; 0x108
 800d79e:	2304      	movs	r3, #4
 800d7a0:	e7b3      	b.n	800d70a <__ssvfiscanf_r+0x142>
 800d7a2:	4629      	mov	r1, r5
 800d7a4:	4640      	mov	r0, r8
 800d7a6:	f000 fb3f 	bl	800de28 <__sccl>
 800d7aa:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800d7ac:	4605      	mov	r5, r0
 800d7ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d7b2:	9341      	str	r3, [sp, #260]	; 0x104
 800d7b4:	2301      	movs	r3, #1
 800d7b6:	e7a8      	b.n	800d70a <__ssvfiscanf_r+0x142>
 800d7b8:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800d7ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d7be:	9341      	str	r3, [sp, #260]	; 0x104
 800d7c0:	2300      	movs	r3, #0
 800d7c2:	e7a2      	b.n	800d70a <__ssvfiscanf_r+0x142>
 800d7c4:	9841      	ldr	r0, [sp, #260]	; 0x104
 800d7c6:	06c3      	lsls	r3, r0, #27
 800d7c8:	f53f af2e 	bmi.w	800d628 <__ssvfiscanf_r+0x60>
 800d7cc:	9b00      	ldr	r3, [sp, #0]
 800d7ce:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800d7d0:	1d19      	adds	r1, r3, #4
 800d7d2:	9100      	str	r1, [sp, #0]
 800d7d4:	681b      	ldr	r3, [r3, #0]
 800d7d6:	07c0      	lsls	r0, r0, #31
 800d7d8:	bf4c      	ite	mi
 800d7da:	801a      	strhmi	r2, [r3, #0]
 800d7dc:	601a      	strpl	r2, [r3, #0]
 800d7de:	e723      	b.n	800d628 <__ssvfiscanf_r+0x60>
 800d7e0:	2305      	movs	r3, #5
 800d7e2:	e792      	b.n	800d70a <__ssvfiscanf_r+0x142>
 800d7e4:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800d7e6:	4621      	mov	r1, r4
 800d7e8:	4630      	mov	r0, r6
 800d7ea:	4798      	blx	r3
 800d7ec:	2800      	cmp	r0, #0
 800d7ee:	d090      	beq.n	800d712 <__ssvfiscanf_r+0x14a>
 800d7f0:	e7c8      	b.n	800d784 <__ssvfiscanf_r+0x1bc>
 800d7f2:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800d7f4:	3201      	adds	r2, #1
 800d7f6:	9245      	str	r2, [sp, #276]	; 0x114
 800d7f8:	6862      	ldr	r2, [r4, #4]
 800d7fa:	3a01      	subs	r2, #1
 800d7fc:	2a00      	cmp	r2, #0
 800d7fe:	6062      	str	r2, [r4, #4]
 800d800:	dd02      	ble.n	800d808 <__ssvfiscanf_r+0x240>
 800d802:	3301      	adds	r3, #1
 800d804:	6023      	str	r3, [r4, #0]
 800d806:	e787      	b.n	800d718 <__ssvfiscanf_r+0x150>
 800d808:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800d80a:	4621      	mov	r1, r4
 800d80c:	4630      	mov	r0, r6
 800d80e:	4798      	blx	r3
 800d810:	2800      	cmp	r0, #0
 800d812:	d081      	beq.n	800d718 <__ssvfiscanf_r+0x150>
 800d814:	e7b6      	b.n	800d784 <__ssvfiscanf_r+0x1bc>
 800d816:	2b04      	cmp	r3, #4
 800d818:	dc06      	bgt.n	800d828 <__ssvfiscanf_r+0x260>
 800d81a:	466b      	mov	r3, sp
 800d81c:	4622      	mov	r2, r4
 800d81e:	a941      	add	r1, sp, #260	; 0x104
 800d820:	4630      	mov	r0, r6
 800d822:	f000 fa0b 	bl	800dc3c <_scanf_i>
 800d826:	e788      	b.n	800d73a <__ssvfiscanf_r+0x172>
 800d828:	4b0e      	ldr	r3, [pc, #56]	; (800d864 <__ssvfiscanf_r+0x29c>)
 800d82a:	2b00      	cmp	r3, #0
 800d82c:	f43f aefc 	beq.w	800d628 <__ssvfiscanf_r+0x60>
 800d830:	466b      	mov	r3, sp
 800d832:	4622      	mov	r2, r4
 800d834:	a941      	add	r1, sp, #260	; 0x104
 800d836:	4630      	mov	r0, r6
 800d838:	f3af 8000 	nop.w
 800d83c:	e77d      	b.n	800d73a <__ssvfiscanf_r+0x172>
 800d83e:	89a3      	ldrh	r3, [r4, #12]
 800d840:	f013 0f40 	tst.w	r3, #64	; 0x40
 800d844:	bf18      	it	ne
 800d846:	f04f 30ff 	movne.w	r0, #4294967295
 800d84a:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 800d84e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d852:	9844      	ldr	r0, [sp, #272]	; 0x110
 800d854:	e7f9      	b.n	800d84a <__ssvfiscanf_r+0x282>
 800d856:	bf00      	nop
 800d858:	0800d515 	.word	0x0800d515
 800d85c:	0800d58f 	.word	0x0800d58f
 800d860:	0800e779 	.word	0x0800e779
 800d864:	00000000 	.word	0x00000000

0800d868 <_printf_common>:
 800d868:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d86c:	4691      	mov	r9, r2
 800d86e:	461f      	mov	r7, r3
 800d870:	688a      	ldr	r2, [r1, #8]
 800d872:	690b      	ldr	r3, [r1, #16]
 800d874:	4606      	mov	r6, r0
 800d876:	4293      	cmp	r3, r2
 800d878:	bfb8      	it	lt
 800d87a:	4613      	movlt	r3, r2
 800d87c:	f8c9 3000 	str.w	r3, [r9]
 800d880:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d884:	460c      	mov	r4, r1
 800d886:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d88a:	b112      	cbz	r2, 800d892 <_printf_common+0x2a>
 800d88c:	3301      	adds	r3, #1
 800d88e:	f8c9 3000 	str.w	r3, [r9]
 800d892:	6823      	ldr	r3, [r4, #0]
 800d894:	0699      	lsls	r1, r3, #26
 800d896:	bf42      	ittt	mi
 800d898:	f8d9 3000 	ldrmi.w	r3, [r9]
 800d89c:	3302      	addmi	r3, #2
 800d89e:	f8c9 3000 	strmi.w	r3, [r9]
 800d8a2:	6825      	ldr	r5, [r4, #0]
 800d8a4:	f015 0506 	ands.w	r5, r5, #6
 800d8a8:	d107      	bne.n	800d8ba <_printf_common+0x52>
 800d8aa:	f104 0a19 	add.w	sl, r4, #25
 800d8ae:	68e3      	ldr	r3, [r4, #12]
 800d8b0:	f8d9 2000 	ldr.w	r2, [r9]
 800d8b4:	1a9b      	subs	r3, r3, r2
 800d8b6:	42ab      	cmp	r3, r5
 800d8b8:	dc29      	bgt.n	800d90e <_printf_common+0xa6>
 800d8ba:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800d8be:	6822      	ldr	r2, [r4, #0]
 800d8c0:	3300      	adds	r3, #0
 800d8c2:	bf18      	it	ne
 800d8c4:	2301      	movne	r3, #1
 800d8c6:	0692      	lsls	r2, r2, #26
 800d8c8:	d42e      	bmi.n	800d928 <_printf_common+0xc0>
 800d8ca:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d8ce:	4639      	mov	r1, r7
 800d8d0:	4630      	mov	r0, r6
 800d8d2:	47c0      	blx	r8
 800d8d4:	3001      	adds	r0, #1
 800d8d6:	d021      	beq.n	800d91c <_printf_common+0xb4>
 800d8d8:	6823      	ldr	r3, [r4, #0]
 800d8da:	68e5      	ldr	r5, [r4, #12]
 800d8dc:	f003 0306 	and.w	r3, r3, #6
 800d8e0:	2b04      	cmp	r3, #4
 800d8e2:	bf18      	it	ne
 800d8e4:	2500      	movne	r5, #0
 800d8e6:	f8d9 2000 	ldr.w	r2, [r9]
 800d8ea:	f04f 0900 	mov.w	r9, #0
 800d8ee:	bf08      	it	eq
 800d8f0:	1aad      	subeq	r5, r5, r2
 800d8f2:	68a3      	ldr	r3, [r4, #8]
 800d8f4:	6922      	ldr	r2, [r4, #16]
 800d8f6:	bf08      	it	eq
 800d8f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d8fc:	4293      	cmp	r3, r2
 800d8fe:	bfc4      	itt	gt
 800d900:	1a9b      	subgt	r3, r3, r2
 800d902:	18ed      	addgt	r5, r5, r3
 800d904:	341a      	adds	r4, #26
 800d906:	454d      	cmp	r5, r9
 800d908:	d11a      	bne.n	800d940 <_printf_common+0xd8>
 800d90a:	2000      	movs	r0, #0
 800d90c:	e008      	b.n	800d920 <_printf_common+0xb8>
 800d90e:	2301      	movs	r3, #1
 800d910:	4652      	mov	r2, sl
 800d912:	4639      	mov	r1, r7
 800d914:	4630      	mov	r0, r6
 800d916:	47c0      	blx	r8
 800d918:	3001      	adds	r0, #1
 800d91a:	d103      	bne.n	800d924 <_printf_common+0xbc>
 800d91c:	f04f 30ff 	mov.w	r0, #4294967295
 800d920:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d924:	3501      	adds	r5, #1
 800d926:	e7c2      	b.n	800d8ae <_printf_common+0x46>
 800d928:	2030      	movs	r0, #48	; 0x30
 800d92a:	18e1      	adds	r1, r4, r3
 800d92c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d930:	1c5a      	adds	r2, r3, #1
 800d932:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d936:	4422      	add	r2, r4
 800d938:	3302      	adds	r3, #2
 800d93a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d93e:	e7c4      	b.n	800d8ca <_printf_common+0x62>
 800d940:	2301      	movs	r3, #1
 800d942:	4622      	mov	r2, r4
 800d944:	4639      	mov	r1, r7
 800d946:	4630      	mov	r0, r6
 800d948:	47c0      	blx	r8
 800d94a:	3001      	adds	r0, #1
 800d94c:	d0e6      	beq.n	800d91c <_printf_common+0xb4>
 800d94e:	f109 0901 	add.w	r9, r9, #1
 800d952:	e7d8      	b.n	800d906 <_printf_common+0x9e>

0800d954 <_printf_i>:
 800d954:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d958:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800d95c:	460c      	mov	r4, r1
 800d95e:	7e09      	ldrb	r1, [r1, #24]
 800d960:	b085      	sub	sp, #20
 800d962:	296e      	cmp	r1, #110	; 0x6e
 800d964:	4617      	mov	r7, r2
 800d966:	4606      	mov	r6, r0
 800d968:	4698      	mov	r8, r3
 800d96a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d96c:	f000 80b3 	beq.w	800dad6 <_printf_i+0x182>
 800d970:	d822      	bhi.n	800d9b8 <_printf_i+0x64>
 800d972:	2963      	cmp	r1, #99	; 0x63
 800d974:	d036      	beq.n	800d9e4 <_printf_i+0x90>
 800d976:	d80a      	bhi.n	800d98e <_printf_i+0x3a>
 800d978:	2900      	cmp	r1, #0
 800d97a:	f000 80b9 	beq.w	800daf0 <_printf_i+0x19c>
 800d97e:	2958      	cmp	r1, #88	; 0x58
 800d980:	f000 8083 	beq.w	800da8a <_printf_i+0x136>
 800d984:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d988:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800d98c:	e032      	b.n	800d9f4 <_printf_i+0xa0>
 800d98e:	2964      	cmp	r1, #100	; 0x64
 800d990:	d001      	beq.n	800d996 <_printf_i+0x42>
 800d992:	2969      	cmp	r1, #105	; 0x69
 800d994:	d1f6      	bne.n	800d984 <_printf_i+0x30>
 800d996:	6820      	ldr	r0, [r4, #0]
 800d998:	6813      	ldr	r3, [r2, #0]
 800d99a:	0605      	lsls	r5, r0, #24
 800d99c:	f103 0104 	add.w	r1, r3, #4
 800d9a0:	d52a      	bpl.n	800d9f8 <_printf_i+0xa4>
 800d9a2:	681b      	ldr	r3, [r3, #0]
 800d9a4:	6011      	str	r1, [r2, #0]
 800d9a6:	2b00      	cmp	r3, #0
 800d9a8:	da03      	bge.n	800d9b2 <_printf_i+0x5e>
 800d9aa:	222d      	movs	r2, #45	; 0x2d
 800d9ac:	425b      	negs	r3, r3
 800d9ae:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800d9b2:	486f      	ldr	r0, [pc, #444]	; (800db70 <_printf_i+0x21c>)
 800d9b4:	220a      	movs	r2, #10
 800d9b6:	e039      	b.n	800da2c <_printf_i+0xd8>
 800d9b8:	2973      	cmp	r1, #115	; 0x73
 800d9ba:	f000 809d 	beq.w	800daf8 <_printf_i+0x1a4>
 800d9be:	d808      	bhi.n	800d9d2 <_printf_i+0x7e>
 800d9c0:	296f      	cmp	r1, #111	; 0x6f
 800d9c2:	d020      	beq.n	800da06 <_printf_i+0xb2>
 800d9c4:	2970      	cmp	r1, #112	; 0x70
 800d9c6:	d1dd      	bne.n	800d984 <_printf_i+0x30>
 800d9c8:	6823      	ldr	r3, [r4, #0]
 800d9ca:	f043 0320 	orr.w	r3, r3, #32
 800d9ce:	6023      	str	r3, [r4, #0]
 800d9d0:	e003      	b.n	800d9da <_printf_i+0x86>
 800d9d2:	2975      	cmp	r1, #117	; 0x75
 800d9d4:	d017      	beq.n	800da06 <_printf_i+0xb2>
 800d9d6:	2978      	cmp	r1, #120	; 0x78
 800d9d8:	d1d4      	bne.n	800d984 <_printf_i+0x30>
 800d9da:	2378      	movs	r3, #120	; 0x78
 800d9dc:	4865      	ldr	r0, [pc, #404]	; (800db74 <_printf_i+0x220>)
 800d9de:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d9e2:	e055      	b.n	800da90 <_printf_i+0x13c>
 800d9e4:	6813      	ldr	r3, [r2, #0]
 800d9e6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d9ea:	1d19      	adds	r1, r3, #4
 800d9ec:	681b      	ldr	r3, [r3, #0]
 800d9ee:	6011      	str	r1, [r2, #0]
 800d9f0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d9f4:	2301      	movs	r3, #1
 800d9f6:	e08c      	b.n	800db12 <_printf_i+0x1be>
 800d9f8:	681b      	ldr	r3, [r3, #0]
 800d9fa:	f010 0f40 	tst.w	r0, #64	; 0x40
 800d9fe:	6011      	str	r1, [r2, #0]
 800da00:	bf18      	it	ne
 800da02:	b21b      	sxthne	r3, r3
 800da04:	e7cf      	b.n	800d9a6 <_printf_i+0x52>
 800da06:	6813      	ldr	r3, [r2, #0]
 800da08:	6825      	ldr	r5, [r4, #0]
 800da0a:	1d18      	adds	r0, r3, #4
 800da0c:	6010      	str	r0, [r2, #0]
 800da0e:	0628      	lsls	r0, r5, #24
 800da10:	d501      	bpl.n	800da16 <_printf_i+0xc2>
 800da12:	681b      	ldr	r3, [r3, #0]
 800da14:	e002      	b.n	800da1c <_printf_i+0xc8>
 800da16:	0668      	lsls	r0, r5, #25
 800da18:	d5fb      	bpl.n	800da12 <_printf_i+0xbe>
 800da1a:	881b      	ldrh	r3, [r3, #0]
 800da1c:	296f      	cmp	r1, #111	; 0x6f
 800da1e:	bf14      	ite	ne
 800da20:	220a      	movne	r2, #10
 800da22:	2208      	moveq	r2, #8
 800da24:	4852      	ldr	r0, [pc, #328]	; (800db70 <_printf_i+0x21c>)
 800da26:	2100      	movs	r1, #0
 800da28:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800da2c:	6865      	ldr	r5, [r4, #4]
 800da2e:	2d00      	cmp	r5, #0
 800da30:	60a5      	str	r5, [r4, #8]
 800da32:	f2c0 8095 	blt.w	800db60 <_printf_i+0x20c>
 800da36:	6821      	ldr	r1, [r4, #0]
 800da38:	f021 0104 	bic.w	r1, r1, #4
 800da3c:	6021      	str	r1, [r4, #0]
 800da3e:	2b00      	cmp	r3, #0
 800da40:	d13d      	bne.n	800dabe <_printf_i+0x16a>
 800da42:	2d00      	cmp	r5, #0
 800da44:	f040 808e 	bne.w	800db64 <_printf_i+0x210>
 800da48:	4665      	mov	r5, ip
 800da4a:	2a08      	cmp	r2, #8
 800da4c:	d10b      	bne.n	800da66 <_printf_i+0x112>
 800da4e:	6823      	ldr	r3, [r4, #0]
 800da50:	07db      	lsls	r3, r3, #31
 800da52:	d508      	bpl.n	800da66 <_printf_i+0x112>
 800da54:	6923      	ldr	r3, [r4, #16]
 800da56:	6862      	ldr	r2, [r4, #4]
 800da58:	429a      	cmp	r2, r3
 800da5a:	bfde      	ittt	le
 800da5c:	2330      	movle	r3, #48	; 0x30
 800da5e:	f805 3c01 	strble.w	r3, [r5, #-1]
 800da62:	f105 35ff 	addle.w	r5, r5, #4294967295
 800da66:	ebac 0305 	sub.w	r3, ip, r5
 800da6a:	6123      	str	r3, [r4, #16]
 800da6c:	f8cd 8000 	str.w	r8, [sp]
 800da70:	463b      	mov	r3, r7
 800da72:	aa03      	add	r2, sp, #12
 800da74:	4621      	mov	r1, r4
 800da76:	4630      	mov	r0, r6
 800da78:	f7ff fef6 	bl	800d868 <_printf_common>
 800da7c:	3001      	adds	r0, #1
 800da7e:	d14d      	bne.n	800db1c <_printf_i+0x1c8>
 800da80:	f04f 30ff 	mov.w	r0, #4294967295
 800da84:	b005      	add	sp, #20
 800da86:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800da8a:	4839      	ldr	r0, [pc, #228]	; (800db70 <_printf_i+0x21c>)
 800da8c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800da90:	6813      	ldr	r3, [r2, #0]
 800da92:	6821      	ldr	r1, [r4, #0]
 800da94:	1d1d      	adds	r5, r3, #4
 800da96:	681b      	ldr	r3, [r3, #0]
 800da98:	6015      	str	r5, [r2, #0]
 800da9a:	060a      	lsls	r2, r1, #24
 800da9c:	d50b      	bpl.n	800dab6 <_printf_i+0x162>
 800da9e:	07ca      	lsls	r2, r1, #31
 800daa0:	bf44      	itt	mi
 800daa2:	f041 0120 	orrmi.w	r1, r1, #32
 800daa6:	6021      	strmi	r1, [r4, #0]
 800daa8:	b91b      	cbnz	r3, 800dab2 <_printf_i+0x15e>
 800daaa:	6822      	ldr	r2, [r4, #0]
 800daac:	f022 0220 	bic.w	r2, r2, #32
 800dab0:	6022      	str	r2, [r4, #0]
 800dab2:	2210      	movs	r2, #16
 800dab4:	e7b7      	b.n	800da26 <_printf_i+0xd2>
 800dab6:	064d      	lsls	r5, r1, #25
 800dab8:	bf48      	it	mi
 800daba:	b29b      	uxthmi	r3, r3
 800dabc:	e7ef      	b.n	800da9e <_printf_i+0x14a>
 800dabe:	4665      	mov	r5, ip
 800dac0:	fbb3 f1f2 	udiv	r1, r3, r2
 800dac4:	fb02 3311 	mls	r3, r2, r1, r3
 800dac8:	5cc3      	ldrb	r3, [r0, r3]
 800daca:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800dace:	460b      	mov	r3, r1
 800dad0:	2900      	cmp	r1, #0
 800dad2:	d1f5      	bne.n	800dac0 <_printf_i+0x16c>
 800dad4:	e7b9      	b.n	800da4a <_printf_i+0xf6>
 800dad6:	6813      	ldr	r3, [r2, #0]
 800dad8:	6825      	ldr	r5, [r4, #0]
 800dada:	1d18      	adds	r0, r3, #4
 800dadc:	6961      	ldr	r1, [r4, #20]
 800dade:	6010      	str	r0, [r2, #0]
 800dae0:	0628      	lsls	r0, r5, #24
 800dae2:	681b      	ldr	r3, [r3, #0]
 800dae4:	d501      	bpl.n	800daea <_printf_i+0x196>
 800dae6:	6019      	str	r1, [r3, #0]
 800dae8:	e002      	b.n	800daf0 <_printf_i+0x19c>
 800daea:	066a      	lsls	r2, r5, #25
 800daec:	d5fb      	bpl.n	800dae6 <_printf_i+0x192>
 800daee:	8019      	strh	r1, [r3, #0]
 800daf0:	2300      	movs	r3, #0
 800daf2:	4665      	mov	r5, ip
 800daf4:	6123      	str	r3, [r4, #16]
 800daf6:	e7b9      	b.n	800da6c <_printf_i+0x118>
 800daf8:	6813      	ldr	r3, [r2, #0]
 800dafa:	1d19      	adds	r1, r3, #4
 800dafc:	6011      	str	r1, [r2, #0]
 800dafe:	681d      	ldr	r5, [r3, #0]
 800db00:	6862      	ldr	r2, [r4, #4]
 800db02:	2100      	movs	r1, #0
 800db04:	4628      	mov	r0, r5
 800db06:	f000 fb11 	bl	800e12c <memchr>
 800db0a:	b108      	cbz	r0, 800db10 <_printf_i+0x1bc>
 800db0c:	1b40      	subs	r0, r0, r5
 800db0e:	6060      	str	r0, [r4, #4]
 800db10:	6863      	ldr	r3, [r4, #4]
 800db12:	6123      	str	r3, [r4, #16]
 800db14:	2300      	movs	r3, #0
 800db16:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800db1a:	e7a7      	b.n	800da6c <_printf_i+0x118>
 800db1c:	6923      	ldr	r3, [r4, #16]
 800db1e:	462a      	mov	r2, r5
 800db20:	4639      	mov	r1, r7
 800db22:	4630      	mov	r0, r6
 800db24:	47c0      	blx	r8
 800db26:	3001      	adds	r0, #1
 800db28:	d0aa      	beq.n	800da80 <_printf_i+0x12c>
 800db2a:	6823      	ldr	r3, [r4, #0]
 800db2c:	079b      	lsls	r3, r3, #30
 800db2e:	d413      	bmi.n	800db58 <_printf_i+0x204>
 800db30:	68e0      	ldr	r0, [r4, #12]
 800db32:	9b03      	ldr	r3, [sp, #12]
 800db34:	4298      	cmp	r0, r3
 800db36:	bfb8      	it	lt
 800db38:	4618      	movlt	r0, r3
 800db3a:	e7a3      	b.n	800da84 <_printf_i+0x130>
 800db3c:	2301      	movs	r3, #1
 800db3e:	464a      	mov	r2, r9
 800db40:	4639      	mov	r1, r7
 800db42:	4630      	mov	r0, r6
 800db44:	47c0      	blx	r8
 800db46:	3001      	adds	r0, #1
 800db48:	d09a      	beq.n	800da80 <_printf_i+0x12c>
 800db4a:	3501      	adds	r5, #1
 800db4c:	68e3      	ldr	r3, [r4, #12]
 800db4e:	9a03      	ldr	r2, [sp, #12]
 800db50:	1a9b      	subs	r3, r3, r2
 800db52:	42ab      	cmp	r3, r5
 800db54:	dcf2      	bgt.n	800db3c <_printf_i+0x1e8>
 800db56:	e7eb      	b.n	800db30 <_printf_i+0x1dc>
 800db58:	2500      	movs	r5, #0
 800db5a:	f104 0919 	add.w	r9, r4, #25
 800db5e:	e7f5      	b.n	800db4c <_printf_i+0x1f8>
 800db60:	2b00      	cmp	r3, #0
 800db62:	d1ac      	bne.n	800dabe <_printf_i+0x16a>
 800db64:	7803      	ldrb	r3, [r0, #0]
 800db66:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800db6a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800db6e:	e76c      	b.n	800da4a <_printf_i+0xf6>
 800db70:	0800e784 	.word	0x0800e784
 800db74:	0800e795 	.word	0x0800e795

0800db78 <_scanf_chars>:
 800db78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800db7c:	4615      	mov	r5, r2
 800db7e:	688a      	ldr	r2, [r1, #8]
 800db80:	4680      	mov	r8, r0
 800db82:	460c      	mov	r4, r1
 800db84:	b932      	cbnz	r2, 800db94 <_scanf_chars+0x1c>
 800db86:	698a      	ldr	r2, [r1, #24]
 800db88:	2a00      	cmp	r2, #0
 800db8a:	bf14      	ite	ne
 800db8c:	f04f 32ff 	movne.w	r2, #4294967295
 800db90:	2201      	moveq	r2, #1
 800db92:	608a      	str	r2, [r1, #8]
 800db94:	2600      	movs	r6, #0
 800db96:	6822      	ldr	r2, [r4, #0]
 800db98:	06d1      	lsls	r1, r2, #27
 800db9a:	bf5f      	itttt	pl
 800db9c:	681a      	ldrpl	r2, [r3, #0]
 800db9e:	1d11      	addpl	r1, r2, #4
 800dba0:	6019      	strpl	r1, [r3, #0]
 800dba2:	6817      	ldrpl	r7, [r2, #0]
 800dba4:	69a3      	ldr	r3, [r4, #24]
 800dba6:	b1db      	cbz	r3, 800dbe0 <_scanf_chars+0x68>
 800dba8:	2b01      	cmp	r3, #1
 800dbaa:	d107      	bne.n	800dbbc <_scanf_chars+0x44>
 800dbac:	682b      	ldr	r3, [r5, #0]
 800dbae:	6962      	ldr	r2, [r4, #20]
 800dbb0:	781b      	ldrb	r3, [r3, #0]
 800dbb2:	5cd3      	ldrb	r3, [r2, r3]
 800dbb4:	b9a3      	cbnz	r3, 800dbe0 <_scanf_chars+0x68>
 800dbb6:	2e00      	cmp	r6, #0
 800dbb8:	d131      	bne.n	800dc1e <_scanf_chars+0xa6>
 800dbba:	e006      	b.n	800dbca <_scanf_chars+0x52>
 800dbbc:	2b02      	cmp	r3, #2
 800dbbe:	d007      	beq.n	800dbd0 <_scanf_chars+0x58>
 800dbc0:	2e00      	cmp	r6, #0
 800dbc2:	d12c      	bne.n	800dc1e <_scanf_chars+0xa6>
 800dbc4:	69a3      	ldr	r3, [r4, #24]
 800dbc6:	2b01      	cmp	r3, #1
 800dbc8:	d129      	bne.n	800dc1e <_scanf_chars+0xa6>
 800dbca:	2001      	movs	r0, #1
 800dbcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dbd0:	f7ff f9c2 	bl	800cf58 <__locale_ctype_ptr>
 800dbd4:	682b      	ldr	r3, [r5, #0]
 800dbd6:	781b      	ldrb	r3, [r3, #0]
 800dbd8:	4418      	add	r0, r3
 800dbda:	7843      	ldrb	r3, [r0, #1]
 800dbdc:	071b      	lsls	r3, r3, #28
 800dbde:	d4ef      	bmi.n	800dbc0 <_scanf_chars+0x48>
 800dbe0:	6823      	ldr	r3, [r4, #0]
 800dbe2:	3601      	adds	r6, #1
 800dbe4:	06da      	lsls	r2, r3, #27
 800dbe6:	bf5e      	ittt	pl
 800dbe8:	682b      	ldrpl	r3, [r5, #0]
 800dbea:	781b      	ldrbpl	r3, [r3, #0]
 800dbec:	703b      	strbpl	r3, [r7, #0]
 800dbee:	682a      	ldr	r2, [r5, #0]
 800dbf0:	686b      	ldr	r3, [r5, #4]
 800dbf2:	f102 0201 	add.w	r2, r2, #1
 800dbf6:	602a      	str	r2, [r5, #0]
 800dbf8:	68a2      	ldr	r2, [r4, #8]
 800dbfa:	f103 33ff 	add.w	r3, r3, #4294967295
 800dbfe:	f102 32ff 	add.w	r2, r2, #4294967295
 800dc02:	606b      	str	r3, [r5, #4]
 800dc04:	bf58      	it	pl
 800dc06:	3701      	addpl	r7, #1
 800dc08:	60a2      	str	r2, [r4, #8]
 800dc0a:	b142      	cbz	r2, 800dc1e <_scanf_chars+0xa6>
 800dc0c:	2b00      	cmp	r3, #0
 800dc0e:	dcc9      	bgt.n	800dba4 <_scanf_chars+0x2c>
 800dc10:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800dc14:	4629      	mov	r1, r5
 800dc16:	4640      	mov	r0, r8
 800dc18:	4798      	blx	r3
 800dc1a:	2800      	cmp	r0, #0
 800dc1c:	d0c2      	beq.n	800dba4 <_scanf_chars+0x2c>
 800dc1e:	6823      	ldr	r3, [r4, #0]
 800dc20:	f013 0310 	ands.w	r3, r3, #16
 800dc24:	d105      	bne.n	800dc32 <_scanf_chars+0xba>
 800dc26:	68e2      	ldr	r2, [r4, #12]
 800dc28:	3201      	adds	r2, #1
 800dc2a:	60e2      	str	r2, [r4, #12]
 800dc2c:	69a2      	ldr	r2, [r4, #24]
 800dc2e:	b102      	cbz	r2, 800dc32 <_scanf_chars+0xba>
 800dc30:	703b      	strb	r3, [r7, #0]
 800dc32:	6923      	ldr	r3, [r4, #16]
 800dc34:	2000      	movs	r0, #0
 800dc36:	441e      	add	r6, r3
 800dc38:	6126      	str	r6, [r4, #16]
 800dc3a:	e7c7      	b.n	800dbcc <_scanf_chars+0x54>

0800dc3c <_scanf_i>:
 800dc3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc40:	460c      	mov	r4, r1
 800dc42:	469a      	mov	sl, r3
 800dc44:	4b74      	ldr	r3, [pc, #464]	; (800de18 <_scanf_i+0x1dc>)
 800dc46:	b087      	sub	sp, #28
 800dc48:	4683      	mov	fp, r0
 800dc4a:	4616      	mov	r6, r2
 800dc4c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800dc50:	ab03      	add	r3, sp, #12
 800dc52:	68a7      	ldr	r7, [r4, #8]
 800dc54:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800dc58:	4b70      	ldr	r3, [pc, #448]	; (800de1c <_scanf_i+0x1e0>)
 800dc5a:	69a1      	ldr	r1, [r4, #24]
 800dc5c:	4a70      	ldr	r2, [pc, #448]	; (800de20 <_scanf_i+0x1e4>)
 800dc5e:	f104 091c 	add.w	r9, r4, #28
 800dc62:	2903      	cmp	r1, #3
 800dc64:	bf08      	it	eq
 800dc66:	461a      	moveq	r2, r3
 800dc68:	1e7b      	subs	r3, r7, #1
 800dc6a:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 800dc6e:	bf84      	itt	hi
 800dc70:	f240 135d 	movwhi	r3, #349	; 0x15d
 800dc74:	60a3      	strhi	r3, [r4, #8]
 800dc76:	6823      	ldr	r3, [r4, #0]
 800dc78:	bf88      	it	hi
 800dc7a:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800dc7e:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800dc82:	6023      	str	r3, [r4, #0]
 800dc84:	bf98      	it	ls
 800dc86:	2700      	movls	r7, #0
 800dc88:	464b      	mov	r3, r9
 800dc8a:	f04f 0800 	mov.w	r8, #0
 800dc8e:	9200      	str	r2, [sp, #0]
 800dc90:	bf88      	it	hi
 800dc92:	197f      	addhi	r7, r7, r5
 800dc94:	6831      	ldr	r1, [r6, #0]
 800dc96:	9301      	str	r3, [sp, #4]
 800dc98:	ab03      	add	r3, sp, #12
 800dc9a:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800dc9e:	2202      	movs	r2, #2
 800dca0:	7809      	ldrb	r1, [r1, #0]
 800dca2:	f000 fa43 	bl	800e12c <memchr>
 800dca6:	9b01      	ldr	r3, [sp, #4]
 800dca8:	b330      	cbz	r0, 800dcf8 <_scanf_i+0xbc>
 800dcaa:	f1b8 0f01 	cmp.w	r8, #1
 800dcae:	d15a      	bne.n	800dd66 <_scanf_i+0x12a>
 800dcb0:	6862      	ldr	r2, [r4, #4]
 800dcb2:	b92a      	cbnz	r2, 800dcc0 <_scanf_i+0x84>
 800dcb4:	2108      	movs	r1, #8
 800dcb6:	6822      	ldr	r2, [r4, #0]
 800dcb8:	6061      	str	r1, [r4, #4]
 800dcba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800dcbe:	6022      	str	r2, [r4, #0]
 800dcc0:	6822      	ldr	r2, [r4, #0]
 800dcc2:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800dcc6:	6022      	str	r2, [r4, #0]
 800dcc8:	68a2      	ldr	r2, [r4, #8]
 800dcca:	1e51      	subs	r1, r2, #1
 800dccc:	60a1      	str	r1, [r4, #8]
 800dcce:	b19a      	cbz	r2, 800dcf8 <_scanf_i+0xbc>
 800dcd0:	6832      	ldr	r2, [r6, #0]
 800dcd2:	1c5d      	adds	r5, r3, #1
 800dcd4:	1c51      	adds	r1, r2, #1
 800dcd6:	6031      	str	r1, [r6, #0]
 800dcd8:	7812      	ldrb	r2, [r2, #0]
 800dcda:	701a      	strb	r2, [r3, #0]
 800dcdc:	6873      	ldr	r3, [r6, #4]
 800dcde:	3b01      	subs	r3, #1
 800dce0:	2b00      	cmp	r3, #0
 800dce2:	6073      	str	r3, [r6, #4]
 800dce4:	dc07      	bgt.n	800dcf6 <_scanf_i+0xba>
 800dce6:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800dcea:	4631      	mov	r1, r6
 800dcec:	4658      	mov	r0, fp
 800dcee:	4798      	blx	r3
 800dcf0:	2800      	cmp	r0, #0
 800dcf2:	f040 8087 	bne.w	800de04 <_scanf_i+0x1c8>
 800dcf6:	462b      	mov	r3, r5
 800dcf8:	f108 0801 	add.w	r8, r8, #1
 800dcfc:	f1b8 0f03 	cmp.w	r8, #3
 800dd00:	d1c8      	bne.n	800dc94 <_scanf_i+0x58>
 800dd02:	6862      	ldr	r2, [r4, #4]
 800dd04:	b90a      	cbnz	r2, 800dd0a <_scanf_i+0xce>
 800dd06:	220a      	movs	r2, #10
 800dd08:	6062      	str	r2, [r4, #4]
 800dd0a:	6862      	ldr	r2, [r4, #4]
 800dd0c:	4945      	ldr	r1, [pc, #276]	; (800de24 <_scanf_i+0x1e8>)
 800dd0e:	6960      	ldr	r0, [r4, #20]
 800dd10:	1a89      	subs	r1, r1, r2
 800dd12:	9301      	str	r3, [sp, #4]
 800dd14:	f000 f888 	bl	800de28 <__sccl>
 800dd18:	9b01      	ldr	r3, [sp, #4]
 800dd1a:	f04f 0800 	mov.w	r8, #0
 800dd1e:	461d      	mov	r5, r3
 800dd20:	68a3      	ldr	r3, [r4, #8]
 800dd22:	6822      	ldr	r2, [r4, #0]
 800dd24:	2b00      	cmp	r3, #0
 800dd26:	d03b      	beq.n	800dda0 <_scanf_i+0x164>
 800dd28:	6831      	ldr	r1, [r6, #0]
 800dd2a:	6960      	ldr	r0, [r4, #20]
 800dd2c:	f891 c000 	ldrb.w	ip, [r1]
 800dd30:	f810 000c 	ldrb.w	r0, [r0, ip]
 800dd34:	2800      	cmp	r0, #0
 800dd36:	d033      	beq.n	800dda0 <_scanf_i+0x164>
 800dd38:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800dd3c:	d121      	bne.n	800dd82 <_scanf_i+0x146>
 800dd3e:	0510      	lsls	r0, r2, #20
 800dd40:	d51f      	bpl.n	800dd82 <_scanf_i+0x146>
 800dd42:	f108 0801 	add.w	r8, r8, #1
 800dd46:	b117      	cbz	r7, 800dd4e <_scanf_i+0x112>
 800dd48:	3301      	adds	r3, #1
 800dd4a:	3f01      	subs	r7, #1
 800dd4c:	60a3      	str	r3, [r4, #8]
 800dd4e:	6873      	ldr	r3, [r6, #4]
 800dd50:	3b01      	subs	r3, #1
 800dd52:	2b00      	cmp	r3, #0
 800dd54:	6073      	str	r3, [r6, #4]
 800dd56:	dd1c      	ble.n	800dd92 <_scanf_i+0x156>
 800dd58:	6833      	ldr	r3, [r6, #0]
 800dd5a:	3301      	adds	r3, #1
 800dd5c:	6033      	str	r3, [r6, #0]
 800dd5e:	68a3      	ldr	r3, [r4, #8]
 800dd60:	3b01      	subs	r3, #1
 800dd62:	60a3      	str	r3, [r4, #8]
 800dd64:	e7dc      	b.n	800dd20 <_scanf_i+0xe4>
 800dd66:	f1b8 0f02 	cmp.w	r8, #2
 800dd6a:	d1ad      	bne.n	800dcc8 <_scanf_i+0x8c>
 800dd6c:	6822      	ldr	r2, [r4, #0]
 800dd6e:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800dd72:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800dd76:	d1bf      	bne.n	800dcf8 <_scanf_i+0xbc>
 800dd78:	2110      	movs	r1, #16
 800dd7a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800dd7e:	6061      	str	r1, [r4, #4]
 800dd80:	e7a1      	b.n	800dcc6 <_scanf_i+0x8a>
 800dd82:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800dd86:	6022      	str	r2, [r4, #0]
 800dd88:	780b      	ldrb	r3, [r1, #0]
 800dd8a:	3501      	adds	r5, #1
 800dd8c:	f805 3c01 	strb.w	r3, [r5, #-1]
 800dd90:	e7dd      	b.n	800dd4e <_scanf_i+0x112>
 800dd92:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800dd96:	4631      	mov	r1, r6
 800dd98:	4658      	mov	r0, fp
 800dd9a:	4798      	blx	r3
 800dd9c:	2800      	cmp	r0, #0
 800dd9e:	d0de      	beq.n	800dd5e <_scanf_i+0x122>
 800dda0:	6823      	ldr	r3, [r4, #0]
 800dda2:	05d9      	lsls	r1, r3, #23
 800dda4:	d50c      	bpl.n	800ddc0 <_scanf_i+0x184>
 800dda6:	454d      	cmp	r5, r9
 800dda8:	d908      	bls.n	800ddbc <_scanf_i+0x180>
 800ddaa:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800ddae:	1e6f      	subs	r7, r5, #1
 800ddb0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ddb4:	4632      	mov	r2, r6
 800ddb6:	4658      	mov	r0, fp
 800ddb8:	4798      	blx	r3
 800ddba:	463d      	mov	r5, r7
 800ddbc:	454d      	cmp	r5, r9
 800ddbe:	d029      	beq.n	800de14 <_scanf_i+0x1d8>
 800ddc0:	6822      	ldr	r2, [r4, #0]
 800ddc2:	f012 0210 	ands.w	r2, r2, #16
 800ddc6:	d113      	bne.n	800ddf0 <_scanf_i+0x1b4>
 800ddc8:	702a      	strb	r2, [r5, #0]
 800ddca:	6863      	ldr	r3, [r4, #4]
 800ddcc:	4649      	mov	r1, r9
 800ddce:	4658      	mov	r0, fp
 800ddd0:	9e00      	ldr	r6, [sp, #0]
 800ddd2:	47b0      	blx	r6
 800ddd4:	f8da 3000 	ldr.w	r3, [sl]
 800ddd8:	6821      	ldr	r1, [r4, #0]
 800ddda:	1d1a      	adds	r2, r3, #4
 800dddc:	f8ca 2000 	str.w	r2, [sl]
 800dde0:	f011 0f20 	tst.w	r1, #32
 800dde4:	681b      	ldr	r3, [r3, #0]
 800dde6:	d010      	beq.n	800de0a <_scanf_i+0x1ce>
 800dde8:	6018      	str	r0, [r3, #0]
 800ddea:	68e3      	ldr	r3, [r4, #12]
 800ddec:	3301      	adds	r3, #1
 800ddee:	60e3      	str	r3, [r4, #12]
 800ddf0:	2000      	movs	r0, #0
 800ddf2:	eba5 0509 	sub.w	r5, r5, r9
 800ddf6:	44a8      	add	r8, r5
 800ddf8:	6925      	ldr	r5, [r4, #16]
 800ddfa:	4445      	add	r5, r8
 800ddfc:	6125      	str	r5, [r4, #16]
 800ddfe:	b007      	add	sp, #28
 800de00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800de04:	f04f 0800 	mov.w	r8, #0
 800de08:	e7ca      	b.n	800dda0 <_scanf_i+0x164>
 800de0a:	07ca      	lsls	r2, r1, #31
 800de0c:	bf4c      	ite	mi
 800de0e:	8018      	strhmi	r0, [r3, #0]
 800de10:	6018      	strpl	r0, [r3, #0]
 800de12:	e7ea      	b.n	800ddea <_scanf_i+0x1ae>
 800de14:	2001      	movs	r0, #1
 800de16:	e7f2      	b.n	800ddfe <_scanf_i+0x1c2>
 800de18:	0800e5c0 	.word	0x0800e5c0
 800de1c:	0800df81 	.word	0x0800df81
 800de20:	0800e099 	.word	0x0800e099
 800de24:	0800e7b6 	.word	0x0800e7b6

0800de28 <__sccl>:
 800de28:	b570      	push	{r4, r5, r6, lr}
 800de2a:	780b      	ldrb	r3, [r1, #0]
 800de2c:	1e44      	subs	r4, r0, #1
 800de2e:	2b5e      	cmp	r3, #94	; 0x5e
 800de30:	bf13      	iteet	ne
 800de32:	1c4a      	addne	r2, r1, #1
 800de34:	1c8a      	addeq	r2, r1, #2
 800de36:	784b      	ldrbeq	r3, [r1, #1]
 800de38:	2100      	movne	r1, #0
 800de3a:	bf08      	it	eq
 800de3c:	2101      	moveq	r1, #1
 800de3e:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 800de42:	f804 1f01 	strb.w	r1, [r4, #1]!
 800de46:	42ac      	cmp	r4, r5
 800de48:	d1fb      	bne.n	800de42 <__sccl+0x1a>
 800de4a:	b913      	cbnz	r3, 800de52 <__sccl+0x2a>
 800de4c:	3a01      	subs	r2, #1
 800de4e:	4610      	mov	r0, r2
 800de50:	bd70      	pop	{r4, r5, r6, pc}
 800de52:	f081 0401 	eor.w	r4, r1, #1
 800de56:	54c4      	strb	r4, [r0, r3]
 800de58:	1c51      	adds	r1, r2, #1
 800de5a:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 800de5e:	1e4e      	subs	r6, r1, #1
 800de60:	2d2d      	cmp	r5, #45	; 0x2d
 800de62:	460a      	mov	r2, r1
 800de64:	d006      	beq.n	800de74 <__sccl+0x4c>
 800de66:	2d5d      	cmp	r5, #93	; 0x5d
 800de68:	d0f1      	beq.n	800de4e <__sccl+0x26>
 800de6a:	b90d      	cbnz	r5, 800de70 <__sccl+0x48>
 800de6c:	4632      	mov	r2, r6
 800de6e:	e7ee      	b.n	800de4e <__sccl+0x26>
 800de70:	462b      	mov	r3, r5
 800de72:	e7f0      	b.n	800de56 <__sccl+0x2e>
 800de74:	780e      	ldrb	r6, [r1, #0]
 800de76:	2e5d      	cmp	r6, #93	; 0x5d
 800de78:	d0fa      	beq.n	800de70 <__sccl+0x48>
 800de7a:	42b3      	cmp	r3, r6
 800de7c:	dcf8      	bgt.n	800de70 <__sccl+0x48>
 800de7e:	3301      	adds	r3, #1
 800de80:	429e      	cmp	r6, r3
 800de82:	54c4      	strb	r4, [r0, r3]
 800de84:	dcfb      	bgt.n	800de7e <__sccl+0x56>
 800de86:	3102      	adds	r1, #2
 800de88:	e7e7      	b.n	800de5a <__sccl+0x32>

0800de8a <_strtol_l.isra.0>:
 800de8a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800de8e:	4680      	mov	r8, r0
 800de90:	4689      	mov	r9, r1
 800de92:	4692      	mov	sl, r2
 800de94:	461e      	mov	r6, r3
 800de96:	460f      	mov	r7, r1
 800de98:	463d      	mov	r5, r7
 800de9a:	9808      	ldr	r0, [sp, #32]
 800de9c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800dea0:	f7ff f856 	bl	800cf50 <__locale_ctype_ptr_l>
 800dea4:	4420      	add	r0, r4
 800dea6:	7843      	ldrb	r3, [r0, #1]
 800dea8:	f013 0308 	ands.w	r3, r3, #8
 800deac:	d132      	bne.n	800df14 <_strtol_l.isra.0+0x8a>
 800deae:	2c2d      	cmp	r4, #45	; 0x2d
 800deb0:	d132      	bne.n	800df18 <_strtol_l.isra.0+0x8e>
 800deb2:	2201      	movs	r2, #1
 800deb4:	787c      	ldrb	r4, [r7, #1]
 800deb6:	1cbd      	adds	r5, r7, #2
 800deb8:	2e00      	cmp	r6, #0
 800deba:	d05d      	beq.n	800df78 <_strtol_l.isra.0+0xee>
 800debc:	2e10      	cmp	r6, #16
 800debe:	d109      	bne.n	800ded4 <_strtol_l.isra.0+0x4a>
 800dec0:	2c30      	cmp	r4, #48	; 0x30
 800dec2:	d107      	bne.n	800ded4 <_strtol_l.isra.0+0x4a>
 800dec4:	782b      	ldrb	r3, [r5, #0]
 800dec6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800deca:	2b58      	cmp	r3, #88	; 0x58
 800decc:	d14f      	bne.n	800df6e <_strtol_l.isra.0+0xe4>
 800dece:	2610      	movs	r6, #16
 800ded0:	786c      	ldrb	r4, [r5, #1]
 800ded2:	3502      	adds	r5, #2
 800ded4:	2a00      	cmp	r2, #0
 800ded6:	bf14      	ite	ne
 800ded8:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800dedc:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800dee0:	2700      	movs	r7, #0
 800dee2:	fbb1 fcf6 	udiv	ip, r1, r6
 800dee6:	4638      	mov	r0, r7
 800dee8:	fb06 1e1c 	mls	lr, r6, ip, r1
 800deec:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800def0:	2b09      	cmp	r3, #9
 800def2:	d817      	bhi.n	800df24 <_strtol_l.isra.0+0x9a>
 800def4:	461c      	mov	r4, r3
 800def6:	42a6      	cmp	r6, r4
 800def8:	dd23      	ble.n	800df42 <_strtol_l.isra.0+0xb8>
 800defa:	1c7b      	adds	r3, r7, #1
 800defc:	d007      	beq.n	800df0e <_strtol_l.isra.0+0x84>
 800defe:	4584      	cmp	ip, r0
 800df00:	d31c      	bcc.n	800df3c <_strtol_l.isra.0+0xb2>
 800df02:	d101      	bne.n	800df08 <_strtol_l.isra.0+0x7e>
 800df04:	45a6      	cmp	lr, r4
 800df06:	db19      	blt.n	800df3c <_strtol_l.isra.0+0xb2>
 800df08:	2701      	movs	r7, #1
 800df0a:	fb00 4006 	mla	r0, r0, r6, r4
 800df0e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800df12:	e7eb      	b.n	800deec <_strtol_l.isra.0+0x62>
 800df14:	462f      	mov	r7, r5
 800df16:	e7bf      	b.n	800de98 <_strtol_l.isra.0+0xe>
 800df18:	2c2b      	cmp	r4, #43	; 0x2b
 800df1a:	bf04      	itt	eq
 800df1c:	1cbd      	addeq	r5, r7, #2
 800df1e:	787c      	ldrbeq	r4, [r7, #1]
 800df20:	461a      	mov	r2, r3
 800df22:	e7c9      	b.n	800deb8 <_strtol_l.isra.0+0x2e>
 800df24:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 800df28:	2b19      	cmp	r3, #25
 800df2a:	d801      	bhi.n	800df30 <_strtol_l.isra.0+0xa6>
 800df2c:	3c37      	subs	r4, #55	; 0x37
 800df2e:	e7e2      	b.n	800def6 <_strtol_l.isra.0+0x6c>
 800df30:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 800df34:	2b19      	cmp	r3, #25
 800df36:	d804      	bhi.n	800df42 <_strtol_l.isra.0+0xb8>
 800df38:	3c57      	subs	r4, #87	; 0x57
 800df3a:	e7dc      	b.n	800def6 <_strtol_l.isra.0+0x6c>
 800df3c:	f04f 37ff 	mov.w	r7, #4294967295
 800df40:	e7e5      	b.n	800df0e <_strtol_l.isra.0+0x84>
 800df42:	1c7b      	adds	r3, r7, #1
 800df44:	d108      	bne.n	800df58 <_strtol_l.isra.0+0xce>
 800df46:	2322      	movs	r3, #34	; 0x22
 800df48:	4608      	mov	r0, r1
 800df4a:	f8c8 3000 	str.w	r3, [r8]
 800df4e:	f1ba 0f00 	cmp.w	sl, #0
 800df52:	d107      	bne.n	800df64 <_strtol_l.isra.0+0xda>
 800df54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800df58:	b102      	cbz	r2, 800df5c <_strtol_l.isra.0+0xd2>
 800df5a:	4240      	negs	r0, r0
 800df5c:	f1ba 0f00 	cmp.w	sl, #0
 800df60:	d0f8      	beq.n	800df54 <_strtol_l.isra.0+0xca>
 800df62:	b10f      	cbz	r7, 800df68 <_strtol_l.isra.0+0xde>
 800df64:	f105 39ff 	add.w	r9, r5, #4294967295
 800df68:	f8ca 9000 	str.w	r9, [sl]
 800df6c:	e7f2      	b.n	800df54 <_strtol_l.isra.0+0xca>
 800df6e:	2430      	movs	r4, #48	; 0x30
 800df70:	2e00      	cmp	r6, #0
 800df72:	d1af      	bne.n	800ded4 <_strtol_l.isra.0+0x4a>
 800df74:	2608      	movs	r6, #8
 800df76:	e7ad      	b.n	800ded4 <_strtol_l.isra.0+0x4a>
 800df78:	2c30      	cmp	r4, #48	; 0x30
 800df7a:	d0a3      	beq.n	800dec4 <_strtol_l.isra.0+0x3a>
 800df7c:	260a      	movs	r6, #10
 800df7e:	e7a9      	b.n	800ded4 <_strtol_l.isra.0+0x4a>

0800df80 <_strtol_r>:
 800df80:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800df82:	4c06      	ldr	r4, [pc, #24]	; (800df9c <_strtol_r+0x1c>)
 800df84:	4d06      	ldr	r5, [pc, #24]	; (800dfa0 <_strtol_r+0x20>)
 800df86:	6824      	ldr	r4, [r4, #0]
 800df88:	6a24      	ldr	r4, [r4, #32]
 800df8a:	2c00      	cmp	r4, #0
 800df8c:	bf08      	it	eq
 800df8e:	462c      	moveq	r4, r5
 800df90:	9400      	str	r4, [sp, #0]
 800df92:	f7ff ff7a 	bl	800de8a <_strtol_l.isra.0>
 800df96:	b003      	add	sp, #12
 800df98:	bd30      	pop	{r4, r5, pc}
 800df9a:	bf00      	nop
 800df9c:	20000034 	.word	0x20000034
 800dfa0:	20000098 	.word	0x20000098

0800dfa4 <_strtoul_l.isra.0>:
 800dfa4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dfa8:	4680      	mov	r8, r0
 800dfaa:	4689      	mov	r9, r1
 800dfac:	4692      	mov	sl, r2
 800dfae:	461e      	mov	r6, r3
 800dfb0:	460f      	mov	r7, r1
 800dfb2:	463d      	mov	r5, r7
 800dfb4:	9808      	ldr	r0, [sp, #32]
 800dfb6:	f815 4b01 	ldrb.w	r4, [r5], #1
 800dfba:	f7fe ffc9 	bl	800cf50 <__locale_ctype_ptr_l>
 800dfbe:	4420      	add	r0, r4
 800dfc0:	7843      	ldrb	r3, [r0, #1]
 800dfc2:	f013 0308 	ands.w	r3, r3, #8
 800dfc6:	d130      	bne.n	800e02a <_strtoul_l.isra.0+0x86>
 800dfc8:	2c2d      	cmp	r4, #45	; 0x2d
 800dfca:	d130      	bne.n	800e02e <_strtoul_l.isra.0+0x8a>
 800dfcc:	2101      	movs	r1, #1
 800dfce:	787c      	ldrb	r4, [r7, #1]
 800dfd0:	1cbd      	adds	r5, r7, #2
 800dfd2:	2e00      	cmp	r6, #0
 800dfd4:	d05c      	beq.n	800e090 <_strtoul_l.isra.0+0xec>
 800dfd6:	2e10      	cmp	r6, #16
 800dfd8:	d109      	bne.n	800dfee <_strtoul_l.isra.0+0x4a>
 800dfda:	2c30      	cmp	r4, #48	; 0x30
 800dfdc:	d107      	bne.n	800dfee <_strtoul_l.isra.0+0x4a>
 800dfde:	782b      	ldrb	r3, [r5, #0]
 800dfe0:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800dfe4:	2b58      	cmp	r3, #88	; 0x58
 800dfe6:	d14e      	bne.n	800e086 <_strtoul_l.isra.0+0xe2>
 800dfe8:	2610      	movs	r6, #16
 800dfea:	786c      	ldrb	r4, [r5, #1]
 800dfec:	3502      	adds	r5, #2
 800dfee:	f04f 32ff 	mov.w	r2, #4294967295
 800dff2:	fbb2 f2f6 	udiv	r2, r2, r6
 800dff6:	2300      	movs	r3, #0
 800dff8:	fb06 fc02 	mul.w	ip, r6, r2
 800dffc:	4618      	mov	r0, r3
 800dffe:	ea6f 0c0c 	mvn.w	ip, ip
 800e002:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800e006:	2f09      	cmp	r7, #9
 800e008:	d817      	bhi.n	800e03a <_strtoul_l.isra.0+0x96>
 800e00a:	463c      	mov	r4, r7
 800e00c:	42a6      	cmp	r6, r4
 800e00e:	dd23      	ble.n	800e058 <_strtoul_l.isra.0+0xb4>
 800e010:	2b00      	cmp	r3, #0
 800e012:	db1e      	blt.n	800e052 <_strtoul_l.isra.0+0xae>
 800e014:	4282      	cmp	r2, r0
 800e016:	d31c      	bcc.n	800e052 <_strtoul_l.isra.0+0xae>
 800e018:	d101      	bne.n	800e01e <_strtoul_l.isra.0+0x7a>
 800e01a:	45a4      	cmp	ip, r4
 800e01c:	db19      	blt.n	800e052 <_strtoul_l.isra.0+0xae>
 800e01e:	2301      	movs	r3, #1
 800e020:	fb00 4006 	mla	r0, r0, r6, r4
 800e024:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e028:	e7eb      	b.n	800e002 <_strtoul_l.isra.0+0x5e>
 800e02a:	462f      	mov	r7, r5
 800e02c:	e7c1      	b.n	800dfb2 <_strtoul_l.isra.0+0xe>
 800e02e:	2c2b      	cmp	r4, #43	; 0x2b
 800e030:	bf04      	itt	eq
 800e032:	1cbd      	addeq	r5, r7, #2
 800e034:	787c      	ldrbeq	r4, [r7, #1]
 800e036:	4619      	mov	r1, r3
 800e038:	e7cb      	b.n	800dfd2 <_strtoul_l.isra.0+0x2e>
 800e03a:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800e03e:	2f19      	cmp	r7, #25
 800e040:	d801      	bhi.n	800e046 <_strtoul_l.isra.0+0xa2>
 800e042:	3c37      	subs	r4, #55	; 0x37
 800e044:	e7e2      	b.n	800e00c <_strtoul_l.isra.0+0x68>
 800e046:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800e04a:	2f19      	cmp	r7, #25
 800e04c:	d804      	bhi.n	800e058 <_strtoul_l.isra.0+0xb4>
 800e04e:	3c57      	subs	r4, #87	; 0x57
 800e050:	e7dc      	b.n	800e00c <_strtoul_l.isra.0+0x68>
 800e052:	f04f 33ff 	mov.w	r3, #4294967295
 800e056:	e7e5      	b.n	800e024 <_strtoul_l.isra.0+0x80>
 800e058:	2b00      	cmp	r3, #0
 800e05a:	da09      	bge.n	800e070 <_strtoul_l.isra.0+0xcc>
 800e05c:	2322      	movs	r3, #34	; 0x22
 800e05e:	f04f 30ff 	mov.w	r0, #4294967295
 800e062:	f8c8 3000 	str.w	r3, [r8]
 800e066:	f1ba 0f00 	cmp.w	sl, #0
 800e06a:	d107      	bne.n	800e07c <_strtoul_l.isra.0+0xd8>
 800e06c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e070:	b101      	cbz	r1, 800e074 <_strtoul_l.isra.0+0xd0>
 800e072:	4240      	negs	r0, r0
 800e074:	f1ba 0f00 	cmp.w	sl, #0
 800e078:	d0f8      	beq.n	800e06c <_strtoul_l.isra.0+0xc8>
 800e07a:	b10b      	cbz	r3, 800e080 <_strtoul_l.isra.0+0xdc>
 800e07c:	f105 39ff 	add.w	r9, r5, #4294967295
 800e080:	f8ca 9000 	str.w	r9, [sl]
 800e084:	e7f2      	b.n	800e06c <_strtoul_l.isra.0+0xc8>
 800e086:	2430      	movs	r4, #48	; 0x30
 800e088:	2e00      	cmp	r6, #0
 800e08a:	d1b0      	bne.n	800dfee <_strtoul_l.isra.0+0x4a>
 800e08c:	2608      	movs	r6, #8
 800e08e:	e7ae      	b.n	800dfee <_strtoul_l.isra.0+0x4a>
 800e090:	2c30      	cmp	r4, #48	; 0x30
 800e092:	d0a4      	beq.n	800dfde <_strtoul_l.isra.0+0x3a>
 800e094:	260a      	movs	r6, #10
 800e096:	e7aa      	b.n	800dfee <_strtoul_l.isra.0+0x4a>

0800e098 <_strtoul_r>:
 800e098:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e09a:	4c06      	ldr	r4, [pc, #24]	; (800e0b4 <_strtoul_r+0x1c>)
 800e09c:	4d06      	ldr	r5, [pc, #24]	; (800e0b8 <_strtoul_r+0x20>)
 800e09e:	6824      	ldr	r4, [r4, #0]
 800e0a0:	6a24      	ldr	r4, [r4, #32]
 800e0a2:	2c00      	cmp	r4, #0
 800e0a4:	bf08      	it	eq
 800e0a6:	462c      	moveq	r4, r5
 800e0a8:	9400      	str	r4, [sp, #0]
 800e0aa:	f7ff ff7b 	bl	800dfa4 <_strtoul_l.isra.0>
 800e0ae:	b003      	add	sp, #12
 800e0b0:	bd30      	pop	{r4, r5, pc}
 800e0b2:	bf00      	nop
 800e0b4:	20000034 	.word	0x20000034
 800e0b8:	20000098 	.word	0x20000098

0800e0bc <__submore>:
 800e0bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e0c0:	460c      	mov	r4, r1
 800e0c2:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800e0c4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e0c8:	4299      	cmp	r1, r3
 800e0ca:	d11b      	bne.n	800e104 <__submore+0x48>
 800e0cc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800e0d0:	f7fe ffd2 	bl	800d078 <_malloc_r>
 800e0d4:	b918      	cbnz	r0, 800e0de <__submore+0x22>
 800e0d6:	f04f 30ff 	mov.w	r0, #4294967295
 800e0da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e0de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e0e2:	63a3      	str	r3, [r4, #56]	; 0x38
 800e0e4:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800e0e8:	6360      	str	r0, [r4, #52]	; 0x34
 800e0ea:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800e0ee:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800e0f2:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800e0f6:	7043      	strb	r3, [r0, #1]
 800e0f8:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800e0fc:	7003      	strb	r3, [r0, #0]
 800e0fe:	6020      	str	r0, [r4, #0]
 800e100:	2000      	movs	r0, #0
 800e102:	e7ea      	b.n	800e0da <__submore+0x1e>
 800e104:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800e106:	0077      	lsls	r7, r6, #1
 800e108:	463a      	mov	r2, r7
 800e10a:	f7ff f88a 	bl	800d222 <_realloc_r>
 800e10e:	4605      	mov	r5, r0
 800e110:	2800      	cmp	r0, #0
 800e112:	d0e0      	beq.n	800e0d6 <__submore+0x1a>
 800e114:	eb00 0806 	add.w	r8, r0, r6
 800e118:	4601      	mov	r1, r0
 800e11a:	4632      	mov	r2, r6
 800e11c:	4640      	mov	r0, r8
 800e11e:	f7fe ff4b 	bl	800cfb8 <memcpy>
 800e122:	f8c4 8000 	str.w	r8, [r4]
 800e126:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800e12a:	e7e9      	b.n	800e100 <__submore+0x44>

0800e12c <memchr>:
 800e12c:	b510      	push	{r4, lr}
 800e12e:	b2c9      	uxtb	r1, r1
 800e130:	4402      	add	r2, r0
 800e132:	4290      	cmp	r0, r2
 800e134:	4603      	mov	r3, r0
 800e136:	d101      	bne.n	800e13c <memchr+0x10>
 800e138:	2300      	movs	r3, #0
 800e13a:	e003      	b.n	800e144 <memchr+0x18>
 800e13c:	781c      	ldrb	r4, [r3, #0]
 800e13e:	3001      	adds	r0, #1
 800e140:	428c      	cmp	r4, r1
 800e142:	d1f6      	bne.n	800e132 <memchr+0x6>
 800e144:	4618      	mov	r0, r3
 800e146:	bd10      	pop	{r4, pc}

0800e148 <memmove>:
 800e148:	4288      	cmp	r0, r1
 800e14a:	b510      	push	{r4, lr}
 800e14c:	eb01 0302 	add.w	r3, r1, r2
 800e150:	d807      	bhi.n	800e162 <memmove+0x1a>
 800e152:	1e42      	subs	r2, r0, #1
 800e154:	4299      	cmp	r1, r3
 800e156:	d00a      	beq.n	800e16e <memmove+0x26>
 800e158:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e15c:	f802 4f01 	strb.w	r4, [r2, #1]!
 800e160:	e7f8      	b.n	800e154 <memmove+0xc>
 800e162:	4283      	cmp	r3, r0
 800e164:	d9f5      	bls.n	800e152 <memmove+0xa>
 800e166:	1881      	adds	r1, r0, r2
 800e168:	1ad2      	subs	r2, r2, r3
 800e16a:	42d3      	cmn	r3, r2
 800e16c:	d100      	bne.n	800e170 <memmove+0x28>
 800e16e:	bd10      	pop	{r4, pc}
 800e170:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e174:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800e178:	e7f7      	b.n	800e16a <memmove+0x22>

0800e17a <_malloc_usable_size_r>:
 800e17a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e17e:	1f18      	subs	r0, r3, #4
 800e180:	2b00      	cmp	r3, #0
 800e182:	bfbc      	itt	lt
 800e184:	580b      	ldrlt	r3, [r1, r0]
 800e186:	18c0      	addlt	r0, r0, r3
 800e188:	4770      	bx	lr
	...

0800e18c <_init>:
 800e18c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e18e:	bf00      	nop
 800e190:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e192:	bc08      	pop	{r3}
 800e194:	469e      	mov	lr, r3
 800e196:	4770      	bx	lr

0800e198 <_fini>:
 800e198:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e19a:	bf00      	nop
 800e19c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e19e:	bc08      	pop	{r3}
 800e1a0:	469e      	mov	lr, r3
 800e1a2:	4770      	bx	lr
